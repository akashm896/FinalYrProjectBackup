EqSQLDriverTest.java: main(): Got the bench-dir option value: target/classes
EqSQLDriverTest.java: main(): Got the controllersig option value: com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)
github/Utils.java: getAbsBenchDir(): pwd: /home/ashish/Mtech Project/Dbridge_geetam
starttime, test: 1653383960814
EqSQLDriver.java: doSetEntryPoints: inputPath is target/classes
Warning: java.lang.Object is a phantom class!
Warning: org.springframework.web.bind.annotation.RequestMapping is a phantom class!
Warning: org.springframework.beans.factory.annotation.Autowired is a phantom class!
Warning: org.springframework.stereotype.Controller is a phantom class!
Warning: java.lang.Integer is a phantom class!
Warning: org.springframework.ui.Model is a phantom class!
Warning: java.lang.Long is a phantom class!
Warning: org.springframework.web.bind.annotation.GetMapping is a phantom class!
Warning: java.lang.Boolean is a phantom class!
Warning: java.lang.String is a phantom class!
Warning: org.springframework.web.bind.annotation.PostMapping is a phantom class!
Warning: java.util.List is a phantom class!
Warning: java.security.Principal is a phantom class!
Warning: java.lang.StringBuilder is a phantom class!
Warning: javax.persistence.Entity is a phantom class!
Warning: javax.persistence.OneToMany is a phantom class!
Warning: javax.persistence.Column is a phantom class!
Warning: javax.persistence.GeneratedValue is a phantom class!
Warning: javax.persistence.Transient is a phantom class!
Warning: com.fasterxml.jackson.annotation.JsonIgnore is a phantom class!
Warning: org.springframework.web.multipart.MultipartFile is a phantom class!
Warning: javax.persistence.Id is a phantom class!
Warning: javax.persistence.OneToOne is a phantom class!
Warning: java.math.BigDecimal is a phantom class!
Warning: org.springframework.security.core.userdetails.UserDetails is a phantom class!
Warning: java.util.Collection is a phantom class!
Warning: java.util.Set is a phantom class!
Warning: java.util.HashSet is a phantom class!
Warning: java.util.function.Consumer is a phantom class!
Warning: org.springframework.stereotype.Service is a phantom class!
Warning: javax.persistence.ManyToOne is a phantom class!
Warning: javax.persistence.JoinColumn is a phantom class!
Warning: org.springframework.security.core.GrantedAuthority is a phantom class!
Warning: javax.persistence.Table is a phantom class!
Warning: java.util.Date is a phantom class!
Warning: java.util.Calendar is a phantom class!
Warning: java.lang.Throwable is a phantom class!
Warning: java.lang.Void is a phantom class!
Warning: java.lang.Float is a phantom class!
Warning: java.lang.Double is a phantom class!
Warning: java.lang.AssertionError is a phantom class!
Warning: java.lang.NullPointerException is a phantom class!
Warning: java.lang.Character is a phantom class!
Warning: java.lang.Short is a phantom class!
Warning: java.lang.StringBuffer is a phantom class!
Warning: java.lang.Class is a phantom class!
Warning: java.lang.Byte is a phantom class!
Warning: java.lang.NoClassDefFoundError is a phantom class!
Warning: java.lang.IndexOutOfBoundsException is a phantom class!
Warning: java.lang.StackOverflowError is a phantom class!
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
Warning: java.lang.Error is a phantom class!
Warning: java.lang.AbstractMethodError is a phantom class!
Warning: java.lang.ClassCastException is a phantom class!
Warning: java.lang.Runnable is a phantom class!
Warning: java.lang.VerifyError is a phantom class!
Warning: java.lang.NoSuchFieldError is a phantom class!
Warning: java.lang.IllegalMonitorStateException is a phantom class!
Warning: java.lang.Thread is a phantom class!
Warning: java.lang.UnknownError is a phantom class!
Warning: java.lang.InternalError is a phantom class!
Warning: java.lang.ArithmeticException is a phantom class!
Warning: java.lang.NegativeArraySizeException is a phantom class!
Warning: java.lang.ClassCircularityError is a phantom class!
Warning: java.lang.Cloneable is a phantom class!
Warning: java.lang.ref.Finalizer is a phantom class!
Warning: java.lang.LinkageError is a phantom class!
Warning: java.lang.IncompatibleClassChangeError is a phantom class!
Warning: java.lang.NoSuchMethodError is a phantom class!
Warning: java.lang.RuntimeException is a phantom class!
Warning: java.lang.ArrayIndexOutOfBoundsException is a phantom class!
Warning: java.lang.ThreadDeath is a phantom class!
Warning: java.io.Serializable is a phantom class!
Warning: java.lang.InstantiationError is a phantom class!
Warning: java.lang.IllegalAccessError is a phantom class!
Warning: java.lang.ClassNotFoundException is a phantom class!
Warning: java.lang.ClassFormatError is a phantom class!
Warning: java.lang.UnsatisfiedLinkError is a phantom class!
Warning: java.lang.ArrayStoreException is a phantom class!
Warning: java.lang.ExceptionInInitializerError is a phantom class!
Warning: java.lang.OutOfMemoryError is a phantom class!
patternMatch.java: getUserInputRules: i=0
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? <cond> (save <repo> <list1>) (save <repo> <list2>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (- <init_val> <coll>) (union (pi (select <coll> <cond>) <list1>) (pi (select <coll> (= <cond> 0)) <list2>)))
Fold
| FuncExpr
| | Ternary
| | | Any
| | | Save
| | | | Any
| | | | Any
| | | Save
| | | | Any
| | | | Any
| Any
| Any
| Any


Union
| RelMinus
| | Id:10
| | Id:11
| Union
| | Project
| | | Select
| | | | Id:11
| | | | Id:3
| | | Id:6
| | Project
| | | Select
| | | | Id:11
| | | | Eq
| | | | | Id:3
| | | | | Zero
| | | Id:9

{<repo>=8, <list2>=9, <cond>=3, <list1>=6, <init_val>=10, <itr>=12, <coll>=11}
patternMatch.java: getUserInputRules: i=2
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? <cond> (add_all_fields <list>) <elseval>)) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (pi (select <coll> <cond>) <list>) <init_val>)
Fold
| FuncExpr
| | Ternary
| | | Any
| | | AddWithFieldExprs
| | | | Any
| | | Any
| Any
| Any
| Any


Union
| Project
| | Select
| | | Id:21
| | | Id:16
| | Id:18
| Id:20

{<list>=18, <elseval>=19, <repo>=8, <list2>=9, <cond>=16, <list1>=6, <init_val>=20, <itr>=22, <coll>=21}
patternMatch.java: getUserInputRules: i=4
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (save <repo> (tuple (join next <join_right>) <list>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (- <repo> (select <repo> (in id (pi (join <coll> <join_right>) id)))) (pi <list> (join <coll> <join_right>)))
Fold
| FuncExpr
| | Save
| | | Any
| | | Tuple
| | | | Join
| | | | | Iterator
| | | | | Any
| | | | Any
| Any
| Any
| Any


Union
| RelMinus
| | Id:26
| | Select
| | | Id:26
| | | In
| | | | Id
| | | | Project
| | | | | Join
| | | | | | Id:33
| | | | | | Id:30
| | | | | Id
| Project
| | Id:31
| | Join
| | | Id:33
| | | Id:30

{<list>=31, <elseval>=19, <repo>=26, <list2>=9, <cond>=16, <list1>=6, <init_val>=32, <join_right>=30, <itr>=34, <coll>=33}
patternMatch.java: getUserInputRules: i=6
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (add_all_fields <receiver> (tuple (select <rel> (= <clm> <itr>)) <list>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (pi <list> (select <rel> (in <clm> <coll>))) <init_val>)
Fold
| FuncExpr
| | AddWithFieldExprs
| | | Any
| | | Tuple
| | | | Select
| | | | | Any
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | Any
| Any
| Any
| Any


Union
| Project
| | Id:45
| | Select
| | | Id:41
| | | In
| | | | Id:43
| | | | Id:47
| Id:46

{<list>=45, <rel>=41, <repo>=26, <cond>=16, <clm>=43, <init_val>=46, <join_right>=30, <itr>=48, <receiver>=38, <elseval>=19, <list2>=9, <list1>=6, <coll>=47}
patternMatch.java: getUserInputRules: i=8
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (+ <aggvar> (pi (select <rel> (= <clm> <itr>)) <clmagg>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (+ (agg_sum (select <rel> (in <clm> <coll>)) <clmagg>) <init_val>)
Fold
| FuncExpr
| | ArithAdd
| | | Any
| | | Project
| | | | Select
| | | | | Any
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | Any
| Any
| Any
| Any


ArithAdd
| AggSum
| | Select
| | | Id:55
| | | In
| | | | Id:57
| | | | Id:61
| | Id:59
| Id:60

{<list>=45, <rel>=55, <repo>=26, <cond>=16, <clm>=57, <init_val>=60, <join_right>=30, <itr>=62, <clmagg>=59, <receiver>=38, <aggvar>=52, <elseval>=19, <list2>=9, <list1>=6, <coll>=61}
ServiceAllocTransform.java: internalTransform(): methodsig: <com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: shoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String shoppingCart(org.springframework.ui.Model, java.security.Principal)
    {
        com.bookstore.controller.ShoppingCartController this;
        org.springframework.ui.Model model;
        java.security.Principal principal;
        com.bookstore.domain.User user;
        com.bookstore.domain.ShoppingCart shoppingCart;
        java.util.List cartItemList;
        com.bookstore.service.impl.UserService $r0;
        java.lang.String $r1;
        com.bookstore.service.impl.CartItemService $r2;
        com.bookstore.service.impl.ShoppingCartService $r3;

        this := @this: com.bookstore.controller.ShoppingCartController;

        model := @parameter0: org.springframework.ui.Model;

        principal := @parameter1: java.security.Principal;

        $r0 = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserService userService>;

        $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        user = interfaceinvoke $r0.<com.bookstore.service.impl.UserService: com.bookstore.domain.User findByUsername(java.lang.String)>($r1);

        shoppingCart = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>();

        $r2 = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemService cartItemService>;

        cartItemList = interfaceinvoke $r2.<com.bookstore.service.impl.CartItemService: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        $r3 = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartService shoppingCartService>;

        interfaceinvoke $r3.<com.bookstore.service.impl.ShoppingCartService: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart);

        return "shoppingCart";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.bookstore.controller.ShoppingCartController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.HomeController
Warning: java.util.Arrays is a phantom class!
Warning: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder is a phantom class!
Warning: java.util.Locale is a phantom class!
Warning: org.springframework.security.core.context.SecurityContextHolder is a phantom class!
Warning: java.lang.CharSequence is a phantom class!
Warning: org.springframework.mail.javamail.JavaMailSender is a phantom class!
Warning: java.util.UUID is a phantom class!
Warning: java.lang.Exception is a phantom class!
Warning: org.springframework.security.core.context.SecurityContext is a phantom class!
Warning: org.springframework.security.authentication.UsernamePasswordAuthenticationToken is a phantom class!
Warning: org.springframework.security.core.Authentication is a phantom class!
Warning: org.springframework.mail.SimpleMailMessage is a phantom class!
Warning: javax.servlet.http.HttpServletRequest is a phantom class!
Warning: java.util.Collections is a phantom class!
Warning: org.springframework.stereotype.Component is a phantom class!
Warning: org.springframework.core.env.Environment is a phantom class!
Warning: java.security.SecureRandom is a phantom class!
Warning: java.util.Random is a phantom class!
Warning: org.springframework.context.annotation.Bean is a phantom class!
Warning: org.springframework.security.core.userdetails.UserDetailsService is a phantom class!
Warning: org.springframework.security.core.userdetails.UsernameNotFoundException is a phantom class!
Warning: java.util.Map is a phantom class!
Warning: com.bookstore.utility.USConstants$1 is a phantom class!
Warning: java.util.ArrayList is a phantom class!
Warning: org.springframework.data.repository.CrudRepository is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.config.SecurityConfig
Warning: org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.RememberMeConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.web.builders.HttpSecurity is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.CsrfConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.LogoutConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.authentication.configurers.userdetails.DaoAuthenticationConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity is a phantom class!
Warning: org.springframework.security.web.util.matcher.RequestMatcher is a phantom class!
Warning: org.springframework.context.annotation.Configuration is a phantom class!
Warning: org.springframework.security.config.annotation.SecurityBuilder is a phantom class!
Warning: org.springframework.security.crypto.password.PasswordEncoder is a phantom class!
Warning: org.springframework.security.config.annotation.web.configuration.EnableWebSecurity is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.CorsConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.web.HttpSecurityBuilder is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.AbstractAuthenticationFilterConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$AuthorizedUrl is a phantom class!
Warning: org.springframework.security.web.util.matcher.AntPathRequestMatcher is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookToCartItemRepository
Warning: org.springframework.transaction.annotation.Transactional is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.ShoppingCartRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserShippingRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.CartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.PasswordResetTokenRepository
Warning: org.springframework.data.jpa.repository.JpaRepository is a phantom class!
Warning: org.springframework.data.jpa.repository.Modifying is a phantom class!
Warning: org.springframework.data.jpa.repository.Query is a phantom class!
Warning: java.util.stream.Stream is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserPaymentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Order
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BillingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserShipping
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.PasswordResetToken
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Authority
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.GrantedAuthority
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.UserRole
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.User
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetails
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserBilling
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Payment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BookToCartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserPayment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShippingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.MailConstructor
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.USConstants
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.SecurityUtility
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.BookstoreApplication
Warning: org.springframework.boot.CommandLineRunner is a phantom class!
Warning: org.springframework.boot.autoconfigure.SpringBootApplication is a phantom class!
Warning: org.springframework.boot.SpringApplication is a phantom class!
Warning: org.springframework.context.ConfigurableApplicationContext is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.CommandLineRunner
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookServiceImpl
Warning: java.util.Optional is a phantom class!
Warning: java.lang.Iterable is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartServiceImpl
Warning: java.util.Iterator is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserSecurityService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetailsService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserServiceImpl
Warning: org.slf4j.LoggerFactory is a phantom class!
Warning: org.slf4j.Logger is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): $r0 = new com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.bookstore.controller.ShoppingCartController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.config.SecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookToCartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.ShoppingCartRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserShippingRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.CartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.PasswordResetTokenRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserPaymentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Order
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BillingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserShipping
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.PasswordResetToken
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Authority
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.GrantedAuthority
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.UserRole
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.User
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetails
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserBilling
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Payment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BookToCartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserPayment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShippingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.MailConstructor
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.USConstants
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.SecurityUtility
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.BookstoreApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.CommandLineRunner
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): $r2 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserSecurityService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetailsService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.bookstore.controller.ShoppingCartController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.config.SecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookToCartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.ShoppingCartRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserShippingRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.CartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.PasswordResetTokenRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserPaymentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Order
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BillingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserShipping
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.PasswordResetToken
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Authority
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.GrantedAuthority
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.UserRole
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.User
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetails
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserBilling
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Payment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BookToCartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserPayment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShippingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.MailConstructor
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.USConstants
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.SecurityUtility
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.BookstoreApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.CommandLineRunner
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): $r3 = new com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserSecurityService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetailsService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): service list = [$r0=com.bookstore.service.impl.UserServiceImpl, $r2=com.bookstore.service.impl.CartItemServiceImpl, $r3=com.bookstore.service.impl.ShoppingCartServiceImpl]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = model := @parameter0: org.springframework.ui.Model
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = principal := @parameter1: java.security.Principal
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = principal
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = user = interfaceinvoke $r0.<com.bookstore.service.impl.UserService: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserService userService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartService shoppingCartService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookService bookService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemService cartItemService>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = shoppingCart = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r2 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = cartItemList = interfaceinvoke $r2.<com.bookstore.service.impl.CartItemService: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r3 = new com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r3.<com.bookstore.service.impl.ShoppingCartService: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r3.<com.bookstore.service.impl.ShoppingCartService: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r3
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "shoppingCart"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String shoppingCart(org.springframework.ui.Model, java.security.Principal)
    {
        com.bookstore.controller.ShoppingCartController this;
        org.springframework.ui.Model model;
        java.security.Principal principal;
        com.bookstore.domain.User user;
        com.bookstore.domain.ShoppingCart shoppingCart;
        java.util.List cartItemList;
        com.bookstore.service.impl.UserService $r0;
        java.lang.String $r1;
        com.bookstore.service.impl.CartItemService $r2;
        com.bookstore.service.impl.ShoppingCartService $r3;

        this := @this: com.bookstore.controller.ShoppingCartController;

        model := @parameter0: org.springframework.ui.Model;

        principal := @parameter1: java.security.Principal;

        $r0 = new com.bookstore.service.impl.UserServiceImpl;

        $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0;

        shoppingCart = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>();

        $r2 = new com.bookstore.service.impl.CartItemServiceImpl;

        cartItemList = interfaceinvoke $r2.<com.bookstore.service.impl.CartItemService: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        $r3 = new com.bookstore.service.impl.ShoppingCartServiceImpl;

        interfaceinvoke $r3.<com.bookstore.service.impl.ShoppingCartService: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart);

        return "shoppingCart";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = model := @parameter0: org.springframework.ui.Model
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = principal := @parameter1: java.security.Principal
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = principal
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): Break
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = shoppingCart = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r2 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = cartItemList = interfaceinvoke $r2.<com.bookstore.service.impl.CartItemService: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): Break
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartService shoppingCartService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookService bookService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemService cartItemService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r3 = new com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r3.<com.bookstore.service.impl.ShoppingCartService: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r3.<com.bookstore.service.impl.ShoppingCartService: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r3
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): Break
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): Break
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): Break
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "shoppingCart"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String shoppingCart(org.springframework.ui.Model, java.security.Principal)
    {
        com.bookstore.controller.ShoppingCartController this;
        org.springframework.ui.Model model;
        java.security.Principal principal;
        com.bookstore.domain.User user;
        com.bookstore.domain.ShoppingCart shoppingCart;
        java.util.List cartItemList;
        com.bookstore.service.impl.UserService $r0;
        java.lang.String $r1;
        com.bookstore.service.impl.CartItemService $r2;
        com.bookstore.service.impl.ShoppingCartService $r3;

        this := @this: com.bookstore.controller.ShoppingCartController;

        model := @parameter0: org.springframework.ui.Model;

        principal := @parameter1: java.security.Principal;

        $r0 = new com.bookstore.service.impl.UserServiceImpl;

        $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0;

        shoppingCart = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>();

        $r2 = new com.bookstore.service.impl.CartItemServiceImpl;

        cartItemList = virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r2;

        $r3 = new com.bookstore.service.impl.ShoppingCartServiceImpl;

        interfaceinvoke $r3.<com.bookstore.service.impl.ShoppingCartService: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart);

        return "shoppingCart";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r3
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = model := @parameter0: org.springframework.ui.Model
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = principal := @parameter1: java.security.Principal
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = principal
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r3
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = shoppingCart = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r2 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = cartItemList = virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r3 = new com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r3.<com.bookstore.service.impl.ShoppingCartService: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r3.<com.bookstore.service.impl.ShoppingCartService: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r3
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r3
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartService shoppingCartService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookService bookService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r3
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r3
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r3
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "shoppingCart"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String shoppingCart(org.springframework.ui.Model, java.security.Principal)
    {
        com.bookstore.controller.ShoppingCartController this;
        org.springframework.ui.Model model;
        java.security.Principal principal;
        com.bookstore.domain.User user;
        com.bookstore.domain.ShoppingCart shoppingCart;
        java.util.List cartItemList;
        com.bookstore.service.impl.UserService $r0;
        java.lang.String $r1;
        com.bookstore.service.impl.CartItemService $r2;
        com.bookstore.service.impl.ShoppingCartService $r3;

        this := @this: com.bookstore.controller.ShoppingCartController;

        model := @parameter0: org.springframework.ui.Model;

        principal := @parameter1: java.security.Principal;

        $r0 = new com.bookstore.service.impl.UserServiceImpl;

        $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0;

        shoppingCart = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>();

        $r2 = new com.bookstore.service.impl.CartItemServiceImpl;

        cartItemList = virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r2;

        $r3 = new com.bookstore.service.impl.ShoppingCartServiceImpl;

        virtualinvoke $r3.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl> = $r3;

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart);

        return "shoppingCart";
    }

FuncStackInfoBuilder internalTransform called!
FuncStackInfoBuilder.java: internalTransformHelper(): FuncStackInfoBuilder.java: body: 
    public java.lang.String shoppingCart(org.springframework.ui.Model, java.security.Principal)
    {
        com.bookstore.controller.ShoppingCartController this;
        org.springframework.ui.Model model;
        java.security.Principal principal;
        com.bookstore.domain.User user;
        com.bookstore.domain.ShoppingCart shoppingCart;
        java.util.List cartItemList;
        com.bookstore.service.impl.UserService $r0;
        java.lang.String $r1;
        com.bookstore.service.impl.CartItemService $r2;
        com.bookstore.service.impl.ShoppingCartService $r3;

        this := @this: com.bookstore.controller.ShoppingCartController;

        model := @parameter0: org.springframework.ui.Model;

        principal := @parameter1: java.security.Principal;

        $r0 = new com.bookstore.service.impl.UserServiceImpl;

        $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0;

        shoppingCart = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>();

        $r2 = new com.bookstore.service.impl.CartItemServiceImpl;

        cartItemList = virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r2;

        $r3 = new com.bookstore.service.impl.ShoppingCartServiceImpl;

        virtualinvoke $r3.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl> = $r3;

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart);

        return "shoppingCart";
    }

FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: model
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: model
FuncStackInfoBuilder.java: regionTreeForBody(): local: principal
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: principal
FuncStackInfoBuilder.java: regionTreeForBody(): local: user
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: user
FuncStackInfoBuilder.java: regionTreeForBody(): local: shoppingCart
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: shoppingCart
FuncStackInfoBuilder.java: regionTreeForBody(): local: cartItemList
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: cartItemList
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r3
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r3
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: shoppingCart is Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.controller.ShoppingCartController;
model := @parameter0: org.springframework.ui.Model;
principal := @parameter1: java.security.Principal;
$r0 = new com.bookstore.service.impl.UserServiceImpl;
$r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();
user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1);
this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0;
shoppingCart = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>();
$r2 = new com.bookstore.service.impl.CartItemServiceImpl;
cartItemList = virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);
this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r2;
$r3 = new com.bookstore.service.impl.ShoppingCartServiceImpl;
virtualinvoke $r3.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);
this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl> = $r3;
interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList);
interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart);
return "shoppingCart";


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.controller.ShoppingCartController;
model := @parameter0: org.springframework.ui.Model;
principal := @parameter1: java.security.Principal;
$r0 = new com.bookstore.service.impl.UserServiceImpl;
$r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();
user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1);
this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0;
shoppingCart = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>();
$r2 = new com.bookstore.service.impl.CartItemServiceImpl;
cartItemList = virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);
this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r2;
$r3 = new com.bookstore.service.impl.ShoppingCartServiceImpl;
virtualinvoke $r3.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);
this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl> = $r3;
interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList);
interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart);
return "shoppingCart";


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.bookstore.controller.ShoppingCartController, model := @parameter0: org.springframework.ui.Model, principal := @parameter1: java.security.Principal, $r0 = new com.bookstore.service.impl.UserServiceImpl, $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>(), user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1), this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0, shoppingCart = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>(), $r2 = new com.bookstore.service.impl.CartItemServiceImpl, cartItemList = virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart), this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r2, $r3 = new com.bookstore.service.impl.ShoppingCartServiceImpl, virtualinvoke $r3.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart), this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl> = $r3, interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList), interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart), return "shoppingCart"]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): topr is not null
FuncStackInfoBuilder.java: internalTransformHelper(): topr = 
| BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): CGSTART: 
CLINIT edge: $r0 = new com.bookstore.service.impl.UserServiceImpl in <com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)> ==> <com.bookstore.service.impl.UserServiceImpl: void <clinit>()>
CLINIT edge: <com.bookstore.service.impl.UserServiceImpl: org.slf4j.Logger LOG> = $r0 in <com.bookstore.service.impl.UserServiceImpl: void <clinit>()> ==> <com.bookstore.service.impl.UserServiceImpl: void <clinit>()>
STATIC edge: $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "com/bookstore/service/impl/UserService") in <com.bookstore.service.impl.UserServiceImpl: void <clinit>()> ==> <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>
VIRTUAL edge: user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1) in <com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)> ==> <com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>
VIRTUAL edge: shoppingCart = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>() in <com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)> ==> <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>
VIRTUAL edge: cartItemList = virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart) in <com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)> ==> <com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>
VIRTUAL edge: virtualinvoke $r3.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart) in <com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)> ==> <com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>
SPECIAL edge: specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0) in <com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)> ==> <java.math.BigDecimal: void <init>(int)>
INTERFACE edge: cartItems = interfaceinvoke $r1.<com.bookstore.service.impl.CartItemService: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart) in <com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)> ==> <com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>
VIRTUAL edge: $r5 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>() in <com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)> ==> <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
VIRTUAL edge: $r8 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>() in <com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)> ==> <com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>
VIRTUAL edge: $i0 = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>() in <com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)> ==> <com.bookstore.domain.Book: int getInStockNumber()>
INTERFACE edge: interfaceinvoke $r6.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem) in <com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)> ==> <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>
VIRTUAL edge: virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal) in <com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)> ==> <com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>
VIRTUAL edge: $r1 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>() in <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)> ==> <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
VIRTUAL edge: $i0 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: int getQty()>() in <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)> ==> <com.bookstore.domain.CartItem: int getQty()>
VIRTUAL edge: virtualinvoke cartItem.<com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)>(bigDecimal) in <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)> ==> <com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)>
VIRTUAL edge: $d0 = virtualinvoke $r1.<com.bookstore.domain.Book: double getOurPrice()>() in <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)> ==> <com.bookstore.domain.Book: double getOurPrice()>
SPECIAL edge: specialinvoke $r0.<java.math.BigDecimal: void <init>(double)>($d0) in <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)> ==> <java.math.BigDecimal: void <init>(double)>
SPECIAL edge: specialinvoke $r2.<java.math.BigDecimal: void <init>(int)>($i0) in <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)> ==> <java.math.BigDecimal: void <init>(int)>
CGEND

FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.bookstore.service.impl.UserServiceImpl: void <clinit>()
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: <clinit>
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "com/bookstore/service/impl/UserService");

        <com.bookstore.service.impl.UserServiceImpl: org.slf4j.Logger LOG> = $r0;

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: <clinit> is Block 0:
[preds: ] [succs: ]
$r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "com/bookstore/service/impl/UserService");
<com.bookstore.service.impl.UserServiceImpl: org.slf4j.Logger LOG> = $r0;
return;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
$r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "com/bookstore/service/impl/UserService");
<com.bookstore.service.impl.UserServiceImpl: org.slf4j.Logger LOG> = $r0;
return;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [$r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "com/bookstore/service/impl/UserService"), <com.bookstore.service.impl.UserServiceImpl: org.slf4j.Logger LOG> = $r0, return]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: updateShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)
    {
        com.bookstore.service.impl.ShoppingCartServiceImpl this;
        com.bookstore.domain.ShoppingCart shoppingCart;
        java.util.List cartItems;
        java.util.Iterator l4;
        com.bookstore.domain.CartItem cartItem;
        java.math.BigDecimal $r0, $r8, cartTotal;
        com.bookstore.service.impl.CartItemService $r1, $r6;
        boolean $z0;
        com.bookstore.repository.ShoppingCartRepository $r2;
        java.lang.Object $r4;
        com.bookstore.domain.Book $r5;
        int $i0;

        this := @this: com.bookstore.service.impl.ShoppingCartServiceImpl;

        shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart;

        $r0 = new java.math.BigDecimal;

        specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0);

        cartTotal = $r0;

        $r1 = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemService cartItemService>;

        cartItems = interfaceinvoke $r1.<com.bookstore.service.impl.CartItemService: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        l4 = interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        cartItem = (com.bookstore.domain.CartItem) $r4;

        $r5 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>();

        $i0 = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>();

        if $i0 <= 0 goto label2;

        $r6 = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemService cartItemService>;

        interfaceinvoke $r6.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem);

        $r8 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>();

        cartTotal = virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8);

     label2:
        goto label1;

     label3:
        virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal);

        $r2 = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.repository.ShoppingCartRepository shoppingCartRepository>;

        interfaceinvoke $r2.<com.bookstore.repository.ShoppingCartRepository: java.lang.Object save(java.lang.Object)>(shoppingCart);

        return shoppingCart;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.bookstore.controller.ShoppingCartController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.config.SecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookToCartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.ShoppingCartRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserShippingRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.CartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.PasswordResetTokenRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserPaymentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Order
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BillingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserShipping
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.PasswordResetToken
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Authority
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.GrantedAuthority
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.UserRole
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.User
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetails
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserBilling
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Payment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BookToCartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserPayment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShippingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.MailConstructor
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.USConstants
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.SecurityUtility
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.BookstoreApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.CommandLineRunner
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): $r1 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserSecurityService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetailsService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.bookstore.controller.ShoppingCartController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.config.SecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookToCartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.ShoppingCartRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserShippingRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.CartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.PasswordResetTokenRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserPaymentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Order
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BillingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserShipping
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.PasswordResetToken
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Authority
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.GrantedAuthority
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.UserRole
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.User
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetails
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserBilling
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Payment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BookToCartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserPayment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShippingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.MailConstructor
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.USConstants
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.SecurityUtility
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.BookstoreApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.CommandLineRunner
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): $r6 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserSecurityService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetailsService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): service list = [$r1=com.bookstore.service.impl.CartItemServiceImpl, $r6=com.bookstore.service.impl.CartItemServiceImpl]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new java.math.BigDecimal
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = cartTotal = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = cartItems = interfaceinvoke $r1.<com.bookstore.service.impl.CartItemService: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.repository.ShoppingCartRepository shoppingCartRepository>, <com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemService cartItemService>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = l4 = interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = cartItems
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = l4
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = if $z0 == 0 goto virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIfStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r4 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = l4
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = cartItem = (com.bookstore.domain.CartItem) $r4
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r5 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $i0 = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = if $i0 <= 0 goto (branch)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIfStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r6 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r6.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r6.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r6
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r8 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = cartTotal = virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()]
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JGotoStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r2 = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.repository.ShoppingCartRepository shoppingCartRepository>
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r2.<com.bookstore.repository.ShoppingCartRepository: java.lang.Object save(java.lang.Object)>(shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r2.<com.bookstore.repository.ShoppingCartRepository: java.lang.Object save(java.lang.Object)>(shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return shoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)
    {
        com.bookstore.service.impl.ShoppingCartServiceImpl this;
        com.bookstore.domain.ShoppingCart shoppingCart;
        java.util.List cartItems;
        java.util.Iterator l4;
        com.bookstore.domain.CartItem cartItem;
        java.math.BigDecimal $r0, $r8, cartTotal;
        com.bookstore.service.impl.CartItemService $r1, $r6;
        boolean $z0;
        com.bookstore.repository.ShoppingCartRepository $r2;
        java.lang.Object $r4;
        com.bookstore.domain.Book $r5;
        int $i0;

        this := @this: com.bookstore.service.impl.ShoppingCartServiceImpl;

        shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart;

        $r0 = new java.math.BigDecimal;

        specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0);

        cartTotal = $r0;

        $r1 = new com.bookstore.service.impl.CartItemServiceImpl;

        cartItems = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1;

        l4 = interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        cartItem = (com.bookstore.domain.CartItem) $r4;

        $r5 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>();

        $i0 = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>();

        if $i0 <= 0 goto label2;

        $r6 = new com.bookstore.service.impl.CartItemServiceImpl;

        interfaceinvoke $r6.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem);

        $r8 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>();

        cartTotal = virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8);

     label2:
        goto label1;

     label3:
        virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal);

        $r2 = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.repository.ShoppingCartRepository shoppingCartRepository>;

        interfaceinvoke $r2.<com.bookstore.repository.ShoppingCartRepository: java.lang.Object save(java.lang.Object)>(shoppingCart);

        return shoppingCart;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r6
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new java.math.BigDecimal
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = cartTotal = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = cartItems = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = l4 = interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = cartItems
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r6
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = l4
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r6
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = if $z0 == 0 goto virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIfStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r4 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = l4
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r6
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = cartItem = (com.bookstore.domain.CartItem) $r4
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r5 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $i0 = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = if $i0 <= 0 goto (branch)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIfStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r6 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r6.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r6.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r6
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r6
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.repository.ShoppingCartRepository shoppingCartRepository>, <com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r6
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r8 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = cartTotal = virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()]
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JGotoStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r2 = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.repository.ShoppingCartRepository shoppingCartRepository>
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r2.<com.bookstore.repository.ShoppingCartRepository: java.lang.Object save(java.lang.Object)>(shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r2.<com.bookstore.repository.ShoppingCartRepository: java.lang.Object save(java.lang.Object)>(shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r6
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return shoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)
    {
        com.bookstore.service.impl.ShoppingCartServiceImpl this;
        com.bookstore.domain.ShoppingCart shoppingCart;
        java.util.List cartItems;
        java.util.Iterator l4;
        com.bookstore.domain.CartItem cartItem;
        java.math.BigDecimal $r0, $r8, cartTotal;
        com.bookstore.service.impl.CartItemService $r1, $r6;
        boolean $z0;
        com.bookstore.repository.ShoppingCartRepository $r2;
        java.lang.Object $r4;
        com.bookstore.domain.Book $r5;
        int $i0;

        this := @this: com.bookstore.service.impl.ShoppingCartServiceImpl;

        shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart;

        $r0 = new java.math.BigDecimal;

        specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0);

        cartTotal = $r0;

        $r1 = new com.bookstore.service.impl.CartItemServiceImpl;

        cartItems = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1;

        l4 = interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        cartItem = (com.bookstore.domain.CartItem) $r4;

        $r5 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>();

        $i0 = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>();

        if $i0 <= 0 goto label2;

        $r6 = new com.bookstore.service.impl.CartItemServiceImpl;

        virtualinvoke $r6.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem);

        this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r6;

        $r8 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>();

        cartTotal = virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8);

     label2:
        goto label1;

     label3:
        virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal);

        $r2 = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.repository.ShoppingCartRepository shoppingCartRepository>;

        interfaceinvoke $r2.<com.bookstore.repository.ShoppingCartRepository: java.lang.Object save(java.lang.Object)>(shoppingCart);

        return shoppingCart;
    }

FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: shoppingCart
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: shoppingCart
FuncStackInfoBuilder.java: regionTreeForBody(): local: cartItems
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: cartItems
FuncStackInfoBuilder.java: regionTreeForBody(): local: l4
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: l4
FuncStackInfoBuilder.java: regionTreeForBody(): local: cartItem
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: cartItem
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local: $z0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $z0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r4
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r4
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r5
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r5
FuncStackInfoBuilder.java: regionTreeForBody(): local: $i0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $i0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r6
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r6
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r8
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r8
FuncStackInfoBuilder.java: regionTreeForBody(): local: cartTotal
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: cartTotal
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: updateShoppingCart is Block 0:
[preds: ] [succs: 1 ]
this := @this: com.bookstore.service.impl.ShoppingCartServiceImpl;
shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart;
$r0 = new java.math.BigDecimal;
specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0);
cartTotal = $r0;
$r1 = new com.bookstore.service.impl.CartItemServiceImpl;
cartItems = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);
this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1;
l4 = interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>();

Block 1:
[preds: 0 4 ] [succs: 2 5 ]
$z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal);

Block 2:
[preds: 1 ] [succs: 3 4 ]
$r4 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();
cartItem = (com.bookstore.domain.CartItem) $r4;
$r5 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>();
$i0 = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>();
if $i0 <= 0 goto (branch);

Block 3:
[preds: 2 ] [succs: 4 ]
$r6 = new com.bookstore.service.impl.CartItemServiceImpl;
virtualinvoke $r6.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem);
this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r6;
$r8 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>();
cartTotal = virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8);

Block 4:
[preds: 2 3 ] [succs: 1 ]
goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()];

Block 5:
[preds: 1 ] [succs: ]
virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal);
$r2 = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.repository.ShoppingCartRepository shoppingCartRepository>;
interfaceinvoke $r2.<com.bookstore.repository.ShoppingCartRepository: java.lang.Object save(java.lang.Object)>(shoppingCart);
return shoppingCart;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
0 -> 1
1 -> 2
2 -> 3
3 -> 4
2 -> 4
1 -> 5
4 -> 1
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
dfsVisit: start = 1
dfsVisit: start = 2
dfsVisit: start = 3
dfsVisit: start = 4
dfsVisit: start = 5
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [4, 3, 2, 5, 1, 0]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 4
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = 4
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [4]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 4
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 4
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 4
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [4]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 4
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [4]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 3
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = 3
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [3]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 3
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 3
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 3
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [3]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 3
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [3]
StructuralAnalysis.java: structuralAnalysis(): break point!
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [2]

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_IfThen0
StructuralAnalysis.java: replace(): v: 2
StructuralAnalysis.java: replace(): v: 3
StructuralAnalyis.java: compact(): compact: vset = [2, 3]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, 2, 3, 4, 5, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 2
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [4, 3, 2, 5, 1, 0]
removeVertices: vset = [2, 3]
removeVertices: v = 2
removeVertex: adj = {1=[2, 5], 2=[3, 4], 3=[4], 4=[1], 5=[], 0=[1]}
removeVertex: incoming = {1=[0, 4], 2=[1], 3=[2], 4=[2, 3], 5=[1], 0=[]}
removeVertex: v = 2
removeVertex: v2 = 1
removeVertices: v = 3
removeVertex: adj = {1=[5], 3=[4], 4=[1], 5=[], 0=[1]}
removeVertex: incoming = {1=[0, 4], 3=[], 4=[3], 5=[1], 0=[]}
removeVertex: v = 3
StructuralAnalyis.java: compact(): compact: g.vertices after: [1, 4, 5, R_IfThen0, 0]
StructuralAnalyis.java: compact(): compact: postCtr after: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [4, R_IfThen0, 5, 1, 0]
StructuralAnalysis.java: reduce(): structType before: {}
StructuralAnalysis.java: reduce(): structType after: {R_IfThen0=IfThen}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_IfThen0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = R_IfThen0
StructuralAnalysis.java: acyclicRegionType(): currVer = 4
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [R_IfThen0, 4]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = Sequential

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_Sequential1
StructuralAnalysis.java: replace(): v: R_IfThen0
StructuralAnalysis.java: replace(): v: 4
StructuralAnalyis.java: compact(): compact: vset = [R_IfThen0, 4]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, 4, 5, R_IfThen0, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [4, R_IfThen0, 5, 1, 0]
removeVertices: vset = [R_IfThen0, 4]
removeVertices: v = R_IfThen0
removeVertex: adj = {1=[5, R_IfThen0], 4=[1], 5=[], R_IfThen0=[4], 0=[1]}
removeVertex: incoming = {1=[0, 4], 4=[R_IfThen0], 5=[1], R_IfThen0=[1], 0=[]}
removeVertex: v = R_IfThen0
removeVertex: v2 = 1
removeVertices: v = 4
removeVertex: adj = {1=[5], 4=[1], 5=[], 0=[1]}
removeVertex: incoming = {1=[0, 4], 4=[], 5=[1], 0=[]}
removeVertex: v = 4
StructuralAnalyis.java: compact(): compact: g.vertices after: [1, 5, R_Sequential1, 0]
StructuralAnalyis.java: compact(): compact: postCtr after: 0
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_Sequential1, 5, 1, 0]
StructuralAnalysis.java: reduce(): structType before: {R_IfThen0=IfThen}
StructuralAnalysis.java: reduce(): structType after: {R_Sequential1=Sequential, R_IfThen0=IfThen}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_Sequential1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = R_Sequential1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [R_Sequential1]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = R_Sequential1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = R_Sequential1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: R_Sequential1
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [R_Sequential1]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = R_Sequential1
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [R_Sequential1]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 5
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [5]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 5
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 5
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 5
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [5]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 5
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [5]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [1]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: [R_Sequential1]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 1
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [1, R_Sequential1]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 1
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [1, R_Sequential1]
dfsVisit: start = 1
dfsVisit: start = 5
dfsVisit: start = R_Sequential1
StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_WhileLoop2
StructuralAnalysis.java: replace(): v: 1
StructuralAnalysis.java: replace(): v: R_Sequential1
StructuralAnalyis.java: compact(): compact: vset = [1, R_Sequential1]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, 5, R_Sequential1, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 2
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [R_Sequential1, 5, 1, 0]
removeVertices: vset = [1, R_Sequential1]
removeVertices: v = 1
removeVertex: adj = {1=[5, R_Sequential1], 5=[], R_Sequential1=[1], 0=[1]}
removeVertex: incoming = {1=[0, R_Sequential1], 5=[1], R_Sequential1=[1], 0=[]}
removeVertex: v = 1
removeVertex: v2 = 0
removeVertex: v2 = R_Sequential1
removeVertices: v = R_Sequential1
removeVertex: adj = {5=[], R_Sequential1=[], 0=[]}
removeVertex: incoming = {5=[], R_Sequential1=[], 0=[]}
removeVertex: v = R_Sequential1
StructuralAnalyis.java: compact(): compact: g.vertices after: [5, R_WhileLoop2, 0]
StructuralAnalyis.java: compact(): compact: postCtr after: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [5, R_WhileLoop2, 0]
StructuralAnalysis.java: reduce(): structType before: {R_Sequential1=Sequential, R_IfThen0=IfThen}
StructuralAnalysis.java: reduce(): structType after: {R_Sequential1=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_WhileLoop2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = R_WhileLoop2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [0, R_WhileLoop2, 5]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = Sequential

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_Sequential3
StructuralAnalysis.java: replace(): v: 0
StructuralAnalysis.java: replace(): v: R_WhileLoop2
StructuralAnalysis.java: replace(): v: 5
StructuralAnalyis.java: compact(): compact: vset = [0, R_WhileLoop2, 5]
StructuralAnalyis.java: compact(): compact: g.vertices before: [5, R_WhileLoop2, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [5, R_WhileLoop2, 0]
removeVertices: vset = [0, R_WhileLoop2, 5]
removeVertices: v = 0
removeVertex: adj = {5=[], R_WhileLoop2=[5], 0=[R_WhileLoop2]}
removeVertex: incoming = {5=[R_WhileLoop2], R_WhileLoop2=[0], 0=[]}
removeVertex: v = 0
removeVertices: v = R_WhileLoop2
removeVertex: adj = {5=[], R_WhileLoop2=[5]}
removeVertex: incoming = {5=[R_WhileLoop2], R_WhileLoop2=[]}
removeVertex: v = R_WhileLoop2
removeVertices: v = 5
removeVertex: adj = {5=[]}
removeVertex: incoming = {5=[]}
removeVertex: v = 5
StructuralAnalyis.java: compact(): compact: g.vertices after: [R_Sequential3]
StructuralAnalyis.java: compact(): compact: postCtr after: 0
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_Sequential3]
StructuralAnalysis.java: reduce(): structType before: {R_Sequential1=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop}
StructuralAnalysis.java: reduce(): structType after: {R_Sequential1=Sequential, R_Sequential3=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop}
StructuralAnalysis.java: structuralAnalysis(): structType: {R_Sequential1=Sequential, R_Sequential3=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop}
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential1=[R_IfThen0, 4], R_Sequential3=[0, R_WhileLoop2, 5], R_IfThen0=[2, 3], R_WhileLoop2=[1, R_Sequential1]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_WhileLoop2, 2=R_IfThen0, 3=R_IfThen0, 4=R_Sequential1, 5=R_Sequential3, R_Sequential1=R_WhileLoop2, R_IfThen0=R_Sequential1, R_WhileLoop2=R_Sequential3, 0=R_Sequential3}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential3
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- R_Sequential3
|  +- 0
|  +- R_WhileLoop2
|  |  +- 1
|  |  +- R_Sequential1
|  |  |  +- R_IfThen0
|  |  |  |  +- 2
|  |  |  |  +- 3
|  |  |  +- 4
|  +- 5

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: 1 ]
this := @this: com.bookstore.service.impl.ShoppingCartServiceImpl;
shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart;
$r0 = new java.math.BigDecimal;
specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0);
cartTotal = $r0;
$r1 = new com.bookstore.service.impl.CartItemServiceImpl;
cartItems = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);
this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1;
l4 = interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>();

Block 1:
[preds: 0 4 ] [succs: 2 5 ]
$z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal);

Block 2:
[preds: 1 ] [succs: 3 4 ]
$r4 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();
cartItem = (com.bookstore.domain.CartItem) $r4;
$r5 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>();
$i0 = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>();
if $i0 <= 0 goto (branch);

Block 3:
[preds: 2 ] [succs: 4 ]
$r6 = new com.bookstore.service.impl.CartItemServiceImpl;
virtualinvoke $r6.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem);
this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r6;
$r8 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>();
cartTotal = virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8);

Block 4:
[preds: 2 3 ] [succs: 1 ]
goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()];

Block 5:
[preds: 1 ] [succs: ]
virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal);
$r2 = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.repository.ShoppingCartRepository shoppingCartRepository>;
interfaceinvoke $r2.<com.bookstore.repository.ShoppingCartRepository: java.lang.Object save(java.lang.Object)>(shoppingCart);
return shoppingCart;


StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential1=[R_IfThen0, 4], R_Sequential3=[0, R_WhileLoop2, 5], R_IfThen0=[2, 3], R_WhileLoop2=[1, R_Sequential1]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_WhileLoop2, 2=R_IfThen0, 3=R_IfThen0, 4=R_Sequential1, 5=R_Sequential3, R_Sequential1=R_WhileLoop2, R_IfThen0=R_Sequential1, R_WhileLoop2=R_Sequential3, 0=R_Sequential3}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential3
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential1=Sequential, R_Sequential3=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.bookstore.service.impl.ShoppingCartServiceImpl, shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart, $r0 = new java.math.BigDecimal, specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0), cartTotal = $r0, $r1 = new com.bookstore.service.impl.CartItemServiceImpl, cartItems = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart), this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1, l4 = interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal), $r4 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), cartItem = (com.bookstore.domain.CartItem) $r4, $r5 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>(), $i0 = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>(), if $i0 <= 0 goto (branch), $r6 = new com.bookstore.service.impl.CartItemServiceImpl, virtualinvoke $r6.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem), this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r6, $r8 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>(), cartTotal = virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal), $r2 = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.repository.ShoppingCartRepository shoppingCartRepository>, interfaceinvoke $r2.<com.bookstore.repository.ShoppingCartRepository: java.lang.Object save(java.lang.Object)>(shoppingCart), return shoppingCart]
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential1=Sequential, R_Sequential3=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 1
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 1
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.bookstore.service.impl.ShoppingCartServiceImpl, shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart, $r0 = new java.math.BigDecimal, specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0), cartTotal = $r0, $r1 = new com.bookstore.service.impl.CartItemServiceImpl, cartItems = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart), this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1, l4 = interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal), $r4 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), cartItem = (com.bookstore.domain.CartItem) $r4, $r5 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>(), $i0 = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>(), if $i0 <= 0 goto (branch), $r6 = new com.bookstore.service.impl.CartItemServiceImpl, virtualinvoke $r6.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem), this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r6, $r8 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>(), cartTotal = virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal), $r2 = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.repository.ShoppingCartRepository shoppingCartRepository>, interfaceinvoke $r2.<com.bookstore.repository.ShoppingCartRepository: java.lang.Object save(java.lang.Object)>(shoppingCart), return shoppingCart]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, R_Sequential1=Sequential, R_Sequential3=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 2
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 2
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 2
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.bookstore.service.impl.ShoppingCartServiceImpl, shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart, $r0 = new java.math.BigDecimal, specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0), cartTotal = $r0, $r1 = new com.bookstore.service.impl.CartItemServiceImpl, cartItems = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart), this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1, l4 = interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal), $r4 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), cartItem = (com.bookstore.domain.CartItem) $r4, $r5 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>(), $i0 = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>(), if $i0 <= 0 goto (branch), $r6 = new com.bookstore.service.impl.CartItemServiceImpl, virtualinvoke $r6.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem), this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r6, $r8 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>(), cartTotal = virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal), $r2 = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.repository.ShoppingCartRepository shoppingCartRepository>, interfaceinvoke $r2.<com.bookstore.repository.ShoppingCartRepository: java.lang.Object save(java.lang.Object)>(shoppingCart), return shoppingCart]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, R_Sequential1=Sequential, R_Sequential3=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 3
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 3
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 3
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.bookstore.service.impl.ShoppingCartServiceImpl, shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart, $r0 = new java.math.BigDecimal, specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0), cartTotal = $r0, $r1 = new com.bookstore.service.impl.CartItemServiceImpl, cartItems = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart), this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1, l4 = interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal), $r4 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), cartItem = (com.bookstore.domain.CartItem) $r4, $r5 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>(), $i0 = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>(), if $i0 <= 0 goto (branch), $r6 = new com.bookstore.service.impl.CartItemServiceImpl, virtualinvoke $r6.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem), this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r6, $r8 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>(), cartTotal = virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal), $r2 = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.repository.ShoppingCartRepository shoppingCartRepository>, interfaceinvoke $r2.<com.bookstore.repository.ShoppingCartRepository: java.lang.Object save(java.lang.Object)>(shoppingCart), return shoppingCart]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, R_Sequential1=Sequential, R_Sequential3=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_IfThen0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder: createARegionTree(): child0 is head
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, R_Sequential1=Sequential, R_Sequential3=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 4
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 4
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 4
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.bookstore.service.impl.ShoppingCartServiceImpl, shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart, $r0 = new java.math.BigDecimal, specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0), cartTotal = $r0, $r1 = new com.bookstore.service.impl.CartItemServiceImpl, cartItems = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart), this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1, l4 = interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal), $r4 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), cartItem = (com.bookstore.domain.CartItem) $r4, $r5 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>(), $i0 = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>(), if $i0 <= 0 goto (branch), $r6 = new com.bookstore.service.impl.CartItemServiceImpl, virtualinvoke $r6.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem), this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r6, $r8 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>(), cartTotal = virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal), $r2 = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.repository.ShoppingCartRepository shoppingCartRepository>, interfaceinvoke $r2.<com.bookstore.repository.ShoppingCartRepository: java.lang.Object save(java.lang.Object)>(shoppingCart), return shoppingCart]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, 4=BasicBlock, R_Sequential1=Sequential, R_Sequential3=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_Sequential1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, 4=BasicBlock, R_Sequential1=Sequential, R_Sequential3=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_WhileLoop2
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
LoopRegion created
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, 4=BasicBlock, R_Sequential1=Sequential, R_Sequential3=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 5
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 5
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 5
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.bookstore.service.impl.ShoppingCartServiceImpl, shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart, $r0 = new java.math.BigDecimal, specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0), cartTotal = $r0, $r1 = new com.bookstore.service.impl.CartItemServiceImpl, cartItems = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart), this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1, l4 = interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal), $r4 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), cartItem = (com.bookstore.domain.CartItem) $r4, $r5 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>(), $i0 = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>(), if $i0 <= 0 goto (branch), $r6 = new com.bookstore.service.impl.CartItemServiceImpl, virtualinvoke $r6.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem), this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r6, $r8 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>(), cartTotal = virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal), $r2 = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.repository.ShoppingCartRepository shoppingCartRepository>, interfaceinvoke $r2.<com.bookstore.repository.ShoppingCartRepository: java.lang.Object save(java.lang.Object)>(shoppingCart), return shoppingCart]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, 4=BasicBlock, R_Sequential1=Sequential, 5=BasicBlock, R_Sequential3=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_Sequential3
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 3
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = R_Sequential3
FuncStackInfoBuilder.java: regionTreeForBody(): | Sequential
| | BasicBlock0
| | WhileLoop
| | | BasicBlock1
| | | Sequential
| | | | IfThen
| | | | | BasicBlock2
| | | | | BasicBlock3
| | | | BasicBlock4
| | BasicBlock5

FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: findByShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
    {
        com.bookstore.service.impl.CartItemServiceImpl this;
        com.bookstore.domain.ShoppingCart shoppingCart;
        com.bookstore.repository.CartItemRepository $r0;
        java.util.List $r1;

        this := @this: com.bookstore.service.impl.CartItemServiceImpl;

        shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart;

        $r0 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>;

        $r1 = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        return $r1;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: shoppingCart
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: shoppingCart
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: findByShoppingCart is Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.service.impl.CartItemServiceImpl;
shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart;
$r0 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>;
$r1 = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);
return $r1;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.service.impl.CartItemServiceImpl;
shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart;
$r0 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>;
$r1 = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);
return $r1;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.bookstore.service.impl.CartItemServiceImpl, shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart, $r0 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>, $r1 = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart), return $r1]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: getShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.domain.User
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public com.bookstore.domain.ShoppingCart getShoppingCart()
    {
        com.bookstore.domain.User this;
        com.bookstore.domain.ShoppingCart $r0;

        this := @this: com.bookstore.domain.User;

        $r0 = this.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>;

        return $r0;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: getShoppingCart is Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.domain.User;
$r0 = this.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>;
return $r0;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.domain.User;
$r0 = this.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>;
return $r0;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.bookstore.domain.User, $r0 = this.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, return $r0]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: findByUsername
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public com.bookstore.domain.User findByUsername(java.lang.String)
    {
        com.bookstore.service.impl.UserServiceImpl this;
        java.lang.String username;
        com.bookstore.repository.UserRepository $r0;
        com.bookstore.domain.User $r1;

        this := @this: com.bookstore.service.impl.UserServiceImpl;

        username := @parameter0: java.lang.String;

        $r0 = this.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.repository.UserRepository userRepository>;

        $r1 = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username);

        return $r1;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: username
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: username
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: findByUsername is Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.service.impl.UserServiceImpl;
username := @parameter0: java.lang.String;
$r0 = this.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.repository.UserRepository userRepository>;
$r1 = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username);
return $r1;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.service.impl.UserServiceImpl;
username := @parameter0: java.lang.String;
$r0 = this.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.repository.UserRepository userRepository>;
$r1 = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username);
return $r1;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.bookstore.service.impl.UserServiceImpl, username := @parameter0: java.lang.String, $r0 = this.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.repository.UserRepository userRepository>, $r1 = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username), return $r1]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.bookstore.service.impl.UserServiceImpl: void <clinit>()
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = java.math.BigDecimal: void <init>(int)
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: setGrandTotal
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void setGrandTotal(java.math.BigDecimal)
    {
        com.bookstore.domain.ShoppingCart this;
        java.math.BigDecimal grandTotal;

        this := @this: com.bookstore.domain.ShoppingCart;

        grandTotal := @parameter0: java.math.BigDecimal;

        this.<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal> = grandTotal;

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: grandTotal
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: grandTotal
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: setGrandTotal is Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.domain.ShoppingCart;
grandTotal := @parameter0: java.math.BigDecimal;
this.<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal> = grandTotal;
return;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.domain.ShoppingCart;
grandTotal := @parameter0: java.math.BigDecimal;
this.<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal> = grandTotal;
return;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.bookstore.domain.ShoppingCart, grandTotal := @parameter0: java.math.BigDecimal, this.<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal> = grandTotal, return]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: updateCartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
    {
        com.bookstore.service.impl.CartItemServiceImpl this;
        com.bookstore.domain.CartItem cartItem;
        java.math.BigDecimal $r0, $r2, bigDecimal;
        com.bookstore.domain.Book $r1;
        double $d0;
        int $i0;
        com.bookstore.repository.CartItemRepository $r3;

        this := @this: com.bookstore.service.impl.CartItemServiceImpl;

        cartItem := @parameter0: com.bookstore.domain.CartItem;

        $r0 = new java.math.BigDecimal;

        $r1 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>();

        $d0 = virtualinvoke $r1.<com.bookstore.domain.Book: double getOurPrice()>();

        specialinvoke $r0.<java.math.BigDecimal: void <init>(double)>($d0);

        $r2 = new java.math.BigDecimal;

        $i0 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: int getQty()>();

        specialinvoke $r2.<java.math.BigDecimal: void <init>(int)>($i0);

        bigDecimal = virtualinvoke $r0.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r2);

        bigDecimal = virtualinvoke bigDecimal.<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>(2, 4);

        virtualinvoke cartItem.<com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)>(bigDecimal);

        $r3 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>;

        interfaceinvoke $r3.<com.bookstore.repository.CartItemRepository: java.lang.Object save(java.lang.Object)>(cartItem);

        return cartItem;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: cartItem
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: cartItem
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local: $d0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $d0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): local: $i0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $i0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r3
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r3
FuncStackInfoBuilder.java: regionTreeForBody(): local: bigDecimal
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: bigDecimal
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: updateCartItem is Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.service.impl.CartItemServiceImpl;
cartItem := @parameter0: com.bookstore.domain.CartItem;
$r0 = new java.math.BigDecimal;
$r1 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>();
$d0 = virtualinvoke $r1.<com.bookstore.domain.Book: double getOurPrice()>();
specialinvoke $r0.<java.math.BigDecimal: void <init>(double)>($d0);
$r2 = new java.math.BigDecimal;
$i0 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: int getQty()>();
specialinvoke $r2.<java.math.BigDecimal: void <init>(int)>($i0);
bigDecimal = virtualinvoke $r0.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r2);
bigDecimal = virtualinvoke bigDecimal.<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>(2, 4);
virtualinvoke cartItem.<com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)>(bigDecimal);
$r3 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>;
interfaceinvoke $r3.<com.bookstore.repository.CartItemRepository: java.lang.Object save(java.lang.Object)>(cartItem);
return cartItem;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.service.impl.CartItemServiceImpl;
cartItem := @parameter0: com.bookstore.domain.CartItem;
$r0 = new java.math.BigDecimal;
$r1 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>();
$d0 = virtualinvoke $r1.<com.bookstore.domain.Book: double getOurPrice()>();
specialinvoke $r0.<java.math.BigDecimal: void <init>(double)>($d0);
$r2 = new java.math.BigDecimal;
$i0 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: int getQty()>();
specialinvoke $r2.<java.math.BigDecimal: void <init>(int)>($i0);
bigDecimal = virtualinvoke $r0.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r2);
bigDecimal = virtualinvoke bigDecimal.<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>(2, 4);
virtualinvoke cartItem.<com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)>(bigDecimal);
$r3 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>;
interfaceinvoke $r3.<com.bookstore.repository.CartItemRepository: java.lang.Object save(java.lang.Object)>(cartItem);
return cartItem;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.bookstore.service.impl.CartItemServiceImpl, cartItem := @parameter0: com.bookstore.domain.CartItem, $r0 = new java.math.BigDecimal, $r1 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>(), $d0 = virtualinvoke $r1.<com.bookstore.domain.Book: double getOurPrice()>(), specialinvoke $r0.<java.math.BigDecimal: void <init>(double)>($d0), $r2 = new java.math.BigDecimal, $i0 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: int getQty()>(), specialinvoke $r2.<java.math.BigDecimal: void <init>(int)>($i0), bigDecimal = virtualinvoke $r0.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r2), bigDecimal = virtualinvoke bigDecimal.<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>(2, 4), virtualinvoke cartItem.<com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)>(bigDecimal), $r3 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>, interfaceinvoke $r3.<com.bookstore.repository.CartItemRepository: java.lang.Object save(java.lang.Object)>(cartItem), return cartItem]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.bookstore.domain.Book: int getInStockNumber()
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: getInStockNumber
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public int getInStockNumber()
    {
        com.bookstore.domain.Book this;
        int $i0;

        this := @this: com.bookstore.domain.Book;

        $i0 = this.<com.bookstore.domain.Book: int inStockNumber>;

        return $i0;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: $i0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $i0
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: getInStockNumber is Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.domain.Book;
$i0 = this.<com.bookstore.domain.Book: int inStockNumber>;
return $i0;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.domain.Book;
$i0 = this.<com.bookstore.domain.Book: int inStockNumber>;
return $i0;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.bookstore.domain.Book, $i0 = this.<com.bookstore.domain.Book: int inStockNumber>, return $i0]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: getSubtotal
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.math.BigDecimal getSubtotal()
    {
        com.bookstore.domain.CartItem this;
        java.math.BigDecimal $r0;

        this := @this: com.bookstore.domain.CartItem;

        $r0 = this.<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>;

        return $r0;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: getSubtotal is Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.domain.CartItem;
$r0 = this.<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>;
return $r0;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.domain.CartItem;
$r0 = this.<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>;
return $r0;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.bookstore.domain.CartItem, $r0 = this.<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, return $r0]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: getBook
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public com.bookstore.domain.Book getBook()
    {
        com.bookstore.domain.CartItem this;
        com.bookstore.domain.Book $r0;

        this := @this: com.bookstore.domain.CartItem;

        $r0 = this.<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>;

        return $r0;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: getBook is Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.domain.CartItem;
$r0 = this.<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>;
return $r0;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.domain.CartItem;
$r0 = this.<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>;
return $r0;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.bookstore.domain.CartItem, $r0 = this.<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, return $r0]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = java.math.BigDecimal: void <init>(int)
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = java.math.BigDecimal: void <init>(double)
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.bookstore.domain.Book: double getOurPrice()
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: getOurPrice
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public double getOurPrice()
    {
        com.bookstore.domain.Book this;
        double $d0;

        this := @this: com.bookstore.domain.Book;

        $d0 = this.<com.bookstore.domain.Book: double ourPrice>;

        return $d0;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: $d0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $d0
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: getOurPrice is Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.domain.Book;
$d0 = this.<com.bookstore.domain.Book: double ourPrice>;
return $d0;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.domain.Book;
$d0 = this.<com.bookstore.domain.Book: double ourPrice>;
return $d0;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.bookstore.domain.Book, $d0 = this.<com.bookstore.domain.Book: double ourPrice>, return $d0]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: setSubtotal
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void setSubtotal(java.math.BigDecimal)
    {
        com.bookstore.domain.CartItem this;
        java.math.BigDecimal subtotal;

        this := @this: com.bookstore.domain.CartItem;

        subtotal := @parameter0: java.math.BigDecimal;

        this.<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal> = subtotal;

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: subtotal
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: subtotal
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: setSubtotal is Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.domain.CartItem;
subtotal := @parameter0: java.math.BigDecimal;
this.<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal> = subtotal;
return;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.domain.CartItem;
subtotal := @parameter0: java.math.BigDecimal;
this.<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal> = subtotal;
return;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.bookstore.domain.CartItem, subtotal := @parameter0: java.math.BigDecimal, this.<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal> = subtotal, return]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.bookstore.domain.CartItem: int getQty()
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: getQty
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public int getQty()
    {
        com.bookstore.domain.CartItem this;
        int $i0;

        this := @this: com.bookstore.domain.CartItem;

        $i0 = this.<com.bookstore.domain.CartItem: int qty>;

        return $i0;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: $i0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $i0
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: getQty is Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.domain.CartItem;
$i0 = this.<com.bookstore.domain.CartItem: int qty>;
return $i0;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.domain.CartItem;
$i0 = this.<com.bookstore.domain.CartItem: int qty>;
return $i0;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.bookstore.domain.CartItem, $i0 = this.<com.bookstore.domain.CartItem: int qty>, return $i0]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FuncStackInfoBuilder.java: functionstack: 
FuncStackInfoBuilder.java: internalTransformHelper():     com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)
FuncStackInfoBuilder.java: internalTransformHelper():     com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)
FuncStackInfoBuilder.java: internalTransformHelper():     com.bookstore.service.impl.UserServiceImpl: void <clinit>()
FuncStackInfoBuilder.java: internalTransformHelper():     com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
FuncStackInfoBuilder.java: internalTransformHelper():     com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()
FuncStackInfoBuilder.java: internalTransformHelper():     com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)
FuncStackInfoBuilder.java: internalTransformHelper():     com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
FuncStackInfoBuilder.java: internalTransformHelper():     com.bookstore.domain.Book: int getInStockNumber()
FuncStackInfoBuilder.java: internalTransformHelper():     com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)
FuncStackInfoBuilder.java: internalTransformHelper():     com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
FuncStackInfoBuilder.java: internalTransformHelper():     com.bookstore.domain.Book: double getOurPrice()
FuncStackInfoBuilder.java: internalTransformHelper():     com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()
FuncStackInfoBuilder.java: internalTransformHelper():     com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
FuncStackInfoBuilder.java: internalTransformHelper():     com.bookstore.domain.CartItem: int getQty()
FuncStackInfoBuilder.java: internalTransformHelper(): {com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)=    public void setGrandTotal(java.math.BigDecimal)
    {
        com.bookstore.domain.ShoppingCart this;
        java.math.BigDecimal grandTotal;

        this := @this: com.bookstore.domain.ShoppingCart;

        grandTotal := @parameter0: java.math.BigDecimal;

        this.<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal> = grandTotal;

        return;
    }
, com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)=    public java.lang.String shoppingCart(org.springframework.ui.Model, java.security.Principal)
    {
        com.bookstore.controller.ShoppingCartController this;
        org.springframework.ui.Model model;
        java.security.Principal principal;
        com.bookstore.domain.User user;
        com.bookstore.domain.ShoppingCart shoppingCart;
        java.util.List cartItemList;
        com.bookstore.service.impl.UserService $r0;
        java.lang.String $r1;
        com.bookstore.service.impl.CartItemService $r2;
        com.bookstore.service.impl.ShoppingCartService $r3;

        this := @this: com.bookstore.controller.ShoppingCartController;

        model := @parameter0: org.springframework.ui.Model;

        principal := @parameter1: java.security.Principal;

        $r0 = new com.bookstore.service.impl.UserServiceImpl;

        $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0;

        shoppingCart = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>();

        $r2 = new com.bookstore.service.impl.CartItemServiceImpl;

        cartItemList = virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r2;

        $r3 = new com.bookstore.service.impl.ShoppingCartServiceImpl;

        virtualinvoke $r3.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl> = $r3;

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart);

        return "shoppingCart";
    }
, com.bookstore.service.impl.UserServiceImpl: void <clinit>()=    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "com/bookstore/service/impl/UserService");

        <com.bookstore.service.impl.UserServiceImpl: org.slf4j.Logger LOG> = $r0;

        return;
    }
, com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)=    public java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
    {
        com.bookstore.service.impl.CartItemServiceImpl this;
        com.bookstore.domain.ShoppingCart shoppingCart;
        com.bookstore.repository.CartItemRepository $r0;
        java.util.List $r1;

        this := @this: com.bookstore.service.impl.CartItemServiceImpl;

        shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart;

        $r0 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>;

        $r1 = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        return $r1;
    }
, com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()=    public com.bookstore.domain.ShoppingCart getShoppingCart()
    {
        com.bookstore.domain.User this;
        com.bookstore.domain.ShoppingCart $r0;

        this := @this: com.bookstore.domain.User;

        $r0 = this.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>;

        return $r0;
    }
, com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)=    public com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)
    {
        com.bookstore.service.impl.ShoppingCartServiceImpl this;
        com.bookstore.domain.ShoppingCart shoppingCart;
        java.util.List cartItems;
        java.util.Iterator l4;
        com.bookstore.domain.CartItem cartItem;
        java.math.BigDecimal $r0, $r8, cartTotal;
        com.bookstore.service.impl.CartItemService $r1, $r6;
        boolean $z0;
        com.bookstore.repository.ShoppingCartRepository $r2;
        java.lang.Object $r4;
        com.bookstore.domain.Book $r5;
        int $i0;

        this := @this: com.bookstore.service.impl.ShoppingCartServiceImpl;

        shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart;

        $r0 = new java.math.BigDecimal;

        specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0);

        cartTotal = $r0;

        $r1 = new com.bookstore.service.impl.CartItemServiceImpl;

        cartItems = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1;

        l4 = interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        cartItem = (com.bookstore.domain.CartItem) $r4;

        $r5 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>();

        $i0 = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>();

        if $i0 <= 0 goto label2;

        $r6 = new com.bookstore.service.impl.CartItemServiceImpl;

        virtualinvoke $r6.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem);

        this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r6;

        $r8 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>();

        cartTotal = virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8);

     label2:
        goto label1;

     label3:
        virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal);

        $r2 = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.repository.ShoppingCartRepository shoppingCartRepository>;

        interfaceinvoke $r2.<com.bookstore.repository.ShoppingCartRepository: java.lang.Object save(java.lang.Object)>(shoppingCart);

        return shoppingCart;
    }
, com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)=    public com.bookstore.domain.User findByUsername(java.lang.String)
    {
        com.bookstore.service.impl.UserServiceImpl this;
        java.lang.String username;
        com.bookstore.repository.UserRepository $r0;
        com.bookstore.domain.User $r1;

        this := @this: com.bookstore.service.impl.UserServiceImpl;

        username := @parameter0: java.lang.String;

        $r0 = this.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.repository.UserRepository userRepository>;

        $r1 = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username);

        return $r1;
    }
, com.bookstore.domain.Book: int getInStockNumber()=    public int getInStockNumber()
    {
        com.bookstore.domain.Book this;
        int $i0;

        this := @this: com.bookstore.domain.Book;

        $i0 = this.<com.bookstore.domain.Book: int inStockNumber>;

        return $i0;
    }
, com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)=    public void setSubtotal(java.math.BigDecimal)
    {
        com.bookstore.domain.CartItem this;
        java.math.BigDecimal subtotal;

        this := @this: com.bookstore.domain.CartItem;

        subtotal := @parameter0: java.math.BigDecimal;

        this.<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal> = subtotal;

        return;
    }
, com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)=    public com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
    {
        com.bookstore.service.impl.CartItemServiceImpl this;
        com.bookstore.domain.CartItem cartItem;
        java.math.BigDecimal $r0, $r2, bigDecimal;
        com.bookstore.domain.Book $r1;
        double $d0;
        int $i0;
        com.bookstore.repository.CartItemRepository $r3;

        this := @this: com.bookstore.service.impl.CartItemServiceImpl;

        cartItem := @parameter0: com.bookstore.domain.CartItem;

        $r0 = new java.math.BigDecimal;

        $r1 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>();

        $d0 = virtualinvoke $r1.<com.bookstore.domain.Book: double getOurPrice()>();

        specialinvoke $r0.<java.math.BigDecimal: void <init>(double)>($d0);

        $r2 = new java.math.BigDecimal;

        $i0 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: int getQty()>();

        specialinvoke $r2.<java.math.BigDecimal: void <init>(int)>($i0);

        bigDecimal = virtualinvoke $r0.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r2);

        bigDecimal = virtualinvoke bigDecimal.<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>(2, 4);

        virtualinvoke cartItem.<com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)>(bigDecimal);

        $r3 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>;

        interfaceinvoke $r3.<com.bookstore.repository.CartItemRepository: java.lang.Object save(java.lang.Object)>(cartItem);

        return cartItem;
    }
, com.bookstore.domain.Book: double getOurPrice()=    public double getOurPrice()
    {
        com.bookstore.domain.Book this;
        double $d0;

        this := @this: com.bookstore.domain.Book;

        $d0 = this.<com.bookstore.domain.Book: double ourPrice>;

        return $d0;
    }
, com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()=    public java.math.BigDecimal getSubtotal()
    {
        com.bookstore.domain.CartItem this;
        java.math.BigDecimal $r0;

        this := @this: com.bookstore.domain.CartItem;

        $r0 = this.<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>;

        return $r0;
    }
, com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()=    public com.bookstore.domain.Book getBook()
    {
        com.bookstore.domain.CartItem this;
        com.bookstore.domain.Book $r0;

        this := @this: com.bookstore.domain.CartItem;

        $r0 = this.<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>;

        return $r0;
    }
, com.bookstore.domain.CartItem: int getQty()=    public int getQty()
    {
        com.bookstore.domain.CartItem this;
        int $i0;

        this := @this: com.bookstore.domain.CartItem;

        $i0 = this.<com.bookstore.domain.CartItem: int qty>;

        return $i0;
    }
}

Decompiling com.bookstore.controller.ShoppingCartController... 
ServiceAllocTransform.java: internalTransform(): methodsig: <com.bookstore.controller.ShoppingCartController: void <init>()>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: <init>
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void <init>()
    {
        com.bookstore.controller.ShoppingCartController this;

        this := @this: com.bookstore.controller.ShoppingCartController;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: shoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String shoppingCart(org.springframework.ui.Model, java.security.Principal)
    {
        com.bookstore.controller.ShoppingCartController this;
        org.springframework.ui.Model model;
        java.security.Principal principal;
        com.bookstore.domain.User user;
        com.bookstore.domain.ShoppingCart shoppingCart;
        java.util.List cartItemList;
        com.bookstore.service.impl.UserService $r0;
        java.lang.String $r1;
        com.bookstore.service.impl.CartItemService $r2;
        com.bookstore.service.impl.ShoppingCartService $r3;

        this := @this: com.bookstore.controller.ShoppingCartController;

        model := @parameter0: org.springframework.ui.Model;

        principal := @parameter1: java.security.Principal;

        $r0 = new com.bookstore.service.impl.UserServiceImpl;

        $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0;

        shoppingCart = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>();

        $r2 = new com.bookstore.service.impl.CartItemServiceImpl;

        cartItemList = virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r2;

        $r3 = new com.bookstore.service.impl.ShoppingCartServiceImpl;

        virtualinvoke $r3.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl> = $r3;

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart);

        return "shoppingCart";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <com.bookstore.controller.ShoppingCartController: java.lang.String addItem(com.bookstore.domain.Book,java.lang.String,org.springframework.ui.Model,java.security.Principal)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: addItem
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String addItem(com.bookstore.domain.Book, java.lang.String, org.springframework.ui.Model, java.security.Principal)
    {
        com.bookstore.controller.ShoppingCartController this;
        java.lang.String qty, $r1, $r11, $r18;
        org.springframework.ui.Model model;
        java.security.Principal principal;
        com.bookstore.domain.User user;
        com.bookstore.service.impl.UserService $r0;
        com.bookstore.service.impl.BookService $r2;
        java.lang.Long $r3, $r9, $r16;
        int $i0, $i1, $i2;
        com.bookstore.service.impl.CartItemService $r4;
        java.lang.Boolean $r5, $r12;
        java.lang.StringBuilder $r7, $r8, $r10, $r14, $r15, $r17;
        com.bookstore.domain.Book book, book;

        this := @this: com.bookstore.controller.ShoppingCartController;

        book := @parameter0: com.bookstore.domain.Book;

        qty := @parameter1: java.lang.String;

        model := @parameter2: org.springframework.ui.Model;

        principal := @parameter3: java.security.Principal;

        $r0 = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserService userService>;

        $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        user = interfaceinvoke $r0.<com.bookstore.service.impl.UserService: com.bookstore.domain.User findByUsername(java.lang.String)>($r1);

        $r2 = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookService bookService>;

        $r3 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>();

        book = interfaceinvoke $r2.<com.bookstore.service.impl.BookService: com.bookstore.domain.Book findById(java.lang.Long)>($r3);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(qty);

        $i1 = virtualinvoke book.<com.bookstore.domain.Book: int getInStockNumber()>();

        if $i0 <= $i1 goto label1;

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("notEnoughStrock", $r12);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forward:/bookDetail?id=");

        $r16 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r18;

     label1:
        $r4 = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemService cartItemService>;

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(qty);

        interfaceinvoke $r4.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem addBookToCartItem(com.bookstore.domain.Book,com.bookstore.domain.User,int)>(book, user, $i2);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("addBookSuccess", $r5);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forward:/bookDetail?id=");

        $r9 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.bookstore.controller.ShoppingCartController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.config.SecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookToCartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.ShoppingCartRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserShippingRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.CartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.PasswordResetTokenRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserPaymentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Order
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BillingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserShipping
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.PasswordResetToken
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Authority
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.GrantedAuthority
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.UserRole
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.User
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetails
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserBilling
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Payment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BookToCartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserPayment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShippingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.MailConstructor
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.USConstants
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.SecurityUtility
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.BookstoreApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.CommandLineRunner
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserSecurityService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetailsService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): $r0 = new com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.bookstore.controller.ShoppingCartController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.config.SecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookToCartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.ShoppingCartRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserShippingRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.CartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.PasswordResetTokenRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserPaymentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Order
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BillingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserShipping
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.PasswordResetToken
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Authority
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.GrantedAuthority
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.UserRole
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.User
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetails
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserBilling
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Payment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BookToCartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserPayment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShippingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.MailConstructor
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.USConstants
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.SecurityUtility
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.BookstoreApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.CommandLineRunner
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): $r2 = new com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserSecurityService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetailsService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.bookstore.controller.ShoppingCartController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.config.SecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookToCartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.ShoppingCartRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserShippingRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.CartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.PasswordResetTokenRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserPaymentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Order
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BillingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserShipping
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.PasswordResetToken
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Authority
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.GrantedAuthority
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.UserRole
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.User
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetails
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserBilling
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Payment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BookToCartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserPayment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShippingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.MailConstructor
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.USConstants
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.SecurityUtility
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.BookstoreApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.CommandLineRunner
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): $r4 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserSecurityService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetailsService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): service list = [$r0=com.bookstore.service.impl.UserServiceImpl, $r2=com.bookstore.service.impl.BookServiceImpl, $r4=com.bookstore.service.impl.CartItemServiceImpl]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = book := @parameter0: com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = qty := @parameter1: java.lang.String
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = model := @parameter2: org.springframework.ui.Model
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = principal := @parameter3: java.security.Principal
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = principal
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = user = interfaceinvoke $r0.<com.bookstore.service.impl.UserService: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookService bookService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r2 = new com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r3 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = book = interfaceinvoke $r2.<com.bookstore.service.impl.BookService: com.bookstore.domain.Book findById(java.lang.Long)>($r3)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(qty)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $i1 = virtualinvoke book.<com.bookstore.domain.Book: int getInStockNumber()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = if $i0 <= $i1 goto $r4 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIfStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("notEnoughStrock", $r12)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("notEnoughStrock", $r12)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r14 = new java.lang.StringBuilder
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forward:/bookDetail?id=")
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r16 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return $r18
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r4 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(qty)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r4.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem addBookToCartItem(com.bookstore.domain.Book,com.bookstore.domain.User,int)>(book, user, $i2)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r4.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem addBookToCartItem(com.bookstore.domain.Book,com.bookstore.domain.User,int)>(book, user, $i2)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r4
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("addBookSuccess", $r5)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("addBookSuccess", $r5)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r7 = new java.lang.StringBuilder
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forward:/bookDetail?id=")
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r9 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return $r11
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String addItem(com.bookstore.domain.Book, java.lang.String, org.springframework.ui.Model, java.security.Principal)
    {
        com.bookstore.controller.ShoppingCartController this;
        java.lang.String qty, $r1, $r11, $r18;
        org.springframework.ui.Model model;
        java.security.Principal principal;
        com.bookstore.domain.User user;
        com.bookstore.service.impl.UserService $r0;
        com.bookstore.service.impl.BookService $r2;
        java.lang.Long $r3, $r9, $r16;
        int $i0, $i1, $i2;
        com.bookstore.service.impl.CartItemService $r4;
        java.lang.Boolean $r5, $r12;
        java.lang.StringBuilder $r7, $r8, $r10, $r14, $r15, $r17;
        com.bookstore.domain.Book book, book;

        this := @this: com.bookstore.controller.ShoppingCartController;

        book := @parameter0: com.bookstore.domain.Book;

        qty := @parameter1: java.lang.String;

        model := @parameter2: org.springframework.ui.Model;

        principal := @parameter3: java.security.Principal;

        $r0 = new com.bookstore.service.impl.UserServiceImpl;

        $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0;

        $r2 = new com.bookstore.service.impl.BookServiceImpl;

        $r3 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>();

        book = interfaceinvoke $r2.<com.bookstore.service.impl.BookService: com.bookstore.domain.Book findById(java.lang.Long)>($r3);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(qty);

        $i1 = virtualinvoke book.<com.bookstore.domain.Book: int getInStockNumber()>();

        if $i0 <= $i1 goto label1;

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("notEnoughStrock", $r12);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forward:/bookDetail?id=");

        $r16 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r18;

     label1:
        $r4 = new com.bookstore.service.impl.CartItemServiceImpl;

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(qty);

        interfaceinvoke $r4.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem addBookToCartItem(com.bookstore.domain.Book,com.bookstore.domain.User,int)>(book, user, $i2);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("addBookSuccess", $r5);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forward:/bookDetail?id=");

        $r9 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = book := @parameter0: com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = qty := @parameter1: java.lang.String
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = model := @parameter2: org.springframework.ui.Model
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = principal := @parameter3: java.security.Principal
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = principal
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): Break
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r2 = new com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r3 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = book = interfaceinvoke $r2.<com.bookstore.service.impl.BookService: com.bookstore.domain.Book findById(java.lang.Long)>($r3)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): Break
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookService bookService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(qty)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $i1 = virtualinvoke book.<com.bookstore.domain.Book: int getInStockNumber()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = if $i0 <= $i1 goto $r4 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIfStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("notEnoughStrock", $r12)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("notEnoughStrock", $r12)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): Break
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r14 = new java.lang.StringBuilder
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forward:/bookDetail?id=")
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r16 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return $r18
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r4 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(qty)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r4.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem addBookToCartItem(com.bookstore.domain.Book,com.bookstore.domain.User,int)>(book, user, $i2)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r4.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem addBookToCartItem(com.bookstore.domain.Book,com.bookstore.domain.User,int)>(book, user, $i2)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r4
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): Break
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("addBookSuccess", $r5)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("addBookSuccess", $r5)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): Break
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r7 = new java.lang.StringBuilder
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forward:/bookDetail?id=")
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r9 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return $r11
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String addItem(com.bookstore.domain.Book, java.lang.String, org.springframework.ui.Model, java.security.Principal)
    {
        com.bookstore.controller.ShoppingCartController this;
        java.lang.String qty, $r1, $r11, $r18;
        org.springframework.ui.Model model;
        java.security.Principal principal;
        com.bookstore.domain.User user;
        com.bookstore.service.impl.UserService $r0;
        com.bookstore.service.impl.BookService $r2;
        java.lang.Long $r3, $r9, $r16;
        int $i0, $i1, $i2;
        com.bookstore.service.impl.CartItemService $r4;
        java.lang.Boolean $r5, $r12;
        java.lang.StringBuilder $r7, $r8, $r10, $r14, $r15, $r17;
        com.bookstore.domain.Book book, book;

        this := @this: com.bookstore.controller.ShoppingCartController;

        book := @parameter0: com.bookstore.domain.Book;

        qty := @parameter1: java.lang.String;

        model := @parameter2: org.springframework.ui.Model;

        principal := @parameter3: java.security.Principal;

        $r0 = new com.bookstore.service.impl.UserServiceImpl;

        $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0;

        $r2 = new com.bookstore.service.impl.BookServiceImpl;

        $r3 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>();

        book = virtualinvoke $r2.<com.bookstore.service.impl.BookServiceImpl: com.bookstore.domain.Book findById(java.lang.Long)>($r3);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookServiceImpl bookServiceImpl> = $r2;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(qty);

        $i1 = virtualinvoke book.<com.bookstore.domain.Book: int getInStockNumber()>();

        if $i0 <= $i1 goto label1;

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("notEnoughStrock", $r12);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forward:/bookDetail?id=");

        $r16 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r18;

     label1:
        $r4 = new com.bookstore.service.impl.CartItemServiceImpl;

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(qty);

        interfaceinvoke $r4.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem addBookToCartItem(com.bookstore.domain.Book,com.bookstore.domain.User,int)>(book, user, $i2);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("addBookSuccess", $r5);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forward:/bookDetail?id=");

        $r9 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r4
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = book := @parameter0: com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = qty := @parameter1: java.lang.String
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = model := @parameter2: org.springframework.ui.Model
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = principal := @parameter3: java.security.Principal
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = principal
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r4
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r2 = new com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r3 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = book = virtualinvoke $r2.<com.bookstore.service.impl.BookServiceImpl: com.bookstore.domain.Book findById(java.lang.Long)>($r3)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookServiceImpl bookServiceImpl> = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(qty)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $i1 = virtualinvoke book.<com.bookstore.domain.Book: int getInStockNumber()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = if $i0 <= $i1 goto $r4 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIfStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("notEnoughStrock", $r12)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("notEnoughStrock", $r12)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r4
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r14 = new java.lang.StringBuilder
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forward:/bookDetail?id=")
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r16 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return $r18
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r4 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(qty)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r4.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem addBookToCartItem(com.bookstore.domain.Book,com.bookstore.domain.User,int)>(book, user, $i2)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r4.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem addBookToCartItem(com.bookstore.domain.Book,com.bookstore.domain.User,int)>(book, user, $i2)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r4
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r4
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookServiceImpl bookServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r4
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("addBookSuccess", $r5)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("addBookSuccess", $r5)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r4
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r7 = new java.lang.StringBuilder
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forward:/bookDetail?id=")
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r9 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return $r11
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String addItem(com.bookstore.domain.Book, java.lang.String, org.springframework.ui.Model, java.security.Principal)
    {
        com.bookstore.controller.ShoppingCartController this;
        java.lang.String qty, $r1, $r11, $r18;
        org.springframework.ui.Model model;
        java.security.Principal principal;
        com.bookstore.domain.User user;
        com.bookstore.service.impl.UserService $r0;
        com.bookstore.service.impl.BookService $r2;
        java.lang.Long $r3, $r9, $r16;
        int $i0, $i1, $i2;
        com.bookstore.service.impl.CartItemService $r4;
        java.lang.Boolean $r5, $r12;
        java.lang.StringBuilder $r7, $r8, $r10, $r14, $r15, $r17;
        com.bookstore.domain.Book book, book;

        this := @this: com.bookstore.controller.ShoppingCartController;

        book := @parameter0: com.bookstore.domain.Book;

        qty := @parameter1: java.lang.String;

        model := @parameter2: org.springframework.ui.Model;

        principal := @parameter3: java.security.Principal;

        $r0 = new com.bookstore.service.impl.UserServiceImpl;

        $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0;

        $r2 = new com.bookstore.service.impl.BookServiceImpl;

        $r3 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>();

        book = virtualinvoke $r2.<com.bookstore.service.impl.BookServiceImpl: com.bookstore.domain.Book findById(java.lang.Long)>($r3);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookServiceImpl bookServiceImpl> = $r2;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(qty);

        $i1 = virtualinvoke book.<com.bookstore.domain.Book: int getInStockNumber()>();

        if $i0 <= $i1 goto label1;

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("notEnoughStrock", $r12);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forward:/bookDetail?id=");

        $r16 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r18;

     label1:
        $r4 = new com.bookstore.service.impl.CartItemServiceImpl;

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(qty);

        virtualinvoke $r4.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem addBookToCartItem(com.bookstore.domain.Book,com.bookstore.domain.User,int)>(book, user, $i2);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r4;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("addBookSuccess", $r5);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forward:/bookDetail?id=");

        $r9 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

ServiceAllocTransform.java: internalTransform(): methodsig: <com.bookstore.controller.ShoppingCartController: java.lang.String updateShoppingCart(java.lang.Long,int)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: updateShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String updateShoppingCart(java.lang.Long, int)
    {
        com.bookstore.controller.ShoppingCartController this;
        java.lang.Long cartItemId;
        int qty;
        com.bookstore.domain.CartItem cartItem;
        com.bookstore.service.impl.CartItemService $r0, $r1;

        this := @this: com.bookstore.controller.ShoppingCartController;

        cartItemId := @parameter0: java.lang.Long;

        qty := @parameter1: int;

        $r0 = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemService cartItemService>;

        cartItem = interfaceinvoke $r0.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem findById(java.lang.Long)>(cartItemId);

        virtualinvoke cartItem.<com.bookstore.domain.CartItem: void setQty(int)>(qty);

        $r1 = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemService cartItemService>;

        interfaceinvoke $r1.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem);

        return "forward:/shoppingCart/cart";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.bookstore.controller.ShoppingCartController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.config.SecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookToCartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.ShoppingCartRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserShippingRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.CartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.PasswordResetTokenRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserPaymentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Order
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BillingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserShipping
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.PasswordResetToken
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Authority
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.GrantedAuthority
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.UserRole
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.User
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetails
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserBilling
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Payment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BookToCartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserPayment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShippingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.MailConstructor
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.USConstants
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.SecurityUtility
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.BookstoreApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.CommandLineRunner
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): $r0 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserSecurityService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetailsService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.bookstore.controller.ShoppingCartController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.config.SecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookToCartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.ShoppingCartRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserShippingRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.CartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.PasswordResetTokenRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserPaymentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Order
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BillingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserShipping
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.PasswordResetToken
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Authority
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.GrantedAuthority
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.UserRole
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.User
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetails
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserBilling
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Payment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BookToCartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserPayment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShippingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.MailConstructor
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.USConstants
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.SecurityUtility
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.BookstoreApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.CommandLineRunner
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): $r1 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserSecurityService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetailsService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): service list = [$r0=com.bookstore.service.impl.CartItemServiceImpl, $r1=com.bookstore.service.impl.CartItemServiceImpl]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = cartItemId := @parameter0: java.lang.Long
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = qty := @parameter1: int
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = cartItem = interfaceinvoke $r0.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem findById(java.lang.Long)>(cartItemId)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookServiceImpl bookServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = virtualinvoke cartItem.<com.bookstore.domain.CartItem: void setQty(int)>(qty)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r1.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r1.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "forward:/shoppingCart/cart"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String updateShoppingCart(java.lang.Long, int)
    {
        com.bookstore.controller.ShoppingCartController this;
        java.lang.Long cartItemId;
        int qty;
        com.bookstore.domain.CartItem cartItem;
        com.bookstore.service.impl.CartItemService $r0, $r1;

        this := @this: com.bookstore.controller.ShoppingCartController;

        cartItemId := @parameter0: java.lang.Long;

        qty := @parameter1: int;

        $r0 = new com.bookstore.service.impl.CartItemServiceImpl;

        cartItem = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(cartItemId);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r0;

        virtualinvoke cartItem.<com.bookstore.domain.CartItem: void setQty(int)>(qty);

        $r1 = new com.bookstore.service.impl.CartItemServiceImpl;

        interfaceinvoke $r1.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem);

        return "forward:/shoppingCart/cart";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = cartItemId := @parameter0: java.lang.Long
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = qty := @parameter1: int
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = cartItem = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(cartItemId)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = virtualinvoke cartItem.<com.bookstore.domain.CartItem: void setQty(int)>(qty)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r1.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r1.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookServiceImpl bookServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "forward:/shoppingCart/cart"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String updateShoppingCart(java.lang.Long, int)
    {
        com.bookstore.controller.ShoppingCartController this;
        java.lang.Long cartItemId;
        int qty;
        com.bookstore.domain.CartItem cartItem;
        com.bookstore.service.impl.CartItemService $r0, $r1;

        this := @this: com.bookstore.controller.ShoppingCartController;

        cartItemId := @parameter0: java.lang.Long;

        qty := @parameter1: int;

        $r0 = new com.bookstore.service.impl.CartItemServiceImpl;

        cartItem = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(cartItemId);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r0;

        virtualinvoke cartItem.<com.bookstore.domain.CartItem: void setQty(int)>(qty);

        $r1 = new com.bookstore.service.impl.CartItemServiceImpl;

        virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1;

        return "forward:/shoppingCart/cart";
    }

ServiceAllocTransform.java: internalTransform(): methodsig: <com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: removeItem
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String removeItem(java.lang.Long)
    {
        com.bookstore.controller.ShoppingCartController this;
        java.lang.Long id;
        com.bookstore.service.impl.CartItemService $r0, $r1;
        com.bookstore.domain.CartItem $r2;

        this := @this: com.bookstore.controller.ShoppingCartController;

        id := @parameter0: java.lang.Long;

        $r1 = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemService cartItemService>;

        $r0 = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemService cartItemService>;

        $r2 = interfaceinvoke $r0.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem findById(java.lang.Long)>(id);

        interfaceinvoke $r1.<com.bookstore.service.impl.CartItemService: void removeCartItem(com.bookstore.domain.CartItem)>($r2);

        return "forward:/shoppingCart/cart";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.bookstore.controller.ShoppingCartController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.config.SecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookToCartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.ShoppingCartRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserShippingRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.CartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.PasswordResetTokenRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserPaymentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Order
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BillingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserShipping
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.PasswordResetToken
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Authority
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.GrantedAuthority
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.UserRole
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.User
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetails
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserBilling
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Payment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BookToCartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserPayment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShippingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.MailConstructor
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.USConstants
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.SecurityUtility
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.BookstoreApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.CommandLineRunner
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): $r1 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserSecurityService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetailsService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.bookstore.controller.ShoppingCartController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.config.SecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookToCartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.ShoppingCartRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserShippingRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.CartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.PasswordResetTokenRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserPaymentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Order
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BillingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserShipping
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.PasswordResetToken
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Authority
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.GrantedAuthority
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.UserRole
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.User
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetails
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserBilling
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Payment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BookToCartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserPayment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShippingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.MailConstructor
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.USConstants
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.SecurityUtility
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.BookstoreApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.CommandLineRunner
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): $r0 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserSecurityService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetailsService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): service list = [$r1=com.bookstore.service.impl.CartItemServiceImpl, $r0=com.bookstore.service.impl.CartItemServiceImpl]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = id := @parameter0: java.lang.Long
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r2 = interfaceinvoke $r0.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r1.<com.bookstore.service.impl.CartItemService: void removeCartItem(com.bookstore.domain.CartItem)>($r2)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r1.<com.bookstore.service.impl.CartItemService: void removeCartItem(com.bookstore.domain.CartItem)>($r2)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookServiceImpl bookServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "forward:/shoppingCart/cart"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String removeItem(java.lang.Long)
    {
        com.bookstore.controller.ShoppingCartController this;
        java.lang.Long id;
        com.bookstore.service.impl.CartItemService $r0, $r1;
        com.bookstore.domain.CartItem $r2;

        this := @this: com.bookstore.controller.ShoppingCartController;

        id := @parameter0: java.lang.Long;

        $r1 = new com.bookstore.service.impl.CartItemServiceImpl;

        $r0 = new com.bookstore.service.impl.CartItemServiceImpl;

        $r2 = interfaceinvoke $r0.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem findById(java.lang.Long)>(id);

        virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)>($r2);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1;

        return "forward:/shoppingCart/cart";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = id := @parameter0: java.lang.Long
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r2 = interfaceinvoke $r0.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookServiceImpl bookServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)>($r2)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "forward:/shoppingCart/cart"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String removeItem(java.lang.Long)
    {
        com.bookstore.controller.ShoppingCartController this;
        java.lang.Long id;
        com.bookstore.service.impl.CartItemService $r0, $r1;
        com.bookstore.domain.CartItem $r2;

        this := @this: com.bookstore.controller.ShoppingCartController;

        id := @parameter0: java.lang.Long;

        $r1 = new com.bookstore.service.impl.CartItemServiceImpl;

        $r0 = new com.bookstore.service.impl.CartItemServiceImpl;

        $r2 = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r0;

        virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)>($r2);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1;

        return "forward:/shoppingCart/cart";
    }

FuncStackAnalyzer.java: constructDIRForStack(): FSA: constructDIRsForStack: Stack = [com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.domain.CartItem: int getQty()]
FuncStackAnalyzer.java: constructDIRForStack(): top function sig: com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)
FuncStackAnalyzer.java: constructDIRForStack(): body rootmethod before analysis: [this := @this: com.bookstore.controller.ShoppingCartController, model := @parameter0: org.springframework.ui.Model, principal := @parameter1: java.security.Principal, $r0 = new com.bookstore.service.impl.UserServiceImpl, $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>(), user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1), this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0, shoppingCart = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>(), $r2 = new com.bookstore.service.impl.CartItemServiceImpl, cartItemList = virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart), this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r2, $r3 = new com.bookstore.service.impl.ShoppingCartServiceImpl, virtualinvoke $r3.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart), this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl> = $r3, interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList), interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart), return "shoppingCart"]
FuncStackAnalyzer.java: constructDIRForStack(): Top level func i.e. com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)has typemap: {}
ARegion.java: analyze(): set cur method of analyzer to: shoppingCart
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.bookstore.controller.ShoppingCartController, model := @parameter0: org.springframework.ui.Model, principal := @parameter1: java.security.Principal, $r0 = new com.bookstore.service.impl.UserServiceImpl, $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>(), user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1), this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0, shoppingCart = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>(), $r2 = new com.bookstore.service.impl.CartItemServiceImpl, cartItemList = virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart), this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r2, $r3 = new com.bookstore.service.impl.ShoppingCartServiceImpl, virtualinvoke $r3.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart), this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl> = $r3, interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList), interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart), return "shoppingCart"]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.bookstore.controller.ShoppingCartController
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = model := @parameter0: org.springframework.ui.Model
DIRRegionAnalyzer.java: constructDIR(): curUnit = principal := @parameter1: java.security.Principal
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = new com.bookstore.service.impl.UserServiceImpl
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = getName
construct/Utils.java: parseInvokeExpr(): methodSignature = java.security.Principal: java.lang.String getName()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.security.Principal: java.lang.String getName()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.security.Principal: java.lang.String getName()>
construct/Utils.java: parseObjectInvoke(): methodName = getName
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.security.Principal: java.lang.String getName()
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
construct/Utils.java: parseObjectInvoke(): method wont handle 4
DIRRegionAnalyzer.java: constructDIR(): Wont handle this method
DIRRegionAnalyzer.java: constructDIR(): curUnit = user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = findByUsername
construct/Utils.java: parseInvokeExpr(): methodSignature = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
construct/Utils.java: parseObjectInvoke(): virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>
construct/Utils.java: parseObjectInvoke(): methodName = findByUsername
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
construct/Utils.java: parseObjectInvoke(): methodSignature = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
construct/Utils.java: parseObjectInvoke(): Case : findBy
Utils.java: getRelExpForMethod(): getRelExpForMethod: virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
Utils.java: getRelExpForMethod(): actualargs = [$r1]
Utils.java: getRelExpForMethod(): methodInvoked = <com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>
Utils.java: getRelExpForMethod(): taglist: 
[]
construct/Utils.java: parseObjectInvoke(): relExpFor method : virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
construct/Utils.java: parseObjectInvoke(): expr : null
DIRRegionAnalyzer.java: valIsRepository(): fpar val: $r0
DIRRegionAnalyzer.java: valIsRepository(): refType: com.bookstore.service.impl.UserService
DIRRegionAnalyzer.java: valIsRepository(): valClass: com.bookstore.service.impl.UserService
DIRRegionAnalyzer.java: valIsRepository(): ret: false
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: findByUsername
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.bookstore.service.impl.UserServiceImpl, username := @parameter0: java.lang.String, $r0 = this.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.repository.UserRepository userRepository>, $r1 = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username), return $r1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.bookstore.service.impl.UserServiceImpl
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = username := @parameter0: java.lang.String
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.repository.UserRepository userRepository>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r0 -> this.userRepository
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = findByUsername
construct/Utils.java: parseInvokeExpr(): methodSignature = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
construct/Utils.java: parseObjectInvoke(): interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>
construct/Utils.java: parseObjectInvoke(): methodName = findByUsername
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
construct/Utils.java: parseObjectInvoke(): methodSignature = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
construct/Utils.java: parseObjectInvoke(): Case : findBy
Utils.java: getRelExpForMethod(): getRelExpForMethod: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
Utils.java: getRelExpForMethod(): actualargs = [username]
Utils.java: getRelExpForMethod(): methodInvoked = <com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>
Utils.java: getRelExpForMethod(): taglist: 
[]
construct/Utils.java: parseObjectInvoke(): relExpFor method : interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
construct/Utils.java: parseObjectInvoke(): expr : null
DIRRegionAnalyzer.java: valIsRepository(): fpar val: $r0
DIRRegionAnalyzer.java: valIsRepository(): refType: com.bookstore.repository.UserRepository
DIRRegionAnalyzer.java: valIsRepository(): valClass: com.bookstore.repository.UserRepository
DIRRegionAnalyzer.java: valIsRepository(): ret: true
construct/Utils.java: parseObjectInvoke(): retTypeStr: com.bookstore.domain.User
construct/Utils.java: parseObjectInvoke(): retType = com.bookstore.domain.User
construct/Utils.java: parseObjectInvoke(): entityClass = com.bookstore.domain.User
construct/Utils.java: parseObjectInvoke(): tableName = com.bookstore.domain.User
construct/Utils.java: parseObjectInvoke(): check = Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username
construct/Utils.java: parseObjectInvoke(): attributes = [id, username, password, firstName, lastName, email, phone, enabled]
construct/Utils.java: parseObjectInvoke(): retAccp: return
cosntruct/utils.java: mapDBFetchAccessGraph(): check relExpBaseAccp= Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username
cosntruct/utils.java: mapDBFetchAccessGraph(): check = Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp
cosntruct/utils.java: mapDBFetchAccessGraph(): check relExpBaseAccp= Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp
cosntruct/utils.java: mapDBFetchAccessGraph(): check = Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userShippingList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userPaymentList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userRoles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set userRoles [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
construct/Utils.java: parseObjectInvoke(): dir after mapDBFetchAccessGraph: {return.phone=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone, return.shoppingCart.user=Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp, return.userShippingList=Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.UserShipping)
| NullOp, return.email=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email, return.lastName=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName, return.shoppingCart=Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp, return.userRoles=Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.security.UserRole)
| NullOp, return.shoppingCart.id=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id), return.shoppingCart.cartItemList=Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp, return.userPaymentList=Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.UserPayment)
| NullOp, return.username=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username, return.password=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password, return.enabled=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled, return.firstName=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName, return.id=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id, return.shoppingCart.GrandTotal=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal), return=Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username}
construct/Utils.java: parseObjectInvoke(): @Query not present, relnode = Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = com.bookstore.domain.User
DIRRegionAnalyzer.java: constructDIR(): leftType : com.bookstore.domain.User
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: $r1
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: constructDIR(): left type = com.bookstore.domain.User
DIRRegionAnalyzer.java: constructDIR(): com.bookstore.domain.User
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: com.bookstore.domain.User
DIRRegionAnalyzer.java: constructDIR(): method sig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp

~~~ return.shoppingCart.GrandTotal ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ return.shoppingCart.cartItemList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.shoppingCart.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ return.shoppingCart.user ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp

~~~ return.userPaymentList ~~~
Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.UserPayment)
| NullOp

~~~ return.userRoles ~~~
Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.security.UserRole)
| NullOp

~~~ return.userShippingList ~~~
Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.UserShipping)
| NullOp

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp

~~~ return.shoppingCart.GrandTotal ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ return.shoppingCart.cartItemList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.shoppingCart.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ return.shoppingCart.user ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp

~~~ return.userPaymentList ~~~
Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.UserPayment)
| NullOp

~~~ return.userRoles ~~~
Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.security.UserRole)
| NullOp

~~~ return.userShippingList ~~~
Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.UserShipping)
| NullOp

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [User.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
, [inner=java/lang/invoke/MethodHandles$Lookup, outer=java/lang/invoke/MethodHandles, name=Lookup,flags=25]]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): leftType = com.bookstore.domain.User
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: findByUsername
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = $r1, com.bookstore.domain.User
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callee = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
Flatten.java: getNestedFields(): LVAL TYPE: com.bookstore.domain.User
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.lang.Long id> = java.lang.Long
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: id
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
Flatten.java: getNestedFields(): Id fields=id
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.lang.String username> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.lang.String password> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.lang.String firstName> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.lang.String lastName> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.lang.String email> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.lang.String phone> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: boolean enabled> = boolean
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart> = com.bookstore.domain.ShoppingCart
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
Flatten.java: getNestedFields(): check *ToOne sf: shoppingCart , type = com.bookstore.domain.ShoppingCart
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.util.List userShippingList> = java.util.List
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
Flatten.java: getNestedFields(): check *ToMany sf: userShippingList , type = java.util.List
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.util.List userPaymentList> = java.util.List
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
Flatten.java: getNestedFields(): check *ToMany sf: userPaymentList , type = java.util.List
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.util.Set userRoles> = java.util.Set
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
Flatten.java: getNestedFields(): check *ToMany sf: userRoles , type = java.util.Set
Flatten.java: getNestedFields(): returning: [<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
DIRRegionAnalyzer.java: constructDIR(): check nestedFields=[<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=User
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shoppingCart
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): key= return.shoppingCart
 value= Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): nested field name= shoppingCart
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: genExprNra(): com.bookstore.domain.ShoppingCart fields= [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: genExprNra(): children count = 4
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.User~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.User~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.User~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: LAZY

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
NRA.java: genExprNra(): visited String=  com.bookstore.domain.ShoppingCart~cartItemList
NRA.java: genExprNra(): visited = [com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shopping_cart_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| ShoppingCart.id
| CartItem.shopping_cart_id
NRA.java: genExprNra(): OneToMany Field
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nested field name= cartItemList
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.CartItem
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: genExprNra(): com.bookstore.domain.CartItem fields= [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: genExprNra(): children count = 7
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: int qty>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/OneToOne; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
NRA.java: genExprNra(): visited String=  com.bookstore.domain.CartItem~book
NRA.java: genExprNra(): visited = [com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nested field name= book
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Book
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>]
NRA.java: genExprNra(): com.bookstore.domain.Book fields= [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>]
NRA.java: genExprNra(): children count = 18
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String title>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String author>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publisher>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publicationDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String language>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String category>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int numberOfPages>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String format>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String isbn>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double shippingWeight>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double listPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double ourPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: boolean active>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String description>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: columnDefinition value: text

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int inStockNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Transient; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookImage
NRA.java: genExprNra(): visited String=  com.bookstore.domain.Book~bookImage
NRA.java: genExprNra(): visited = [com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/Transient;
Construct/Utils.java: bcelActualCollectionFieldType(): Transient field= bookImage
NRA.java: genExprNra(): sfEntity=org.springframework.web.multipart.MultipartFile
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = MultipartFile
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.util.List bookToCartItemsList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemsList
NRA.java: genExprNra(): visited String=  com.bookstore.domain.Book~bookToCartItemsList
NRA.java: genExprNra(): visited = [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  book_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Book.id
| BookToCartItem.book_id
NRA.java: genExprNra(): OneToMany Field
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nested field name= bookToCartItemsList
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): com.bookstore.domain.BookToCartItem fields= [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): children count = 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: book_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
NRA.java: genExprNra(): visited String=  com.bookstore.domain.BookToCartItem~book
NRA.java: genExprNra(): visited = [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  book_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: book_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| BookToCartItem.book_id
| Book.id
NRA.java: genExprNra(): ManyToOne Field
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nested field name= book
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Book
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>]
NRA.java: genExprNra(): com.bookstore.domain.Book fields= [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>]
NRA.java: genExprNra(): <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.Book: java.util.List bookToCartItemsList> Field is visited skipping count
NRA.java: genExprNra(): children count = 16
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String title>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String author>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publisher>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publicationDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String language>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String category>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int numberOfPages>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String format>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String isbn>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double shippingWeight>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double listPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double ourPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: boolean active>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String description>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: columnDefinition value: text

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int inStockNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Transient; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookImage
NRA.java: genExprNra(): visited String=  com.bookstore.domain.Book~bookImage
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.util.List bookToCartItemsList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemsList
NRA.java: genExprNra(): visited String=  com.bookstore.domain.Book~bookToCartItemsList
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Book.id), FieldRef(com.bookstore.domain.Book.title), FieldRef(com.bookstore.domain.Book.author), FieldRef(com.bookstore.domain.Book.publisher), FieldRef(com.bookstore.domain.Book.publicationDate), FieldRef(com.bookstore.domain.Book.language), FieldRef(com.bookstore.domain.Book.category), FieldRef(com.bookstore.domain.Book.numberOfPages), FieldRef(com.bookstore.domain.Book.format), FieldRef(com.bookstore.domain.Book.isbn), FieldRef(com.bookstore.domain.Book.shippingWeight), FieldRef(com.bookstore.domain.Book.listPrice), FieldRef(com.bookstore.domain.Book.ourPrice), FieldRef(com.bookstore.domain.Book.active), FieldRef(com.bookstore.domain.Book.description), FieldRef(com.bookstore.domain.Book.inStockNumber)]
NRA.java: genExprNra(): projectNode name: BookToCartItem.book=Pi
NRA.java: genExprNra(): nestexpr= BookToCartItem.book=Pi
| Join
| | ClassRef(BookToCartItem)
| | ClassRef(Book)
| | Equals
| | | BookToCartItem.book_id
| | | Book.id
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cart_tem_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
NRA.java: genExprNra(): visited String=  com.bookstore.domain.BookToCartItem~cartItem
NRA.java: genExprNra(): visited = [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.BookToCartItem~cartItem]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cart_tem_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cart_tem_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| BookToCartItem.cart_tem_id
| CartItem.id
NRA.java: genExprNra(): ManyToOne Field
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nested field name= cartItem
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.CartItem
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: genExprNra(): com.bookstore.domain.CartItem fields= [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: genExprNra(): <com.bookstore.domain.CartItem: com.bookstore.domain.Book book> Field is visited skipping count
NRA.java: genExprNra(): children count = 6
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: int qty>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/OneToOne; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
NRA.java: genExprNra(): visited String=  com.bookstore.domain.CartItem~book
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.util.List bookToCartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemList
NRA.java: genExprNra(): visited String=  com.bookstore.domain.CartItem~bookToCartItemList
NRA.java: genExprNra(): visited = [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.BookToCartItem~cartItem]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cart_tem_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| CartItem.id
| BookToCartItem.cart_tem_id
NRA.java: genExprNra(): OneToMany Field
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nested field name= bookToCartItemList
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): com.bookstore.domain.BookToCartItem fields= [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem> Field is visited skipping count
NRA.java: genExprNra(): children count = 1
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: book_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
NRA.java: genExprNra(): visited String=  com.bookstore.domain.BookToCartItem~book
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cart_tem_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
NRA.java: genExprNra(): visited String=  com.bookstore.domain.BookToCartItem~cartItem
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.BookToCartItem.id)]
NRA.java: genExprNra(): projectNode name: CartItem.bookToCartItemList=Pi
NRA.java: genExprNra(): nestexpr= CartItem.bookToCartItemList=Pi
| Join
| | ClassRef(CartItem)
| | ClassRef(BookToCartItem)
| | Equals
| | | CartItem.id
| | | BookToCartItem.cart_tem_id
| List
| | id
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shopping_cart_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
NRA.java: genExprNra(): visited String=  com.bookstore.domain.CartItem~shoppingCart
NRA.java: genExprNra(): visited = [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.BookToCartItem~cartItem]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= shoppingCart
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = ShoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shopping_cart_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shopping_cart_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| CartItem.shopping_cart_id
| ShoppingCart.id
NRA.java: genExprNra(): ManyToOne Field
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): nested field name= shoppingCart
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: genExprNra(): com.bookstore.domain.ShoppingCart fields= [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: genExprNra(): <com.bookstore.domain.ShoppingCart: java.util.List cartItemList> Field is visited skipping count
NRA.java: genExprNra(): children count = 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: LAZY

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
NRA.java: genExprNra(): visited String=  com.bookstore.domain.ShoppingCart~cartItemList
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
NRA.java: genExprNra(): visited String=  com.bookstore.domain.ShoppingCart~user
NRA.java: genExprNra(): visited = [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = User
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nested field name= user
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.User
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.User: java.lang.Long id>, <com.bookstore.domain.User: java.lang.String username>, <com.bookstore.domain.User: java.lang.String password>, <com.bookstore.domain.User: java.lang.String firstName>, <com.bookstore.domain.User: java.lang.String lastName>, <com.bookstore.domain.User: java.lang.String email>, <com.bookstore.domain.User: java.lang.String phone>, <com.bookstore.domain.User: boolean enabled>, <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
NRA.java: genExprNra(): com.bookstore.domain.User fields= [<com.bookstore.domain.User: java.lang.Long id>, <com.bookstore.domain.User: java.lang.String username>, <com.bookstore.domain.User: java.lang.String password>, <com.bookstore.domain.User: java.lang.String firstName>, <com.bookstore.domain.User: java.lang.String lastName>, <com.bookstore.domain.User: java.lang.String email>, <com.bookstore.domain.User: java.lang.String phone>, <com.bookstore.domain.User: boolean enabled>, <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
NRA.java: genExprNra(): <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart> Field is visited skipping count
NRA.java: genExprNra(): children count = 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: id
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String username>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String password>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String firstName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String phone>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: boolean enabled>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
NRA.java: genExprNra(): visited String=  com.bookstore.domain.User~shoppingCart
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userShippingList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userShippingList
NRA.java: genExprNra(): visited String=  com.bookstore.domain.User~userShippingList
NRA.java: genExprNra(): visited = [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userShippingList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserShipping
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = UserShipping
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| User.id
| UserShipping.user_id
NRA.java: genExprNra(): OneToMany Field
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserShipping
NRA.java: genExprNra(): nested field name= userShippingList
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.UserShipping
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.UserShipping: java.lang.Long id>, <com.bookstore.domain.UserShipping: java.lang.String userShippingName>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCity>, <com.bookstore.domain.UserShipping: java.lang.String userShippingState>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>, <com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>, <com.bookstore.domain.UserShipping: boolean userShippingDefault>, <com.bookstore.domain.UserShipping: com.bookstore.domain.User user>]
NRA.java: genExprNra(): com.bookstore.domain.UserShipping fields= [<com.bookstore.domain.UserShipping: java.lang.Long id>, <com.bookstore.domain.UserShipping: java.lang.String userShippingName>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCity>, <com.bookstore.domain.UserShipping: java.lang.String userShippingState>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>, <com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>, <com.bookstore.domain.UserShipping: boolean userShippingDefault>, <com.bookstore.domain.UserShipping: com.bookstore.domain.User user>]
NRA.java: genExprNra(): children count = 10
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingCity>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingState>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: boolean userShippingDefault>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
NRA.java: genExprNra(): visited String=  com.bookstore.domain.UserShipping~user
NRA.java: genExprNra(): visited = [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.UserShipping
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingStreet1
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingStreet2
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingCity
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingState
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingCountry
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingZipcode
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean userShippingDefault
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = UserShipping
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| UserShipping.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nested field name= user
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.User
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.User: java.lang.Long id>, <com.bookstore.domain.User: java.lang.String username>, <com.bookstore.domain.User: java.lang.String password>, <com.bookstore.domain.User: java.lang.String firstName>, <com.bookstore.domain.User: java.lang.String lastName>, <com.bookstore.domain.User: java.lang.String email>, <com.bookstore.domain.User: java.lang.String phone>, <com.bookstore.domain.User: boolean enabled>, <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
NRA.java: genExprNra(): com.bookstore.domain.User fields= [<com.bookstore.domain.User: java.lang.Long id>, <com.bookstore.domain.User: java.lang.String username>, <com.bookstore.domain.User: java.lang.String password>, <com.bookstore.domain.User: java.lang.String firstName>, <com.bookstore.domain.User: java.lang.String lastName>, <com.bookstore.domain.User: java.lang.String email>, <com.bookstore.domain.User: java.lang.String phone>, <com.bookstore.domain.User: boolean enabled>, <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
NRA.java: genExprNra(): <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.User: java.util.List userShippingList> Field is visited skipping count
NRA.java: genExprNra(): children count = 10
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: id
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String username>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String password>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String firstName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String phone>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: boolean enabled>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
NRA.java: genExprNra(): visited String=  com.bookstore.domain.User~shoppingCart
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userShippingList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userShippingList
NRA.java: genExprNra(): visited String=  com.bookstore.domain.User~userShippingList
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userPaymentList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userPaymentList
NRA.java: genExprNra(): visited String=  com.bookstore.domain.User~userPaymentList
NRA.java: genExprNra(): visited = [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userPaymentList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserPayment
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = UserPayment
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| User.id
| UserPayment.user_id
NRA.java: genExprNra(): OneToMany Field
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserPayment
NRA.java: genExprNra(): nested field name= userPaymentList
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.UserPayment
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.UserPayment: java.lang.Long id>, <com.bookstore.domain.UserPayment: java.lang.String type>, <com.bookstore.domain.UserPayment: java.lang.String cardName>, <com.bookstore.domain.UserPayment: java.lang.String cardNumber>, <com.bookstore.domain.UserPayment: int expiryMonth>, <com.bookstore.domain.UserPayment: int expiryYear>, <com.bookstore.domain.UserPayment: int cvc>, <com.bookstore.domain.UserPayment: java.lang.String holderName>, <com.bookstore.domain.UserPayment: boolean defaultPayment>, <com.bookstore.domain.UserPayment: com.bookstore.domain.User user>, <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>]
NRA.java: genExprNra(): com.bookstore.domain.UserPayment fields= [<com.bookstore.domain.UserPayment: java.lang.Long id>, <com.bookstore.domain.UserPayment: java.lang.String type>, <com.bookstore.domain.UserPayment: java.lang.String cardName>, <com.bookstore.domain.UserPayment: java.lang.String cardNumber>, <com.bookstore.domain.UserPayment: int expiryMonth>, <com.bookstore.domain.UserPayment: int expiryYear>, <com.bookstore.domain.UserPayment: int cvc>, <com.bookstore.domain.UserPayment: java.lang.String holderName>, <com.bookstore.domain.UserPayment: boolean defaultPayment>, <com.bookstore.domain.UserPayment: com.bookstore.domain.User user>, <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>]
NRA.java: genExprNra(): children count = 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String type>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String cardName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String cardNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int expiryMonth>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int expiryYear>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int cvc>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String holderName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: boolean defaultPayment>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
NRA.java: genExprNra(): visited String=  com.bookstore.domain.UserPayment~user
NRA.java: genExprNra(): visited = [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.UserPayment
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String type
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryMonth
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryYear
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int cvc
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String holderName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean defaultPayment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = UserPayment
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| UserPayment.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nested field name= user
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.User
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.User: java.lang.Long id>, <com.bookstore.domain.User: java.lang.String username>, <com.bookstore.domain.User: java.lang.String password>, <com.bookstore.domain.User: java.lang.String firstName>, <com.bookstore.domain.User: java.lang.String lastName>, <com.bookstore.domain.User: java.lang.String email>, <com.bookstore.domain.User: java.lang.String phone>, <com.bookstore.domain.User: boolean enabled>, <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
NRA.java: genExprNra(): com.bookstore.domain.User fields= [<com.bookstore.domain.User: java.lang.Long id>, <com.bookstore.domain.User: java.lang.String username>, <com.bookstore.domain.User: java.lang.String password>, <com.bookstore.domain.User: java.lang.String firstName>, <com.bookstore.domain.User: java.lang.String lastName>, <com.bookstore.domain.User: java.lang.String email>, <com.bookstore.domain.User: java.lang.String phone>, <com.bookstore.domain.User: boolean enabled>, <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
NRA.java: genExprNra(): <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.User: java.util.List userShippingList> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.User: java.util.List userPaymentList> Field is visited skipping count
NRA.java: genExprNra(): children count = 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: id
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String username>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String password>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String firstName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String phone>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: boolean enabled>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
NRA.java: genExprNra(): visited String=  com.bookstore.domain.User~shoppingCart
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userShippingList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userShippingList
NRA.java: genExprNra(): visited String=  com.bookstore.domain.User~userShippingList
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userPaymentList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userPaymentList
NRA.java: genExprNra(): visited String=  com.bookstore.domain.User~userPaymentList
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.Set userRoles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userRoles
NRA.java: genExprNra(): visited String=  com.bookstore.domain.User~userRoles
NRA.java: genExprNra(): visited = [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userRoles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set userRoles [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = UserRole
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| User.id
| UserRole.user_id
NRA.java: genExprNra(): OneToMany Field
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): nested field name= userRoles
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>]
NRA.java: genExprNra(): com.bookstore.domain.security.UserRole fields= [<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>]
NRA.java: genExprNra(): children count = 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToOne; num elems: 1 elems: 
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
NRA.java: genExprNra(): visited String=  com.bookstore.domain.security.UserRole~user
NRA.java: genExprNra(): visited = [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.security.UserRole
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long userRoleId [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = UserRole
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| UserRole.user_id
| User.userRoleId
NRA.java: genExprNra(): ManyToOne Field
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nested field name= user
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.User
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.User: java.lang.Long id>, <com.bookstore.domain.User: java.lang.String username>, <com.bookstore.domain.User: java.lang.String password>, <com.bookstore.domain.User: java.lang.String firstName>, <com.bookstore.domain.User: java.lang.String lastName>, <com.bookstore.domain.User: java.lang.String email>, <com.bookstore.domain.User: java.lang.String phone>, <com.bookstore.domain.User: boolean enabled>, <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
NRA.java: genExprNra(): com.bookstore.domain.User fields= [<com.bookstore.domain.User: java.lang.Long id>, <com.bookstore.domain.User: java.lang.String username>, <com.bookstore.domain.User: java.lang.String password>, <com.bookstore.domain.User: java.lang.String firstName>, <com.bookstore.domain.User: java.lang.String lastName>, <com.bookstore.domain.User: java.lang.String email>, <com.bookstore.domain.User: java.lang.String phone>, <com.bookstore.domain.User: boolean enabled>, <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
NRA.java: genExprNra(): <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.User: java.util.List userShippingList> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.User: java.util.List userPaymentList> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.User: java.util.Set userRoles> Field is visited skipping count
NRA.java: genExprNra(): children count = 8
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: id
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String username>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String password>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String firstName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String phone>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: boolean enabled>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
NRA.java: genExprNra(): visited String=  com.bookstore.domain.User~shoppingCart
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userShippingList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userShippingList
NRA.java: genExprNra(): visited String=  com.bookstore.domain.User~userShippingList
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userPaymentList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userPaymentList
NRA.java: genExprNra(): visited String=  com.bookstore.domain.User~userPaymentList
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.Set userRoles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userRoles
NRA.java: genExprNra(): visited String=  com.bookstore.domain.User~userRoles
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.User.id), FieldRef(com.bookstore.domain.User.username), FieldRef(com.bookstore.domain.User.password), FieldRef(com.bookstore.domain.User.firstName), FieldRef(com.bookstore.domain.User.lastName), FieldRef(com.bookstore.domain.User.email), FieldRef(com.bookstore.domain.User.phone), FieldRef(com.bookstore.domain.User.enabled)]
NRA.java: genExprNra(): projectNode name: UserRole.user=Pi
NRA.java: genExprNra(): nestexpr= UserRole.user=Pi
| Join
| | ClassRef(UserRole)
| | ClassRef(User)
| | Equals
| | | UserRole.user_id
| | | User.userRoleId
| List
| | id
| | username
| | password
| | firstName
| | lastName
| | email
| | phone
| | enabled
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToOne; num elems: 1 elems: 
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=role
NRA.java: genExprNra(): visited String=  com.bookstore.domain.security.UserRole~role
NRA.java: genExprNra(): visited = [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.security.UserRole
 fieldName= role
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long userRoleId [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.security.Role role [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= role
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.security.Role
NRA.java: genExprNra(): baseclass = UserRole
NRA.java: genExprNra(): fieldclass = Role
NRA.java: getJoinedColumn(): joined Column value=  role_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: role_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| UserRole.role_id
| Role.userRoleId
NRA.java: genExprNra(): ManyToOne Field
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.security.Role
NRA.java: genExprNra(): nested field name= role
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.security.Role
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.security.Role: int roleId>, <com.bookstore.domain.security.Role: java.lang.String name>, <com.bookstore.domain.security.Role: java.util.Set userRoles>]
NRA.java: genExprNra(): com.bookstore.domain.security.Role fields= [<com.bookstore.domain.security.Role: int roleId>, <com.bookstore.domain.security.Role: java.lang.String name>, <com.bookstore.domain.security.Role: java.util.Set userRoles>]
NRA.java: genExprNra(): children count = 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.Role: int roleId>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.Role: java.lang.String name>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.Role: java.util.Set userRoles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: role
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: LAZY

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userRoles
NRA.java: genExprNra(): visited String=  com.bookstore.domain.security.Role~userRoles
NRA.java: genExprNra(): visited = [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.security.Role
 fieldName= userRoles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int roleId [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set userRoles [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): baseclass = Role
NRA.java: genExprNra(): fieldclass = UserRole
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= role
NRA.java: getJoinedColumn(): joined Column value=  role_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Role.roleId
| UserRole.role_id
NRA.java: genExprNra(): OneToMany Field
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): nested field name= userRoles
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>]
NRA.java: genExprNra(): com.bookstore.domain.security.UserRole fields= [<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>]
NRA.java: genExprNra(): <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role> Field is visited skipping count
NRA.java: genExprNra(): children count = 1
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToOne; num elems: 1 elems: 
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
NRA.java: genExprNra(): visited String=  com.bookstore.domain.security.UserRole~user
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToOne; num elems: 1 elems: 
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=role
NRA.java: genExprNra(): visited String=  com.bookstore.domain.security.UserRole~role
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.security.UserRole.userRoleId)]
NRA.java: genExprNra(): projectNode name: Role.userRoles=Pi
NRA.java: genExprNra(): nestexpr= Role.userRoles=Pi
| Join
| | ClassRef(Role)
| | ClassRef(UserRole)
| | Equals
| | | Role.roleId
| | | UserRole.role_id
| List
| | userRoleId
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.security.Role.roleId), FieldRef(com.bookstore.domain.security.Role.name), FieldRef(com.bookstore.domain.security.Role.userRoles)]
NRA.java: genExprNra(): projectNode name: UserRole.role=Pi
NRA.java: genExprNra(): nestexpr= UserRole.role=Pi
| Join
| | ClassRef(UserRole)
| | ClassRef(Role)
| | Equals
| | | UserRole.role_id
| | | Role.userRoleId
| List
| | roleId
| | name
| | Role.userRoles=Pi
| | | Join
| | | | ClassRef(Role)
| | | | ClassRef(UserRole)
| | | | Equals
| | | | | Role.roleId
| | | | | UserRole.role_id
| | | List
| | | | userRoleId
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.security.UserRole.userRoleId), FieldRef(com.bookstore.domain.security.UserRole.user), FieldRef(com.bookstore.domain.security.UserRole.role)]
NRA.java: genExprNra(): projectNode name: User.userRoles=Pi
NRA.java: genExprNra(): nestexpr= User.userRoles=Pi
| Join
| | ClassRef(User)
| | ClassRef(UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId
| | UserRole.user=Pi
| | | Join
| | | | ClassRef(UserRole)
| | | | ClassRef(User)
| | | | Equals
| | | | | UserRole.user_id
| | | | | User.userRoleId
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | UserRole.role=Pi
| | | Join
| | | | ClassRef(UserRole)
| | | | ClassRef(Role)
| | | | Equals
| | | | | UserRole.role_id
| | | | | Role.userRoleId
| | | List
| | | | roleId
| | | | name
| | | | Role.userRoles=Pi
| | | | | Join
| | | | | | ClassRef(Role)
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Role.roleId
| | | | | | | UserRole.role_id
| | | | | List
| | | | | | userRoleId
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.User.id), FieldRef(com.bookstore.domain.User.username), FieldRef(com.bookstore.domain.User.password), FieldRef(com.bookstore.domain.User.firstName), FieldRef(com.bookstore.domain.User.lastName), FieldRef(com.bookstore.domain.User.email), FieldRef(com.bookstore.domain.User.phone), FieldRef(com.bookstore.domain.User.enabled), FieldRef(com.bookstore.domain.User.userRoles)]
NRA.java: genExprNra(): projectNode name: UserPayment.user=Pi
NRA.java: genExprNra(): nestexpr= UserPayment.user=Pi
| Join
| | ClassRef(UserPayment)
| | ClassRef(User)
| | Equals
| | | UserPayment.user_id
| | | User.id
| List
| | id
| | username
| | password
| | firstName
| | lastName
| | email
| | phone
| | enabled
| | User.userRoles=Pi
| | | Join
| | | | ClassRef(User)
| | | | ClassRef(UserRole)
| | | | Equals
| | | | | User.id
| | | | | UserRole.user_id
| | | List
| | | | userRoleId
| | | | UserRole.user=Pi
| | | | | Join
| | | | | | ClassRef(UserRole)
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | UserRole.user_id
| | | | | | | User.userRoleId
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | UserRole.role=Pi
| | | | | Join
| | | | | | ClassRef(UserRole)
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | UserRole.role_id
| | | | | | | Role.userRoleId
| | | | | List
| | | | | | roleId
| | | | | | name
| | | | | | Role.userRoles=Pi
| | | | | | | Join
| | | | | | | | ClassRef(Role)
| | | | | | | | ClassRef(UserRole)
| | | | | | | | Equals
| | | | | | | | | Role.roleId
| | | | | | | | | UserRole.role_id
| | | | | | | List
| | | | | | | | userRoleId
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: userPayment

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=userBilling
NRA.java: genExprNra(): visited String=  com.bookstore.domain.UserPayment~userBilling
NRA.java: genExprNra(): visited = [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.UserPayment
 fieldName= userBilling
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String type
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryMonth
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryYear
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int cvc
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String holderName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean defaultPayment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.UserBilling userBilling [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= userBilling
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserBilling
NRA.java: genExprNra(): baseclass = UserPayment
NRA.java: genExprNra(): fieldclass = UserBilling
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserBilling
NRA.java: genExprNra(): nested field name= userBilling
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.UserBilling
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.UserBilling: java.lang.Long id>, <com.bookstore.domain.UserBilling: java.lang.String userBillingName>, <com.bookstore.domain.UserBilling: java.lang.String userBillingStreet1>, <com.bookstore.domain.UserBilling: java.lang.String userBillingStreet2>, <com.bookstore.domain.UserBilling: java.lang.String userBillingCity>, <com.bookstore.domain.UserBilling: java.lang.String userBillingState>, <com.bookstore.domain.UserBilling: java.lang.String userBillingCountry>, <com.bookstore.domain.UserBilling: java.lang.String userBillingZipcode>, <com.bookstore.domain.UserBilling: com.bookstore.domain.UserPayment userPayment>]
NRA.java: genExprNra(): com.bookstore.domain.UserBilling fields= [<com.bookstore.domain.UserBilling: java.lang.Long id>, <com.bookstore.domain.UserBilling: java.lang.String userBillingName>, <com.bookstore.domain.UserBilling: java.lang.String userBillingStreet1>, <com.bookstore.domain.UserBilling: java.lang.String userBillingStreet2>, <com.bookstore.domain.UserBilling: java.lang.String userBillingCity>, <com.bookstore.domain.UserBilling: java.lang.String userBillingState>, <com.bookstore.domain.UserBilling: java.lang.String userBillingCountry>, <com.bookstore.domain.UserBilling: java.lang.String userBillingZipcode>, <com.bookstore.domain.UserBilling: com.bookstore.domain.UserPayment userPayment>]
NRA.java: genExprNra(): children count = 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingStreet1>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingStreet2>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingCity>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingState>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingCountry>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingZipcode>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: com.bookstore.domain.UserPayment userPayment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=userPayment
NRA.java: genExprNra(): visited String=  com.bookstore.domain.UserBilling~userPayment
NRA.java: genExprNra(): visited = [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.UserBilling
 fieldName= userPayment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingStreet1
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingStreet2
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingCity
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingState
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingCountry
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingZipcode
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.UserPayment userPayment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= userPayment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserPayment
NRA.java: genExprNra(): baseclass = UserBilling
NRA.java: genExprNra(): fieldclass = UserPayment
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserPayment
NRA.java: genExprNra(): nested field name= userPayment
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.UserPayment
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.UserPayment: java.lang.Long id>, <com.bookstore.domain.UserPayment: java.lang.String type>, <com.bookstore.domain.UserPayment: java.lang.String cardName>, <com.bookstore.domain.UserPayment: java.lang.String cardNumber>, <com.bookstore.domain.UserPayment: int expiryMonth>, <com.bookstore.domain.UserPayment: int expiryYear>, <com.bookstore.domain.UserPayment: int cvc>, <com.bookstore.domain.UserPayment: java.lang.String holderName>, <com.bookstore.domain.UserPayment: boolean defaultPayment>, <com.bookstore.domain.UserPayment: com.bookstore.domain.User user>, <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>]
NRA.java: genExprNra(): com.bookstore.domain.UserPayment fields= [<com.bookstore.domain.UserPayment: java.lang.Long id>, <com.bookstore.domain.UserPayment: java.lang.String type>, <com.bookstore.domain.UserPayment: java.lang.String cardName>, <com.bookstore.domain.UserPayment: java.lang.String cardNumber>, <com.bookstore.domain.UserPayment: int expiryMonth>, <com.bookstore.domain.UserPayment: int expiryYear>, <com.bookstore.domain.UserPayment: int cvc>, <com.bookstore.domain.UserPayment: java.lang.String holderName>, <com.bookstore.domain.UserPayment: boolean defaultPayment>, <com.bookstore.domain.UserPayment: com.bookstore.domain.User user>, <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>]
NRA.java: genExprNra(): <com.bookstore.domain.UserPayment: com.bookstore.domain.User user> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling> Field is visited skipping count
NRA.java: genExprNra(): children count = 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String type>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String cardName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String cardNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int expiryMonth>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int expiryYear>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int cvc>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String holderName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: boolean defaultPayment>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
NRA.java: genExprNra(): visited String=  com.bookstore.domain.UserPayment~user
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: userPayment

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=userBilling
NRA.java: genExprNra(): visited String=  com.bookstore.domain.UserPayment~userBilling
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.UserPayment.id), FieldRef(com.bookstore.domain.UserPayment.type), FieldRef(com.bookstore.domain.UserPayment.cardName), FieldRef(com.bookstore.domain.UserPayment.cardNumber), FieldRef(com.bookstore.domain.UserPayment.expiryMonth), FieldRef(com.bookstore.domain.UserPayment.expiryYear), FieldRef(com.bookstore.domain.UserPayment.cvc), FieldRef(com.bookstore.domain.UserPayment.holderName), FieldRef(com.bookstore.domain.UserPayment.defaultPayment)]
NRA.java: genExprNra(): projectNode name: UserBilling.userPayment=Pi
NRA.java: genExprNra(): nestexpr= UserBilling.userPayment=Pi
| Join
| | ClassRef(UserBilling)
| | ClassRef(UserPayment)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.UserBilling.id), FieldRef(com.bookstore.domain.UserBilling.userBillingName), FieldRef(com.bookstore.domain.UserBilling.userBillingStreet1), FieldRef(com.bookstore.domain.UserBilling.userBillingStreet2), FieldRef(com.bookstore.domain.UserBilling.userBillingCity), FieldRef(com.bookstore.domain.UserBilling.userBillingState), FieldRef(com.bookstore.domain.UserBilling.userBillingCountry), FieldRef(com.bookstore.domain.UserBilling.userBillingZipcode), FieldRef(com.bookstore.domain.UserBilling.userPayment)]
NRA.java: genExprNra(): projectNode name: UserPayment.userBilling=Pi
NRA.java: genExprNra(): nestexpr= UserPayment.userBilling=Pi
| Join
| | ClassRef(UserPayment)
| | ClassRef(UserBilling)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | userBillingName
| | userBillingStreet1
| | userBillingStreet2
| | userBillingCity
| | userBillingState
| | userBillingCountry
| | userBillingZipcode
| | UserBilling.userPayment=Pi
| | | Join
| | | | ClassRef(UserBilling)
| | | | ClassRef(UserPayment)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | defaultPayment
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.UserPayment.id), FieldRef(com.bookstore.domain.UserPayment.type), FieldRef(com.bookstore.domain.UserPayment.cardName), FieldRef(com.bookstore.domain.UserPayment.cardNumber), FieldRef(com.bookstore.domain.UserPayment.expiryMonth), FieldRef(com.bookstore.domain.UserPayment.expiryYear), FieldRef(com.bookstore.domain.UserPayment.cvc), FieldRef(com.bookstore.domain.UserPayment.holderName), FieldRef(com.bookstore.domain.UserPayment.defaultPayment), FieldRef(com.bookstore.domain.UserPayment.user), FieldRef(com.bookstore.domain.UserPayment.userBilling)]
NRA.java: genExprNra(): projectNode name: User.userPaymentList=Pi
NRA.java: genExprNra(): nestexpr= User.userPaymentList=Pi
| Join
| | ClassRef(User)
| | ClassRef(UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
| | UserPayment.user=Pi
| | | Join
| | | | ClassRef(UserPayment)
| | | | ClassRef(User)
| | | | Equals
| | | | | UserPayment.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | ClassRef(User)
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | User.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | UserRole.user=Pi
| | | | | | | Join
| | | | | | | | ClassRef(UserRole)
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | UserRole.user_id
| | | | | | | | | User.userRoleId
| | | | | | | List
| | | | | | | | id
| | | | | | | | username
| | | | | | | | password
| | | | | | | | firstName
| | | | | | | | lastName
| | | | | | | | email
| | | | | | | | phone
| | | | | | | | enabled
| | | | | | UserRole.role=Pi
| | | | | | | Join
| | | | | | | | ClassRef(UserRole)
| | | | | | | | ClassRef(Role)
| | | | | | | | Equals
| | | | | | | | | UserRole.role_id
| | | | | | | | | Role.userRoleId
| | | | | | | List
| | | | | | | | roleId
| | | | | | | | name
| | | | | | | | Role.userRoles=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(Role)
| | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | Equals
| | | | | | | | | | | Role.roleId
| | | | | | | | | | | UserRole.role_id
| | | | | | | | | List
| | | | | | | | | | userRoleId
| | UserPayment.userBilling=Pi
| | | Join
| | | | ClassRef(UserPayment)
| | | | ClassRef(UserBilling)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | userBillingName
| | | | userBillingStreet1
| | | | userBillingStreet2
| | | | userBillingCity
| | | | userBillingState
| | | | userBillingCountry
| | | | userBillingZipcode
| | | | UserBilling.userPayment=Pi
| | | | | Join
| | | | | | ClassRef(UserBilling)
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | lhs
| | | | | | | rhs
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.Set userRoles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userRoles
NRA.java: genExprNra(): visited String=  com.bookstore.domain.User~userRoles
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.User.id), FieldRef(com.bookstore.domain.User.username), FieldRef(com.bookstore.domain.User.password), FieldRef(com.bookstore.domain.User.firstName), FieldRef(com.bookstore.domain.User.lastName), FieldRef(com.bookstore.domain.User.email), FieldRef(com.bookstore.domain.User.phone), FieldRef(com.bookstore.domain.User.enabled), FieldRef(com.bookstore.domain.User.userPaymentList)]
NRA.java: genExprNra(): projectNode name: UserShipping.user=Pi
NRA.java: genExprNra(): nestexpr= UserShipping.user=Pi
| Join
| | ClassRef(UserShipping)
| | ClassRef(User)
| | Equals
| | | UserShipping.user_id
| | | User.id
| List
| | id
| | username
| | password
| | firstName
| | lastName
| | email
| | phone
| | enabled
| | User.userPaymentList=Pi
| | | Join
| | | | ClassRef(User)
| | | | ClassRef(UserPayment)
| | | | Equals
| | | | | User.id
| | | | | UserPayment.user_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | defaultPayment
| | | | UserPayment.user=Pi
| | | | | Join
| | | | | | ClassRef(UserPayment)
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | UserPayment.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | User.userRoles=Pi
| | | | | | | Join
| | | | | | | | ClassRef(User)
| | | | | | | | ClassRef(UserRole)
| | | | | | | | Equals
| | | | | | | | | User.id
| | | | | | | | | UserRole.user_id
| | | | | | | List
| | | | | | | | userRoleId
| | | | | | | | UserRole.user=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | ClassRef(User)
| | | | | | | | | | Equals
| | | | | | | | | | | UserRole.user_id
| | | | | | | | | | | User.userRoleId
| | | | | | | | | List
| | | | | | | | | | id
| | | | | | | | | | username
| | | | | | | | | | password
| | | | | | | | | | firstName
| | | | | | | | | | lastName
| | | | | | | | | | email
| | | | | | | | | | phone
| | | | | | | | | | enabled
| | | | | | | | UserRole.role=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | ClassRef(Role)
| | | | | | | | | | Equals
| | | | | | | | | | | UserRole.role_id
| | | | | | | | | | | Role.userRoleId
| | | | | | | | | List
| | | | | | | | | | roleId
| | | | | | | | | | name
| | | | | | | | | | Role.userRoles=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(Role)
| | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | Role.roleId
| | | | | | | | | | | | | UserRole.role_id
| | | | | | | | | | | List
| | | | | | | | | | | | userRoleId
| | | | UserPayment.userBilling=Pi
| | | | | Join
| | | | | | ClassRef(UserPayment)
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs
| | | | | | | rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | UserBilling.userPayment=Pi
| | | | | | | Join
| | | | | | | | ClassRef(UserBilling)
| | | | | | | | ClassRef(UserPayment)
| | | | | | | | Equals
| | | | | | | | | lhs
| | | | | | | | | rhs
| | | | | | | List
| | | | | | | | id
| | | | | | | | type
| | | | | | | | cardName
| | | | | | | | cardNumber
| | | | | | | | expiryMonth
| | | | | | | | expiryYear
| | | | | | | | cvc
| | | | | | | | holderName
| | | | | | | | defaultPayment
| | Null
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.UserShipping.id), FieldRef(com.bookstore.domain.UserShipping.userShippingName), FieldRef(com.bookstore.domain.UserShipping.userShippingStreet1), FieldRef(com.bookstore.domain.UserShipping.userShippingStreet2), FieldRef(com.bookstore.domain.UserShipping.userShippingCity), FieldRef(com.bookstore.domain.UserShipping.userShippingState), FieldRef(com.bookstore.domain.UserShipping.userShippingCountry), FieldRef(com.bookstore.domain.UserShipping.userShippingZipcode), FieldRef(com.bookstore.domain.UserShipping.userShippingDefault), FieldRef(com.bookstore.domain.UserShipping.user)]
NRA.java: genExprNra(): projectNode name: User.userShippingList=Pi
NRA.java: genExprNra(): nestexpr= User.userShippingList=Pi
| Join
| | ClassRef(User)
| | ClassRef(UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
| | UserShipping.user=Pi
| | | Join
| | | | ClassRef(UserShipping)
| | | | ClassRef(User)
| | | | Equals
| | | | | UserShipping.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | ClassRef(User)
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | User.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | UserPayment.user=Pi
| | | | | | | Join
| | | | | | | | ClassRef(UserPayment)
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | UserPayment.user_id
| | | | | | | | | User.id
| | | | | | | List
| | | | | | | | id
| | | | | | | | username
| | | | | | | | password
| | | | | | | | firstName
| | | | | | | | lastName
| | | | | | | | email
| | | | | | | | phone
| | | | | | | | enabled
| | | | | | | | User.userRoles=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(User)
| | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | Equals
| | | | | | | | | | | User.id
| | | | | | | | | | | UserRole.user_id
| | | | | | | | | List
| | | | | | | | | | userRoleId
| | | | | | | | | | UserRole.user=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | UserRole.user_id
| | | | | | | | | | | | | User.userRoleId
| | | | | | | | | | | List
| | | | | | | | | | | | id
| | | | | | | | | | | | username
| | | | | | | | | | | | password
| | | | | | | | | | | | firstName
| | | | | | | | | | | | lastName
| | | | | | | | | | | | email
| | | | | | | | | | | | phone
| | | | | | | | | | | | enabled
| | | | | | | | | | UserRole.role=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | ClassRef(Role)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | UserRole.role_id
| | | | | | | | | | | | | Role.userRoleId
| | | | | | | | | | | List
| | | | | | | | | | | | roleId
| | | | | | | | | | | | name
| | | | | | | | | | | | Role.userRoles=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(Role)
| | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | Role.roleId
| | | | | | | | | | | | | | | UserRole.role_id
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | userRoleId
| | | | | | UserPayment.userBilling=Pi
| | | | | | | Join
| | | | | | | | ClassRef(UserPayment)
| | | | | | | | ClassRef(UserBilling)
| | | | | | | | Equals
| | | | | | | | | lhs
| | | | | | | | | rhs
| | | | | | | List
| | | | | | | | id
| | | | | | | | userBillingName
| | | | | | | | userBillingStreet1
| | | | | | | | userBillingStreet2
| | | | | | | | userBillingCity
| | | | | | | | userBillingState
| | | | | | | | userBillingCountry
| | | | | | | | userBillingZipcode
| | | | | | | | UserBilling.userPayment=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | Equals
| | | | | | | | | | | lhs
| | | | | | | | | | | rhs
| | | | | | | | | List
| | | | | | | | | | id
| | | | | | | | | | type
| | | | | | | | | | cardName
| | | | | | | | | | cardNumber
| | | | | | | | | | expiryMonth
| | | | | | | | | | expiryYear
| | | | | | | | | | cvc
| | | | | | | | | | holderName
| | | | | | | | | | defaultPayment
| | | | Null
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userPaymentList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userPaymentList
NRA.java: genExprNra(): visited String=  com.bookstore.domain.User~userPaymentList
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.Set userRoles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userRoles
NRA.java: genExprNra(): visited String=  com.bookstore.domain.User~userRoles
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.User.id), FieldRef(com.bookstore.domain.User.username), FieldRef(com.bookstore.domain.User.password), FieldRef(com.bookstore.domain.User.firstName), FieldRef(com.bookstore.domain.User.lastName), FieldRef(com.bookstore.domain.User.email), FieldRef(com.bookstore.domain.User.phone), FieldRef(com.bookstore.domain.User.enabled), FieldRef(com.bookstore.domain.User.userShippingList)]
NRA.java: genExprNra(): projectNode name: ShoppingCart.user=Pi
NRA.java: genExprNra(): nestexpr= ShoppingCart.user=Pi
| Join
| | ClassRef(ShoppingCart)
| | ClassRef(User)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | username
| | password
| | firstName
| | lastName
| | email
| | phone
| | enabled
| | User.userShippingList=Pi
| | | Join
| | | | ClassRef(User)
| | | | ClassRef(UserShipping)
| | | | Equals
| | | | | User.id
| | | | | UserShipping.user_id
| | | List
| | | | id
| | | | userShippingName
| | | | userShippingStreet1
| | | | userShippingStreet2
| | | | userShippingCity
| | | | userShippingState
| | | | userShippingCountry
| | | | userShippingZipcode
| | | | userShippingDefault
| | | | UserShipping.user=Pi
| | | | | Join
| | | | | | ClassRef(UserShipping)
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | UserShipping.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | User.userPaymentList=Pi
| | | | | | | Join
| | | | | | | | ClassRef(User)
| | | | | | | | ClassRef(UserPayment)
| | | | | | | | Equals
| | | | | | | | | User.id
| | | | | | | | | UserPayment.user_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | type
| | | | | | | | cardName
| | | | | | | | cardNumber
| | | | | | | | expiryMonth
| | | | | | | | expiryYear
| | | | | | | | cvc
| | | | | | | | holderName
| | | | | | | | defaultPayment
| | | | | | | | UserPayment.user=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | ClassRef(User)
| | | | | | | | | | Equals
| | | | | | | | | | | UserPayment.user_id
| | | | | | | | | | | User.id
| | | | | | | | | List
| | | | | | | | | | id
| | | | | | | | | | username
| | | | | | | | | | password
| | | | | | | | | | firstName
| | | | | | | | | | lastName
| | | | | | | | | | email
| | | | | | | | | | phone
| | | | | | | | | | enabled
| | | | | | | | | | User.userRoles=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | User.id
| | | | | | | | | | | | | UserRole.user_id
| | | | | | | | | | | List
| | | | | | | | | | | | userRoleId
| | | | | | | | | | | | UserRole.user=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | UserRole.user_id
| | | | | | | | | | | | | | | User.userRoleId
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | id
| | | | | | | | | | | | | | username
| | | | | | | | | | | | | | password
| | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | email
| | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | enabled
| | | | | | | | | | | | UserRole.role=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | ClassRef(Role)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | UserRole.role_id
| | | | | | | | | | | | | | | Role.userRoleId
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | roleId
| | | | | | | | | | | | | | name
| | | | | | | | | | | | | | Role.userRoles=Pi
| | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | ClassRef(Role)
| | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | Role.roleId
| | | | | | | | | | | | | | | | | UserRole.role_id
| | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | userRoleId
| | | | | | | | UserPayment.userBilling=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | Equals
| | | | | | | | | | | lhs
| | | | | | | | | | | rhs
| | | | | | | | | List
| | | | | | | | | | id
| | | | | | | | | | userBillingName
| | | | | | | | | | userBillingStreet1
| | | | | | | | | | userBillingStreet2
| | | | | | | | | | userBillingCity
| | | | | | | | | | userBillingState
| | | | | | | | | | userBillingCountry
| | | | | | | | | | userBillingZipcode
| | | | | | | | | | UserBilling.userPayment=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | lhs
| | | | | | | | | | | | | rhs
| | | | | | | | | | | List
| | | | | | | | | | | | id
| | | | | | | | | | | | type
| | | | | | | | | | | | cardName
| | | | | | | | | | | | cardNumber
| | | | | | | | | | | | expiryMonth
| | | | | | | | | | | | expiryYear
| | | | | | | | | | | | cvc
| | | | | | | | | | | | holderName
| | | | | | | | | | | | defaultPayment
| | | | | | Null
| | Null
| | Null
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.ShoppingCart.id), FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal), FieldRef(com.bookstore.domain.ShoppingCart.user)]
NRA.java: genExprNra(): projectNode name: CartItem.shoppingCart=Pi
NRA.java: genExprNra(): nestexpr= CartItem.shoppingCart=Pi
| Join
| | ClassRef(CartItem)
| | ClassRef(ShoppingCart)
| | Equals
| | | CartItem.shopping_cart_id
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.user=Pi
| | | Join
| | | | ClassRef(ShoppingCart)
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | ClassRef(User)
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | User.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | UserShipping.user=Pi
| | | | | | | Join
| | | | | | | | ClassRef(UserShipping)
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | UserShipping.user_id
| | | | | | | | | User.id
| | | | | | | List
| | | | | | | | id
| | | | | | | | username
| | | | | | | | password
| | | | | | | | firstName
| | | | | | | | lastName
| | | | | | | | email
| | | | | | | | phone
| | | | | | | | enabled
| | | | | | | | User.userPaymentList=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(User)
| | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | Equals
| | | | | | | | | | | User.id
| | | | | | | | | | | UserPayment.user_id
| | | | | | | | | List
| | | | | | | | | | id
| | | | | | | | | | type
| | | | | | | | | | cardName
| | | | | | | | | | cardNumber
| | | | | | | | | | expiryMonth
| | | | | | | | | | expiryYear
| | | | | | | | | | cvc
| | | | | | | | | | holderName
| | | | | | | | | | defaultPayment
| | | | | | | | | | UserPayment.user=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | UserPayment.user_id
| | | | | | | | | | | | | User.id
| | | | | | | | | | | List
| | | | | | | | | | | | id
| | | | | | | | | | | | username
| | | | | | | | | | | | password
| | | | | | | | | | | | firstName
| | | | | | | | | | | | lastName
| | | | | | | | | | | | email
| | | | | | | | | | | | phone
| | | | | | | | | | | | enabled
| | | | | | | | | | | | User.userRoles=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | UserRole.user_id
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | userRoleId
| | | | | | | | | | | | | | UserRole.user=Pi
| | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | UserRole.user_id
| | | | | | | | | | | | | | | | | User.userRoleId
| | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | UserRole.role=Pi
| | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | ClassRef(Role)
| | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | UserRole.role_id
| | | | | | | | | | | | | | | | | Role.userRoleId
| | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | roleId
| | | | | | | | | | | | | | | | name
| | | | | | | | | | | | | | | | Role.userRoles=Pi
| | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | ClassRef(Role)
| | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | Role.roleId
| | | | | | | | | | | | | | | | | | | UserRole.role_id
| | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | userRoleId
| | | | | | | | | | UserPayment.userBilling=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | lhs
| | | | | | | | | | | | | rhs
| | | | | | | | | | | List
| | | | | | | | | | | | id
| | | | | | | | | | | | userBillingName
| | | | | | | | | | | | userBillingStreet1
| | | | | | | | | | | | userBillingStreet2
| | | | | | | | | | | | userBillingCity
| | | | | | | | | | | | userBillingState
| | | | | | | | | | | | userBillingCountry
| | | | | | | | | | | | userBillingZipcode
| | | | | | | | | | | | UserBilling.userPayment=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | id
| | | | | | | | | | | | | | type
| | | | | | | | | | | | | | cardName
| | | | | | | | | | | | | | cardNumber
| | | | | | | | | | | | | | expiryMonth
| | | | | | | | | | | | | | expiryYear
| | | | | | | | | | | | | | cvc
| | | | | | | | | | | | | | holderName
| | | | | | | | | | | | | | defaultPayment
| | | | | | | | Null
| | | | Null
| | | | Null
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Order order>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: order_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=order
NRA.java: genExprNra(): visited String=  com.bookstore.domain.CartItem~order
NRA.java: genExprNra(): visited = [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= order
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= order
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: order_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| CartItem.order_id
| Order.id
NRA.java: genExprNra(): ManyToOne Field
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nested field name= order
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Order
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: genExprNra(): com.bookstore.domain.Order fields= [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: genExprNra(): children count = 10
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date orderDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date shippingDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String shippingMethod>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String orederStatus>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.math.BigDecimal orderTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
NRA.java: genExprNra(): visited String=  com.bookstore.domain.Order~cartItemList
NRA.java: genExprNra(): visited = [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Order.id
| CartItem.order_id
NRA.java: genExprNra(): OneToMany Field
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nested field name= cartItemList
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.CartItem
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: genExprNra(): com.bookstore.domain.CartItem fields= [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: genExprNra(): <com.bookstore.domain.CartItem: com.bookstore.domain.Book book> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.CartItem: java.util.List bookToCartItemList> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.CartItem: com.bookstore.domain.Order order> Field is visited skipping count
NRA.java: genExprNra(): children count = 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: int qty>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/OneToOne; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
NRA.java: genExprNra(): visited String=  com.bookstore.domain.CartItem~book
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.util.List bookToCartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemList
NRA.java: genExprNra(): visited String=  com.bookstore.domain.CartItem~bookToCartItemList
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shopping_cart_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
NRA.java: genExprNra(): visited String=  com.bookstore.domain.CartItem~shoppingCart
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Order order>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: order_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=order
NRA.java: genExprNra(): visited String=  com.bookstore.domain.CartItem~order
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.CartItem.id), FieldRef(com.bookstore.domain.CartItem.qty), FieldRef(com.bookstore.domain.CartItem.subtotal)]
NRA.java: genExprNra(): projectNode name: Order.cartItemList=Pi
NRA.java: genExprNra(): nestexpr= Order.cartItemList=Pi
| Join
| | ClassRef(Order)
| | ClassRef(CartItem)
| | Equals
| | | Order.id
| | | CartItem.order_id
| List
| | id
| | qty
| | subtotal
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shippingAddress
NRA.java: genExprNra(): visited String=  com.bookstore.domain.Order~shippingAddress
NRA.java: genExprNra(): visited = [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shippingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = ShippingAddress
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): nested field name= shippingAddress
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.ShippingAddress: java.lang.Long id>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressName>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressStreet1>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressStreet2>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressCity>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressState>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressCountry>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressZipcode>, <com.bookstore.domain.ShippingAddress: com.bookstore.domain.User user>]
NRA.java: genExprNra(): com.bookstore.domain.ShippingAddress fields= [<com.bookstore.domain.ShippingAddress: java.lang.Long id>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressName>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressStreet1>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressStreet2>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressCity>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressState>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressCountry>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressZipcode>, <com.bookstore.domain.ShippingAddress: com.bookstore.domain.User user>]
NRA.java: genExprNra(): children count = 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressStreet1>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressStreet2>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressCity>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressState>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressCountry>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressZipcode>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
NRA.java: genExprNra(): visited String=  com.bookstore.domain.ShippingAddress~user
NRA.java: genExprNra(): visited = [com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShippingAddress
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressStreet1
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressStreet2
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressCity
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressState
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressCountry
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressZipcode
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = ShippingAddress
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| ShippingAddress.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nested field name= user
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.User
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.User: java.lang.Long id>, <com.bookstore.domain.User: java.lang.String username>, <com.bookstore.domain.User: java.lang.String password>, <com.bookstore.domain.User: java.lang.String firstName>, <com.bookstore.domain.User: java.lang.String lastName>, <com.bookstore.domain.User: java.lang.String email>, <com.bookstore.domain.User: java.lang.String phone>, <com.bookstore.domain.User: boolean enabled>, <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
NRA.java: genExprNra(): com.bookstore.domain.User fields= [<com.bookstore.domain.User: java.lang.Long id>, <com.bookstore.domain.User: java.lang.String username>, <com.bookstore.domain.User: java.lang.String password>, <com.bookstore.domain.User: java.lang.String firstName>, <com.bookstore.domain.User: java.lang.String lastName>, <com.bookstore.domain.User: java.lang.String email>, <com.bookstore.domain.User: java.lang.String phone>, <com.bookstore.domain.User: boolean enabled>, <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
NRA.java: genExprNra(): <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.User: java.util.List userShippingList> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.User: java.util.List userPaymentList> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.User: java.util.Set userRoles> Field is visited skipping count
NRA.java: genExprNra(): children count = 8
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: id
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String username>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String password>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String firstName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String phone>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: boolean enabled>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
NRA.java: genExprNra(): visited String=  com.bookstore.domain.User~shoppingCart
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userShippingList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userShippingList
NRA.java: genExprNra(): visited String=  com.bookstore.domain.User~userShippingList
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userPaymentList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userPaymentList
NRA.java: genExprNra(): visited String=  com.bookstore.domain.User~userPaymentList
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.Set userRoles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userRoles
NRA.java: genExprNra(): visited String=  com.bookstore.domain.User~userRoles
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.User.id), FieldRef(com.bookstore.domain.User.username), FieldRef(com.bookstore.domain.User.password), FieldRef(com.bookstore.domain.User.firstName), FieldRef(com.bookstore.domain.User.lastName), FieldRef(com.bookstore.domain.User.email), FieldRef(com.bookstore.domain.User.phone), FieldRef(com.bookstore.domain.User.enabled)]
NRA.java: genExprNra(): projectNode name: ShippingAddress.user=Pi
NRA.java: genExprNra(): nestexpr= ShippingAddress.user=Pi
| Join
| | ClassRef(ShippingAddress)
| | ClassRef(User)
| | Equals
| | | ShippingAddress.user_id
| | | User.id
| List
| | id
| | username
| | password
| | firstName
| | lastName
| | email
| | phone
| | enabled
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.ShippingAddress.id), FieldRef(com.bookstore.domain.ShippingAddress.shippingAddressName), FieldRef(com.bookstore.domain.ShippingAddress.shippingAddressStreet1), FieldRef(com.bookstore.domain.ShippingAddress.shippingAddressStreet2), FieldRef(com.bookstore.domain.ShippingAddress.shippingAddressCity), FieldRef(com.bookstore.domain.ShippingAddress.shippingAddressState), FieldRef(com.bookstore.domain.ShippingAddress.shippingAddressCountry), FieldRef(com.bookstore.domain.ShippingAddress.shippingAddressZipcode), FieldRef(com.bookstore.domain.ShippingAddress.user)]
NRA.java: genExprNra(): projectNode name: Order.shippingAddress=Pi
NRA.java: genExprNra(): nestexpr= Order.shippingAddress=Pi
| Join
| | ClassRef(Order)
| | ClassRef(ShippingAddress)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | shippingAddressName
| | shippingAddressStreet1
| | shippingAddressStreet2
| | shippingAddressCity
| | shippingAddressState
| | shippingAddressCountry
| | shippingAddressZipcode
| | ShippingAddress.user=Pi
| | | Join
| | | | ClassRef(ShippingAddress)
| | | | ClassRef(User)
| | | | Equals
| | | | | ShippingAddress.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
NRA.java: genExprNra(): visited= [com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.User~userShippingList, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.CartItem~order, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.Payment payment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=payment
NRA.java: genExprNra(): visited String=  com.bookstore.domain.Order~payment
NRA.java: genExprNra(): visited = [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= payment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= payment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Payment
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = Payment
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Payment
NRA.java: genExprNra(): nested field name= payment
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Payment
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.Payment: java.lang.Long id>, <com.bookstore.domain.Payment: java.lang.String type>, <com.bookstore.domain.Payment: java.lang.String cardName>, <com.bookstore.domain.Payment: java.lang.String cardNumber>, <com.bookstore.domain.Payment: int expiryMonth>, <com.bookstore.domain.Payment: int expiryYear>, <com.bookstore.domain.Payment: int cvc>, <com.bookstore.domain.Payment: java.lang.String holderName>, <com.bookstore.domain.Payment: com.bookstore.domain.Order order>, <com.bookstore.domain.Payment: com.bookstore.domain.UserBilling userBilling>]
NRA.java: genExprNra(): com.bookstore.domain.Payment fields= [<com.bookstore.domain.Payment: java.lang.Long id>, <com.bookstore.domain.Payment: java.lang.String type>, <com.bookstore.domain.Payment: java.lang.String cardName>, <com.bookstore.domain.Payment: java.lang.String cardNumber>, <com.bookstore.domain.Payment: int expiryMonth>, <com.bookstore.domain.Payment: int expiryYear>, <com.bookstore.domain.Payment: int cvc>, <com.bookstore.domain.Payment: java.lang.String holderName>, <com.bookstore.domain.Payment: com.bookstore.domain.Order order>, <com.bookstore.domain.Payment: com.bookstore.domain.UserBilling userBilling>]
NRA.java: genExprNra(): children count = 10
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: java.lang.String type>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: java.lang.String cardName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: java.lang.String cardNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: int expiryMonth>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: int expiryYear>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: int cvc>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: java.lang.String holderName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: com.bookstore.domain.Order order>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/OneToOne; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=order
NRA.java: genExprNra(): visited String=  com.bookstore.domain.Payment~order
NRA.java: genExprNra(): visited = [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Payment
 fieldName= order
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String type
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryMonth
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryYear
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int cvc
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String holderName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= order
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = Payment
NRA.java: genExprNra(): fieldclass = Order
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nested field name= order
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Order
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: genExprNra(): com.bookstore.domain.Order fields= [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: genExprNra(): <com.bookstore.domain.Order: java.util.List cartItemList> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.Order: com.bookstore.domain.Payment payment> Field is visited skipping count
NRA.java: genExprNra(): children count = 7
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date orderDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date shippingDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String shippingMethod>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String orederStatus>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.math.BigDecimal orderTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
NRA.java: genExprNra(): visited String=  com.bookstore.domain.Order~cartItemList
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shippingAddress
NRA.java: genExprNra(): visited String=  com.bookstore.domain.Order~shippingAddress
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.Payment payment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=payment
NRA.java: genExprNra(): visited String=  com.bookstore.domain.Order~payment
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
NRA.java: genExprNra(): visited String=  com.bookstore.domain.Order~user
NRA.java: genExprNra(): visited = [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): cond = Equals
| Order.
| User.id
NRA.java: genExprNra(): ManyToOne Field
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nested field name= user
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.User
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.User: java.lang.Long id>, <com.bookstore.domain.User: java.lang.String username>, <com.bookstore.domain.User: java.lang.String password>, <com.bookstore.domain.User: java.lang.String firstName>, <com.bookstore.domain.User: java.lang.String lastName>, <com.bookstore.domain.User: java.lang.String email>, <com.bookstore.domain.User: java.lang.String phone>, <com.bookstore.domain.User: boolean enabled>, <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
NRA.java: genExprNra(): com.bookstore.domain.User fields= [<com.bookstore.domain.User: java.lang.Long id>, <com.bookstore.domain.User: java.lang.String username>, <com.bookstore.domain.User: java.lang.String password>, <com.bookstore.domain.User: java.lang.String firstName>, <com.bookstore.domain.User: java.lang.String lastName>, <com.bookstore.domain.User: java.lang.String email>, <com.bookstore.domain.User: java.lang.String phone>, <com.bookstore.domain.User: boolean enabled>, <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
NRA.java: genExprNra(): <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.User: java.util.List userShippingList> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.User: java.util.List userPaymentList> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.User: java.util.Set userRoles> Field is visited skipping count
NRA.java: genExprNra(): children count = 8
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: id
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String username>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String password>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String firstName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String phone>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: boolean enabled>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
NRA.java: genExprNra(): visited String=  com.bookstore.domain.User~shoppingCart
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userShippingList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userShippingList
NRA.java: genExprNra(): visited String=  com.bookstore.domain.User~userShippingList
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userPaymentList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userPaymentList
NRA.java: genExprNra(): visited String=  com.bookstore.domain.User~userPaymentList
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.Set userRoles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userRoles
NRA.java: genExprNra(): visited String=  com.bookstore.domain.User~userRoles
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.User.id), FieldRef(com.bookstore.domain.User.username), FieldRef(com.bookstore.domain.User.password), FieldRef(com.bookstore.domain.User.firstName), FieldRef(com.bookstore.domain.User.lastName), FieldRef(com.bookstore.domain.User.email), FieldRef(com.bookstore.domain.User.phone), FieldRef(com.bookstore.domain.User.enabled)]
NRA.java: genExprNra(): projectNode name: Order.user=Pi
NRA.java: genExprNra(): nestexpr= Order.user=Pi
| Join
| | ClassRef(Order)
| | ClassRef(User)
| | Equals
| | | Order.
| | | User.id
| List
| | id
| | username
| | password
| | firstName
| | lastName
| | email
| | phone
| | enabled
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Order.id), FieldRef(com.bookstore.domain.Order.orderDate), FieldRef(com.bookstore.domain.Order.shippingDate), FieldRef(com.bookstore.domain.Order.shippingMethod), FieldRef(com.bookstore.domain.Order.orederStatus), FieldRef(com.bookstore.domain.Order.orderTotal), FieldRef(com.bookstore.domain.Order.user)]
NRA.java: genExprNra(): projectNode name: Payment.order=Pi
NRA.java: genExprNra(): nestexpr= Payment.order=Pi
| Join
| | ClassRef(Payment)
| | ClassRef(Order)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.user=Pi
| | | Join
| | | | ClassRef(Order)
| | | | ClassRef(User)
| | | | Equals
| | | | | Order.
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: com.bookstore.domain.UserBilling userBilling>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: userPayment

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=userBilling
NRA.java: genExprNra(): visited String=  com.bookstore.domain.Payment~userBilling
NRA.java: genExprNra(): visited = [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Payment
 fieldName= userBilling
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String type
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryMonth
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryYear
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int cvc
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String holderName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.UserBilling userBilling [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= userBilling
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserBilling
NRA.java: genExprNra(): baseclass = Payment
NRA.java: genExprNra(): fieldclass = UserBilling
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserBilling
NRA.java: genExprNra(): nested field name= userBilling
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.UserBilling
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.UserBilling: java.lang.Long id>, <com.bookstore.domain.UserBilling: java.lang.String userBillingName>, <com.bookstore.domain.UserBilling: java.lang.String userBillingStreet1>, <com.bookstore.domain.UserBilling: java.lang.String userBillingStreet2>, <com.bookstore.domain.UserBilling: java.lang.String userBillingCity>, <com.bookstore.domain.UserBilling: java.lang.String userBillingState>, <com.bookstore.domain.UserBilling: java.lang.String userBillingCountry>, <com.bookstore.domain.UserBilling: java.lang.String userBillingZipcode>, <com.bookstore.domain.UserBilling: com.bookstore.domain.UserPayment userPayment>]
NRA.java: genExprNra(): com.bookstore.domain.UserBilling fields= [<com.bookstore.domain.UserBilling: java.lang.Long id>, <com.bookstore.domain.UserBilling: java.lang.String userBillingName>, <com.bookstore.domain.UserBilling: java.lang.String userBillingStreet1>, <com.bookstore.domain.UserBilling: java.lang.String userBillingStreet2>, <com.bookstore.domain.UserBilling: java.lang.String userBillingCity>, <com.bookstore.domain.UserBilling: java.lang.String userBillingState>, <com.bookstore.domain.UserBilling: java.lang.String userBillingCountry>, <com.bookstore.domain.UserBilling: java.lang.String userBillingZipcode>, <com.bookstore.domain.UserBilling: com.bookstore.domain.UserPayment userPayment>]
NRA.java: genExprNra(): <com.bookstore.domain.UserBilling: com.bookstore.domain.UserPayment userPayment> Field is visited skipping count
NRA.java: genExprNra(): children count = 8
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingStreet1>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingStreet2>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingCity>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingState>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingCountry>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingZipcode>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: com.bookstore.domain.UserPayment userPayment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=userPayment
NRA.java: genExprNra(): visited String=  com.bookstore.domain.UserBilling~userPayment
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.UserBilling.id), FieldRef(com.bookstore.domain.UserBilling.userBillingName), FieldRef(com.bookstore.domain.UserBilling.userBillingStreet1), FieldRef(com.bookstore.domain.UserBilling.userBillingStreet2), FieldRef(com.bookstore.domain.UserBilling.userBillingCity), FieldRef(com.bookstore.domain.UserBilling.userBillingState), FieldRef(com.bookstore.domain.UserBilling.userBillingCountry), FieldRef(com.bookstore.domain.UserBilling.userBillingZipcode)]
NRA.java: genExprNra(): projectNode name: Payment.userBilling=Pi
NRA.java: genExprNra(): nestexpr= Payment.userBilling=Pi
| Join
| | ClassRef(Payment)
| | ClassRef(UserBilling)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | userBillingName
| | userBillingStreet1
| | userBillingStreet2
| | userBillingCity
| | userBillingState
| | userBillingCountry
| | userBillingZipcode
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Payment.id), FieldRef(com.bookstore.domain.Payment.type), FieldRef(com.bookstore.domain.Payment.cardName), FieldRef(com.bookstore.domain.Payment.cardNumber), FieldRef(com.bookstore.domain.Payment.expiryMonth), FieldRef(com.bookstore.domain.Payment.expiryYear), FieldRef(com.bookstore.domain.Payment.cvc), FieldRef(com.bookstore.domain.Payment.holderName), FieldRef(com.bookstore.domain.Payment.order), FieldRef(com.bookstore.domain.Payment.userBilling)]
NRA.java: genExprNra(): projectNode name: Order.payment=Pi
NRA.java: genExprNra(): nestexpr= Order.payment=Pi
| Join
| | ClassRef(Order)
| | ClassRef(Payment)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | Payment.order=Pi
| | | Join
| | | | ClassRef(Payment)
| | | | ClassRef(Order)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | orderDate
| | | | shippingDate
| | | | shippingMethod
| | | | orederStatus
| | | | orderTotal
| | | | Order.user=Pi
| | | | | Join
| | | | | | ClassRef(Order)
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Order.
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | Payment.userBilling=Pi
| | | Join
| | | | ClassRef(Payment)
| | | | ClassRef(UserBilling)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | userBillingName
| | | | userBillingStreet1
| | | | userBillingStreet2
| | | | userBillingCity
| | | | userBillingState
| | | | userBillingCountry
| | | | userBillingZipcode
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
NRA.java: genExprNra(): visited String=  com.bookstore.domain.Order~user
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Order.id), FieldRef(com.bookstore.domain.Order.orderDate), FieldRef(com.bookstore.domain.Order.shippingDate), FieldRef(com.bookstore.domain.Order.shippingMethod), FieldRef(com.bookstore.domain.Order.orederStatus), FieldRef(com.bookstore.domain.Order.orderTotal), FieldRef(com.bookstore.domain.Order.cartItemList), FieldRef(com.bookstore.domain.Order.shippingAddress), FieldRef(com.bookstore.domain.Order.payment)]
NRA.java: genExprNra(): projectNode name: CartItem.order=Pi
NRA.java: genExprNra(): nestexpr= CartItem.order=Pi
| Join
| | ClassRef(CartItem)
| | ClassRef(Order)
| | Equals
| | | CartItem.order_id
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | ClassRef(Order)
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Order.id
| | | | | CartItem.order_id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | Order.shippingAddress=Pi
| | | Join
| | | | ClassRef(Order)
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | ClassRef(ShippingAddress)
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | ShippingAddress.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | Order.payment=Pi
| | | Join
| | | | ClassRef(Order)
| | | | ClassRef(Payment)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | ClassRef(Payment)
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs
| | | | | | | rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | Order.user=Pi
| | | | | | | Join
| | | | | | | | ClassRef(Order)
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | Order.
| | | | | | | | | User.id
| | | | | | | List
| | | | | | | | id
| | | | | | | | username
| | | | | | | | password
| | | | | | | | firstName
| | | | | | | | lastName
| | | | | | | | email
| | | | | | | | phone
| | | | | | | | enabled
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | ClassRef(Payment)
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs
| | | | | | | rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | Null
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.CartItem.id), FieldRef(com.bookstore.domain.CartItem.qty), FieldRef(com.bookstore.domain.CartItem.subtotal), FieldRef(com.bookstore.domain.CartItem.bookToCartItemList), FieldRef(com.bookstore.domain.CartItem.shoppingCart), FieldRef(com.bookstore.domain.CartItem.order)]
NRA.java: genExprNra(): projectNode name: BookToCartItem.cartItem=Pi
NRA.java: genExprNra(): nestexpr= BookToCartItem.cartItem=Pi
| Join
| | ClassRef(BookToCartItem)
| | ClassRef(CartItem)
| | Equals
| | | BookToCartItem.cart_tem_id
| | | CartItem.id
| List
| | id
| | qty
| | subtotal
| | CartItem.bookToCartItemList=Pi
| | | Join
| | | | ClassRef(CartItem)
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | CartItem.id
| | | | | BookToCartItem.cart_tem_id
| | | List
| | | | id
| | CartItem.shoppingCart=Pi
| | | Join
| | | | ClassRef(CartItem)
| | | | ClassRef(ShoppingCart)
| | | | Equals
| | | | | CartItem.shopping_cart_id
| | | | | ShoppingCart.id
| | | List
| | | | id
| | | | GrandTotal
| | | | ShoppingCart.user=Pi
| | | | | Join
| | | | | | ClassRef(ShoppingCart)
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | lhs
| | | | | | | rhs
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | User.userShippingList=Pi
| | | | | | | Join
| | | | | | | | ClassRef(User)
| | | | | | | | ClassRef(UserShipping)
| | | | | | | | Equals
| | | | | | | | | User.id
| | | | | | | | | UserShipping.user_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | userShippingName
| | | | | | | | userShippingStreet1
| | | | | | | | userShippingStreet2
| | | | | | | | userShippingCity
| | | | | | | | userShippingState
| | | | | | | | userShippingCountry
| | | | | | | | userShippingZipcode
| | | | | | | | userShippingDefault
| | | | | | | | UserShipping.user=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(UserShipping)
| | | | | | | | | | ClassRef(User)
| | | | | | | | | | Equals
| | | | | | | | | | | UserShipping.user_id
| | | | | | | | | | | User.id
| | | | | | | | | List
| | | | | | | | | | id
| | | | | | | | | | username
| | | | | | | | | | password
| | | | | | | | | | firstName
| | | | | | | | | | lastName
| | | | | | | | | | email
| | | | | | | | | | phone
| | | | | | | | | | enabled
| | | | | | | | | | User.userPaymentList=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | User.id
| | | | | | | | | | | | | UserPayment.user_id
| | | | | | | | | | | List
| | | | | | | | | | | | id
| | | | | | | | | | | | type
| | | | | | | | | | | | cardName
| | | | | | | | | | | | cardNumber
| | | | | | | | | | | | expiryMonth
| | | | | | | | | | | | expiryYear
| | | | | | | | | | | | cvc
| | | | | | | | | | | | holderName
| | | | | | | | | | | | defaultPayment
| | | | | | | | | | | | UserPayment.user=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | UserPayment.user_id
| | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | id
| | | | | | | | | | | | | | username
| | | | | | | | | | | | | | password
| | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | email
| | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | User.userRoles=Pi
| | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | UserRole.user_id
| | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | userRoleId
| | | | | | | | | | | | | | | | UserRole.user=Pi
| | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | UserRole.user_id
| | | | | | | | | | | | | | | | | | | User.userRoleId
| | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | | | UserRole.role=Pi
| | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | ClassRef(Role)
| | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | UserRole.role_id
| | | | | | | | | | | | | | | | | | | Role.userRoleId
| | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | roleId
| | | | | | | | | | | | | | | | | | name
| | | | | | | | | | | | | | | | | | Role.userRoles=Pi
| | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | ClassRef(Role)
| | | | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | Role.roleId
| | | | | | | | | | | | | | | | | | | | | UserRole.role_id
| | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | userRoleId
| | | | | | | | | | | | UserPayment.userBilling=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | id
| | | | | | | | | | | | | | userBillingName
| | | | | | | | | | | | | | userBillingStreet1
| | | | | | | | | | | | | | userBillingStreet2
| | | | | | | | | | | | | | userBillingCity
| | | | | | | | | | | | | | userBillingState
| | | | | | | | | | | | | | userBillingCountry
| | | | | | | | | | | | | | userBillingZipcode
| | | | | | | | | | | | | | UserBilling.userPayment=Pi
| | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | type
| | | | | | | | | | | | | | | | cardName
| | | | | | | | | | | | | | | | cardNumber
| | | | | | | | | | | | | | | | expiryMonth
| | | | | | | | | | | | | | | | expiryYear
| | | | | | | | | | | | | | | | cvc
| | | | | | | | | | | | | | | | holderName
| | | | | | | | | | | | | | | | defaultPayment
| | | | | | | | | | Null
| | | | | | Null
| | | | | | Null
| | CartItem.order=Pi
| | | Join
| | | | ClassRef(CartItem)
| | | | ClassRef(Order)
| | | | Equals
| | | | | CartItem.order_id
| | | | | Order.id
| | | List
| | | | id
| | | | orderDate
| | | | shippingDate
| | | | shippingMethod
| | | | orederStatus
| | | | orderTotal
| | | | Order.cartItemList=Pi
| | | | | Join
| | | | | | ClassRef(Order)
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Order.id
| | | | | | | CartItem.order_id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | Order.shippingAddress=Pi
| | | | | Join
| | | | | | ClassRef(Order)
| | | | | | ClassRef(ShippingAddress)
| | | | | | Equals
| | | | | | | lhs
| | | | | | | rhs
| | | | | List
| | | | | | id
| | | | | | shippingAddressName
| | | | | | shippingAddressStreet1
| | | | | | shippingAddressStreet2
| | | | | | shippingAddressCity
| | | | | | shippingAddressState
| | | | | | shippingAddressCountry
| | | | | | shippingAddressZipcode
| | | | | | ShippingAddress.user=Pi
| | | | | | | Join
| | | | | | | | ClassRef(ShippingAddress)
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | ShippingAddress.user_id
| | | | | | | | | User.id
| | | | | | | List
| | | | | | | | id
| | | | | | | | username
| | | | | | | | password
| | | | | | | | firstName
| | | | | | | | lastName
| | | | | | | | email
| | | | | | | | phone
| | | | | | | | enabled
| | | | Order.payment=Pi
| | | | | Join
| | | | | | ClassRef(Order)
| | | | | | ClassRef(Payment)
| | | | | | Equals
| | | | | | | lhs
| | | | | | | rhs
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | Payment.order=Pi
| | | | | | | Join
| | | | | | | | ClassRef(Payment)
| | | | | | | | ClassRef(Order)
| | | | | | | | Equals
| | | | | | | | | lhs
| | | | | | | | | rhs
| | | | | | | List
| | | | | | | | id
| | | | | | | | orderDate
| | | | | | | | shippingDate
| | | | | | | | shippingMethod
| | | | | | | | orederStatus
| | | | | | | | orderTotal
| | | | | | | | Order.user=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(Order)
| | | | | | | | | | ClassRef(User)
| | | | | | | | | | Equals
| | | | | | | | | | | Order.
| | | | | | | | | | | User.id
| | | | | | | | | List
| | | | | | | | | | id
| | | | | | | | | | username
| | | | | | | | | | password
| | | | | | | | | | firstName
| | | | | | | | | | lastName
| | | | | | | | | | email
| | | | | | | | | | phone
| | | | | | | | | | enabled
| | | | | | Payment.userBilling=Pi
| | | | | | | Join
| | | | | | | | ClassRef(Payment)
| | | | | | | | ClassRef(UserBilling)
| | | | | | | | Equals
| | | | | | | | | lhs
| | | | | | | | | rhs
| | | | | | | List
| | | | | | | | id
| | | | | | | | userBillingName
| | | | | | | | userBillingStreet1
| | | | | | | | userBillingStreet2
| | | | | | | | userBillingCity
| | | | | | | | userBillingState
| | | | | | | | userBillingCountry
| | | | | | | | userBillingZipcode
| | | | Null
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.BookToCartItem.id), FieldRef(com.bookstore.domain.BookToCartItem.book), FieldRef(com.bookstore.domain.BookToCartItem.cartItem)]
NRA.java: genExprNra(): projectNode name: Book.bookToCartItemsList=Pi
NRA.java: genExprNra(): nestexpr= Book.bookToCartItemsList=Pi
| Join
| | ClassRef(Book)
| | ClassRef(BookToCartItem)
| | Equals
| | | Book.id
| | | BookToCartItem.book_id
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | ClassRef(BookToCartItem)
| | | | ClassRef(Book)
| | | | Equals
| | | | | BookToCartItem.book_id
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | ClassRef(BookToCartItem)
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | BookToCartItem.cart_tem_id
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | ClassRef(CartItem)
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | CartItem.id
| | | | | | | BookToCartItem.cart_tem_id
| | | | | List
| | | | | | id
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | ClassRef(CartItem)
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | CartItem.shopping_cart_id
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | ShoppingCart.user=Pi
| | | | | | | Join
| | | | | | | | ClassRef(ShoppingCart)
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | lhs
| | | | | | | | | rhs
| | | | | | | List
| | | | | | | | id
| | | | | | | | username
| | | | | | | | password
| | | | | | | | firstName
| | | | | | | | lastName
| | | | | | | | email
| | | | | | | | phone
| | | | | | | | enabled
| | | | | | | | User.userShippingList=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(User)
| | | | | | | | | | ClassRef(UserShipping)
| | | | | | | | | | Equals
| | | | | | | | | | | User.id
| | | | | | | | | | | UserShipping.user_id
| | | | | | | | | List
| | | | | | | | | | id
| | | | | | | | | | userShippingName
| | | | | | | | | | userShippingStreet1
| | | | | | | | | | userShippingStreet2
| | | | | | | | | | userShippingCity
| | | | | | | | | | userShippingState
| | | | | | | | | | userShippingCountry
| | | | | | | | | | userShippingZipcode
| | | | | | | | | | userShippingDefault
| | | | | | | | | | UserShipping.user=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(UserShipping)
| | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | UserShipping.user_id
| | | | | | | | | | | | | User.id
| | | | | | | | | | | List
| | | | | | | | | | | | id
| | | | | | | | | | | | username
| | | | | | | | | | | | password
| | | | | | | | | | | | firstName
| | | | | | | | | | | | lastName
| | | | | | | | | | | | email
| | | | | | | | | | | | phone
| | | | | | | | | | | | enabled
| | | | | | | | | | | | User.userPaymentList=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | UserPayment.user_id
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | id
| | | | | | | | | | | | | | type
| | | | | | | | | | | | | | cardName
| | | | | | | | | | | | | | cardNumber
| | | | | | | | | | | | | | expiryMonth
| | | | | | | | | | | | | | expiryYear
| | | | | | | | | | | | | | cvc
| | | | | | | | | | | | | | holderName
| | | | | | | | | | | | | | defaultPayment
| | | | | | | | | | | | | | UserPayment.user=Pi
| | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | UserPayment.user_id
| | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | | | User.userRoles=Pi
| | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | | | UserRole.user_id
| | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | userRoleId
| | | | | | | | | | | | | | | | | | UserRole.user=Pi
| | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | UserRole.user_id
| | | | | | | | | | | | | | | | | | | | | User.userRoleId
| | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | | | | | UserRole.role=Pi
| | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | | | ClassRef(Role)
| | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | UserRole.role_id
| | | | | | | | | | | | | | | | | | | | | Role.userRoleId
| | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | roleId
| | | | | | | | | | | | | | | | | | | | name
| | | | | | | | | | | | | | | | | | | | Role.userRoles=Pi
| | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | ClassRef(Role)
| | | | | | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | Role.roleId
| | | | | | | | | | | | | | | | | | | | | | | UserRole.role_id
| | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | userRoleId
| | | | | | | | | | | | | | UserPayment.userBilling=Pi
| | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | userBillingName
| | | | | | | | | | | | | | | | userBillingStreet1
| | | | | | | | | | | | | | | | userBillingStreet2
| | | | | | | | | | | | | | | | userBillingCity
| | | | | | | | | | | | | | | | userBillingState
| | | | | | | | | | | | | | | | userBillingCountry
| | | | | | | | | | | | | | | | userBillingZipcode
| | | | | | | | | | | | | | | | UserBilling.userPayment=Pi
| | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | type
| | | | | | | | | | | | | | | | | | cardName
| | | | | | | | | | | | | | | | | | cardNumber
| | | | | | | | | | | | | | | | | | expiryMonth
| | | | | | | | | | | | | | | | | | expiryYear
| | | | | | | | | | | | | | | | | | cvc
| | | | | | | | | | | | | | | | | | holderName
| | | | | | | | | | | | | | | | | | defaultPayment
| | | | | | | | | | | | Null
| | | | | | | | Null
| | | | | | | | Null
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | ClassRef(CartItem)
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | CartItem.order_id
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | Order.cartItemList=Pi
| | | | | | | Join
| | | | | | | | ClassRef(Order)
| | | | | | | | ClassRef(CartItem)
| | | | | | | | Equals
| | | | | | | | | Order.id
| | | | | | | | | CartItem.order_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | qty
| | | | | | | | subtotal
| | | | | | Order.shippingAddress=Pi
| | | | | | | Join
| | | | | | | | ClassRef(Order)
| | | | | | | | ClassRef(ShippingAddress)
| | | | | | | | Equals
| | | | | | | | | lhs
| | | | | | | | | rhs
| | | | | | | List
| | | | | | | | id
| | | | | | | | shippingAddressName
| | | | | | | | shippingAddressStreet1
| | | | | | | | shippingAddressStreet2
| | | | | | | | shippingAddressCity
| | | | | | | | shippingAddressState
| | | | | | | | shippingAddressCountry
| | | | | | | | shippingAddressZipcode
| | | | | | | | ShippingAddress.user=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(ShippingAddress)
| | | | | | | | | | ClassRef(User)
| | | | | | | | | | Equals
| | | | | | | | | | | ShippingAddress.user_id
| | | | | | | | | | | User.id
| | | | | | | | | List
| | | | | | | | | | id
| | | | | | | | | | username
| | | | | | | | | | password
| | | | | | | | | | firstName
| | | | | | | | | | lastName
| | | | | | | | | | email
| | | | | | | | | | phone
| | | | | | | | | | enabled
| | | | | | Order.payment=Pi
| | | | | | | Join
| | | | | | | | ClassRef(Order)
| | | | | | | | ClassRef(Payment)
| | | | | | | | Equals
| | | | | | | | | lhs
| | | | | | | | | rhs
| | | | | | | List
| | | | | | | | id
| | | | | | | | type
| | | | | | | | cardName
| | | | | | | | cardNumber
| | | | | | | | expiryMonth
| | | | | | | | expiryYear
| | | | | | | | cvc
| | | | | | | | holderName
| | | | | | | | Payment.order=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(Payment)
| | | | | | | | | | ClassRef(Order)
| | | | | | | | | | Equals
| | | | | | | | | | | lhs
| | | | | | | | | | | rhs
| | | | | | | | | List
| | | | | | | | | | id
| | | | | | | | | | orderDate
| | | | | | | | | | shippingDate
| | | | | | | | | | shippingMethod
| | | | | | | | | | orederStatus
| | | | | | | | | | orderTotal
| | | | | | | | | | Order.user=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | Order.
| | | | | | | | | | | | | User.id
| | | | | | | | | | | List
| | | | | | | | | | | | id
| | | | | | | | | | | | username
| | | | | | | | | | | | password
| | | | | | | | | | | | firstName
| | | | | | | | | | | | lastName
| | | | | | | | | | | | email
| | | | | | | | | | | | phone
| | | | | | | | | | | | enabled
| | | | | | | | Payment.userBilling=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(Payment)
| | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | Equals
| | | | | | | | | | | lhs
| | | | | | | | | | | rhs
| | | | | | | | | List
| | | | | | | | | | id
| | | | | | | | | | userBillingName
| | | | | | | | | | userBillingStreet1
| | | | | | | | | | userBillingStreet2
| | | | | | | | | | userBillingCity
| | | | | | | | | | userBillingState
| | | | | | | | | | userBillingCountry
| | | | | | | | | | userBillingZipcode
| | | | | | Null
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Book.id), FieldRef(com.bookstore.domain.Book.title), FieldRef(com.bookstore.domain.Book.author), FieldRef(com.bookstore.domain.Book.publisher), FieldRef(com.bookstore.domain.Book.publicationDate), FieldRef(com.bookstore.domain.Book.language), FieldRef(com.bookstore.domain.Book.category), FieldRef(com.bookstore.domain.Book.numberOfPages), FieldRef(com.bookstore.domain.Book.format), FieldRef(com.bookstore.domain.Book.isbn), FieldRef(com.bookstore.domain.Book.shippingWeight), FieldRef(com.bookstore.domain.Book.listPrice), FieldRef(com.bookstore.domain.Book.ourPrice), FieldRef(com.bookstore.domain.Book.active), FieldRef(com.bookstore.domain.Book.description), FieldRef(com.bookstore.domain.Book.inStockNumber), FieldRef(com.bookstore.domain.Book.bookImage), FieldRef(com.bookstore.domain.Book.bookToCartItemsList)]
NRA.java: genExprNra(): projectNode name: CartItem.book=Pi
NRA.java: genExprNra(): nestexpr= CartItem.book=Pi
| Join
| | ClassRef(CartItem)
| | ClassRef(Book)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | ClassRef(Book)
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Book.id
| | | | | BookToCartItem.book_id
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | ClassRef(BookToCartItem)
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | BookToCartItem.book_id
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | ClassRef(BookToCartItem)
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | BookToCartItem.cart_tem_id
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | CartItem.bookToCartItemList=Pi
| | | | | | | Join
| | | | | | | | ClassRef(CartItem)
| | | | | | | | ClassRef(BookToCartItem)
| | | | | | | | Equals
| | | | | | | | | CartItem.id
| | | | | | | | | BookToCartItem.cart_tem_id
| | | | | | | List
| | | | | | | | id
| | | | | | CartItem.shoppingCart=Pi
| | | | | | | Join
| | | | | | | | ClassRef(CartItem)
| | | | | | | | ClassRef(ShoppingCart)
| | | | | | | | Equals
| | | | | | | | | CartItem.shopping_cart_id
| | | | | | | | | ShoppingCart.id
| | | | | | | List
| | | | | | | | id
| | | | | | | | GrandTotal
| | | | | | | | ShoppingCart.user=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(ShoppingCart)
| | | | | | | | | | ClassRef(User)
| | | | | | | | | | Equals
| | | | | | | | | | | lhs
| | | | | | | | | | | rhs
| | | | | | | | | List
| | | | | | | | | | id
| | | | | | | | | | username
| | | | | | | | | | password
| | | | | | | | | | firstName
| | | | | | | | | | lastName
| | | | | | | | | | email
| | | | | | | | | | phone
| | | | | | | | | | enabled
| | | | | | | | | | User.userShippingList=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | ClassRef(UserShipping)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | User.id
| | | | | | | | | | | | | UserShipping.user_id
| | | | | | | | | | | List
| | | | | | | | | | | | id
| | | | | | | | | | | | userShippingName
| | | | | | | | | | | | userShippingStreet1
| | | | | | | | | | | | userShippingStreet2
| | | | | | | | | | | | userShippingCity
| | | | | | | | | | | | userShippingState
| | | | | | | | | | | | userShippingCountry
| | | | | | | | | | | | userShippingZipcode
| | | | | | | | | | | | userShippingDefault
| | | | | | | | | | | | UserShipping.user=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(UserShipping)
| | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | UserShipping.user_id
| | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | id
| | | | | | | | | | | | | | username
| | | | | | | | | | | | | | password
| | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | email
| | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | User.userPaymentList=Pi
| | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | UserPayment.user_id
| | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | type
| | | | | | | | | | | | | | | | cardName
| | | | | | | | | | | | | | | | cardNumber
| | | | | | | | | | | | | | | | expiryMonth
| | | | | | | | | | | | | | | | expiryYear
| | | | | | | | | | | | | | | | cvc
| | | | | | | | | | | | | | | | holderName
| | | | | | | | | | | | | | | | defaultPayment
| | | | | | | | | | | | | | | | UserPayment.user=Pi
| | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | UserPayment.user_id
| | | | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | | | | | User.userRoles=Pi
| | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | | | | | UserRole.user_id
| | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | userRoleId
| | | | | | | | | | | | | | | | | | | | UserRole.user=Pi
| | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | UserRole.user_id
| | | | | | | | | | | | | | | | | | | | | | | User.userRoleId
| | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | | | | | | | UserRole.role=Pi
| | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | | | | | ClassRef(Role)
| | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | UserRole.role_id
| | | | | | | | | | | | | | | | | | | | | | | Role.userRoleId
| | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | roleId
| | | | | | | | | | | | | | | | | | | | | | name
| | | | | | | | | | | | | | | | | | | | | | Role.userRoles=Pi
| | | | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | | | ClassRef(Role)
| | | | | | | | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | | | Role.roleId
| | | | | | | | | | | | | | | | | | | | | | | | | UserRole.role_id
| | | | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | | | userRoleId
| | | | | | | | | | | | | | | | UserPayment.userBilling=Pi
| | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | userBillingName
| | | | | | | | | | | | | | | | | | userBillingStreet1
| | | | | | | | | | | | | | | | | | userBillingStreet2
| | | | | | | | | | | | | | | | | | userBillingCity
| | | | | | | | | | | | | | | | | | userBillingState
| | | | | | | | | | | | | | | | | | userBillingCountry
| | | | | | | | | | | | | | | | | | userBillingZipcode
| | | | | | | | | | | | | | | | | | UserBilling.userPayment=Pi
| | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | | | type
| | | | | | | | | | | | | | | | | | | | cardName
| | | | | | | | | | | | | | | | | | | | cardNumber
| | | | | | | | | | | | | | | | | | | | expiryMonth
| | | | | | | | | | | | | | | | | | | | expiryYear
| | | | | | | | | | | | | | | | | | | | cvc
| | | | | | | | | | | | | | | | | | | | holderName
| | | | | | | | | | | | | | | | | | | | defaultPayment
| | | | | | | | | | | | | | Null
| | | | | | | | | | Null
| | | | | | | | | | Null
| | | | | | CartItem.order=Pi
| | | | | | | Join
| | | | | | | | ClassRef(CartItem)
| | | | | | | | ClassRef(Order)
| | | | | | | | Equals
| | | | | | | | | CartItem.order_id
| | | | | | | | | Order.id
| | | | | | | List
| | | | | | | | id
| | | | | | | | orderDate
| | | | | | | | shippingDate
| | | | | | | | shippingMethod
| | | | | | | | orederStatus
| | | | | | | | orderTotal
| | | | | | | | Order.cartItemList=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(Order)
| | | | | | | | | | ClassRef(CartItem)
| | | | | | | | | | Equals
| | | | | | | | | | | Order.id
| | | | | | | | | | | CartItem.order_id
| | | | | | | | | List
| | | | | | | | | | id
| | | | | | | | | | qty
| | | | | | | | | | subtotal
| | | | | | | | Order.shippingAddress=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(Order)
| | | | | | | | | | ClassRef(ShippingAddress)
| | | | | | | | | | Equals
| | | | | | | | | | | lhs
| | | | | | | | | | | rhs
| | | | | | | | | List
| | | | | | | | | | id
| | | | | | | | | | shippingAddressName
| | | | | | | | | | shippingAddressStreet1
| | | | | | | | | | shippingAddressStreet2
| | | | | | | | | | shippingAddressCity
| | | | | | | | | | shippingAddressState
| | | | | | | | | | shippingAddressCountry
| | | | | | | | | | shippingAddressZipcode
| | | | | | | | | | ShippingAddress.user=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(ShippingAddress)
| | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | ShippingAddress.user_id
| | | | | | | | | | | | | User.id
| | | | | | | | | | | List
| | | | | | | | | | | | id
| | | | | | | | | | | | username
| | | | | | | | | | | | password
| | | | | | | | | | | | firstName
| | | | | | | | | | | | lastName
| | | | | | | | | | | | email
| | | | | | | | | | | | phone
| | | | | | | | | | | | enabled
| | | | | | | | Order.payment=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(Order)
| | | | | | | | | | ClassRef(Payment)
| | | | | | | | | | Equals
| | | | | | | | | | | lhs
| | | | | | | | | | | rhs
| | | | | | | | | List
| | | | | | | | | | id
| | | | | | | | | | type
| | | | | | | | | | cardName
| | | | | | | | | | cardNumber
| | | | | | | | | | expiryMonth
| | | | | | | | | | expiryYear
| | | | | | | | | | cvc
| | | | | | | | | | holderName
| | | | | | | | | | Payment.order=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(Payment)
| | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | lhs
| | | | | | | | | | | | | rhs
| | | | | | | | | | | List
| | | | | | | | | | | | id
| | | | | | | | | | | | orderDate
| | | | | | | | | | | | shippingDate
| | | | | | | | | | | | shippingMethod
| | | | | | | | | | | | orederStatus
| | | | | | | | | | | | orderTotal
| | | | | | | | | | | | Order.user=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | Order.
| | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | id
| | | | | | | | | | | | | | username
| | | | | | | | | | | | | | password
| | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | email
| | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | enabled
| | | | | | | | | | Payment.userBilling=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(Payment)
| | | | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | lhs
| | | | | | | | | | | | | rhs
| | | | | | | | | | | List
| | | | | | | | | | | | id
| | | | | | | | | | | | userBillingName
| | | | | | | | | | | | userBillingStreet1
| | | | | | | | | | | | userBillingStreet2
| | | | | | | | | | | | userBillingCity
| | | | | | | | | | | | userBillingState
| | | | | | | | | | | | userBillingCountry
| | | | | | | | | | | | userBillingZipcode
| | | | | | | | Null
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.util.List bookToCartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemList
NRA.java: genExprNra(): visited String=  com.bookstore.domain.CartItem~bookToCartItemList
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shopping_cart_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
NRA.java: genExprNra(): visited String=  com.bookstore.domain.CartItem~shoppingCart
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Order order>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: order_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=order
NRA.java: genExprNra(): visited String=  com.bookstore.domain.CartItem~order
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.CartItem.id), FieldRef(com.bookstore.domain.CartItem.qty), FieldRef(com.bookstore.domain.CartItem.subtotal), FieldRef(com.bookstore.domain.CartItem.book)]
NRA.java: genExprNra(): projectNode name: ShoppingCart.cartItemList=Pi
NRA.java: genExprNra(): nestexpr= ShoppingCart.cartItemList=Pi
| Join
| | ClassRef(ShoppingCart)
| | ClassRef(CartItem)
| | Equals
| | | ShoppingCart.id
| | | CartItem.shopping_cart_id
| List
| | id
| | qty
| | subtotal
| | CartItem.book=Pi
| | | Join
| | | | ClassRef(CartItem)
| | | | ClassRef(Book)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | ClassRef(Book)
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Book.id
| | | | | | | BookToCartItem.book_id
| | | | | List
| | | | | | id
| | | | | | BookToCartItem.book=Pi
| | | | | | | Join
| | | | | | | | ClassRef(BookToCartItem)
| | | | | | | | ClassRef(Book)
| | | | | | | | Equals
| | | | | | | | | BookToCartItem.book_id
| | | | | | | | | Book.id
| | | | | | | List
| | | | | | | | id
| | | | | | | | title
| | | | | | | | author
| | | | | | | | publisher
| | | | | | | | publicationDate
| | | | | | | | language
| | | | | | | | category
| | | | | | | | numberOfPages
| | | | | | | | format
| | | | | | | | isbn
| | | | | | | | shippingWeight
| | | | | | | | listPrice
| | | | | | | | ourPrice
| | | | | | | | active
| | | | | | | | description
| | | | | | | | inStockNumber
| | | | | | BookToCartItem.cartItem=Pi
| | | | | | | Join
| | | | | | | | ClassRef(BookToCartItem)
| | | | | | | | ClassRef(CartItem)
| | | | | | | | Equals
| | | | | | | | | BookToCartItem.cart_tem_id
| | | | | | | | | CartItem.id
| | | | | | | List
| | | | | | | | id
| | | | | | | | qty
| | | | | | | | subtotal
| | | | | | | | CartItem.bookToCartItemList=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(CartItem)
| | | | | | | | | | ClassRef(BookToCartItem)
| | | | | | | | | | Equals
| | | | | | | | | | | CartItem.id
| | | | | | | | | | | BookToCartItem.cart_tem_id
| | | | | | | | | List
| | | | | | | | | | id
| | | | | | | | CartItem.shoppingCart=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(CartItem)
| | | | | | | | | | ClassRef(ShoppingCart)
| | | | | | | | | | Equals
| | | | | | | | | | | CartItem.shopping_cart_id
| | | | | | | | | | | ShoppingCart.id
| | | | | | | | | List
| | | | | | | | | | id
| | | | | | | | | | GrandTotal
| | | | | | | | | | ShoppingCart.user=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(ShoppingCart)
| | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | lhs
| | | | | | | | | | | | | rhs
| | | | | | | | | | | List
| | | | | | | | | | | | id
| | | | | | | | | | | | username
| | | | | | | | | | | | password
| | | | | | | | | | | | firstName
| | | | | | | | | | | | lastName
| | | | | | | | | | | | email
| | | | | | | | | | | | phone
| | | | | | | | | | | | enabled
| | | | | | | | | | | | User.userShippingList=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | ClassRef(UserShipping)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | UserShipping.user_id
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | id
| | | | | | | | | | | | | | userShippingName
| | | | | | | | | | | | | | userShippingStreet1
| | | | | | | | | | | | | | userShippingStreet2
| | | | | | | | | | | | | | userShippingCity
| | | | | | | | | | | | | | userShippingState
| | | | | | | | | | | | | | userShippingCountry
| | | | | | | | | | | | | | userShippingZipcode
| | | | | | | | | | | | | | userShippingDefault
| | | | | | | | | | | | | | UserShipping.user=Pi
| | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | ClassRef(UserShipping)
| | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | UserShipping.user_id
| | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | | | User.userPaymentList=Pi
| | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | | | UserPayment.user_id
| | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | type
| | | | | | | | | | | | | | | | | | cardName
| | | | | | | | | | | | | | | | | | cardNumber
| | | | | | | | | | | | | | | | | | expiryMonth
| | | | | | | | | | | | | | | | | | expiryYear
| | | | | | | | | | | | | | | | | | cvc
| | | | | | | | | | | | | | | | | | holderName
| | | | | | | | | | | | | | | | | | defaultPayment
| | | | | | | | | | | | | | | | | | UserPayment.user=Pi
| | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | UserPayment.user_id
| | | | | | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | | | | | | | User.userRoles=Pi
| | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | | | | | | | UserRole.user_id
| | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | userRoleId
| | | | | | | | | | | | | | | | | | | | | | UserRole.user=Pi
| | | | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | | | UserRole.user_id
| | | | | | | | | | | | | | | | | | | | | | | | | User.userRoleId
| | | | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | | | | | | | | | UserRole.role=Pi
| | | | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | | | | | | | ClassRef(Role)
| | | | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | | | UserRole.role_id
| | | | | | | | | | | | | | | | | | | | | | | | | Role.userRoleId
| | | | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | | | roleId
| | | | | | | | | | | | | | | | | | | | | | | | name
| | | | | | | | | | | | | | | | | | | | | | | | Role.userRoles=Pi
| | | | | | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | | | | | ClassRef(Role)
| | | | | | | | | | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | | | | | Role.roleId
| | | | | | | | | | | | | | | | | | | | | | | | | | | UserRole.role_id
| | | | | | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | | | | | userRoleId
| | | | | | | | | | | | | | | | | | UserPayment.userBilling=Pi
| | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | | | userBillingName
| | | | | | | | | | | | | | | | | | | | userBillingStreet1
| | | | | | | | | | | | | | | | | | | | userBillingStreet2
| | | | | | | | | | | | | | | | | | | | userBillingCity
| | | | | | | | | | | | | | | | | | | | userBillingState
| | | | | | | | | | | | | | | | | | | | userBillingCountry
| | | | | | | | | | | | | | | | | | | | userBillingZipcode
| | | | | | | | | | | | | | | | | | | | UserBilling.userPayment=Pi
| | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | | | | | type
| | | | | | | | | | | | | | | | | | | | | | cardName
| | | | | | | | | | | | | | | | | | | | | | cardNumber
| | | | | | | | | | | | | | | | | | | | | | expiryMonth
| | | | | | | | | | | | | | | | | | | | | | expiryYear
| | | | | | | | | | | | | | | | | | | | | | cvc
| | | | | | | | | | | | | | | | | | | | | | holderName
| | | | | | | | | | | | | | | | | | | | | | defaultPayment
| | | | | | | | | | | | | | | | Null
| | | | | | | | | | | | Null
| | | | | | | | | | | | Null
| | | | | | | | CartItem.order=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(CartItem)
| | | | | | | | | | ClassRef(Order)
| | | | | | | | | | Equals
| | | | | | | | | | | CartItem.order_id
| | | | | | | | | | | Order.id
| | | | | | | | | List
| | | | | | | | | | id
| | | | | | | | | | orderDate
| | | | | | | | | | shippingDate
| | | | | | | | | | shippingMethod
| | | | | | | | | | orederStatus
| | | | | | | | | | orderTotal
| | | | | | | | | | Order.cartItemList=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | ClassRef(CartItem)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | Order.id
| | | | | | | | | | | | | CartItem.order_id
| | | | | | | | | | | List
| | | | | | | | | | | | id
| | | | | | | | | | | | qty
| | | | | | | | | | | | subtotal
| | | | | | | | | | Order.shippingAddress=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | ClassRef(ShippingAddress)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | lhs
| | | | | | | | | | | | | rhs
| | | | | | | | | | | List
| | | | | | | | | | | | id
| | | | | | | | | | | | shippingAddressName
| | | | | | | | | | | | shippingAddressStreet1
| | | | | | | | | | | | shippingAddressStreet2
| | | | | | | | | | | | shippingAddressCity
| | | | | | | | | | | | shippingAddressState
| | | | | | | | | | | | shippingAddressCountry
| | | | | | | | | | | | shippingAddressZipcode
| | | | | | | | | | | | ShippingAddress.user=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(ShippingAddress)
| | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | ShippingAddress.user_id
| | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | id
| | | | | | | | | | | | | | username
| | | | | | | | | | | | | | password
| | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | email
| | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | enabled
| | | | | | | | | | Order.payment=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | ClassRef(Payment)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | lhs
| | | | | | | | | | | | | rhs
| | | | | | | | | | | List
| | | | | | | | | | | | id
| | | | | | | | | | | | type
| | | | | | | | | | | | cardName
| | | | | | | | | | | | cardNumber
| | | | | | | | | | | | expiryMonth
| | | | | | | | | | | | expiryYear
| | | | | | | | | | | | cvc
| | | | | | | | | | | | holderName
| | | | | | | | | | | | Payment.order=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(Payment)
| | | | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | id
| | | | | | | | | | | | | | orderDate
| | | | | | | | | | | | | | shippingDate
| | | | | | | | | | | | | | shippingMethod
| | | | | | | | | | | | | | orederStatus
| | | | | | | | | | | | | | orderTotal
| | | | | | | | | | | | | | Order.user=Pi
| | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | Order.
| | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | Payment.userBilling=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(Payment)
| | | | | | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | id
| | | | | | | | | | | | | | userBillingName
| | | | | | | | | | | | | | userBillingStreet1
| | | | | | | | | | | | | | userBillingStreet2
| | | | | | | | | | | | | | userBillingCity
| | | | | | | | | | | | | | userBillingState
| | | | | | | | | | | | | | userBillingCountry
| | | | | | | | | | | | | | userBillingZipcode
| | | | | | | | | | Null
| | Null
| | Null
| | Null
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
NRA.java: genExprNra(): visited String=  com.bookstore.domain.ShoppingCart~user
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.ShoppingCart.id), FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal), FieldRef(com.bookstore.domain.ShoppingCart.cartItemList)]
NRA.java: genExprNra(): projectNode name: User.shoppingCart=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): key : return.shoppingCart
 value : 
 User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | ClassRef(ShoppingCart)
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | ShoppingCart.id
| | | | | CartItem.shopping_cart_id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | ClassRef(CartItem)
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | lhs
| | | | | | | rhs
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | Book.bookToCartItemsList=Pi
| | | | | | | Join
| | | | | | | | ClassRef(Book)
| | | | | | | | ClassRef(BookToCartItem)
| | | | | | | | Equals
| | | | | | | | | Book.id
| | | | | | | | | BookToCartItem.book_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | BookToCartItem.book=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(BookToCartItem)
| | | | | | | | | | ClassRef(Book)
| | | | | | | | | | Equals
| | | | | | | | | | | BookToCartItem.book_id
| | | | | | | | | | | Book.id
| | | | | | | | | List
| | | | | | | | | | id
| | | | | | | | | | title
| | | | | | | | | | author
| | | | | | | | | | publisher
| | | | | | | | | | publicationDate
| | | | | | | | | | language
| | | | | | | | | | category
| | | | | | | | | | numberOfPages
| | | | | | | | | | format
| | | | | | | | | | isbn
| | | | | | | | | | shippingWeight
| | | | | | | | | | listPrice
| | | | | | | | | | ourPrice
| | | | | | | | | | active
| | | | | | | | | | description
| | | | | | | | | | inStockNumber
| | | | | | | | BookToCartItem.cartItem=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(BookToCartItem)
| | | | | | | | | | ClassRef(CartItem)
| | | | | | | | | | Equals
| | | | | | | | | | | BookToCartItem.cart_tem_id
| | | | | | | | | | | CartItem.id
| | | | | | | | | List
| | | | | | | | | | id
| | | | | | | | | | qty
| | | | | | | | | | subtotal
| | | | | | | | | | CartItem.bookToCartItemList=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(CartItem)
| | | | | | | | | | | | ClassRef(BookToCartItem)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | CartItem.id
| | | | | | | | | | | | | BookToCartItem.cart_tem_id
| | | | | | | | | | | List
| | | | | | | | | | | | id
| | | | | | | | | | CartItem.shoppingCart=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(CartItem)
| | | | | | | | | | | | ClassRef(ShoppingCart)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | CartItem.shopping_cart_id
| | | | | | | | | | | | | ShoppingCart.id
| | | | | | | | | | | List
| | | | | | | | | | | | id
| | | | | | | | | | | | GrandTotal
| | | | | | | | | | | | ShoppingCart.user=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(ShoppingCart)
| | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | id
| | | | | | | | | | | | | | username
| | | | | | | | | | | | | | password
| | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | email
| | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | User.userShippingList=Pi
| | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | ClassRef(UserShipping)
| | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | UserShipping.user_id
| | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | userShippingName
| | | | | | | | | | | | | | | | userShippingStreet1
| | | | | | | | | | | | | | | | userShippingStreet2
| | | | | | | | | | | | | | | | userShippingCity
| | | | | | | | | | | | | | | | userShippingState
| | | | | | | | | | | | | | | | userShippingCountry
| | | | | | | | | | | | | | | | userShippingZipcode
| | | | | | | | | | | | | | | | userShippingDefault
| | | | | | | | | | | | | | | | UserShipping.user=Pi
| | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | ClassRef(UserShipping)
| | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | UserShipping.user_id
| | | | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | | | | | User.userPaymentList=Pi
| | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | | | | | UserPayment.user_id
| | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | | | type
| | | | | | | | | | | | | | | | | | | | cardName
| | | | | | | | | | | | | | | | | | | | cardNumber
| | | | | | | | | | | | | | | | | | | | expiryMonth
| | | | | | | | | | | | | | | | | | | | expiryYear
| | | | | | | | | | | | | | | | | | | | cvc
| | | | | | | | | | | | | | | | | | | | holderName
| | | | | | | | | | | | | | | | | | | | defaultPayment
| | | | | | | | | | | | | | | | | | | | UserPayment.user=Pi
| | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | UserPayment.user_id
| | | | | | | | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | | | | | | | | | User.userRoles=Pi
| | | | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | | | | | | | | | UserRole.user_id
| | | | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | | | userRoleId
| | | | | | | | | | | | | | | | | | | | | | | | UserRole.user=Pi
| | | | | | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | | | | | UserRole.user_id
| | | | | | | | | | | | | | | | | | | | | | | | | | | User.userRoleId
| | | | | | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | | | | | | | | | | | UserRole.role=Pi
| | | | | | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | | | | | | | | | ClassRef(Role)
| | | | | | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | | | | | UserRole.role_id
| | | | | | | | | | | | | | | | | | | | | | | | | | | Role.userRoleId
| | | | | | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | | | | | roleId
| | | | | | | | | | | | | | | | | | | | | | | | | | name
| | | | | | | | | | | | | | | | | | | | | | | | | | Role.userRoles=Pi
| | | | | | | | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | | | | | | | ClassRef(Role)
| | | | | | | | | | | | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | | | | | | | Role.roleId
| | | | | | | | | | | | | | | | | | | | | | | | | | | | | UserRole.role_id
| | | | | | | | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | | | | | | | userRoleId
| | | | | | | | | | | | | | | | | | | | UserPayment.userBilling=Pi
| | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | | | | | userBillingName
| | | | | | | | | | | | | | | | | | | | | | userBillingStreet1
| | | | | | | | | | | | | | | | | | | | | | userBillingStreet2
| | | | | | | | | | | | | | | | | | | | | | userBillingCity
| | | | | | | | | | | | | | | | | | | | | | userBillingState
| | | | | | | | | | | | | | | | | | | | | | userBillingCountry
| | | | | | | | | | | | | | | | | | | | | | userBillingZipcode
| | | | | | | | | | | | | | | | | | | | | | UserBilling.userPayment=Pi
| | | | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | | | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | | | | | | | type
| | | | | | | | | | | | | | | | | | | | | | | | cardName
| | | | | | | | | | | | | | | | | | | | | | | | cardNumber
| | | | | | | | | | | | | | | | | | | | | | | | expiryMonth
| | | | | | | | | | | | | | | | | | | | | | | | expiryYear
| | | | | | | | | | | | | | | | | | | | | | | | cvc
| | | | | | | | | | | | | | | | | | | | | | | | holderName
| | | | | | | | | | | | | | | | | | | | | | | | defaultPayment
| | | | | | | | | | | | | | | | | | Null
| | | | | | | | | | | | | | Null
| | | | | | | | | | | | | | Null
| | | | | | | | | | CartItem.order=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(CartItem)
| | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | CartItem.order_id
| | | | | | | | | | | | | Order.id
| | | | | | | | | | | List
| | | | | | | | | | | | id
| | | | | | | | | | | | orderDate
| | | | | | | | | | | | shippingDate
| | | | | | | | | | | | shippingMethod
| | | | | | | | | | | | orederStatus
| | | | | | | | | | | | orderTotal
| | | | | | | | | | | | Order.cartItemList=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | | | ClassRef(CartItem)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | Order.id
| | | | | | | | | | | | | | | CartItem.order_id
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | id
| | | | | | | | | | | | | | qty
| | | | | | | | | | | | | | subtotal
| | | | | | | | | | | | Order.shippingAddress=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | | | ClassRef(ShippingAddress)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | id
| | | | | | | | | | | | | | shippingAddressName
| | | | | | | | | | | | | | shippingAddressStreet1
| | | | | | | | | | | | | | shippingAddressStreet2
| | | | | | | | | | | | | | shippingAddressCity
| | | | | | | | | | | | | | shippingAddressState
| | | | | | | | | | | | | | shippingAddressCountry
| | | | | | | | | | | | | | shippingAddressZipcode
| | | | | | | | | | | | | | ShippingAddress.user=Pi
| | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | ClassRef(ShippingAddress)
| | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | ShippingAddress.user_id
| | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | Order.payment=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | | | ClassRef(Payment)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | id
| | | | | | | | | | | | | | type
| | | | | | | | | | | | | | cardName
| | | | | | | | | | | | | | cardNumber
| | | | | | | | | | | | | | expiryMonth
| | | | | | | | | | | | | | expiryYear
| | | | | | | | | | | | | | cvc
| | | | | | | | | | | | | | holderName
| | | | | | | | | | | | | | Payment.order=Pi
| | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | ClassRef(Payment)
| | | | | | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | orderDate
| | | | | | | | | | | | | | | | shippingDate
| | | | | | | | | | | | | | | | shippingMethod
| | | | | | | | | | | | | | | | orederStatus
| | | | | | | | | | | | | | | | orderTotal
| | | | | | | | | | | | | | | | Order.user=Pi
| | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | Order.
| | | | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | Payment.userBilling=Pi
| | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | ClassRef(Payment)
| | | | | | | | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | userBillingName
| | | | | | | | | | | | | | | | userBillingStreet1
| | | | | | | | | | | | | | | | userBillingStreet2
| | | | | | | | | | | | | | | | userBillingCity
| | | | | | | | | | | | | | | | userBillingState
| | | | | | | | | | | | | | | | userBillingCountry
| | | | | | | | | | | | | | | | userBillingZipcode
| | | | | | | | | | | | Null
| | | | Null
| | | | Null
| | | | Null
| | Null
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.userShippingList
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=User
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userShippingList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.bookstore.domain.UserShipping
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.bookstore.domain.UserShipping
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.UserShipping)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): key= return.userShippingList
 value= Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.UserShipping)
| NullOp
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| User.id
| UserShipping.user_id
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.UserShipping)
| NullOp
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserShipping
NRA.java: genExprNra(): nested field name= userShippingList
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.UserShipping
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.UserShipping: java.lang.Long id>, <com.bookstore.domain.UserShipping: java.lang.String userShippingName>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCity>, <com.bookstore.domain.UserShipping: java.lang.String userShippingState>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>, <com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>, <com.bookstore.domain.UserShipping: boolean userShippingDefault>, <com.bookstore.domain.UserShipping: com.bookstore.domain.User user>]
NRA.java: genExprNra(): com.bookstore.domain.UserShipping fields= [<com.bookstore.domain.UserShipping: java.lang.Long id>, <com.bookstore.domain.UserShipping: java.lang.String userShippingName>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCity>, <com.bookstore.domain.UserShipping: java.lang.String userShippingState>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>, <com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>, <com.bookstore.domain.UserShipping: boolean userShippingDefault>, <com.bookstore.domain.UserShipping: com.bookstore.domain.User user>]
NRA.java: genExprNra(): <com.bookstore.domain.UserShipping: com.bookstore.domain.User user> Field is visited skipping count
NRA.java: genExprNra(): children count = 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingCity>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingState>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: boolean userShippingDefault>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
NRA.java: genExprNra(): visited String=  com.bookstore.domain.UserShipping~user
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.UserShipping.id), FieldRef(com.bookstore.domain.UserShipping.userShippingName), FieldRef(com.bookstore.domain.UserShipping.userShippingStreet1), FieldRef(com.bookstore.domain.UserShipping.userShippingStreet2), FieldRef(com.bookstore.domain.UserShipping.userShippingCity), FieldRef(com.bookstore.domain.UserShipping.userShippingState), FieldRef(com.bookstore.domain.UserShipping.userShippingCountry), FieldRef(com.bookstore.domain.UserShipping.userShippingZipcode), FieldRef(com.bookstore.domain.UserShipping.userShippingDefault)]
NRA.java: genExprNra(): projectNode name: User.userShippingList=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): key : return.userShippingList
 value : 
 User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.userPaymentList
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=User
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userPaymentList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.bookstore.domain.UserPayment
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.bookstore.domain.UserPayment
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.UserPayment)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): key= return.userPaymentList
 value= Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.UserPayment)
| NullOp
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| User.id
| UserPayment.user_id
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.UserPayment)
| NullOp
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserPayment
NRA.java: genExprNra(): nested field name= userPaymentList
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.UserPayment
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.UserPayment: java.lang.Long id>, <com.bookstore.domain.UserPayment: java.lang.String type>, <com.bookstore.domain.UserPayment: java.lang.String cardName>, <com.bookstore.domain.UserPayment: java.lang.String cardNumber>, <com.bookstore.domain.UserPayment: int expiryMonth>, <com.bookstore.domain.UserPayment: int expiryYear>, <com.bookstore.domain.UserPayment: int cvc>, <com.bookstore.domain.UserPayment: java.lang.String holderName>, <com.bookstore.domain.UserPayment: boolean defaultPayment>, <com.bookstore.domain.UserPayment: com.bookstore.domain.User user>, <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>]
NRA.java: genExprNra(): com.bookstore.domain.UserPayment fields= [<com.bookstore.domain.UserPayment: java.lang.Long id>, <com.bookstore.domain.UserPayment: java.lang.String type>, <com.bookstore.domain.UserPayment: java.lang.String cardName>, <com.bookstore.domain.UserPayment: java.lang.String cardNumber>, <com.bookstore.domain.UserPayment: int expiryMonth>, <com.bookstore.domain.UserPayment: int expiryYear>, <com.bookstore.domain.UserPayment: int cvc>, <com.bookstore.domain.UserPayment: java.lang.String holderName>, <com.bookstore.domain.UserPayment: boolean defaultPayment>, <com.bookstore.domain.UserPayment: com.bookstore.domain.User user>, <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>]
NRA.java: genExprNra(): <com.bookstore.domain.UserPayment: com.bookstore.domain.User user> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling> Field is visited skipping count
NRA.java: genExprNra(): children count = 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String type>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String cardName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String cardNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int expiryMonth>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int expiryYear>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int cvc>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String holderName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: boolean defaultPayment>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
NRA.java: genExprNra(): visited String=  com.bookstore.domain.UserPayment~user
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: userPayment

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=userBilling
NRA.java: genExprNra(): visited String=  com.bookstore.domain.UserPayment~userBilling
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.UserPayment.id), FieldRef(com.bookstore.domain.UserPayment.type), FieldRef(com.bookstore.domain.UserPayment.cardName), FieldRef(com.bookstore.domain.UserPayment.cardNumber), FieldRef(com.bookstore.domain.UserPayment.expiryMonth), FieldRef(com.bookstore.domain.UserPayment.expiryYear), FieldRef(com.bookstore.domain.UserPayment.cvc), FieldRef(com.bookstore.domain.UserPayment.holderName), FieldRef(com.bookstore.domain.UserPayment.defaultPayment)]
NRA.java: genExprNra(): projectNode name: User.userPaymentList=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): key : return.userPaymentList
 value : 
 User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.userRoles
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=User
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userRoles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set userRoles [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.bookstore.domain.security.UserRole
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.bookstore.domain.security.UserRole
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.security.UserRole)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): key= return.userRoles
 value= Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.security.UserRole)
| NullOp
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| User.id
| UserRole.user_id
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.security.UserRole)
| NullOp
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): nested field name= userRoles
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>]
NRA.java: genExprNra(): com.bookstore.domain.security.UserRole fields= [<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>]
NRA.java: genExprNra(): <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role> Field is visited skipping count
NRA.java: genExprNra(): children count = 1
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToOne; num elems: 1 elems: 
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
NRA.java: genExprNra(): visited String=  com.bookstore.domain.security.UserRole~user
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToOne; num elems: 1 elems: 
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=role
NRA.java: genExprNra(): visited String=  com.bookstore.domain.security.UserRole~role
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.security.UserRole.userRoleId)]
NRA.java: genExprNra(): projectNode name: User.userRoles=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): key : return.userRoles
 value : 
 User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: constructDIR(): key = return.phone
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone
DIRRegionAnalyzer.java: constructDIR(): key = return.shoppingCart.user
DIRRegionAnalyzer.java: constructDIR(): val = Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return.userShippingList
DIRRegionAnalyzer.java: constructDIR(): val = User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
DIRRegionAnalyzer.java: constructDIR(): key = return.email
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email
DIRRegionAnalyzer.java: constructDIR(): key = return.lastName
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName
DIRRegionAnalyzer.java: constructDIR(): key = return.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): val = User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | ClassRef(ShoppingCart)
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | ShoppingCart.id
| | | | | CartItem.shopping_cart_id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | ClassRef(CartItem)
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | lhs
| | | | | | | rhs
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | Book.bookToCartItemsList=Pi
| | | | | | | Join
| | | | | | | | ClassRef(Book)
| | | | | | | | ClassRef(BookToCartItem)
| | | | | | | | Equals
| | | | | | | | | Book.id
| | | | | | | | | BookToCartItem.book_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | BookToCartItem.book=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(BookToCartItem)
| | | | | | | | | | ClassRef(Book)
| | | | | | | | | | Equals
| | | | | | | | | | | BookToCartItem.book_id
| | | | | | | | | | | Book.id
| | | | | | | | | List
| | | | | | | | | | id
| | | | | | | | | | title
| | | | | | | | | | author
| | | | | | | | | | publisher
| | | | | | | | | | publicationDate
| | | | | | | | | | language
| | | | | | | | | | category
| | | | | | | | | | numberOfPages
| | | | | | | | | | format
| | | | | | | | | | isbn
| | | | | | | | | | shippingWeight
| | | | | | | | | | listPrice
| | | | | | | | | | ourPrice
| | | | | | | | | | active
| | | | | | | | | | description
| | | | | | | | | | inStockNumber
| | | | | | | | BookToCartItem.cartItem=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(BookToCartItem)
| | | | | | | | | | ClassRef(CartItem)
| | | | | | | | | | Equals
| | | | | | | | | | | BookToCartItem.cart_tem_id
| | | | | | | | | | | CartItem.id
| | | | | | | | | List
| | | | | | | | | | id
| | | | | | | | | | qty
| | | | | | | | | | subtotal
| | | | | | | | | | CartItem.bookToCartItemList=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(CartItem)
| | | | | | | | | | | | ClassRef(BookToCartItem)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | CartItem.id
| | | | | | | | | | | | | BookToCartItem.cart_tem_id
| | | | | | | | | | | List
| | | | | | | | | | | | id
| | | | | | | | | | CartItem.shoppingCart=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(CartItem)
| | | | | | | | | | | | ClassRef(ShoppingCart)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | CartItem.shopping_cart_id
| | | | | | | | | | | | | ShoppingCart.id
| | | | | | | | | | | List
| | | | | | | | | | | | id
| | | | | | | | | | | | GrandTotal
| | | | | | | | | | | | ShoppingCart.user=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(ShoppingCart)
| | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | id
| | | | | | | | | | | | | | username
| | | | | | | | | | | | | | password
| | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | email
| | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | User.userShippingList=Pi
| | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | ClassRef(UserShipping)
| | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | UserShipping.user_id
| | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | userShippingName
| | | | | | | | | | | | | | | | userShippingStreet1
| | | | | | | | | | | | | | | | userShippingStreet2
| | | | | | | | | | | | | | | | userShippingCity
| | | | | | | | | | | | | | | | userShippingState
| | | | | | | | | | | | | | | | userShippingCountry
| | | | | | | | | | | | | | | | userShippingZipcode
| | | | | | | | | | | | | | | | userShippingDefault
| | | | | | | | | | | | | | | | UserShipping.user=Pi
| | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | ClassRef(UserShipping)
| | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | UserShipping.user_id
| | | | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | | | | | User.userPaymentList=Pi
| | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | | | | | UserPayment.user_id
| | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | | | type
| | | | | | | | | | | | | | | | | | | | cardName
| | | | | | | | | | | | | | | | | | | | cardNumber
| | | | | | | | | | | | | | | | | | | | expiryMonth
| | | | | | | | | | | | | | | | | | | | expiryYear
| | | | | | | | | | | | | | | | | | | | cvc
| | | | | | | | | | | | | | | | | | | | holderName
| | | | | | | | | | | | | | | | | | | | defaultPayment
| | | | | | | | | | | | | | | | | | | | UserPayment.user=Pi
| | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | UserPayment.user_id
| | | | | | | | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | | | | | | | | | User.userRoles=Pi
| | | | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | | | | | | | | | UserRole.user_id
| | | | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | | | userRoleId
| | | | | | | | | | | | | | | | | | | | | | | | UserRole.user=Pi
| | | | | | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | | | | | UserRole.user_id
| | | | | | | | | | | | | | | | | | | | | | | | | | | User.userRoleId
| | | | | | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | | | | | | | | | | | UserRole.role=Pi
| | | | | | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | | | | | | | | | ClassRef(Role)
| | | | | | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | | | | | UserRole.role_id
| | | | | | | | | | | | | | | | | | | | | | | | | | | Role.userRoleId
| | | | | | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | | | | | roleId
| | | | | | | | | | | | | | | | | | | | | | | | | | name
| | | | | | | | | | | | | | | | | | | | | | | | | | Role.userRoles=Pi
| | | | | | | | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | | | | | | | ClassRef(Role)
| | | | | | | | | | | | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | | | | | | | Role.roleId
| | | | | | | | | | | | | | | | | | | | | | | | | | | | | UserRole.role_id
| | | | | | | | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | | | | | | | userRoleId
| | | | | | | | | | | | | | | | | | | | UserPayment.userBilling=Pi
| | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | | | | | userBillingName
| | | | | | | | | | | | | | | | | | | | | | userBillingStreet1
| | | | | | | | | | | | | | | | | | | | | | userBillingStreet2
| | | | | | | | | | | | | | | | | | | | | | userBillingCity
| | | | | | | | | | | | | | | | | | | | | | userBillingState
| | | | | | | | | | | | | | | | | | | | | | userBillingCountry
| | | | | | | | | | | | | | | | | | | | | | userBillingZipcode
| | | | | | | | | | | | | | | | | | | | | | UserBilling.userPayment=Pi
| | | | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | | | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | | | | | | | type
| | | | | | | | | | | | | | | | | | | | | | | | cardName
| | | | | | | | | | | | | | | | | | | | | | | | cardNumber
| | | | | | | | | | | | | | | | | | | | | | | | expiryMonth
| | | | | | | | | | | | | | | | | | | | | | | | expiryYear
| | | | | | | | | | | | | | | | | | | | | | | | cvc
| | | | | | | | | | | | | | | | | | | | | | | | holderName
| | | | | | | | | | | | | | | | | | | | | | | | defaultPayment
| | | | | | | | | | | | | | | | | | Null
| | | | | | | | | | | | | | Null
| | | | | | | | | | | | | | Null
| | | | | | | | | | CartItem.order=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(CartItem)
| | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | CartItem.order_id
| | | | | | | | | | | | | Order.id
| | | | | | | | | | | List
| | | | | | | | | | | | id
| | | | | | | | | | | | orderDate
| | | | | | | | | | | | shippingDate
| | | | | | | | | | | | shippingMethod
| | | | | | | | | | | | orederStatus
| | | | | | | | | | | | orderTotal
| | | | | | | | | | | | Order.cartItemList=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | | | ClassRef(CartItem)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | Order.id
| | | | | | | | | | | | | | | CartItem.order_id
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | id
| | | | | | | | | | | | | | qty
| | | | | | | | | | | | | | subtotal
| | | | | | | | | | | | Order.shippingAddress=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | | | ClassRef(ShippingAddress)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | id
| | | | | | | | | | | | | | shippingAddressName
| | | | | | | | | | | | | | shippingAddressStreet1
| | | | | | | | | | | | | | shippingAddressStreet2
| | | | | | | | | | | | | | shippingAddressCity
| | | | | | | | | | | | | | shippingAddressState
| | | | | | | | | | | | | | shippingAddressCountry
| | | | | | | | | | | | | | shippingAddressZipcode
| | | | | | | | | | | | | | ShippingAddress.user=Pi
| | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | ClassRef(ShippingAddress)
| | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | ShippingAddress.user_id
| | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | Order.payment=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | | | ClassRef(Payment)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | id
| | | | | | | | | | | | | | type
| | | | | | | | | | | | | | cardName
| | | | | | | | | | | | | | cardNumber
| | | | | | | | | | | | | | expiryMonth
| | | | | | | | | | | | | | expiryYear
| | | | | | | | | | | | | | cvc
| | | | | | | | | | | | | | holderName
| | | | | | | | | | | | | | Payment.order=Pi
| | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | ClassRef(Payment)
| | | | | | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | orderDate
| | | | | | | | | | | | | | | | shippingDate
| | | | | | | | | | | | | | | | shippingMethod
| | | | | | | | | | | | | | | | orederStatus
| | | | | | | | | | | | | | | | orderTotal
| | | | | | | | | | | | | | | | Order.user=Pi
| | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | Order.
| | | | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | Payment.userBilling=Pi
| | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | ClassRef(Payment)
| | | | | | | | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | userBillingName
| | | | | | | | | | | | | | | | userBillingStreet1
| | | | | | | | | | | | | | | | userBillingStreet2
| | | | | | | | | | | | | | | | userBillingCity
| | | | | | | | | | | | | | | | userBillingState
| | | | | | | | | | | | | | | | userBillingCountry
| | | | | | | | | | | | | | | | userBillingZipcode
| | | | | | | | | | | | Null
| | | | Null
| | | | Null
| | | | Null
| | Null
DIRRegionAnalyzer.java: constructDIR(): key = return.userRoles
DIRRegionAnalyzer.java: constructDIR(): val = User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId
DIRRegionAnalyzer.java: constructDIR(): key = return.shoppingCart.id
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id)
DIRRegionAnalyzer.java: constructDIR(): key = return.shoppingCart.cartItemList
DIRRegionAnalyzer.java: constructDIR(): val = Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return.userPaymentList
DIRRegionAnalyzer.java: constructDIR(): val = User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
DIRRegionAnalyzer.java: constructDIR(): key = return.username
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username
DIRRegionAnalyzer.java: constructDIR(): key = return.password
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password
DIRRegionAnalyzer.java: constructDIR(): key = return.enabled
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled
DIRRegionAnalyzer.java: constructDIR(): key = return.firstName
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName
DIRRegionAnalyzer.java: constructDIR(): key = return.id
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id
DIRRegionAnalyzer.java: constructDIR(): key = return.shoppingCart.GrandTotal
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String) END
DIRRegionAnalyzer.java: constructDIR(): v1 access paths: [$r1.id, $r1.username, $r1.password, $r1.firstName, $r1.lastName, $r1.email, $r1.phone, $r1.enabled, $r1.shoppingCart, $r1.userShippingList, $r1.userPaymentList, $r1.userRoles]
DIRRegionAnalyzer.java: constructDIR(): key = $r1.id
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id
DIRRegionAnalyzer.java: constructDIR(): key = $r1.username
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.username
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username
DIRRegionAnalyzer.java: constructDIR(): key = $r1.password
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.password
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password
DIRRegionAnalyzer.java: constructDIR(): key = $r1.firstName
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.firstName
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName
DIRRegionAnalyzer.java: constructDIR(): key = $r1.lastName
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.lastName
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName
DIRRegionAnalyzer.java: constructDIR(): key = $r1.email
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.email
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email
DIRRegionAnalyzer.java: constructDIR(): key = $r1.phone
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.phone
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone
DIRRegionAnalyzer.java: constructDIR(): key = $r1.enabled
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.enabled
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled
DIRRegionAnalyzer.java: constructDIR(): key = $r1.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.shoppingCart
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | ClassRef(ShoppingCart)
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | ShoppingCart.id
| | | | | CartItem.shopping_cart_id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | ClassRef(CartItem)
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | lhs
| | | | | | | rhs
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | Book.bookToCartItemsList=Pi
| | | | | | | Join
| | | | | | | | ClassRef(Book)
| | | | | | | | ClassRef(BookToCartItem)
| | | | | | | | Equals
| | | | | | | | | Book.id
| | | | | | | | | BookToCartItem.book_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | BookToCartItem.book=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(BookToCartItem)
| | | | | | | | | | ClassRef(Book)
| | | | | | | | | | Equals
| | | | | | | | | | | BookToCartItem.book_id
| | | | | | | | | | | Book.id
| | | | | | | | | List
| | | | | | | | | | id
| | | | | | | | | | title
| | | | | | | | | | author
| | | | | | | | | | publisher
| | | | | | | | | | publicationDate
| | | | | | | | | | language
| | | | | | | | | | category
| | | | | | | | | | numberOfPages
| | | | | | | | | | format
| | | | | | | | | | isbn
| | | | | | | | | | shippingWeight
| | | | | | | | | | listPrice
| | | | | | | | | | ourPrice
| | | | | | | | | | active
| | | | | | | | | | description
| | | | | | | | | | inStockNumber
| | | | | | | | BookToCartItem.cartItem=Pi
| | | | | | | | | Join
| | | | | | | | | | ClassRef(BookToCartItem)
| | | | | | | | | | ClassRef(CartItem)
| | | | | | | | | | Equals
| | | | | | | | | | | BookToCartItem.cart_tem_id
| | | | | | | | | | | CartItem.id
| | | | | | | | | List
| | | | | | | | | | id
| | | | | | | | | | qty
| | | | | | | | | | subtotal
| | | | | | | | | | CartItem.bookToCartItemList=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(CartItem)
| | | | | | | | | | | | ClassRef(BookToCartItem)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | CartItem.id
| | | | | | | | | | | | | BookToCartItem.cart_tem_id
| | | | | | | | | | | List
| | | | | | | | | | | | id
| | | | | | | | | | CartItem.shoppingCart=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(CartItem)
| | | | | | | | | | | | ClassRef(ShoppingCart)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | CartItem.shopping_cart_id
| | | | | | | | | | | | | ShoppingCart.id
| | | | | | | | | | | List
| | | | | | | | | | | | id
| | | | | | | | | | | | GrandTotal
| | | | | | | | | | | | ShoppingCart.user=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(ShoppingCart)
| | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | id
| | | | | | | | | | | | | | username
| | | | | | | | | | | | | | password
| | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | email
| | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | User.userShippingList=Pi
| | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | ClassRef(UserShipping)
| | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | UserShipping.user_id
| | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | userShippingName
| | | | | | | | | | | | | | | | userShippingStreet1
| | | | | | | | | | | | | | | | userShippingStreet2
| | | | | | | | | | | | | | | | userShippingCity
| | | | | | | | | | | | | | | | userShippingState
| | | | | | | | | | | | | | | | userShippingCountry
| | | | | | | | | | | | | | | | userShippingZipcode
| | | | | | | | | | | | | | | | userShippingDefault
| | | | | | | | | | | | | | | | UserShipping.user=Pi
| | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | ClassRef(UserShipping)
| | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | UserShipping.user_id
| | | | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | | | | | User.userPaymentList=Pi
| | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | | | | | UserPayment.user_id
| | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | | | type
| | | | | | | | | | | | | | | | | | | | cardName
| | | | | | | | | | | | | | | | | | | | cardNumber
| | | | | | | | | | | | | | | | | | | | expiryMonth
| | | | | | | | | | | | | | | | | | | | expiryYear
| | | | | | | | | | | | | | | | | | | | cvc
| | | | | | | | | | | | | | | | | | | | holderName
| | | | | | | | | | | | | | | | | | | | defaultPayment
| | | | | | | | | | | | | | | | | | | | UserPayment.user=Pi
| | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | UserPayment.user_id
| | | | | | | | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | | | | | | | | | User.userRoles=Pi
| | | | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | | | | | | | | | UserRole.user_id
| | | | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | | | userRoleId
| | | | | | | | | | | | | | | | | | | | | | | | UserRole.user=Pi
| | | | | | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | | | | | UserRole.user_id
| | | | | | | | | | | | | | | | | | | | | | | | | | | User.userRoleId
| | | | | | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | | | | | | | | | | | UserRole.role=Pi
| | | | | | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | | | | | | | | | ClassRef(Role)
| | | | | | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | | | | | UserRole.role_id
| | | | | | | | | | | | | | | | | | | | | | | | | | | Role.userRoleId
| | | | | | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | | | | | roleId
| | | | | | | | | | | | | | | | | | | | | | | | | | name
| | | | | | | | | | | | | | | | | | | | | | | | | | Role.userRoles=Pi
| | | | | | | | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | | | | | | | ClassRef(Role)
| | | | | | | | | | | | | | | | | | | | | | | | | | | | ClassRef(UserRole)
| | | | | | | | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | | | | | | | Role.roleId
| | | | | | | | | | | | | | | | | | | | | | | | | | | | | UserRole.role_id
| | | | | | | | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | | | | | | | userRoleId
| | | | | | | | | | | | | | | | | | | | UserPayment.userBilling=Pi
| | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | | | | | userBillingName
| | | | | | | | | | | | | | | | | | | | | | userBillingStreet1
| | | | | | | | | | | | | | | | | | | | | | userBillingStreet2
| | | | | | | | | | | | | | | | | | | | | | userBillingCity
| | | | | | | | | | | | | | | | | | | | | | userBillingState
| | | | | | | | | | | | | | | | | | | | | | userBillingCountry
| | | | | | | | | | | | | | | | | | | | | | userBillingZipcode
| | | | | | | | | | | | | | | | | | | | | | UserBilling.userPayment=Pi
| | | | | | | | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | | | | | | | | | | | | | | | ClassRef(UserPayment)
| | | | | | | | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | | | | | | | type
| | | | | | | | | | | | | | | | | | | | | | | | cardName
| | | | | | | | | | | | | | | | | | | | | | | | cardNumber
| | | | | | | | | | | | | | | | | | | | | | | | expiryMonth
| | | | | | | | | | | | | | | | | | | | | | | | expiryYear
| | | | | | | | | | | | | | | | | | | | | | | | cvc
| | | | | | | | | | | | | | | | | | | | | | | | holderName
| | | | | | | | | | | | | | | | | | | | | | | | defaultPayment
| | | | | | | | | | | | | | | | | | Null
| | | | | | | | | | | | | | Null
| | | | | | | | | | | | | | Null
| | | | | | | | | | CartItem.order=Pi
| | | | | | | | | | | Join
| | | | | | | | | | | | ClassRef(CartItem)
| | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | Equals
| | | | | | | | | | | | | CartItem.order_id
| | | | | | | | | | | | | Order.id
| | | | | | | | | | | List
| | | | | | | | | | | | id
| | | | | | | | | | | | orderDate
| | | | | | | | | | | | shippingDate
| | | | | | | | | | | | shippingMethod
| | | | | | | | | | | | orederStatus
| | | | | | | | | | | | orderTotal
| | | | | | | | | | | | Order.cartItemList=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | | | ClassRef(CartItem)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | Order.id
| | | | | | | | | | | | | | | CartItem.order_id
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | id
| | | | | | | | | | | | | | qty
| | | | | | | | | | | | | | subtotal
| | | | | | | | | | | | Order.shippingAddress=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | | | ClassRef(ShippingAddress)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | id
| | | | | | | | | | | | | | shippingAddressName
| | | | | | | | | | | | | | shippingAddressStreet1
| | | | | | | | | | | | | | shippingAddressStreet2
| | | | | | | | | | | | | | shippingAddressCity
| | | | | | | | | | | | | | shippingAddressState
| | | | | | | | | | | | | | shippingAddressCountry
| | | | | | | | | | | | | | shippingAddressZipcode
| | | | | | | | | | | | | | ShippingAddress.user=Pi
| | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | ClassRef(ShippingAddress)
| | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | ShippingAddress.user_id
| | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | Order.payment=Pi
| | | | | | | | | | | | | Join
| | | | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | | | ClassRef(Payment)
| | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | List
| | | | | | | | | | | | | | id
| | | | | | | | | | | | | | type
| | | | | | | | | | | | | | cardName
| | | | | | | | | | | | | | cardNumber
| | | | | | | | | | | | | | expiryMonth
| | | | | | | | | | | | | | expiryYear
| | | | | | | | | | | | | | cvc
| | | | | | | | | | | | | | holderName
| | | | | | | | | | | | | | Payment.order=Pi
| | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | ClassRef(Payment)
| | | | | | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | orderDate
| | | | | | | | | | | | | | | | shippingDate
| | | | | | | | | | | | | | | | shippingMethod
| | | | | | | | | | | | | | | | orederStatus
| | | | | | | | | | | | | | | | orderTotal
| | | | | | | | | | | | | | | | Order.user=Pi
| | | | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | | | ClassRef(Order)
| | | | | | | | | | | | | | | | | | ClassRef(User)
| | | | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | | | Order.
| | | | | | | | | | | | | | | | | | | User.id
| | | | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | | | username
| | | | | | | | | | | | | | | | | | password
| | | | | | | | | | | | | | | | | | firstName
| | | | | | | | | | | | | | | | | | lastName
| | | | | | | | | | | | | | | | | | email
| | | | | | | | | | | | | | | | | | phone
| | | | | | | | | | | | | | | | | | enabled
| | | | | | | | | | | | | | Payment.userBilling=Pi
| | | | | | | | | | | | | | | Join
| | | | | | | | | | | | | | | | ClassRef(Payment)
| | | | | | | | | | | | | | | | ClassRef(UserBilling)
| | | | | | | | | | | | | | | | Equals
| | | | | | | | | | | | | | | | | lhs
| | | | | | | | | | | | | | | | | rhs
| | | | | | | | | | | | | | | List
| | | | | | | | | | | | | | | | id
| | | | | | | | | | | | | | | | userBillingName
| | | | | | | | | | | | | | | | userBillingStreet1
| | | | | | | | | | | | | | | | userBillingStreet2
| | | | | | | | | | | | | | | | userBillingCity
| | | | | | | | | | | | | | | | userBillingState
| | | | | | | | | | | | | | | | userBillingCountry
| | | | | | | | | | | | | | | | userBillingZipcode
| | | | | | | | | | | | Null
| | | | Null
| | | | Null
| | | | Null
| | Null
java.lang.NullPointerException
DIRRegionAnalyzer.java: 	at dbridge.analysis.eqsql.expr.node.Node.accept(Node.java:142)
dagFormalsToActuals(): 	at dbridge.analysis.eqsql.expr.node.Node.accept(Node.java:142)
invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
	at dbridge.analysis.eqsql.expr.node.Node.accept(Node.java:142)
DIRRegionAnalyzer.java: 	at dbridge.analysis.eqsql.expr.node.Node.accept(Node.java:142)
dagFormalsToActuals(): 	at dbridge.analysis.eqsql.expr.node.Node.accept(Node.java:142)
invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
	at dbridge.analysis.eqsql.expr.node.Node.accept(Node.java:142)
DIRRegionAnalyzer.java: 	at dbridge.analysis.eqsql.expr.node.Node.accept(Node.java:142)
	at dbridge.analysis.eqsql.expr.node.Node.accept(Node.java:142)
dagFormalsToActuals(): 	at dbridge.analysis.eqsql.expr.node.Node.accept(Node.java:142)
invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
	at dbridge.analysis.eqsql.expr.node.Node.accept(Node.java:142)
	at dbridge.analysis.eqsql.expr.node.Node.accept(Node.java:142)
	at dbridge.analysis.eqsql.expr.node.Node.accept(Node.java:142)
DIRRegionAnalyzer.java: 	at dbridge.analysis.eqsql.expr.node.Node.accept(Node.java:142)
dagFormalsToActuals(): 	at dbridge.analysis.eqsql.expr.node.Node.accept(Node.java:142)
FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
WARN: ARegion.java: analyze(): RegionAnalysisException	at dbridge.analysis.eqsql.expr.node.Node.accept(Node.java:142)

	at dbridge.analysis.eqsql.expr.node.Node.accept(Node.java:142)
WARN: ARegion.java: analyze(): java.lang.NullPointerException
	at dbridge.analysis.eqsql.expr.node.Node.accept(Node.java:142)
	at dbridge.analysis.eqsql.expr.node.Node.accept(Node.java:142)
	at dbridge.analysis.eqsql.analysis.DIRRegionAnalyzer.getResolvedEEDag(DIRRegionAnalyzer.java:1190)
DIRRegionAnalyzer.java: 	at dbridge.analysis.eqsql.analysis.DIRRegionAnalyzer.callersDagForCalleesKey(DIRRegionAnalyzer.java:1450)
constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
	at dbridge.analysis.eqsql.analysis.DIRRegionAnalyzer.caseCallPtrAsgnMethodWBody(DIRRegionAnalyzer.java:918)
DIRRegionAnalyzer.java: 	at dbridge.analysis.eqsql.analysis.DIRRegionAnalyzer.constructDIR(DIRRegionAnalyzer.java:359)
	at dbridge.analysis.eqsql.analysis.AbstractDIRRegionAnalyzer.run(AbstractDIRRegionAnalyzer.java:31)
	at dbridge.analysis.eqsql.analysis.AbstractDIRRegionAnalyzer.run(AbstractDIRRegionAnalyzer.java:1)
constructDIR(): 	at dbridge.analysis.region.regions.ARegion.analyze(ARegion.java:69)
	at dbridge.analysis.eqsql.hibernate.construct.Utils.parseObjectInvoke(Utils.java:548)
	at dbridge.analysis.eqsql.hibernate.construct.Utils.parseInvokeExpr(Utils.java:132)
	at dbridge.analysis.eqsql.analysis.DIRRegionAnalyzer.constructDIR(DIRRegionAnalyzer.java:337)
leftType = com.bookstore.domain.User
	at dbridge.analysis.eqsql.analysis.AbstractDIRRegionAnalyzer.run(AbstractDIRRegionAnalyzer.java:31)
DIRRegionAnalyzer.java: 	at dbridge.analysis.eqsql.analysis.AbstractDIRRegionAnalyzer.run(AbstractDIRRegionAnalyzer.java:1)
constructDIR(): 	at dbridge.analysis.region.regions.ARegion.analyze(ARegion.java:69)
leftType : com.bookstore.domain.User
	at dbridge.analysis.eqsql.FuncStackAnalyzer.constructDIRsForStack(FuncStackAnalyzer.java:198)
DIRRegionAnalyzer.java: 	at dbridge.analysis.eqsql.FuncStackAnalyzer.findMainFuncRetNode(FuncStackAnalyzer.java:137)
	at dbridge.analysis.eqsql.FuncStackAnalyzer.run(FuncStackAnalyzer.java:111)
constructDIR(): 	at dbridge.analysis.eqsql.EqSQLDriver.getExpr(EqSQLDriver.java:122)
case : caseCallPtrAsgnMethodWBody()
	at dbridge.analysis.eqsql.EqSQLDriver.doEqSQLRewrite(EqSQLDriver.java:233)
DIRRegionAnalyzer.java: 	at dbridge.analysis.eqsql.EqSQLDriverTest.inferSummary(EqSQLDriverTest.java:85)
constructDIR(): 	at dbridge.analysis.eqsql.EqSQLDriverTest.main(EqSQLDriverTest.java:69)
CASE v1 = v2.foo(v3)
dbridge.analysis.region.exceptions.RegionAnalysisException
DIRRegionAnalyzer.java: 	at dbridge.analysis.region.regions.ARegion.analyze(ARegion.java:74)
constructDIR(): 	at dbridge.analysis.eqsql.hibernate.construct.Utils.parseObjectInvoke(Utils.java:548)
v1: user
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
	at dbridge.analysis.eqsql.hibernate.construct.Utils.parseInvokeExpr(Utils.java:132)
DIRRegionAnalyzer.java: 	at dbridge.analysis.eqsql.analysis.DIRRegionAnalyzer.constructDIR(DIRRegionAnalyzer.java:337)
	at dbridge.analysis.eqsql.analysis.AbstractDIRRegionAnalyzer.run(AbstractDIRRegionAnalyzer.java:31)
constructDIR(): left type = com.bookstore.domain.User
	at dbridge.analysis.eqsql.analysis.AbstractDIRRegionAnalyzer.run(AbstractDIRRegionAnalyzer.java:1)
DIRRegionAnalyzer.java: 	at dbridge.analysis.region.regions.ARegion.analyze(ARegion.java:69)
constructDIR(): com.bookstore.domain.User
DIRRegionAnalyzer.java: constructDIR(): 	at dbridge.analysis.eqsql.FuncStackAnalyzer.constructDIRsForStack(FuncStackAnalyzer.java:198)
invoke methodref rettype: com.bookstore.domain.User
	at dbridge.analysis.eqsql.FuncStackAnalyzer.findMainFuncRetNode(FuncStackAnalyzer.java:137)
	at dbridge.analysis.eqsql.FuncStackAnalyzer.run(FuncStackAnalyzer.java:111)
	at dbridge.analysis.eqsql.EqSQLDriver.getExpr(EqSQLDriver.java:122)
	at dbridge.analysis.eqsql.EqSQLDriver.doEqSQLRewrite(EqSQLDriver.java:233)
	at dbridge.analysis.eqsql.EqSQLDriverTest.inferSummary(EqSQLDriverTest.java:85)
DIRRegionAnalyzer.java: 	at dbridge.analysis.eqsql.EqSQLDriverTest.main(EqSQLDriverTest.java:69)
constructDIR(): method sig = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
ARegion.java: analyze(): set cur method of analyzer to: findByUsername
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.bookstore.service.impl.UserServiceImpl, username := @parameter0: java.lang.String, $r0 = this.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.repository.UserRepository userRepository>, $r1 = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username), return $r1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.bookstore.service.impl.UserServiceImpl
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = username := @parameter0: java.lang.String
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.repository.UserRepository userRepository>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r0 -> this.userRepository
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = findByUsername
construct/Utils.java: parseInvokeExpr(): methodSignature = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
construct/Utils.java: parseObjectInvoke(): interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>
construct/Utils.java: parseObjectInvoke(): methodName = findByUsername
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
construct/Utils.java: parseObjectInvoke(): methodSignature = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
construct/Utils.java: parseObjectInvoke(): Case : findBy
Utils.java: getRelExpForMethod(): getRelExpForMethod: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
Utils.java: getRelExpForMethod(): actualargs = [username]
Utils.java: getRelExpForMethod(): methodInvoked = <com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>
Utils.java: getRelExpForMethod(): taglist: 
[]
construct/Utils.java: parseObjectInvoke(): relExpFor method : interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
construct/Utils.java: parseObjectInvoke(): expr : null
DIRRegionAnalyzer.java: valIsRepository(): fpar val: $r0
DIRRegionAnalyzer.java: valIsRepository(): refType: com.bookstore.repository.UserRepository
DIRRegionAnalyzer.java: valIsRepository(): valClass: com.bookstore.repository.UserRepository
DIRRegionAnalyzer.java: valIsRepository(): ret: true
construct/Utils.java: parseObjectInvoke(): retTypeStr: com.bookstore.domain.User
construct/Utils.java: parseObjectInvoke(): retType = com.bookstore.domain.User
construct/Utils.java: parseObjectInvoke(): entityClass = com.bookstore.domain.User
construct/Utils.java: parseObjectInvoke(): tableName = com.bookstore.domain.User
construct/Utils.java: parseObjectInvoke(): check = Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username
construct/Utils.java: parseObjectInvoke(): attributes = [id, username, password, firstName, lastName, email, phone, enabled]
construct/Utils.java: parseObjectInvoke(): retAccp: return
cosntruct/utils.java: mapDBFetchAccessGraph(): check relExpBaseAccp= Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username
cosntruct/utils.java: mapDBFetchAccessGraph(): check = Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp
cosntruct/utils.java: mapDBFetchAccessGraph(): check relExpBaseAccp= Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp
cosntruct/utils.java: mapDBFetchAccessGraph(): check = Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userShippingList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userPaymentList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userRoles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set userRoles [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
construct/Utils.java: parseObjectInvoke(): dir after mapDBFetchAccessGraph: {return.phone=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone, return.shoppingCart.user=Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp, return.userShippingList=Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.UserShipping)
| NullOp, return.email=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email, return.lastName=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName, return.shoppingCart=Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp, return.userRoles=Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.security.UserRole)
| NullOp, return.shoppingCart.id=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id), return.shoppingCart.cartItemList=Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp, return.userPaymentList=Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.UserPayment)
| NullOp, return.username=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username, return.password=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password, return.enabled=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled, return.firstName=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName, return.id=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id, return.shoppingCart.GrandTotal=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal), return=Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username}
construct/Utils.java: parseObjectInvoke(): @Query not present, relnode = Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = com.bookstore.domain.User
DIRRegionAnalyzer.java: constructDIR(): leftType : com.bookstore.domain.User
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: $r1
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: constructDIR(): left type = com.bookstore.domain.User
DIRRegionAnalyzer.java: constructDIR(): com.bookstore.domain.User
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: com.bookstore.domain.User
DIRRegionAnalyzer.java: constructDIR(): method sig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp

~~~ return.shoppingCart.GrandTotal ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ return.shoppingCart.cartItemList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.shoppingCart.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ return.shoppingCart.user ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp

~~~ return.userPaymentList ~~~
Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.UserPayment)
| NullOp

~~~ return.userRoles ~~~
Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.security.UserRole)
| NullOp

~~~ return.userShippingList ~~~
Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.UserShipping)
| NullOp

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp

~~~ return.shoppingCart.GrandTotal ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ return.shoppingCart.cartItemList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.shoppingCart.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ return.shoppingCart.user ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp

~~~ return.userPaymentList ~~~
Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.UserPayment)
| NullOp

~~~ return.userRoles ~~~
Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.security.UserRole)
| NullOp

~~~ return.userShippingList ~~~
Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.UserShipping)
| NullOp

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [User.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
, [inner=java/lang/invoke/MethodHandles$Lookup, outer=java/lang/invoke/MethodHandles, name=Lookup,flags=25]]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): leftType = com.bookstore.domain.User
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: findByUsername
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = $r1, com.bookstore.domain.User
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callee = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
Flatten.java: getNestedFields(): LVAL TYPE: com.bookstore.domain.User
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.lang.Long id> = java.lang.Long
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: id
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
Flatten.java: getNestedFields(): Id fields=id
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.lang.String username> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.lang.String password> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.lang.String firstName> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.lang.String lastName> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.lang.String email> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.lang.String phone> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: boolean enabled> = boolean
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart> = com.bookstore.domain.ShoppingCart
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
Flatten.java: getNestedFields(): check *ToOne sf: shoppingCart , type = com.bookstore.domain.ShoppingCart
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.util.List userShippingList> = java.util.List
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
Flatten.java: getNestedFields(): check *ToMany sf: userShippingList , type = java.util.List
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.util.List userPaymentList> = java.util.List
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
Flatten.java: getNestedFields(): check *ToMany sf: userPaymentList , type = java.util.List
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.util.Set userRoles> = java.util.Set
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
Flatten.java: getNestedFields(): check *ToMany sf: userRoles , type = java.util.Set
Flatten.java: getNestedFields(): returning: [<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
DIRRegionAnalyzer.java: constructDIR(): check nestedFields=[<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=User
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shoppingCart
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): key= return.shoppingCart
 value= Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): nested field name= shoppingCart
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: genExprNra(): com.bookstore.domain.ShoppingCart fields= [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: genExprNra(): <com.bookstore.domain.ShoppingCart: java.util.List cartItemList> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user> Field is visited skipping count
NRA.java: genExprNra(): children count = 2
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: LAZY

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
NRA.java: genExprNra(): visited String=  com.bookstore.domain.ShoppingCart~cartItemList
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
NRA.java: genExprNra(): visited String=  com.bookstore.domain.ShoppingCart~user
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.ShoppingCart.id), FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)]
NRA.java: genExprNra(): projectNode name: User.shoppingCart=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): key : return.shoppingCart
 value : 
 User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.userShippingList
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=User
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userShippingList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.bookstore.domain.UserShipping
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.bookstore.domain.UserShipping
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.UserShipping)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): key= return.userShippingList
 value= Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.UserShipping)
| NullOp
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| User.id
| UserShipping.user_id
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.UserShipping)
| NullOp
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserShipping
NRA.java: genExprNra(): nested field name= userShippingList
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.UserShipping
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.UserShipping: java.lang.Long id>, <com.bookstore.domain.UserShipping: java.lang.String userShippingName>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCity>, <com.bookstore.domain.UserShipping: java.lang.String userShippingState>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>, <com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>, <com.bookstore.domain.UserShipping: boolean userShippingDefault>, <com.bookstore.domain.UserShipping: com.bookstore.domain.User user>]
NRA.java: genExprNra(): com.bookstore.domain.UserShipping fields= [<com.bookstore.domain.UserShipping: java.lang.Long id>, <com.bookstore.domain.UserShipping: java.lang.String userShippingName>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCity>, <com.bookstore.domain.UserShipping: java.lang.String userShippingState>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>, <com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>, <com.bookstore.domain.UserShipping: boolean userShippingDefault>, <com.bookstore.domain.UserShipping: com.bookstore.domain.User user>]
NRA.java: genExprNra(): <com.bookstore.domain.UserShipping: com.bookstore.domain.User user> Field is visited skipping count
NRA.java: genExprNra(): children count = 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingCity>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingState>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: boolean userShippingDefault>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
NRA.java: genExprNra(): visited String=  com.bookstore.domain.UserShipping~user
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.UserShipping.id), FieldRef(com.bookstore.domain.UserShipping.userShippingName), FieldRef(com.bookstore.domain.UserShipping.userShippingStreet1), FieldRef(com.bookstore.domain.UserShipping.userShippingStreet2), FieldRef(com.bookstore.domain.UserShipping.userShippingCity), FieldRef(com.bookstore.domain.UserShipping.userShippingState), FieldRef(com.bookstore.domain.UserShipping.userShippingCountry), FieldRef(com.bookstore.domain.UserShipping.userShippingZipcode), FieldRef(com.bookstore.domain.UserShipping.userShippingDefault)]
NRA.java: genExprNra(): projectNode name: User.userShippingList=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): key : return.userShippingList
 value : 
 User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.userPaymentList
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=User
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userPaymentList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.bookstore.domain.UserPayment
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.bookstore.domain.UserPayment
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.UserPayment)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): key= return.userPaymentList
 value= Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.UserPayment)
| NullOp
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| User.id
| UserPayment.user_id
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.UserPayment)
| NullOp
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserPayment
NRA.java: genExprNra(): nested field name= userPaymentList
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.UserPayment
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.UserPayment: java.lang.Long id>, <com.bookstore.domain.UserPayment: java.lang.String type>, <com.bookstore.domain.UserPayment: java.lang.String cardName>, <com.bookstore.domain.UserPayment: java.lang.String cardNumber>, <com.bookstore.domain.UserPayment: int expiryMonth>, <com.bookstore.domain.UserPayment: int expiryYear>, <com.bookstore.domain.UserPayment: int cvc>, <com.bookstore.domain.UserPayment: java.lang.String holderName>, <com.bookstore.domain.UserPayment: boolean defaultPayment>, <com.bookstore.domain.UserPayment: com.bookstore.domain.User user>, <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>]
NRA.java: genExprNra(): com.bookstore.domain.UserPayment fields= [<com.bookstore.domain.UserPayment: java.lang.Long id>, <com.bookstore.domain.UserPayment: java.lang.String type>, <com.bookstore.domain.UserPayment: java.lang.String cardName>, <com.bookstore.domain.UserPayment: java.lang.String cardNumber>, <com.bookstore.domain.UserPayment: int expiryMonth>, <com.bookstore.domain.UserPayment: int expiryYear>, <com.bookstore.domain.UserPayment: int cvc>, <com.bookstore.domain.UserPayment: java.lang.String holderName>, <com.bookstore.domain.UserPayment: boolean defaultPayment>, <com.bookstore.domain.UserPayment: com.bookstore.domain.User user>, <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>]
NRA.java: genExprNra(): <com.bookstore.domain.UserPayment: com.bookstore.domain.User user> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling> Field is visited skipping count
NRA.java: genExprNra(): children count = 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String type>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String cardName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String cardNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int expiryMonth>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int expiryYear>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int cvc>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String holderName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: boolean defaultPayment>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
NRA.java: genExprNra(): visited String=  com.bookstore.domain.UserPayment~user
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: userPayment

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=userBilling
NRA.java: genExprNra(): visited String=  com.bookstore.domain.UserPayment~userBilling
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.UserPayment.id), FieldRef(com.bookstore.domain.UserPayment.type), FieldRef(com.bookstore.domain.UserPayment.cardName), FieldRef(com.bookstore.domain.UserPayment.cardNumber), FieldRef(com.bookstore.domain.UserPayment.expiryMonth), FieldRef(com.bookstore.domain.UserPayment.expiryYear), FieldRef(com.bookstore.domain.UserPayment.cvc), FieldRef(com.bookstore.domain.UserPayment.holderName), FieldRef(com.bookstore.domain.UserPayment.defaultPayment)]
NRA.java: genExprNra(): projectNode name: User.userPaymentList=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): key : return.userPaymentList
 value : 
 User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.userRoles
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=User
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userRoles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set userRoles [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.bookstore.domain.security.UserRole
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.bookstore.domain.security.UserRole
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.security.UserRole)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): key= return.userRoles
 value= Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.security.UserRole)
| NullOp
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| User.id
| UserRole.user_id
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| ClassRef(com.bookstore.domain.security.UserRole)
| NullOp
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): nested field name= userRoles
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>]
NRA.java: genExprNra(): com.bookstore.domain.security.UserRole fields= [<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>]
NRA.java: genExprNra(): <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role> Field is visited skipping count
NRA.java: genExprNra(): children count = 1
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToOne; num elems: 1 elems: 
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
NRA.java: genExprNra(): visited String=  com.bookstore.domain.security.UserRole~user
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToOne; num elems: 1 elems: 
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=role
NRA.java: genExprNra(): visited String=  com.bookstore.domain.security.UserRole~role
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.security.UserRole.userRoleId)]
NRA.java: genExprNra(): projectNode name: User.userRoles=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): key : return.userRoles
 value : 
 User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: constructDIR(): key = return.phone
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone
DIRRegionAnalyzer.java: constructDIR(): key = return.shoppingCart.user
DIRRegionAnalyzer.java: constructDIR(): val = Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return.userShippingList
DIRRegionAnalyzer.java: constructDIR(): val = User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
DIRRegionAnalyzer.java: constructDIR(): key = return.email
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email
DIRRegionAnalyzer.java: constructDIR(): key = return.lastName
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName
DIRRegionAnalyzer.java: constructDIR(): key = return.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): val = User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
DIRRegionAnalyzer.java: constructDIR(): key = return.userRoles
DIRRegionAnalyzer.java: constructDIR(): val = User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId
DIRRegionAnalyzer.java: constructDIR(): key = return.shoppingCart.id
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id)
DIRRegionAnalyzer.java: constructDIR(): key = return.shoppingCart.cartItemList
DIRRegionAnalyzer.java: constructDIR(): val = Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return.userPaymentList
DIRRegionAnalyzer.java: constructDIR(): val = User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
DIRRegionAnalyzer.java: constructDIR(): key = return.username
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username
DIRRegionAnalyzer.java: constructDIR(): key = return.password
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password
DIRRegionAnalyzer.java: constructDIR(): key = return.enabled
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled
DIRRegionAnalyzer.java: constructDIR(): key = return.firstName
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName
DIRRegionAnalyzer.java: constructDIR(): key = return.id
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id
DIRRegionAnalyzer.java: constructDIR(): key = return.shoppingCart.GrandTotal
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String) END
DIRRegionAnalyzer.java: constructDIR(): v1 access paths: [$r1.id, $r1.username, $r1.password, $r1.firstName, $r1.lastName, $r1.email, $r1.phone, $r1.enabled, $r1.shoppingCart, $r1.userShippingList, $r1.userPaymentList, $r1.userRoles]
DIRRegionAnalyzer.java: constructDIR(): key = $r1.id
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id
DIRRegionAnalyzer.java: constructDIR(): key = $r1.username
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.username
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username
DIRRegionAnalyzer.java: constructDIR(): key = $r1.password
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.password
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password
DIRRegionAnalyzer.java: constructDIR(): key = $r1.firstName
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.firstName
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName
DIRRegionAnalyzer.java: constructDIR(): key = $r1.lastName
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.lastName
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName
DIRRegionAnalyzer.java: constructDIR(): key = $r1.email
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.email
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email
DIRRegionAnalyzer.java: constructDIR(): key = $r1.phone
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.phone
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone
DIRRegionAnalyzer.java: constructDIR(): key = $r1.enabled
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.enabled
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled
DIRRegionAnalyzer.java: constructDIR(): key = $r1.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.shoppingCart
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): callersDag = User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
DIRRegionAnalyzer.java: constructDIR(): key = $r1.userShippingList
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.userShippingList
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): callersDag = User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
DIRRegionAnalyzer.java: constructDIR(): key = $r1.userPaymentList
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.userPaymentList
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): callersDag = User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
DIRRegionAnalyzer.java: constructDIR(): key = $r1.userRoles
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.userRoles
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)>(username)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): callersDag = User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $r1
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: return
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r1
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [User.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
, [inner=java/lang/invoke/MethodHandles$Lookup, outer=java/lang/invoke/MethodHandles, name=Lookup,flags=25]]
AccessPath.java: replaceBase(): input access path: return.id
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: return.username
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: return.password
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: return.firstName
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: return.lastName
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: return.email
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: return.phone
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: return.enabled
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: return.shoppingCart
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: return.userShippingList
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: return.userPaymentList
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: return.userRoles
AccessPath.java: replaceBase(): replacement of base: $r1
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ $r1.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ $r1.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ $r1.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ $r1.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ $r1.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ $r1.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ $r1.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ $r1.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ $r1.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ $r1.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ $r1.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ $r1.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ $r1.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ $r1.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r1.lastName=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName
DIR.java: updateRegion(): update region entry: return.phone=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone
DIR.java: updateRegion(): update region entry: return.userShippingList=User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
DIR.java: updateRegion(): update region entry: return.email=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email
DIR.java: updateRegion(): update region entry: return.lastName=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName
DIR.java: updateRegion(): update region entry: return.userRoles=User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId
DIR.java: updateRegion(): update region entry: $r1.enabled=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled
DIR.java: updateRegion(): update region entry: $r1.id=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id
DIR.java: updateRegion(): update region entry: $r1.username=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username
DIR.java: updateRegion(): update region entry: return.password=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password
DIR.java: updateRegion(): update region entry: return.enabled=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled
DIR.java: updateRegion(): update region entry: return.id=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id
DIR.java: updateRegion(): update region entry: $r1.userPaymentList=User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
DIR.java: updateRegion(): update region entry: $r0=this.userRepository
DIR.java: updateRegion(): update region entry: $r1=Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username
DIR.java: updateRegion(): update region entry: $r1.userRoles=User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: return.shoppingCart=User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
DIR.java: updateRegion(): update region entry: $r1.email=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email
DIR.java: updateRegion(): update region entry: $r1.password=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password
DIR.java: updateRegion(): update region entry: $r1.phone=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone
DIR.java: updateRegion(): update region entry: $r1.userShippingList=User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
DIR.java: updateRegion(): update region entry: return.userPaymentList=User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
DIR.java: updateRegion(): update region entry: return.username=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username
DIR.java: updateRegion(): update region entry: return.firstName=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName
DIR.java: updateRegion(): update region entry: $r1.shoppingCart=User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
DIR.java: updateRegion(): update region entry: $r1.firstName=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName
DIR.java: updateRegion(): update region entry: return=Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username
DIR.java: updateRegion(): update region entry: return=Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.shoppingCart.GrandTotal ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ return.shoppingCart.cartItemList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.shoppingCart.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ return.shoppingCart.user ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

, com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ $r1.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ $r1.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ $r1.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ $r1.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ $r1.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ $r1.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ $r1.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ $r1.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ $r1.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ $r1.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ $r1.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ $r1.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ $r1.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ $r1.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [User.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
, [inner=java/lang/invoke/MethodHandles$Lookup, outer=java/lang/invoke/MethodHandles, name=Lookup,flags=25]]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [$r1, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = $r1
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.LOG, this.userRepository, this.roleRepository, this.passwordResetTokenRepository, this.userPaymentRepository, this.userShippingRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username
DIRRegionAnalyzer.java: constructDIR(): leftType = com.bookstore.domain.User
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: findByUsername
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [username, this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [$r1, $r0]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: username
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: java.lang.String
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: $r1
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.bookstore.service.impl.UserServiceImpl
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: $r0
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.LOG, this.userRepository, this.roleRepository, this.passwordResetTokenRepository, this.userPaymentRepository, this.userShippingRepository]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.LOG
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.lastName, return.phone, return.userShippingList, return.email, return.lastName, return.userRoles, $r1.enabled, $r1.id, $r1.username, return.password, return.enabled, return.id, $r1.userPaymentList, $r0, $r1, $r1.userRoles, this, return.shoppingCart, $r1.email, $r1.password, $r1.phone, $r1.userShippingList, return.userPaymentList, return.username, return.firstName, $r1.shoppingCart, $r1.firstName, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.userRepository
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.lastName, return.phone, return.userShippingList, return.email, return.lastName, return.userRoles, $r1.enabled, $r1.id, $r1.username, return.password, return.enabled, return.id, $r1.userPaymentList, $r0, $r1, $r1.userRoles, this, return.shoppingCart, $r1.email, $r1.password, $r1.phone, $r1.userShippingList, return.userPaymentList, return.username, return.firstName, $r1.shoppingCart, $r1.firstName, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.roleRepository
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.lastName, return.phone, return.userShippingList, return.email, return.lastName, return.userRoles, $r1.enabled, $r1.id, $r1.username, return.password, return.enabled, return.id, $r1.userPaymentList, $r0, $r1, $r1.userRoles, this, return.shoppingCart, $r1.email, $r1.password, $r1.phone, $r1.userShippingList, return.userPaymentList, return.username, return.firstName, $r1.shoppingCart, $r1.firstName, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.passwordResetTokenRepository
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.lastName, return.phone, return.userShippingList, return.email, return.lastName, return.userRoles, $r1.enabled, $r1.id, $r1.username, return.password, return.enabled, return.id, $r1.userPaymentList, $r0, $r1, $r1.userRoles, this, return.shoppingCart, $r1.email, $r1.password, $r1.phone, $r1.userShippingList, return.userPaymentList, return.username, return.firstName, $r1.shoppingCart, $r1.firstName, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.userPaymentRepository
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.lastName, return.phone, return.userShippingList, return.email, return.lastName, return.userRoles, $r1.enabled, $r1.id, $r1.username, return.password, return.enabled, return.id, $r1.userPaymentList, $r0, $r1, $r1.userRoles, this, return.shoppingCart, $r1.email, $r1.password, $r1.phone, $r1.userShippingList, return.userPaymentList, return.username, return.firstName, $r1.shoppingCart, $r1.firstName, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.userShippingRepository
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.lastName, return.phone, return.userShippingList, return.email, return.lastName, return.userRoles, $r1.enabled, $r1.id, $r1.username, return.password, return.enabled, return.id, $r1.userPaymentList, $r0, $r1, $r1.userRoles, this, return.shoppingCart, $r1.email, $r1.password, $r1.phone, $r1.userShippingList, return.userPaymentList, return.username, return.firstName, $r1.shoppingCart, $r1.firstName, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = findByUsername, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: username
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: $r1
DIRRegionAnalyzer.java: handleSideEffects(): Case the formal param is a primitive
DIRRegionAnalyzer.java: handleSideEffects(): fml: username
DIRRegionAnalyzer.java: handleSideEffects(): actual arg (Soot Value): $r1
DIRRegionAnalyzer.java: handleSideEffects(): actualNode (Node constructed from value): $r1
DIRRegionAnalyzer.java: handleSideEffects(): formal = username, actual = $r1
DIRRegionAnalyzer.java: handleSideEffects(): resolvedActual: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: $r0
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.LOG, this.userRepository, this.roleRepository, this.passwordResetTokenRepository, this.userPaymentRepository, this.userShippingRepository]
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = user, com.bookstore.domain.User
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callee = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
Flatten.java: getNestedFields(): LVAL TYPE: com.bookstore.domain.User
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.lang.Long id> = java.lang.Long
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: id
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
Flatten.java: getNestedFields(): Id fields=id
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.lang.String username> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.lang.String password> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.lang.String firstName> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.lang.String lastName> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.lang.String email> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.lang.String phone> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: boolean enabled> = boolean
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart> = com.bookstore.domain.ShoppingCart
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
Flatten.java: getNestedFields(): check *ToOne sf: shoppingCart , type = com.bookstore.domain.ShoppingCart
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.util.List userShippingList> = java.util.List
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
Flatten.java: getNestedFields(): check *ToMany sf: userShippingList , type = java.util.List
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.util.List userPaymentList> = java.util.List
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
Flatten.java: getNestedFields(): check *ToMany sf: userPaymentList , type = java.util.List
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.User: java.util.Set userRoles> = java.util.Set
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
Flatten.java: getNestedFields(): check *ToMany sf: userRoles , type = java.util.Set
Flatten.java: getNestedFields(): returning: [<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
DIRRegionAnalyzer.java: constructDIR(): check nestedFields=[<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=User
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shoppingCart
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [$r1, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = $r1
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.LOG, this.userRepository, this.roleRepository, this.passwordResetTokenRepository, this.userPaymentRepository, this.userShippingRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
DIRRegionAnalyzer.java: constructDIR(): key= return.shoppingCart
 value= User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| ClassRef(com.bookstore.domain.ShoppingCart)
| Equals
| | lhs
| | rhs
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): nested field name= shoppingCart
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: genExprNra(): com.bookstore.domain.ShoppingCart fields= [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: genExprNra(): <com.bookstore.domain.ShoppingCart: java.util.List cartItemList> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user> Field is visited skipping count
NRA.java: genExprNra(): children count = 2
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: LAZY

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
NRA.java: genExprNra(): visited String=  com.bookstore.domain.ShoppingCart~cartItemList
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
NRA.java: genExprNra(): visited String=  com.bookstore.domain.ShoppingCart~user
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.ShoppingCart.id), FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)]
NRA.java: genExprNra(): projectNode name: User.shoppingCart=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): repeat node
DIRRegionAnalyzer.java: constructDIR(): key : return.shoppingCart
 value : 
 User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.userShippingList
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=User
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userShippingList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.bookstore.domain.UserShipping
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.bookstore.domain.UserShipping
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [$r1, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = $r1
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.LOG, this.userRepository, this.roleRepository, this.passwordResetTokenRepository, this.userPaymentRepository, this.userShippingRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
DIRRegionAnalyzer.java: constructDIR(): key= return.userShippingList
 value= User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| User.id
| UserShipping.user_id
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| ClassRef(com.bookstore.domain.UserShipping)
| Equals
| | User.id
| | UserShipping.user_id
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserShipping
NRA.java: genExprNra(): nested field name= userShippingList
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.UserShipping
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.UserShipping: java.lang.Long id>, <com.bookstore.domain.UserShipping: java.lang.String userShippingName>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCity>, <com.bookstore.domain.UserShipping: java.lang.String userShippingState>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>, <com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>, <com.bookstore.domain.UserShipping: boolean userShippingDefault>, <com.bookstore.domain.UserShipping: com.bookstore.domain.User user>]
NRA.java: genExprNra(): com.bookstore.domain.UserShipping fields= [<com.bookstore.domain.UserShipping: java.lang.Long id>, <com.bookstore.domain.UserShipping: java.lang.String userShippingName>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCity>, <com.bookstore.domain.UserShipping: java.lang.String userShippingState>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>, <com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>, <com.bookstore.domain.UserShipping: boolean userShippingDefault>, <com.bookstore.domain.UserShipping: com.bookstore.domain.User user>]
NRA.java: genExprNra(): <com.bookstore.domain.UserShipping: com.bookstore.domain.User user> Field is visited skipping count
NRA.java: genExprNra(): children count = 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingCity>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingState>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: boolean userShippingDefault>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
NRA.java: genExprNra(): visited String=  com.bookstore.domain.UserShipping~user
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.UserShipping.id), FieldRef(com.bookstore.domain.UserShipping.userShippingName), FieldRef(com.bookstore.domain.UserShipping.userShippingStreet1), FieldRef(com.bookstore.domain.UserShipping.userShippingStreet2), FieldRef(com.bookstore.domain.UserShipping.userShippingCity), FieldRef(com.bookstore.domain.UserShipping.userShippingState), FieldRef(com.bookstore.domain.UserShipping.userShippingCountry), FieldRef(com.bookstore.domain.UserShipping.userShippingZipcode), FieldRef(com.bookstore.domain.UserShipping.userShippingDefault)]
NRA.java: genExprNra(): projectNode name: User.userShippingList=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): repeat node
DIRRegionAnalyzer.java: constructDIR(): key : return.userShippingList
 value : 
 User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.userPaymentList
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=User
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userPaymentList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.bookstore.domain.UserPayment
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.bookstore.domain.UserPayment
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [$r1, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = $r1
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.LOG, this.userRepository, this.roleRepository, this.passwordResetTokenRepository, this.userPaymentRepository, this.userShippingRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
DIRRegionAnalyzer.java: constructDIR(): key= return.userPaymentList
 value= User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| User.id
| UserPayment.user_id
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| ClassRef(com.bookstore.domain.UserPayment)
| Equals
| | User.id
| | UserPayment.user_id
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserPayment
NRA.java: genExprNra(): nested field name= userPaymentList
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.UserPayment
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.UserPayment: java.lang.Long id>, <com.bookstore.domain.UserPayment: java.lang.String type>, <com.bookstore.domain.UserPayment: java.lang.String cardName>, <com.bookstore.domain.UserPayment: java.lang.String cardNumber>, <com.bookstore.domain.UserPayment: int expiryMonth>, <com.bookstore.domain.UserPayment: int expiryYear>, <com.bookstore.domain.UserPayment: int cvc>, <com.bookstore.domain.UserPayment: java.lang.String holderName>, <com.bookstore.domain.UserPayment: boolean defaultPayment>, <com.bookstore.domain.UserPayment: com.bookstore.domain.User user>, <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>]
NRA.java: genExprNra(): com.bookstore.domain.UserPayment fields= [<com.bookstore.domain.UserPayment: java.lang.Long id>, <com.bookstore.domain.UserPayment: java.lang.String type>, <com.bookstore.domain.UserPayment: java.lang.String cardName>, <com.bookstore.domain.UserPayment: java.lang.String cardNumber>, <com.bookstore.domain.UserPayment: int expiryMonth>, <com.bookstore.domain.UserPayment: int expiryYear>, <com.bookstore.domain.UserPayment: int cvc>, <com.bookstore.domain.UserPayment: java.lang.String holderName>, <com.bookstore.domain.UserPayment: boolean defaultPayment>, <com.bookstore.domain.UserPayment: com.bookstore.domain.User user>, <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>]
NRA.java: genExprNra(): <com.bookstore.domain.UserPayment: com.bookstore.domain.User user> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling> Field is visited skipping count
NRA.java: genExprNra(): children count = 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String type>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String cardName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String cardNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int expiryMonth>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int expiryYear>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int cvc>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String holderName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: boolean defaultPayment>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
NRA.java: genExprNra(): visited String=  com.bookstore.domain.UserPayment~user
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: userPayment

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=userBilling
NRA.java: genExprNra(): visited String=  com.bookstore.domain.UserPayment~userBilling
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.UserPayment.id), FieldRef(com.bookstore.domain.UserPayment.type), FieldRef(com.bookstore.domain.UserPayment.cardName), FieldRef(com.bookstore.domain.UserPayment.cardNumber), FieldRef(com.bookstore.domain.UserPayment.expiryMonth), FieldRef(com.bookstore.domain.UserPayment.expiryYear), FieldRef(com.bookstore.domain.UserPayment.cvc), FieldRef(com.bookstore.domain.UserPayment.holderName), FieldRef(com.bookstore.domain.UserPayment.defaultPayment)]
NRA.java: genExprNra(): projectNode name: User.userPaymentList=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): repeat node
DIRRegionAnalyzer.java: constructDIR(): key : return.userPaymentList
 value : 
 User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.userRoles
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=User
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userRoles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set userRoles [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.bookstore.domain.security.UserRole
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.bookstore.domain.security.UserRole
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [$r1, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = $r1
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.LOG, this.userRepository, this.roleRepository, this.passwordResetTokenRepository, this.userPaymentRepository, this.userShippingRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId
DIRRegionAnalyzer.java: constructDIR(): key= return.userRoles
 value= User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| User.id
| UserRole.user_id
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| ClassRef(com.bookstore.domain.security.UserRole)
| Equals
| | User.id
| | UserRole.user_id
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): nested field name= userRoles
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): AllFields = [<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>]
NRA.java: genExprNra(): com.bookstore.domain.security.UserRole fields= [<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>]
NRA.java: genExprNra(): <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user> Field is visited skipping count
NRA.java: genExprNra(): <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role> Field is visited skipping count
NRA.java: genExprNra(): children count = 1
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToOne; num elems: 1 elems: 
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
NRA.java: genExprNra(): visited String=  com.bookstore.domain.security.UserRole~user
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): visited= [com.bookstore.domain.Book~bookToCartItemsList, com.bookstore.domain.Order~shippingAddress, com.bookstore.domain.security.Role~userRoles, com.bookstore.domain.Payment~userBilling, com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.ShoppingCart~cartItemList, com.bookstore.domain.UserBilling~userPayment, com.bookstore.domain.BookToCartItem~book, com.bookstore.domain.User~userRoles, com.bookstore.domain.UserPayment~userBilling, com.bookstore.domain.Order~cartItemList, com.bookstore.domain.Book~bookImage, com.bookstore.domain.security.UserRole~user, com.bookstore.domain.Order~user, com.bookstore.domain.BookToCartItem~cartItem, com.bookstore.domain.UserShipping~user, com.bookstore.domain.UserPayment~user, com.bookstore.domain.ShippingAddress~user, com.bookstore.domain.User~userPaymentList, com.bookstore.domain.Payment~order, com.bookstore.domain.Order~payment, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.ShoppingCart~user, com.bookstore.domain.CartItem~book, com.bookstore.domain.security.UserRole~role, com.bookstore.domain.User~shoppingCart, com.bookstore.domain.User~userShippingList, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToOne; num elems: 1 elems: 
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=role
NRA.java: genExprNra(): visited String=  com.bookstore.domain.security.UserRole~role
NRA.java: genExprNra(): Field is visited skipping
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.security.UserRole.userRoleId)]
NRA.java: genExprNra(): projectNode name: User.userRoles=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): repeat node
DIRRegionAnalyzer.java: constructDIR(): key : return.userRoles
 value : 
 User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: constructDIR(): key = $r1.lastName
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName
DIRRegionAnalyzer.java: constructDIR(): key = return.phone
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone
DIRRegionAnalyzer.java: constructDIR(): key = return.userShippingList
DIRRegionAnalyzer.java: constructDIR(): val = User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
DIRRegionAnalyzer.java: constructDIR(): key = return.email
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email
DIRRegionAnalyzer.java: constructDIR(): key = return.lastName
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName
DIRRegionAnalyzer.java: constructDIR(): key = return.userRoles
DIRRegionAnalyzer.java: constructDIR(): val = User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId
DIRRegionAnalyzer.java: constructDIR(): key = $r1.enabled
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled
DIRRegionAnalyzer.java: constructDIR(): key = $r1.id
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id
DIRRegionAnalyzer.java: constructDIR(): key = $r1.username
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username
DIRRegionAnalyzer.java: constructDIR(): key = return.password
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password
DIRRegionAnalyzer.java: constructDIR(): key = return.enabled
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled
DIRRegionAnalyzer.java: constructDIR(): key = return.id
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id
DIRRegionAnalyzer.java: constructDIR(): key = $r1.userPaymentList
DIRRegionAnalyzer.java: constructDIR(): val = User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
DIRRegionAnalyzer.java: constructDIR(): key = $r0
DIRRegionAnalyzer.java: constructDIR(): val = this.userRepository
DIRRegionAnalyzer.java: constructDIR(): key = $r1
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username
DIRRegionAnalyzer.java: constructDIR(): key = $r1.userRoles
DIRRegionAnalyzer.java: constructDIR(): val = User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId
DIRRegionAnalyzer.java: constructDIR(): key = this
DIRRegionAnalyzer.java: constructDIR(): val = Self
DIRRegionAnalyzer.java: constructDIR(): key = return.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): val = User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
DIRRegionAnalyzer.java: constructDIR(): key = $r1.email
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email
DIRRegionAnalyzer.java: constructDIR(): key = $r1.password
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password
DIRRegionAnalyzer.java: constructDIR(): key = $r1.phone
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone
DIRRegionAnalyzer.java: constructDIR(): key = $r1.userShippingList
DIRRegionAnalyzer.java: constructDIR(): val = User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
DIRRegionAnalyzer.java: constructDIR(): key = return.userPaymentList
DIRRegionAnalyzer.java: constructDIR(): val = User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
DIRRegionAnalyzer.java: constructDIR(): key = return.username
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username
DIRRegionAnalyzer.java: constructDIR(): key = return.firstName
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName
DIRRegionAnalyzer.java: constructDIR(): key = $r1.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): val = User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
DIRRegionAnalyzer.java: constructDIR(): key = $r1.firstName
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String) END
DIRRegionAnalyzer.java: constructDIR(): v1 access paths: [user.id, user.username, user.password, user.firstName, user.lastName, user.email, user.phone, user.enabled, user.shoppingCart, user.userShippingList, user.userPaymentList, user.userRoles]
DIRRegionAnalyzer.java: constructDIR(): key = user.id
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [$r1, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = $r1
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.LOG, this.userRepository, this.roleRepository, this.passwordResetTokenRepository, this.userPaymentRepository, this.userShippingRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| id
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| id
DIRRegionAnalyzer.java: constructDIR(): key = user.username
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.username
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [$r1, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = $r1
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.LOG, this.userRepository, this.roleRepository, this.passwordResetTokenRepository, this.userPaymentRepository, this.userShippingRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| MethodWontHandleOp
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| MethodWontHandleOp
DIRRegionAnalyzer.java: constructDIR(): key = user.password
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.password
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [$r1, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = $r1
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.LOG, this.userRepository, this.roleRepository, this.passwordResetTokenRepository, this.userPaymentRepository, this.userShippingRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| password
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| password
DIRRegionAnalyzer.java: constructDIR(): key = user.firstName
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.firstName
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [$r1, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = $r1
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.LOG, this.userRepository, this.roleRepository, this.passwordResetTokenRepository, this.userPaymentRepository, this.userShippingRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| firstName
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| firstName
DIRRegionAnalyzer.java: constructDIR(): key = user.lastName
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.lastName
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [$r1, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = $r1
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.LOG, this.userRepository, this.roleRepository, this.passwordResetTokenRepository, this.userPaymentRepository, this.userShippingRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| lastName
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| lastName
DIRRegionAnalyzer.java: constructDIR(): key = user.email
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.email
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [$r1, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = $r1
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.LOG, this.userRepository, this.roleRepository, this.passwordResetTokenRepository, this.userPaymentRepository, this.userShippingRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| email
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| email
DIRRegionAnalyzer.java: constructDIR(): key = user.phone
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.phone
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [$r1, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = $r1
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.LOG, this.userRepository, this.roleRepository, this.passwordResetTokenRepository, this.userPaymentRepository, this.userShippingRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| phone
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| phone
DIRRegionAnalyzer.java: constructDIR(): key = user.enabled
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.enabled
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [$r1, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = $r1
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.LOG, this.userRepository, this.roleRepository, this.passwordResetTokenRepository, this.userPaymentRepository, this.userShippingRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| enabled
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| enabled
DIRRegionAnalyzer.java: constructDIR(): key = user.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.shoppingCart
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [$r1, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = $r1
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.LOG, this.userRepository, this.roleRepository, this.passwordResetTokenRepository, this.userPaymentRepository, this.userShippingRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
DIRRegionAnalyzer.java: constructDIR(): callersDag = User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
DIRRegionAnalyzer.java: constructDIR(): key = user.userShippingList
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.userShippingList
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [$r1, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = $r1
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.LOG, this.userRepository, this.roleRepository, this.passwordResetTokenRepository, this.userPaymentRepository, this.userShippingRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
DIRRegionAnalyzer.java: constructDIR(): callersDag = User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
DIRRegionAnalyzer.java: constructDIR(): key = user.userPaymentList
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.userPaymentList
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [$r1, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = $r1
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.LOG, this.userRepository, this.roleRepository, this.passwordResetTokenRepository, this.userPaymentRepository, this.userShippingRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
DIRRegionAnalyzer.java: constructDIR(): callersDag = User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
DIRRegionAnalyzer.java: constructDIR(): key = user.userRoles
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.userRoles
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [username, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [$r1, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = username, actual = $r1
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.LOG, this.userRepository, this.roleRepository, this.passwordResetTokenRepository, this.userPaymentRepository, this.userShippingRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId
DIRRegionAnalyzer.java: constructDIR(): callersDag = User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId
DIRRegionAnalyzer.java: constructDIR(): curUnit = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): CASE: v.f = expr, f is non-primtive
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl>
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl>
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl>
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl>
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl>
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl>
DIRRegionAnalyzer.java: constructDIR(): accessPaths = [this.userServiceImpl.LOG, this.userServiceImpl.userRepository, this.userServiceImpl.roleRepository, this.userServiceImpl.passwordResetTokenRepository, this.userServiceImpl.userPaymentRepository, this.userServiceImpl.userShippingRepository]
DIRRegionAnalyzer.java: constructDIR(): right val = $r0
DIRRegionAnalyzer.java: constructDIR(): Subcase: v1.f = v2
AccessPath.java: replaceBase(): input access path: this.userServiceImpl.LOG
AccessPath.java: replaceBase(): replacement of base: $r0
WARN: DIRRegionAnalyzer.java: constructDIR(): Invalid intermediate access path found
AccessPath.java: replaceBase(): input access path: this.userServiceImpl.userRepository
AccessPath.java: replaceBase(): replacement of base: $r0
WARN: DIRRegionAnalyzer.java: constructDIR(): Invalid intermediate access path found
AccessPath.java: replaceBase(): input access path: this.userServiceImpl.roleRepository
AccessPath.java: replaceBase(): replacement of base: $r0
WARN: DIRRegionAnalyzer.java: constructDIR(): Invalid intermediate access path found
AccessPath.java: replaceBase(): input access path: this.userServiceImpl.passwordResetTokenRepository
AccessPath.java: replaceBase(): replacement of base: $r0
WARN: DIRRegionAnalyzer.java: constructDIR(): Invalid intermediate access path found
AccessPath.java: replaceBase(): input access path: this.userServiceImpl.userPaymentRepository
AccessPath.java: replaceBase(): replacement of base: $r0
WARN: DIRRegionAnalyzer.java: constructDIR(): Invalid intermediate access path found
AccessPath.java: replaceBase(): input access path: this.userServiceImpl.userShippingRepository
AccessPath.java: replaceBase(): replacement of base: $r0
WARN: DIRRegionAnalyzer.java: constructDIR(): Invalid intermediate access path found
DIRRegionAnalyzer.java: constructDIR(): curUnit = shoppingCart = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = getShoppingCart
construct/Utils.java: parseInvokeExpr(): methodSignature = com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()
construct/Utils.java: parseObjectInvoke(): virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>
construct/Utils.java: parseObjectInvoke(): methodName = getShoppingCart
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
construct/Utils.java: parseObjectInvoke(): break
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: getShoppingCart
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.bookstore.domain.User, $r0 = this.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, return $r0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.bookstore.domain.User
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: valIsRepository(): fpar val: this.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>
DIRRegionAnalyzer.java: valIsRepository(): refType: com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: valIsRepository(): valClass: com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: valIsRepository(): ret: false
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is not primitive
DIRRegionAnalyzer.java: constructDIR(): destPaths: [$r0.id, $r0.GrandTotal, $r0.cartItemList, $r0.user]
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.id
AccessPath.java: replaceBase(): input access path: $r0.id
AccessPath.java: replaceBase(): replacement of base: this.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): source accp: this.shoppingCart.id
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.shoppingCart

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.shoppingCart.id
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.id -> this.shoppingCart.id
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.GrandTotal
AccessPath.java: replaceBase(): input access path: $r0.GrandTotal
AccessPath.java: replaceBase(): replacement of base: this.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): source accp: this.shoppingCart.GrandTotal
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.shoppingCart

~~~ $r0.id ~~~
this.shoppingCart.id

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.shoppingCart.GrandTotal
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.GrandTotal -> this.shoppingCart.GrandTotal
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.cartItemList
AccessPath.java: replaceBase(): input access path: $r0.cartItemList
AccessPath.java: replaceBase(): replacement of base: this.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): source accp: this.shoppingCart.cartItemList
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.shoppingCart

~~~ $r0.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ $r0.id ~~~
this.shoppingCart.id

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.shoppingCart.cartItemList
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.cartItemList -> this.shoppingCart.cartItemList
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.user
AccessPath.java: replaceBase(): input access path: $r0.user
AccessPath.java: replaceBase(): replacement of base: this.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): source accp: this.shoppingCart.user
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.shoppingCart

~~~ $r0.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ $r0.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ $r0.id ~~~
this.shoppingCart.id

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.shoppingCart.user
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.user -> this.shoppingCart.user
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $r0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: return
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r0
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [ShoppingCart.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
]
AccessPath.java: replaceBase(): input access path: return.id
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.GrandTotal
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.cartItemList
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.user
AccessPath.java: replaceBase(): replacement of base: $r0
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.shoppingCart

~~~ $r0.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ $r0.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ $r0.id ~~~
this.shoppingCart.id

~~~ $r0.user ~~~
this.shoppingCart.user

~~~ return ~~~
this.shoppingCart

~~~ return ~~~
this.shoppingCart

~~~ return.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ return.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ return.id ~~~
this.shoppingCart.id

~~~ return.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.shoppingCart

~~~ $r0.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ $r0.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ $r0.id ~~~
this.shoppingCart.id

~~~ $r0.user ~~~
this.shoppingCart.user

~~~ return ~~~
this.shoppingCart

~~~ return ~~~
this.shoppingCart

~~~ return.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ return.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ return.id ~~~
this.shoppingCart.id

~~~ return.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r0=this.shoppingCart
DIR.java: updateRegion(): update region entry: $r0.GrandTotal=this.shoppingCart.GrandTotal
DIR.java: updateRegion(): update region entry: return.GrandTotal=this.shoppingCart.GrandTotal
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: return.id=this.shoppingCart.id
DIR.java: updateRegion(): update region entry: return.cartItemList=this.shoppingCart.cartItemList
DIR.java: updateRegion(): update region entry: $r0.id=this.shoppingCart.id
DIR.java: updateRegion(): update region entry: $r0.cartItemList=this.shoppingCart.cartItemList
DIR.java: updateRegion(): update region entry: return=this.shoppingCart
DIR.java: updateRegion(): update region entry: return.user=this.shoppingCart.user
DIR.java: updateRegion(): update region entry: return=this.shoppingCart
DIR.java: updateRegion(): update region entry: $r0.user=this.shoppingCart.user
construct/Utils.java: parseObjectInvoke(): Put DIR of callee = com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart() in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: constructDIR(): leftType : com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: shoppingCart
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
DIRRegionAnalyzer.java: constructDIR(): left type = com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: constructDIR(): com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: constructDIR(): method sig = com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.shoppingCart.GrandTotal ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ return.shoppingCart.cartItemList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.shoppingCart.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ return.shoppingCart.user ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

, com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()=~~~ $r0 ~~~
this.shoppingCart

~~~ $r0.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ $r0.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ $r0.id ~~~
this.shoppingCart.id

~~~ $r0.user ~~~
this.shoppingCart.user

~~~ return ~~~
this.shoppingCart

~~~ return ~~~
this.shoppingCart

~~~ return.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ return.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ return.id ~~~
this.shoppingCart.id

~~~ return.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

, com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ $r1.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ $r1.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ $r1.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ $r1.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ $r1.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ $r1.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ $r1.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ $r0 ~~~
this.shoppingCart

~~~ $r0.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ $r0.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ $r0.id ~~~
this.shoppingCart.id

~~~ $r0.user ~~~
this.shoppingCart.user

~~~ return ~~~
this.shoppingCart

~~~ return ~~~
this.shoppingCart

~~~ return.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ return.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ return.id ~~~
this.shoppingCart.id

~~~ return.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [ShoppingCart.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.shoppingCart
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [user]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.username, this.password, this.firstName, this.lastName, this.email, this.phone, this.enabled, this.shoppingCart, this.userShippingList, this.userPaymentList, this.userRoles]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): leftType = com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: getShoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [user]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.bookstore.domain.User
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: user
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.id, this.username, this.password, this.firstName, this.lastName, this.email, this.phone, this.enabled, this.shoppingCart, this.userShippingList, this.userPaymentList, this.userRoles]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r0.GrandTotal, return.GrandTotal, this, return.id, return.cartItemList, $r0.id, $r0.cartItemList, return, return.user, return, $r0.user]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.username
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r0.GrandTotal, return.GrandTotal, this, return.id, return.cartItemList, $r0.id, $r0.cartItemList, return, return.user, return, $r0.user]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.password
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r0.GrandTotal, return.GrandTotal, this, return.id, return.cartItemList, $r0.id, $r0.cartItemList, return, return.user, return, $r0.user]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r0.GrandTotal, return.GrandTotal, this, return.id, return.cartItemList, $r0.id, $r0.cartItemList, return, return.user, return, $r0.user]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r0.GrandTotal, return.GrandTotal, this, return.id, return.cartItemList, $r0.id, $r0.cartItemList, return, return.user, return, $r0.user]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.email
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r0.GrandTotal, return.GrandTotal, this, return.id, return.cartItemList, $r0.id, $r0.cartItemList, return, return.user, return, $r0.user]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.phone
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r0.GrandTotal, return.GrandTotal, this, return.id, return.cartItemList, $r0.id, $r0.cartItemList, return, return.user, return, $r0.user]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.enabled
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r0.GrandTotal, return.GrandTotal, this, return.id, return.cartItemList, $r0.id, $r0.cartItemList, return, return.user, return, $r0.user]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r0.GrandTotal, return.GrandTotal, this, return.id, return.cartItemList, $r0.id, $r0.cartItemList, return, return.user, return, $r0.user]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.userShippingList
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r0.GrandTotal, return.GrandTotal, this, return.id, return.cartItemList, $r0.id, $r0.cartItemList, return, return.user, return, $r0.user]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.userPaymentList
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r0.GrandTotal, return.GrandTotal, this, return.id, return.cartItemList, $r0.id, $r0.cartItemList, return, return.user, return, $r0.user]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.userRoles
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r0.GrandTotal, return.GrandTotal, this, return.id, return.cartItemList, $r0.id, $r0.cartItemList, return, return.user, return, $r0.user]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = getShoppingCart, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: user
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.id, this.username, this.password, this.firstName, this.lastName, this.email, this.phone, this.enabled, this.shoppingCart, this.userShippingList, this.userPaymentList, this.userRoles]
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = shoppingCart, com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callee = com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
Flatten.java: getNestedFields(): LVAL TYPE: com.bookstore.domain.ShoppingCart
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.ShoppingCart: java.lang.Long id> = java.lang.Long
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
Flatten.java: getNestedFields(): Id fields=id
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal> = java.math.BigDecimal
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.ShoppingCart: java.util.List cartItemList> = java.util.List
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: LAZY

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
Flatten.java: getNestedFields(): check *ToMany sf: cartItemList , type = java.util.List
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user> = com.bookstore.domain.User
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
Flatten.java: getNestedFields(): check *ToOne sf: user , type = com.bookstore.domain.User
Flatten.java: getNestedFields(): returning: [<com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
DIRRegionAnalyzer.java: constructDIR(): check nestedFields=[<com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.cartItemList
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=ShoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.shoppingCart.cartItemList
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [user]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.username, this.password, this.firstName, this.lastName, this.email, this.phone, this.enabled, this.shoppingCart, this.userShippingList, this.userPaymentList, this.userRoles]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.shoppingCart.cartItemList
DIRRegionAnalyzer.java: constructDIR(): key= return.cartItemList
 value= this.shoppingCart.cartItemList
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shopping_cart_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| ShoppingCart.id
| CartItem.shopping_cart_id
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.user
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=ShoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= user
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.bookstore.domain.User
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.bookstore.domain.User
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.shoppingCart.user
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [user]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.username, this.password, this.firstName, this.lastName, this.email, this.phone, this.enabled, this.shoppingCart, this.userShippingList, this.userPaymentList, this.userRoles]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.shoppingCart.user
DIRRegionAnalyzer.java: constructDIR(): key= return.user
 value= this.shoppingCart.user
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()
DIRRegionAnalyzer.java: constructDIR(): key = $r0
DIRRegionAnalyzer.java: constructDIR(): val = this.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): key = $r0.GrandTotal
DIRRegionAnalyzer.java: constructDIR(): val = this.shoppingCart.GrandTotal
DIRRegionAnalyzer.java: constructDIR(): key = return.GrandTotal
DIRRegionAnalyzer.java: constructDIR(): val = this.shoppingCart.GrandTotal
DIRRegionAnalyzer.java: constructDIR(): key = this
DIRRegionAnalyzer.java: constructDIR(): val = Self
DIRRegionAnalyzer.java: constructDIR(): key = return.id
DIRRegionAnalyzer.java: constructDIR(): val = this.shoppingCart.id
DIRRegionAnalyzer.java: constructDIR(): key = return.cartItemList
DIRRegionAnalyzer.java: constructDIR(): val = this.shoppingCart.cartItemList
DIRRegionAnalyzer.java: constructDIR(): key = $r0.id
DIRRegionAnalyzer.java: constructDIR(): val = this.shoppingCart.id
DIRRegionAnalyzer.java: constructDIR(): key = $r0.cartItemList
DIRRegionAnalyzer.java: constructDIR(): val = this.shoppingCart.cartItemList
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = this.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): key = return.user
DIRRegionAnalyzer.java: constructDIR(): val = this.shoppingCart.user
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = this.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): key = $r0.user
DIRRegionAnalyzer.java: constructDIR(): val = this.shoppingCart.user
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart() END
DIRRegionAnalyzer.java: constructDIR(): v1 access paths: [shoppingCart.id, shoppingCart.GrandTotal, shoppingCart.cartItemList, shoppingCart.user]
DIRRegionAnalyzer.java: constructDIR(): key = shoppingCart.id
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.shoppingCart.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [user]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.username, this.password, this.firstName, this.lastName, this.email, this.phone, this.enabled, this.shoppingCart, this.userShippingList, this.userPaymentList, this.userRoles]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.shoppingCart.id
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.shoppingCart.id
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.shoppingCart.id
DIRRegionAnalyzer.java: constructDIR(): key = shoppingCart.GrandTotal
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.GrandTotal
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.shoppingCart.GrandTotal
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [user]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.username, this.password, this.firstName, this.lastName, this.email, this.phone, this.enabled, this.shoppingCart, this.userShippingList, this.userPaymentList, this.userRoles]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.shoppingCart.GrandTotal
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.shoppingCart.GrandTotal
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.shoppingCart.GrandTotal
DIRRegionAnalyzer.java: constructDIR(): key = shoppingCart.cartItemList
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.cartItemList
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.shoppingCart.cartItemList
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [user]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.username, this.password, this.firstName, this.lastName, this.email, this.phone, this.enabled, this.shoppingCart, this.userShippingList, this.userPaymentList, this.userRoles]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.shoppingCart.cartItemList
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.shoppingCart.cartItemList
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.shoppingCart.cartItemList
DIRRegionAnalyzer.java: constructDIR(): key = shoppingCart.user
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.user
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.shoppingCart.user
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [user]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.username, this.password, this.firstName, this.lastName, this.email, this.phone, this.enabled, this.shoppingCart, this.userShippingList, this.userPaymentList, this.userRoles]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.shoppingCart.user
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.shoppingCart.user
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.shoppingCart.user
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r2 = new com.bookstore.service.impl.CartItemServiceImpl
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
DIRRegionAnalyzer.java: constructDIR(): curUnit = cartItemList = virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = findByShoppingCart
construct/Utils.java: parseInvokeExpr(): methodSignature = com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
construct/Utils.java: parseObjectInvoke(): virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>
construct/Utils.java: parseObjectInvoke(): methodName = findByShoppingCart
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
construct/Utils.java: parseObjectInvoke(): methodSignature = com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
construct/Utils.java: parseObjectInvoke(): Case : findBy
Utils.java: getRelExpForMethod(): getRelExpForMethod: virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
Utils.java: getRelExpForMethod(): actualargs = [shoppingCart]
Utils.java: getRelExpForMethod(): methodInvoked = <com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>
Utils.java: getRelExpForMethod(): taglist: 
[Signature: (Lcom/bookstore/domain/ShoppingCart;)Ljava/util/List<Lcom/bookstore/domain/CartItem;>;]
construct/Utils.java: parseObjectInvoke(): relExpFor method : virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
construct/Utils.java: parseObjectInvoke(): expr : null
DIRRegionAnalyzer.java: valIsRepository(): fpar val: $r2
DIRRegionAnalyzer.java: valIsRepository(): refType: com.bookstore.service.impl.CartItemService
DIRRegionAnalyzer.java: valIsRepository(): valClass: com.bookstore.service.impl.CartItemService
DIRRegionAnalyzer.java: valIsRepository(): ret: false
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: findByShoppingCart
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.bookstore.service.impl.CartItemServiceImpl, shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart, $r0 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>, $r1 = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart), return $r1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.bookstore.service.impl.CartItemServiceImpl
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r0 -> this.cartItemRepository
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = findByShoppingCart
construct/Utils.java: parseInvokeExpr(): methodSignature = com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
construct/Utils.java: parseObjectInvoke(): interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>
construct/Utils.java: parseObjectInvoke(): methodName = findByShoppingCart
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
construct/Utils.java: parseObjectInvoke(): methodSignature = com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
construct/Utils.java: parseObjectInvoke(): Case : findBy
Utils.java: getRelExpForMethod(): getRelExpForMethod: interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
Utils.java: getRelExpForMethod(): actualargs = [shoppingCart]
Utils.java: getRelExpForMethod(): methodInvoked = <com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>
Utils.java: getRelExpForMethod(): taglist: 
[Signature: (Lcom/bookstore/domain/ShoppingCart;)Ljava/util/List<Lcom/bookstore/domain/CartItem;>;]
construct/Utils.java: parseObjectInvoke(): relExpFor method : interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
construct/Utils.java: parseObjectInvoke(): expr : null
DIRRegionAnalyzer.java: valIsRepository(): fpar val: $r0
DIRRegionAnalyzer.java: valIsRepository(): refType: com.bookstore.repository.CartItemRepository
DIRRegionAnalyzer.java: valIsRepository(): valClass: com.bookstore.repository.CartItemRepository
DIRRegionAnalyzer.java: valIsRepository(): ret: true
construct/Utils.java: parseObjectInvoke(): retTypeStr: java.util.List
construct/Utils.java: parseObjectInvoke(): retType = java.util.List
construct/Utils.java: parseObjectInvoke(): entityClass = java.util.List
construct/Utils.java: parseObjectInvoke(): table = com.bookstore.repository.CartItemRepository
construct/Utils.java: parseObjectInvoke(): @Query not present, relnode = Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
AccessPath.java: isReturnTypeEntity(): check :java.util.List
AccessPath.java: isReturnTypeEntity(): tags = [Signature: (Lcom/bookstore/domain/ShoppingCart;)Ljava/util/List<Lcom/bookstore/domain/CartItem;>;]
AccessPath.java: isReturnTypeEntity():  ***  class soot.tagkit.SignatureTag
AccessPath.java: isReturnTypeEntity():  ***  (Lcom/bookstore/domain/ShoppingCart;)Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
AccessPath.java: isReturnTypeEntity(): method retType = com.bookstore.domain.CartItem
AccessPath.java: getCollectionEntityType(): Collection Entity Type = com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): leftType = com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): leftType : com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: $r1
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
AccessPath.java: isReturnTypeEntity(): check :java.util.List
AccessPath.java: isReturnTypeEntity(): tags = [Signature: (Lcom/bookstore/domain/ShoppingCart;)Ljava/util/List<Lcom/bookstore/domain/CartItem;>;]
AccessPath.java: isReturnTypeEntity():  ***  class soot.tagkit.SignatureTag
AccessPath.java: isReturnTypeEntity():  ***  (Lcom/bookstore/domain/ShoppingCart;)Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
AccessPath.java: isReturnTypeEntity(): method retType = com.bookstore.domain.CartItem
AccessPath.java: getCollectionEntityType(): Collection Entity Type = com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): left type = com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): java.util.List
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: java.util.List
DIRRegionAnalyzer.java: constructDIR(): method sig = com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)=~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

, com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.shoppingCart.GrandTotal ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ return.shoppingCart.cartItemList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.shoppingCart.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ return.shoppingCart.user ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

, com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()=~~~ $r0 ~~~
this.shoppingCart

~~~ $r0.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ $r0.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ $r0.id ~~~
this.shoppingCart.id

~~~ $r0.user ~~~
this.shoppingCart.user

~~~ return ~~~
this.shoppingCart

~~~ return ~~~
this.shoppingCart

~~~ return.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ return.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ return.id ~~~
this.shoppingCart.id

~~~ return.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

, com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ $r1.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ $r1.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ $r1.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ $r1.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ $r1.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ $r1.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ $r1.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [CartItem.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): leftType = com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: findByShoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = $r1, com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callee = com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
DIRRegionAnalyzer.java: constructDIR(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: constructDIR(): return type collection
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart) END
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $r1
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.cartItemRepository

~~~ $r1 ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.cartItemRepository

~~~ $r1 ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r0=this.cartItemRepository
DIR.java: updateRegion(): update region entry: $r1=Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: return=Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
construct/Utils.java: parseObjectInvoke(): Put DIR of callee = com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart) in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
AccessPath.java: isReturnTypeEntity(): check :java.util.List
AccessPath.java: isReturnTypeEntity(): tags = [Signature: (Lcom/bookstore/domain/ShoppingCart;)Ljava/util/List<Lcom/bookstore/domain/CartItem;>;]
AccessPath.java: isReturnTypeEntity():  ***  class soot.tagkit.SignatureTag
AccessPath.java: isReturnTypeEntity():  ***  (Lcom/bookstore/domain/ShoppingCart;)Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
AccessPath.java: isReturnTypeEntity(): method retType = com.bookstore.domain.CartItem
AccessPath.java: getCollectionEntityType(): Collection Entity Type = com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): leftType = com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): leftType : com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: cartItemList
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
AccessPath.java: isReturnTypeEntity(): check :java.util.List
AccessPath.java: isReturnTypeEntity(): tags = [Signature: (Lcom/bookstore/domain/ShoppingCart;)Ljava/util/List<Lcom/bookstore/domain/CartItem;>;]
AccessPath.java: isReturnTypeEntity():  ***  class soot.tagkit.SignatureTag
AccessPath.java: isReturnTypeEntity():  ***  (Lcom/bookstore/domain/ShoppingCart;)Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
AccessPath.java: isReturnTypeEntity(): method retType = com.bookstore.domain.CartItem
AccessPath.java: getCollectionEntityType(): Collection Entity Type = com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): left type = com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): java.util.List
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: java.util.List
DIRRegionAnalyzer.java: constructDIR(): method sig = com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)=~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

, com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.shoppingCart.GrandTotal ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ return.shoppingCart.cartItemList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.shoppingCart.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ return.shoppingCart.user ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

, com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()=~~~ $r0 ~~~
this.shoppingCart

~~~ $r0.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ $r0.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ $r0.id ~~~
this.shoppingCart.id

~~~ $r0.user ~~~
this.shoppingCart.user

~~~ return ~~~
this.shoppingCart

~~~ return ~~~
this.shoppingCart

~~~ return.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ return.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ return.id ~~~
this.shoppingCart.id

~~~ return.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

, com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)=~~~ $r0 ~~~
this.cartItemRepository

~~~ $r1 ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ this ~~~
Self

, com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ $r1.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ $r1.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ $r1.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ $r1.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ $r1.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ $r1.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ $r1.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ $r0 ~~~
this.cartItemRepository

~~~ $r1 ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [CartItem.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [shoppingCart, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [shoppingCart, $r2]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [shoppingCart.id, shoppingCart.GrandTotal, shoppingCart.cartItemList, shoppingCart.user]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): leftType = com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: findByShoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [shoppingCart, this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [shoppingCart, $r2]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [shoppingCart.id, shoppingCart.GrandTotal, shoppingCart.cartItemList, shoppingCart.user]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: shoppingCart.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r1, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: shoppingCart.GrandTotal
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r1, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: shoppingCart.cartItemList
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r1, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: shoppingCart.user
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r1, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.bookstore.service.impl.CartItemServiceImpl
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: $r2
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.bookToCartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r1, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.cartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r1, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = findByShoppingCart, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [shoppingCart.id, shoppingCart.GrandTotal, shoppingCart.cartItemList, shoppingCart.user]
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: $r2
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = cartItemList, com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callee = com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
DIRRegionAnalyzer.java: constructDIR(): invokeExpr = virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: constructDIR(): return type collection
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: constructDIR(): key = $r0
DIRRegionAnalyzer.java: constructDIR(): val = this.cartItemRepository
DIRRegionAnalyzer.java: constructDIR(): key = $r1
DIRRegionAnalyzer.java: constructDIR(): val = Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): key = this
DIRRegionAnalyzer.java: constructDIR(): val = Self
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart) END
DIRRegionAnalyzer.java: constructDIR(): curUnit = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r2
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): CASE: v.f = expr, f is non-primtive
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>
DIRRegionAnalyzer.java: constructDIR(): accessPaths = [this.cartItemServiceImpl.bookToCartItemRepository, this.cartItemServiceImpl.cartItemRepository]
DIRRegionAnalyzer.java: constructDIR(): right val = $r2
DIRRegionAnalyzer.java: constructDIR(): Subcase: v1.f = v2
AccessPath.java: replaceBase(): input access path: this.cartItemServiceImpl.bookToCartItemRepository
AccessPath.java: replaceBase(): replacement of base: $r2
WARN: DIRRegionAnalyzer.java: constructDIR(): Invalid intermediate access path found
AccessPath.java: replaceBase(): input access path: this.cartItemServiceImpl.cartItemRepository
AccessPath.java: replaceBase(): replacement of base: $r2
WARN: DIRRegionAnalyzer.java: constructDIR(): Invalid intermediate access path found
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r3 = new com.bookstore.service.impl.ShoppingCartServiceImpl
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
DIRRegionAnalyzer.java: constructDIR(): curUnit = virtualinvoke $r3.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke $r3.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: updateShoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [shoppingCart, this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [shoppingCart, $r3]
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregions: [| BasicBlock0, | WhileLoop
| | BasicBlock1
| | Sequential
| | | IfThen
| | | | BasicBlock2
| | | | BasicBlock3
| | | BasicBlock4
, | BasicBlock5]
DIRSequentialRegionAnalyzerN.java: constructDIR(): Break point!
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: updateShoppingCart
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.bookstore.service.impl.ShoppingCartServiceImpl, shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart, $r0 = new java.math.BigDecimal, specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0), cartTotal = $r0, $r1 = new com.bookstore.service.impl.CartItemServiceImpl, cartItems = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart), this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1, l4 = interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal), $r4 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), cartItem = (com.bookstore.domain.CartItem) $r4, $r5 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>(), $i0 = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>(), if $i0 <= 0 goto (branch), $r6 = new com.bookstore.service.impl.CartItemServiceImpl, virtualinvoke $r6.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem), this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r6, $r8 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>(), cartTotal = virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal), $r2 = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.repository.ShoppingCartRepository shoppingCartRepository>, interfaceinvoke $r2.<com.bookstore.repository.ShoppingCartRepository: java.lang.Object save(java.lang.Object)>(shoppingCart), return shoppingCart]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.bookstore.service.impl.ShoppingCartServiceImpl
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = new java.math.BigDecimal
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
Utils.java: getVarNode(): $r0
Utils.java: getVarNode(): LinkedVariableBox($r0)
DIRRegionAnalyzer.java: constructDIR(): curUnit = specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0)
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: <init>
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = java.math.BigDecimal: void <init>(int)
WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): curUnit = cartTotal = $r0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
Utils.java: getVarNode(): cartTotal
Utils.java: getVarNode(): LinkedVariableBox(cartTotal)
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = new com.bookstore.service.impl.CartItemServiceImpl
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
DIRRegionAnalyzer.java: constructDIR(): curUnit = cartItems = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = findByShoppingCart
construct/Utils.java: parseInvokeExpr(): methodSignature = com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
construct/Utils.java: parseObjectInvoke(): virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>
construct/Utils.java: parseObjectInvoke(): methodName = findByShoppingCart
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
construct/Utils.java: parseObjectInvoke(): methodSignature = com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
construct/Utils.java: parseObjectInvoke(): Case : findBy
Utils.java: getRelExpForMethod(): getRelExpForMethod: virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
Utils.java: getRelExpForMethod(): actualargs = [shoppingCart]
Utils.java: getRelExpForMethod(): methodInvoked = <com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>
Utils.java: getRelExpForMethod(): taglist: 
[Signature: (Lcom/bookstore/domain/ShoppingCart;)Ljava/util/List<Lcom/bookstore/domain/CartItem;>;]
construct/Utils.java: parseObjectInvoke(): relExpFor method : virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
construct/Utils.java: parseObjectInvoke(): expr : null
DIRRegionAnalyzer.java: valIsRepository(): fpar val: $r1
DIRRegionAnalyzer.java: valIsRepository(): refType: com.bookstore.service.impl.CartItemService
DIRRegionAnalyzer.java: valIsRepository(): valClass: com.bookstore.service.impl.CartItemService
DIRRegionAnalyzer.java: valIsRepository(): ret: false
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: findByShoppingCart
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.bookstore.service.impl.CartItemServiceImpl, shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart, $r0 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>, $r1 = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart), return $r1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.bookstore.service.impl.CartItemServiceImpl
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r0 -> this.cartItemRepository
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = findByShoppingCart
construct/Utils.java: parseInvokeExpr(): methodSignature = com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
construct/Utils.java: parseObjectInvoke(): interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>
construct/Utils.java: parseObjectInvoke(): methodName = findByShoppingCart
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
construct/Utils.java: parseObjectInvoke(): methodSignature = com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
construct/Utils.java: parseObjectInvoke(): Case : findBy
Utils.java: getRelExpForMethod(): getRelExpForMethod: interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
Utils.java: getRelExpForMethod(): actualargs = [shoppingCart]
Utils.java: getRelExpForMethod(): methodInvoked = <com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>
Utils.java: getRelExpForMethod(): taglist: 
[Signature: (Lcom/bookstore/domain/ShoppingCart;)Ljava/util/List<Lcom/bookstore/domain/CartItem;>;]
construct/Utils.java: parseObjectInvoke(): relExpFor method : interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
construct/Utils.java: parseObjectInvoke(): expr : null
DIRRegionAnalyzer.java: valIsRepository(): fpar val: $r0
DIRRegionAnalyzer.java: valIsRepository(): refType: com.bookstore.repository.CartItemRepository
DIRRegionAnalyzer.java: valIsRepository(): valClass: com.bookstore.repository.CartItemRepository
DIRRegionAnalyzer.java: valIsRepository(): ret: true
construct/Utils.java: parseObjectInvoke(): retTypeStr: java.util.List
construct/Utils.java: parseObjectInvoke(): retType = java.util.List
construct/Utils.java: parseObjectInvoke(): entityClass = java.util.List
construct/Utils.java: parseObjectInvoke(): table = com.bookstore.repository.CartItemRepository
construct/Utils.java: parseObjectInvoke(): @Query not present, relnode = Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
AccessPath.java: isReturnTypeEntity(): check :java.util.List
AccessPath.java: isReturnTypeEntity(): tags = [Signature: (Lcom/bookstore/domain/ShoppingCart;)Ljava/util/List<Lcom/bookstore/domain/CartItem;>;]
AccessPath.java: isReturnTypeEntity():  ***  class soot.tagkit.SignatureTag
AccessPath.java: isReturnTypeEntity():  ***  (Lcom/bookstore/domain/ShoppingCart;)Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
AccessPath.java: isReturnTypeEntity(): method retType = com.bookstore.domain.CartItem
AccessPath.java: getCollectionEntityType(): Collection Entity Type = com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): leftType = com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): leftType : com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: $r1
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
AccessPath.java: isReturnTypeEntity(): check :java.util.List
AccessPath.java: isReturnTypeEntity(): tags = [Signature: (Lcom/bookstore/domain/ShoppingCart;)Ljava/util/List<Lcom/bookstore/domain/CartItem;>;]
AccessPath.java: isReturnTypeEntity():  ***  class soot.tagkit.SignatureTag
AccessPath.java: isReturnTypeEntity():  ***  (Lcom/bookstore/domain/ShoppingCart;)Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
AccessPath.java: isReturnTypeEntity(): method retType = com.bookstore.domain.CartItem
AccessPath.java: getCollectionEntityType(): Collection Entity Type = com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): left type = com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): java.util.List
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: java.util.List
DIRRegionAnalyzer.java: constructDIR(): method sig = com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)=~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

, com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.shoppingCart.GrandTotal ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ return.shoppingCart.cartItemList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.shoppingCart.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ return.shoppingCart.user ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

, com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()=~~~ $r0 ~~~
this.shoppingCart

~~~ $r0.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ $r0.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ $r0.id ~~~
this.shoppingCart.id

~~~ $r0.user ~~~
this.shoppingCart.user

~~~ return ~~~
this.shoppingCart

~~~ return ~~~
this.shoppingCart

~~~ return.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ return.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ return.id ~~~
this.shoppingCart.id

~~~ return.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

, com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)=~~~ $r0 ~~~
this.cartItemRepository

~~~ $r1 ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ this ~~~
Self

, com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ $r1.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ $r1.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ $r1.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ $r1.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ $r1.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ $r1.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ $r1.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [CartItem.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: constructDIR(): leftType = com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: findByShoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = $r1, com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callee = com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
DIRRegionAnalyzer.java: constructDIR(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: constructDIR(): return type collection
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart) END
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $r1
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.cartItemRepository

~~~ $r1 ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.cartItemRepository

~~~ $r1 ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r0=this.cartItemRepository
DIR.java: updateRegion(): update region entry: $r1=Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: return=Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
construct/Utils.java: parseObjectInvoke(): Put DIR of callee = com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart) in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
AccessPath.java: isReturnTypeEntity(): check :java.util.List
AccessPath.java: isReturnTypeEntity(): tags = [Signature: (Lcom/bookstore/domain/ShoppingCart;)Ljava/util/List<Lcom/bookstore/domain/CartItem;>;]
AccessPath.java: isReturnTypeEntity():  ***  class soot.tagkit.SignatureTag
AccessPath.java: isReturnTypeEntity():  ***  (Lcom/bookstore/domain/ShoppingCart;)Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
AccessPath.java: isReturnTypeEntity(): method retType = com.bookstore.domain.CartItem
AccessPath.java: getCollectionEntityType(): Collection Entity Type = com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): leftType = com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): leftType : com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: cartItems
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
AccessPath.java: isReturnTypeEntity(): check :java.util.List
AccessPath.java: isReturnTypeEntity(): tags = [Signature: (Lcom/bookstore/domain/ShoppingCart;)Ljava/util/List<Lcom/bookstore/domain/CartItem;>;]
AccessPath.java: isReturnTypeEntity():  ***  class soot.tagkit.SignatureTag
AccessPath.java: isReturnTypeEntity():  ***  (Lcom/bookstore/domain/ShoppingCart;)Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
AccessPath.java: isReturnTypeEntity(): method retType = com.bookstore.domain.CartItem
AccessPath.java: getCollectionEntityType(): Collection Entity Type = com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): left type = com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): java.util.List
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: java.util.List
DIRRegionAnalyzer.java: constructDIR(): method sig = com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)=~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

, com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.shoppingCart.GrandTotal ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ return.shoppingCart.cartItemList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.shoppingCart.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ return.shoppingCart.user ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

, com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()=~~~ $r0 ~~~
this.shoppingCart

~~~ $r0.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ $r0.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ $r0.id ~~~
this.shoppingCart.id

~~~ $r0.user ~~~
this.shoppingCart.user

~~~ return ~~~
this.shoppingCart

~~~ return ~~~
this.shoppingCart

~~~ return.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ return.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ return.id ~~~
this.shoppingCart.id

~~~ return.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

, com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)=~~~ $r0 ~~~
this.cartItemRepository

~~~ $r1 ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ this ~~~
Self

, com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ $r1.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ $r1.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ $r1.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ $r1.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ $r1.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ $r1.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ $r1.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ $r0 ~~~
this.cartItemRepository

~~~ $r1 ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [CartItem.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [shoppingCart, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [shoppingCart, $r1]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [shoppingCart.id, shoppingCart.GrandTotal, shoppingCart.cartItemList, shoppingCart.user]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): leftType = com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: findByShoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [shoppingCart, this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [shoppingCart, $r1]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [shoppingCart.id, shoppingCart.GrandTotal, shoppingCart.cartItemList, shoppingCart.user]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: shoppingCart.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r1, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: shoppingCart.GrandTotal
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r1, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: shoppingCart.cartItemList
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r1, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: shoppingCart.user
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r1, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.bookstore.service.impl.CartItemServiceImpl
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: $r1
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.bookToCartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r1, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.cartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r1, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = findByShoppingCart, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [shoppingCart.id, shoppingCart.GrandTotal, shoppingCart.cartItemList, shoppingCart.user]
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: $r1
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = cartItems, com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callee = com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
DIRRegionAnalyzer.java: constructDIR(): invokeExpr = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: constructDIR(): return type collection
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: constructDIR(): key = $r0
DIRRegionAnalyzer.java: constructDIR(): val = this.cartItemRepository
DIRRegionAnalyzer.java: constructDIR(): key = $r1
DIRRegionAnalyzer.java: constructDIR(): val = Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): key = this
DIRRegionAnalyzer.java: constructDIR(): val = Self
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart) END
DIRRegionAnalyzer.java: constructDIR(): curUnit = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): CASE: v.f = expr, f is non-primtive
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>
DIRRegionAnalyzer.java: constructDIR(): accessPaths = [this.cartItemServiceImpl.bookToCartItemRepository, this.cartItemServiceImpl.cartItemRepository]
DIRRegionAnalyzer.java: constructDIR(): right val = $r1
DIRRegionAnalyzer.java: constructDIR(): Subcase: v1.f = v2
AccessPath.java: replaceBase(): input access path: this.cartItemServiceImpl.bookToCartItemRepository
AccessPath.java: replaceBase(): replacement of base: $r1
WARN: DIRRegionAnalyzer.java: constructDIR(): Invalid intermediate access path found
AccessPath.java: replaceBase(): input access path: this.cartItemServiceImpl.cartItemRepository
AccessPath.java: replaceBase(): replacement of base: $r1
WARN: DIRRegionAnalyzer.java: constructDIR(): Invalid intermediate access path found
DIRRegionAnalyzer.java: constructDIR(): curUnit = l4 = interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = iterator
construct/Utils.java: parseInvokeExpr(): methodSignature = java.util.List: java.util.Iterator iterator()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.util.List: java.util.Iterator iterator()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.util.List: java.util.Iterator iterator()>
construct/Utils.java: parseObjectInvoke(): methodName = iterator
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.util.List: java.util.Iterator iterator()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
Utils.java: getVarNode(): l4
Utils.java: getVarNode(): LinkedVariableBox(l4)
JAssignStmtCons.java: construct(): interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>()
construct/Utils.java: parseInvokeExpr(): methodName = iterator
construct/Utils.java: parseInvokeExpr(): methodSignature = java.util.List: java.util.Iterator iterator()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.util.List: java.util.Iterator iterator()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.util.List: java.util.Iterator iterator()>
construct/Utils.java: parseObjectInvoke(): methodName = iterator
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.util.List: java.util.Iterator iterator()
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
BottomNode

~~~ cartItems ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ cartTotal ~~~
BottomNode

~~~ l4 ~~~
InvokeMethod
| Join
| | shoppingCart
| | ClassRef(com.bookstore.repository.CartItemRepository)
| | NullOp
| Iterator()

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
BottomNode

~~~ cartItems ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ cartTotal ~~~
BottomNode

~~~ l4 ~~~
InvokeMethod
| Join
| | shoppingCart
| | ClassRef(com.bookstore.repository.CartItemRepository)
| | NullOp
| Iterator()

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: cartTotal=BottomNode
DIR.java: updateRegion(): update region entry: $r0=BottomNode
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: l4=InvokeMethod
| Join
| | shoppingCart
| | ClassRef(com.bookstore.repository.CartItemRepository)
| | NullOp
| Iterator()
DIR.java: updateRegion(): update region entry: cartItems=Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | BasicBlock0
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ $r0 ~~~
BottomNode

~~~ cartItems ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ cartTotal ~~~
BottomNode

~~~ l4 ~~~
InvokeMethod
| Join
| | shoppingCart
| | ClassRef(com.bookstore.repository.CartItemRepository)
| | NullOp
| Iterator()

~~~ this ~~~
Self


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: InvokeMethod
| Join
| | shoppingCart
| | ClassRef(com.bookstore.repository.CartItemRepository)
| | NullOp
| Iterator()
analysis/Utils.java: resolveTree(): i = 0 child of top:Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Iterator()
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:FuncParams
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FuncParams
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Iterator()
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:shoppingCart
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:ClassRef(com.bookstore.repository.CartItemRepository)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.bookstore.repository.CartItemRepository)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: shoppingCart
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:shoppingCart
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:ClassRef(com.bookstore.repository.CartItemRepository)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.bookstore.repository.CartItemRepository)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: shoppingCart
analysis/Utils.java: resolveTree(): return
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.LoopRegion
DIRLoopRegionAnalyzer.java: constructDIR(): Analyzing loop head
ARegion.java: analyze(): set cur method of analyzer to: updateShoppingCart
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 1
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.bookstore.service.impl.ShoppingCartServiceImpl, shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart, $r0 = new java.math.BigDecimal, specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0), cartTotal = $r0, $r1 = new com.bookstore.service.impl.CartItemServiceImpl, cartItems = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart), this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1, l4 = interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal), $r4 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), cartItem = (com.bookstore.domain.CartItem) $r4, $r5 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>(), $i0 = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>(), if $i0 <= 0 goto (branch), $r6 = new com.bookstore.service.impl.CartItemServiceImpl, virtualinvoke $r6.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem), this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r6, $r8 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>(), cartTotal = virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal), $r2 = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.repository.ShoppingCartRepository shoppingCartRepository>, interfaceinvoke $r2.<com.bookstore.repository.ShoppingCartRepository: java.lang.Object save(java.lang.Object)>(shoppingCart), return shoppingCart]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = hasNext
construct/Utils.java: parseInvokeExpr(): methodSignature = java.util.Iterator: boolean hasNext()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.util.Iterator: boolean hasNext()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.util.Iterator: boolean hasNext()>
construct/Utils.java: parseObjectInvoke(): methodName = hasNext
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.util.Iterator: boolean hasNext()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
Utils.java: getVarNode(): $z0
Utils.java: getVarNode(): LinkedVariableBox($z0)
JAssignStmtCons.java: construct(): interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()
construct/Utils.java: parseInvokeExpr(): methodName = hasNext
construct/Utils.java: parseInvokeExpr(): methodSignature = java.util.Iterator: boolean hasNext()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.util.Iterator: boolean hasNext()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.util.Iterator: boolean hasNext()>
construct/Utils.java: parseObjectInvoke(): methodName = hasNext
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.util.Iterator: boolean hasNext()
DIRRegionAnalyzer.java: constructDIR(): curUnit = if $z0 == 0 goto virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal)
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()$z0 == 0
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $z0 ~~~
InvokeMethod
| l4
| HasNext()

~~~ condition ~~~
Equals
| InvokeMethod
| | l4
| | HasNext()
| 0


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $z0 ~~~
InvokeMethod
| l4
| HasNext()

~~~ condition ~~~
Equals
| InvokeMethod
| | l4
| | HasNext()
| 0


DIR.java: updateRegion(): update region entry: condition=Equals
| InvokeMethod
| | l4
| | HasNext()
| 0
DIR.java: updateRegion(): update region entry: $z0=InvokeMethod
| l4
| HasNext()
DIRLoopRegionAnalyzer.java: constructDIR(): Analyzing loop body
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregions: [| IfThen
| | BasicBlock2
| | BasicBlock3
, | BasicBlock4]
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.IfThenRegion
DIRIfThenRegionAnalyzer.java: constructDIR(): headRegion: | BasicBlock2
DIRIfThenRegionAnalyzer.java: constructDIR(): trueRegion: | BasicBlock3
ARegion.java: analyze(): set cur method of analyzer to: updateShoppingCart
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 2
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.bookstore.service.impl.ShoppingCartServiceImpl, shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart, $r0 = new java.math.BigDecimal, specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0), cartTotal = $r0, $r1 = new com.bookstore.service.impl.CartItemServiceImpl, cartItems = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart), this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1, l4 = interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal), $r4 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), cartItem = (com.bookstore.domain.CartItem) $r4, $r5 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>(), $i0 = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>(), if $i0 <= 0 goto (branch), $r6 = new com.bookstore.service.impl.CartItemServiceImpl, virtualinvoke $r6.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem), this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r6, $r8 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>(), cartTotal = virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal), $r2 = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.repository.ShoppingCartRepository shoppingCartRepository>, interfaceinvoke $r2.<com.bookstore.repository.ShoppingCartRepository: java.lang.Object save(java.lang.Object)>(shoppingCart), return shoppingCart]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r4 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = next
construct/Utils.java: parseInvokeExpr(): methodSignature = java.util.Iterator: java.lang.Object next()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.util.Iterator: java.lang.Object next()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.util.Iterator: java.lang.Object next()>
construct/Utils.java: parseObjectInvoke(): methodName = next
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.util.Iterator: java.lang.Object next()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
Utils.java: getVarNode(): $r4
Utils.java: getVarNode(): LinkedVariableBox($r4)
JAssignStmtCons.java: construct(): interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>()
construct/Utils.java: parseInvokeExpr(): methodName = next
construct/Utils.java: parseInvokeExpr(): methodSignature = java.util.Iterator: java.lang.Object next()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.util.Iterator: java.lang.Object next()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.util.Iterator: java.lang.Object next()>
construct/Utils.java: parseObjectInvoke(): methodName = next
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.util.Iterator: java.lang.Object next()
DIRRegionAnalyzer.java: constructDIR(): curUnit = cartItem = (com.bookstore.domain.CartItem) $r4
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JCastExpr
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = (type1) v2
DIRRegionAnalyzer.java: constructDIR(): type1: com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): castExpr: (com.bookstore.domain.CartItem) $r4
DIRRegionAnalyzer.java: constructDIR(): v2: $r4
DIRRegionAnalyzer.java: constructDIR(): cur dir: {$r4=NextOp}
DIRRegionAnalyzer.java: constructDIR(): rightVar in dir: true
DIRRegionAnalyzer.java: constructDIR(): CASE: actual_iterator = (type1) it
DIRRegionAnalyzer.java: constructDIR(): rightVar's value in dir: NextOp
DIRRegionAnalyzer.java: constructDIR(): check : Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): check : Join
| NextOp
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): check : Join
| NextOp
| ClassRef(com.bookstore.domain.Order)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): flattenedIterator = [cartItem.id, cartItem.qty, cartItem.subtotal]
DIRRegionAnalyzer.java: constructDIR(): dir: {cartItem.book.id=FieldRef(com.bookstore.domain.Book.id), cartItem.shoppingCart.GrandTotal=FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal), cartItem.order.orderTotal=FieldRef(com.bookstore.domain.Order.orderTotal), cartItem.book.listPrice=FieldRef(com.bookstore.domain.Book.listPrice), cartItem.book.ourPrice=FieldRef(com.bookstore.domain.Book.ourPrice), cartItem.qty=FieldRef(com.bookstore.domain.CartItem.qty), cartItem.book.title=FieldRef(com.bookstore.domain.Book.title), cartItem.order.shippingMethod=FieldRef(com.bookstore.domain.Order.shippingMethod), cartItem.shoppingCart=Join
| NextOp
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp, cartItem.order.id=FieldRef(com.bookstore.domain.Order.id), cartItem.book=Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp, cartItem.book.numberOfPages=FieldRef(com.bookstore.domain.Book.numberOfPages), cartItem.book.active=FieldRef(com.bookstore.domain.Book.active), cartItem.book.inStockNumber=FieldRef(com.bookstore.domain.Book.inStockNumber), cartItem.book.author=FieldRef(com.bookstore.domain.Book.author), cartItem.shoppingCart.id=FieldRef(com.bookstore.domain.ShoppingCart.id), cartItem.book.language=FieldRef(com.bookstore.domain.Book.language), cartItem.book.publisher=FieldRef(com.bookstore.domain.Book.publisher), cartItem.book.shippingWeight=FieldRef(com.bookstore.domain.Book.shippingWeight), $r4=NextOp, cartItem.book.publicationDate=FieldRef(com.bookstore.domain.Book.publicationDate), cartItem.book.isbn=FieldRef(com.bookstore.domain.Book.isbn), cartItem.order.shippingDate=FieldRef(com.bookstore.domain.Order.shippingDate), cartItem.order.orderDate=FieldRef(com.bookstore.domain.Order.orderDate), cartItem.order.orederStatus=FieldRef(com.bookstore.domain.Order.orederStatus), cartItem.id=FieldRef(com.bookstore.domain.CartItem.id), cartItem.book.category=FieldRef(com.bookstore.domain.Book.category), cartItem.book.description=FieldRef(com.bookstore.domain.Book.description), cartItem.book.format=FieldRef(com.bookstore.domain.Book.format), cartItem.order=Join
| NextOp
| ClassRef(com.bookstore.domain.Order)
| NullOp, cartItem.subtotal=FieldRef(com.bookstore.domain.CartItem.subtotal)}
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r5 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = getBook
construct/Utils.java: parseInvokeExpr(): methodSignature = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
construct/Utils.java: parseObjectInvoke(): virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
construct/Utils.java: parseObjectInvoke(): methodName = getBook
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: getBook
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.bookstore.domain.CartItem, $r0 = this.<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, return $r0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.bookstore.domain.CartItem
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: valIsRepository(): fpar val: this.<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>
DIRRegionAnalyzer.java: valIsRepository(): refType: com.bookstore.domain.Book
DIRRegionAnalyzer.java: valIsRepository(): valClass: com.bookstore.domain.Book
DIRRegionAnalyzer.java: valIsRepository(): ret: false
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is not primitive
DIRRegionAnalyzer.java: constructDIR(): destPaths: [$r0.id, $r0.title, $r0.author, $r0.publisher, $r0.publicationDate, $r0.language, $r0.category, $r0.numberOfPages, $r0.format, $r0.isbn, $r0.shippingWeight, $r0.listPrice, $r0.ourPrice, $r0.active, $r0.description, $r0.inStockNumber, $r0.bookImage, $r0.bookToCartItemsList]
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.id
AccessPath.java: replaceBase(): input access path: $r0.id
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.id
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.id
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.id -> this.book.id
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.title
AccessPath.java: replaceBase(): input access path: $r0.title
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.title
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.id ~~~
this.book.id

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.title
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.title -> this.book.title
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.author
AccessPath.java: replaceBase(): input access path: $r0.author
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.author
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.id ~~~
this.book.id

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.author
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.author -> this.book.author
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.publisher
AccessPath.java: replaceBase(): input access path: $r0.publisher
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.publisher
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.author ~~~
this.book.author

~~~ $r0.id ~~~
this.book.id

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.publisher
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.publisher -> this.book.publisher
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.publicationDate
AccessPath.java: replaceBase(): input access path: $r0.publicationDate
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.publicationDate
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.author ~~~
this.book.author

~~~ $r0.id ~~~
this.book.id

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.publicationDate
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.publicationDate -> this.book.publicationDate
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.language
AccessPath.java: replaceBase(): input access path: $r0.language
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.language
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.author ~~~
this.book.author

~~~ $r0.id ~~~
this.book.id

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.language
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.language -> this.book.language
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.category
AccessPath.java: replaceBase(): input access path: $r0.category
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.category
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.author ~~~
this.book.author

~~~ $r0.id ~~~
this.book.id

~~~ $r0.language ~~~
this.book.language

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.category
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.category -> this.book.category
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.numberOfPages
AccessPath.java: replaceBase(): input access path: $r0.numberOfPages
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.numberOfPages
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.author ~~~
this.book.author

~~~ $r0.category ~~~
this.book.category

~~~ $r0.id ~~~
this.book.id

~~~ $r0.language ~~~
this.book.language

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.numberOfPages
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.numberOfPages -> this.book.numberOfPages
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.format
AccessPath.java: replaceBase(): input access path: $r0.format
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.format
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.author ~~~
this.book.author

~~~ $r0.category ~~~
this.book.category

~~~ $r0.id ~~~
this.book.id

~~~ $r0.language ~~~
this.book.language

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.format
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.format -> this.book.format
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.isbn
AccessPath.java: replaceBase(): input access path: $r0.isbn
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.isbn
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.author ~~~
this.book.author

~~~ $r0.category ~~~
this.book.category

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.language ~~~
this.book.language

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.isbn
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.isbn -> this.book.isbn
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.shippingWeight
AccessPath.java: replaceBase(): input access path: $r0.shippingWeight
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.shippingWeight
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.author ~~~
this.book.author

~~~ $r0.category ~~~
this.book.category

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.shippingWeight
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.shippingWeight -> this.book.shippingWeight
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.listPrice
AccessPath.java: replaceBase(): input access path: $r0.listPrice
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.listPrice
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.author ~~~
this.book.author

~~~ $r0.category ~~~
this.book.category

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.listPrice
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.listPrice -> this.book.listPrice
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.ourPrice
AccessPath.java: replaceBase(): input access path: $r0.ourPrice
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.ourPrice
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.author ~~~
this.book.author

~~~ $r0.category ~~~
this.book.category

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.listPrice ~~~
this.book.listPrice

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.ourPrice
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.ourPrice -> this.book.ourPrice
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.active
AccessPath.java: replaceBase(): input access path: $r0.active
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.active
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.author ~~~
this.book.author

~~~ $r0.category ~~~
this.book.category

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.listPrice ~~~
this.book.listPrice

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.ourPrice ~~~
this.book.ourPrice

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.active
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.active -> this.book.active
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.description
AccessPath.java: replaceBase(): input access path: $r0.description
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.description
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.active ~~~
this.book.active

~~~ $r0.author ~~~
this.book.author

~~~ $r0.category ~~~
this.book.category

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.listPrice ~~~
this.book.listPrice

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.ourPrice ~~~
this.book.ourPrice

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.description
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.description -> this.book.description
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.inStockNumber
AccessPath.java: replaceBase(): input access path: $r0.inStockNumber
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.active ~~~
this.book.active

~~~ $r0.author ~~~
this.book.author

~~~ $r0.category ~~~
this.book.category

~~~ $r0.description ~~~
this.book.description

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.listPrice ~~~
this.book.listPrice

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.ourPrice ~~~
this.book.ourPrice

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.inStockNumber -> this.book.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.bookImage
AccessPath.java: replaceBase(): input access path: $r0.bookImage
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.bookImage
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.active ~~~
this.book.active

~~~ $r0.author ~~~
this.book.author

~~~ $r0.category ~~~
this.book.category

~~~ $r0.description ~~~
this.book.description

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.inStockNumber ~~~
this.book.inStockNumber

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.listPrice ~~~
this.book.listPrice

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.ourPrice ~~~
this.book.ourPrice

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.bookImage
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.bookImage -> this.book.bookImage
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.bookToCartItemsList
AccessPath.java: replaceBase(): input access path: $r0.bookToCartItemsList
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.active ~~~
this.book.active

~~~ $r0.author ~~~
this.book.author

~~~ $r0.bookImage ~~~
this.book.bookImage

~~~ $r0.category ~~~
this.book.category

~~~ $r0.description ~~~
this.book.description

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.inStockNumber ~~~
this.book.inStockNumber

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.listPrice ~~~
this.book.listPrice

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.ourPrice ~~~
this.book.ourPrice

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.bookToCartItemsList -> this.book.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $r0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: return
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r0
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [Book.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
]
AccessPath.java: replaceBase(): input access path: return.id
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.title
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.author
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.publisher
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.publicationDate
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.language
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.category
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.numberOfPages
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.format
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.isbn
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.shippingWeight
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.listPrice
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.ourPrice
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.active
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.description
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.inStockNumber
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.bookImage
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.bookToCartItemsList
AccessPath.java: replaceBase(): replacement of base: $r0
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.book

~~~ $r0.active ~~~
this.book.active

~~~ $r0.author ~~~
this.book.author

~~~ $r0.bookImage ~~~
this.book.bookImage

~~~ $r0.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r0.category ~~~
this.book.category

~~~ $r0.description ~~~
this.book.description

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.inStockNumber ~~~
this.book.inStockNumber

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.listPrice ~~~
this.book.listPrice

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.ourPrice ~~~
this.book.ourPrice

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ return ~~~
this.book

~~~ return ~~~
this.book

~~~ return.active ~~~
this.book.active

~~~ return.author ~~~
this.book.author

~~~ return.bookImage ~~~
this.book.bookImage

~~~ return.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ return.category ~~~
this.book.category

~~~ return.description ~~~
this.book.description

~~~ return.format ~~~
this.book.format

~~~ return.id ~~~
this.book.id

~~~ return.inStockNumber ~~~
this.book.inStockNumber

~~~ return.isbn ~~~
this.book.isbn

~~~ return.language ~~~
this.book.language

~~~ return.listPrice ~~~
this.book.listPrice

~~~ return.numberOfPages ~~~
this.book.numberOfPages

~~~ return.ourPrice ~~~
this.book.ourPrice

~~~ return.publicationDate ~~~
this.book.publicationDate

~~~ return.publisher ~~~
this.book.publisher

~~~ return.shippingWeight ~~~
this.book.shippingWeight

~~~ return.title ~~~
this.book.title

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.book

~~~ $r0.active ~~~
this.book.active

~~~ $r0.author ~~~
this.book.author

~~~ $r0.bookImage ~~~
this.book.bookImage

~~~ $r0.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r0.category ~~~
this.book.category

~~~ $r0.description ~~~
this.book.description

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.inStockNumber ~~~
this.book.inStockNumber

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.listPrice ~~~
this.book.listPrice

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.ourPrice ~~~
this.book.ourPrice

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ return ~~~
this.book

~~~ return ~~~
this.book

~~~ return.active ~~~
this.book.active

~~~ return.author ~~~
this.book.author

~~~ return.bookImage ~~~
this.book.bookImage

~~~ return.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ return.category ~~~
this.book.category

~~~ return.description ~~~
this.book.description

~~~ return.format ~~~
this.book.format

~~~ return.id ~~~
this.book.id

~~~ return.inStockNumber ~~~
this.book.inStockNumber

~~~ return.isbn ~~~
this.book.isbn

~~~ return.language ~~~
this.book.language

~~~ return.listPrice ~~~
this.book.listPrice

~~~ return.numberOfPages ~~~
this.book.numberOfPages

~~~ return.ourPrice ~~~
this.book.ourPrice

~~~ return.publicationDate ~~~
this.book.publicationDate

~~~ return.publisher ~~~
this.book.publisher

~~~ return.shippingWeight ~~~
this.book.shippingWeight

~~~ return.title ~~~
this.book.title

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r0.active=this.book.active
DIR.java: updateRegion(): update region entry: $r0.inStockNumber=this.book.inStockNumber
DIR.java: updateRegion(): update region entry: return.publisher=this.book.publisher
DIR.java: updateRegion(): update region entry: return.bookImage=this.book.bookImage
DIR.java: updateRegion(): update region entry: $r0.author=this.book.author
DIR.java: updateRegion(): update region entry: return.category=this.book.category
DIR.java: updateRegion(): update region entry: return.isbn=this.book.isbn
DIR.java: updateRegion(): update region entry: $r0.format=this.book.format
DIR.java: updateRegion(): update region entry: return.inStockNumber=this.book.inStockNumber
DIR.java: updateRegion(): update region entry: $r0.publicationDate=this.book.publicationDate
DIR.java: updateRegion(): update region entry: $r0.ourPrice=this.book.ourPrice
DIR.java: updateRegion(): update region entry: $r0.shippingWeight=this.book.shippingWeight
DIR.java: updateRegion(): update region entry: $r0.isbn=this.book.isbn
DIR.java: updateRegion(): update region entry: $r0.bookToCartItemsList=this.book.bookToCartItemsList
DIR.java: updateRegion(): update region entry: $r0.publisher=this.book.publisher
DIR.java: updateRegion(): update region entry: $r0.language=this.book.language
DIR.java: updateRegion(): update region entry: return.publicationDate=this.book.publicationDate
DIR.java: updateRegion(): update region entry: return.id=this.book.id
DIR.java: updateRegion(): update region entry: return.language=this.book.language
DIR.java: updateRegion(): update region entry: $r0.numberOfPages=this.book.numberOfPages
DIR.java: updateRegion(): update region entry: $r0.description=this.book.description
DIR.java: updateRegion(): update region entry: $r0=this.book
DIR.java: updateRegion(): update region entry: return.listPrice=this.book.listPrice
DIR.java: updateRegion(): update region entry: return.ourPrice=this.book.ourPrice
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: return.numberOfPages=this.book.numberOfPages
DIR.java: updateRegion(): update region entry: $r0.id=this.book.id
DIR.java: updateRegion(): update region entry: $r0.category=this.book.category
DIR.java: updateRegion(): update region entry: $r0.listPrice=this.book.listPrice
DIR.java: updateRegion(): update region entry: return.active=this.book.active
DIR.java: updateRegion(): update region entry: return.author=this.book.author
DIR.java: updateRegion(): update region entry: return.shippingWeight=this.book.shippingWeight
DIR.java: updateRegion(): update region entry: $r0.title=this.book.title
DIR.java: updateRegion(): update region entry: return.format=this.book.format
DIR.java: updateRegion(): update region entry: return.title=this.book.title
DIR.java: updateRegion(): update region entry: return.description=this.book.description
DIR.java: updateRegion(): update region entry: $r0.bookImage=this.book.bookImage
DIR.java: updateRegion(): update region entry: return.bookToCartItemsList=this.book.bookToCartItemsList
DIR.java: updateRegion(): update region entry: return=this.book
DIR.java: updateRegion(): update region entry: return=this.book
construct/Utils.java: parseObjectInvoke(): Put DIR of callee = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook() in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = com.bookstore.domain.Book
DIRRegionAnalyzer.java: constructDIR(): leftType : com.bookstore.domain.Book
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: $r5
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: constructDIR(): left type = com.bookstore.domain.Book
DIRRegionAnalyzer.java: constructDIR(): com.bookstore.domain.Book
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: com.bookstore.domain.Book
DIRRegionAnalyzer.java: constructDIR(): method sig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)=~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

, com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.shoppingCart.GrandTotal ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ return.shoppingCart.cartItemList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.shoppingCart.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ return.shoppingCart.user ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

, com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()=~~~ $r0 ~~~
this.shoppingCart

~~~ $r0.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ $r0.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ $r0.id ~~~
this.shoppingCart.id

~~~ $r0.user ~~~
this.shoppingCart.user

~~~ return ~~~
this.shoppingCart

~~~ return ~~~
this.shoppingCart

~~~ return.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ return.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ return.id ~~~
this.shoppingCart.id

~~~ return.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

, com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)=~~~ $r0 ~~~
this.cartItemRepository

~~~ $r1 ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ this ~~~
Self

, com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ $r1.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ $r1.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ $r1.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ $r1.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ $r1.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ $r1.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ $r1.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ this ~~~
Self

, com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()=~~~ $r0 ~~~
this.book

~~~ $r0.active ~~~
this.book.active

~~~ $r0.author ~~~
this.book.author

~~~ $r0.bookImage ~~~
this.book.bookImage

~~~ $r0.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r0.category ~~~
this.book.category

~~~ $r0.description ~~~
this.book.description

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.inStockNumber ~~~
this.book.inStockNumber

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.listPrice ~~~
this.book.listPrice

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.ourPrice ~~~
this.book.ourPrice

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ return ~~~
this.book

~~~ return ~~~
this.book

~~~ return.active ~~~
this.book.active

~~~ return.author ~~~
this.book.author

~~~ return.bookImage ~~~
this.book.bookImage

~~~ return.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ return.category ~~~
this.book.category

~~~ return.description ~~~
this.book.description

~~~ return.format ~~~
this.book.format

~~~ return.id ~~~
this.book.id

~~~ return.inStockNumber ~~~
this.book.inStockNumber

~~~ return.isbn ~~~
this.book.isbn

~~~ return.language ~~~
this.book.language

~~~ return.listPrice ~~~
this.book.listPrice

~~~ return.numberOfPages ~~~
this.book.numberOfPages

~~~ return.ourPrice ~~~
this.book.ourPrice

~~~ return.publicationDate ~~~
this.book.publicationDate

~~~ return.publisher ~~~
this.book.publisher

~~~ return.shippingWeight ~~~
this.book.shippingWeight

~~~ return.title ~~~
this.book.title

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ $r0 ~~~
this.book

~~~ $r0.active ~~~
this.book.active

~~~ $r0.author ~~~
this.book.author

~~~ $r0.bookImage ~~~
this.book.bookImage

~~~ $r0.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r0.category ~~~
this.book.category

~~~ $r0.description ~~~
this.book.description

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.inStockNumber ~~~
this.book.inStockNumber

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.listPrice ~~~
this.book.listPrice

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.ourPrice ~~~
this.book.ourPrice

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ return ~~~
this.book

~~~ return ~~~
this.book

~~~ return.active ~~~
this.book.active

~~~ return.author ~~~
this.book.author

~~~ return.bookImage ~~~
this.book.bookImage

~~~ return.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ return.category ~~~
this.book.category

~~~ return.description ~~~
this.book.description

~~~ return.format ~~~
this.book.format

~~~ return.id ~~~
this.book.id

~~~ return.inStockNumber ~~~
this.book.inStockNumber

~~~ return.isbn ~~~
this.book.isbn

~~~ return.language ~~~
this.book.language

~~~ return.listPrice ~~~
this.book.listPrice

~~~ return.numberOfPages ~~~
this.book.numberOfPages

~~~ return.ourPrice ~~~
this.book.ourPrice

~~~ return.publicationDate ~~~
this.book.publicationDate

~~~ return.publisher ~~~
this.book.publisher

~~~ return.shippingWeight ~~~
this.book.shippingWeight

~~~ return.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [Book.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book
DIRRegionAnalyzer.java: constructDIR(): leftType = com.bookstore.domain.Book
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: getBook
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: cartItem
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0.active, $r0.inStockNumber, return.publisher, return.bookImage, $r0.author, return.category, return.isbn, $r0.format, return.inStockNumber, $r0.publicationDate, $r0.ourPrice, $r0.shippingWeight, $r0.isbn, $r0.bookToCartItemsList, $r0.publisher, $r0.language, return.publicationDate, return.id, return.language, $r0.numberOfPages, $r0.description, $r0, return.listPrice, return.ourPrice, this, return.numberOfPages, $r0.id, $r0.category, $r0.listPrice, return.active, return.author, return.shippingWeight, $r0.title, return.format, return.title, return.description, $r0.bookImage, return.bookToCartItemsList, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.qty
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0.active, $r0.inStockNumber, return.publisher, return.bookImage, $r0.author, return.category, return.isbn, $r0.format, return.inStockNumber, $r0.publicationDate, $r0.ourPrice, $r0.shippingWeight, $r0.isbn, $r0.bookToCartItemsList, $r0.publisher, $r0.language, return.publicationDate, return.id, return.language, $r0.numberOfPages, $r0.description, $r0, return.listPrice, return.ourPrice, this, return.numberOfPages, $r0.id, $r0.category, $r0.listPrice, return.active, return.author, return.shippingWeight, $r0.title, return.format, return.title, return.description, $r0.bookImage, return.bookToCartItemsList, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0.active, $r0.inStockNumber, return.publisher, return.bookImage, $r0.author, return.category, return.isbn, $r0.format, return.inStockNumber, $r0.publicationDate, $r0.ourPrice, $r0.shippingWeight, $r0.isbn, $r0.bookToCartItemsList, $r0.publisher, $r0.language, return.publicationDate, return.id, return.language, $r0.numberOfPages, $r0.description, $r0, return.listPrice, return.ourPrice, this, return.numberOfPages, $r0.id, $r0.category, $r0.listPrice, return.active, return.author, return.shippingWeight, $r0.title, return.format, return.title, return.description, $r0.bookImage, return.bookToCartItemsList, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.book
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0.active, $r0.inStockNumber, return.publisher, return.bookImage, $r0.author, return.category, return.isbn, $r0.format, return.inStockNumber, $r0.publicationDate, $r0.ourPrice, $r0.shippingWeight, $r0.isbn, $r0.bookToCartItemsList, $r0.publisher, $r0.language, return.publicationDate, return.id, return.language, $r0.numberOfPages, $r0.description, $r0, return.listPrice, return.ourPrice, this, return.numberOfPages, $r0.id, $r0.category, $r0.listPrice, return.active, return.author, return.shippingWeight, $r0.title, return.format, return.title, return.description, $r0.bookImage, return.bookToCartItemsList, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.bookToCartItemList
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0.active, $r0.inStockNumber, return.publisher, return.bookImage, $r0.author, return.category, return.isbn, $r0.format, return.inStockNumber, $r0.publicationDate, $r0.ourPrice, $r0.shippingWeight, $r0.isbn, $r0.bookToCartItemsList, $r0.publisher, $r0.language, return.publicationDate, return.id, return.language, $r0.numberOfPages, $r0.description, $r0, return.listPrice, return.ourPrice, this, return.numberOfPages, $r0.id, $r0.category, $r0.listPrice, return.active, return.author, return.shippingWeight, $r0.title, return.format, return.title, return.description, $r0.bookImage, return.bookToCartItemsList, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0.active, $r0.inStockNumber, return.publisher, return.bookImage, $r0.author, return.category, return.isbn, $r0.format, return.inStockNumber, $r0.publicationDate, $r0.ourPrice, $r0.shippingWeight, $r0.isbn, $r0.bookToCartItemsList, $r0.publisher, $r0.language, return.publicationDate, return.id, return.language, $r0.numberOfPages, $r0.description, $r0, return.listPrice, return.ourPrice, this, return.numberOfPages, $r0.id, $r0.category, $r0.listPrice, return.active, return.author, return.shippingWeight, $r0.title, return.format, return.title, return.description, $r0.bookImage, return.bookToCartItemsList, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.order
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0.active, $r0.inStockNumber, return.publisher, return.bookImage, $r0.author, return.category, return.isbn, $r0.format, return.inStockNumber, $r0.publicationDate, $r0.ourPrice, $r0.shippingWeight, $r0.isbn, $r0.bookToCartItemsList, $r0.publisher, $r0.language, return.publicationDate, return.id, return.language, $r0.numberOfPages, $r0.description, $r0, return.listPrice, return.ourPrice, this, return.numberOfPages, $r0.id, $r0.category, $r0.listPrice, return.active, return.author, return.shippingWeight, $r0.title, return.format, return.title, return.description, $r0.bookImage, return.bookToCartItemsList, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = getBook, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: cartItem
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = $r5, com.bookstore.domain.Book
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()]
DIRRegionAnalyzer.java: constructDIR(): callee = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
Flatten.java: getNestedFields(): LVAL TYPE: com.bookstore.domain.Book
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: java.lang.Long id> = java.lang.Long
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
Flatten.java: getNestedFields(): Id fields=id
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: java.lang.String title> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: java.lang.String author> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: java.lang.String publisher> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: java.lang.String publicationDate> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: java.lang.String language> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: java.lang.String category> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: int numberOfPages> = int
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: java.lang.String format> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: java.lang.String isbn> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: double shippingWeight> = double
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: double listPrice> = double
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: double ourPrice> = double
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: boolean active> = boolean
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: java.lang.String description> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: columnDefinition value: text

]
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: int inStockNumber> = int
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage> = org.springframework.web.multipart.MultipartFile
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Transient; without elements
]
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: java.util.List bookToCartItemsList> = java.util.List
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
Flatten.java: getNestedFields(): check *ToMany sf: bookToCartItemsList , type = java.util.List
Flatten.java: getNestedFields(): returning: [<com.bookstore.domain.Book: java.util.List bookToCartItemsList>]
DIRRegionAnalyzer.java: constructDIR(): check nestedFields=[<com.bookstore.domain.Book: java.util.List bookToCartItemsList>]
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=Book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.bookstore.domain.BookToCartItem
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.bookstore.domain.BookToCartItem
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.bookToCartItemsList
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): key= return.bookToCartItemsList
 value= this.book.bookToCartItemsList
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  book_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Book.id
| BookToCartItem.book_id
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: constructDIR(): key = $r0.active
DIRRegionAnalyzer.java: constructDIR(): val = this.book.active
DIRRegionAnalyzer.java: constructDIR(): key = $r0.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): val = this.book.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): key = return.publisher
DIRRegionAnalyzer.java: constructDIR(): val = this.book.publisher
DIRRegionAnalyzer.java: constructDIR(): key = return.bookImage
DIRRegionAnalyzer.java: constructDIR(): val = this.book.bookImage
DIRRegionAnalyzer.java: constructDIR(): key = $r0.author
DIRRegionAnalyzer.java: constructDIR(): val = this.book.author
DIRRegionAnalyzer.java: constructDIR(): key = return.category
DIRRegionAnalyzer.java: constructDIR(): val = this.book.category
DIRRegionAnalyzer.java: constructDIR(): key = return.isbn
DIRRegionAnalyzer.java: constructDIR(): val = this.book.isbn
DIRRegionAnalyzer.java: constructDIR(): key = $r0.format
DIRRegionAnalyzer.java: constructDIR(): val = this.book.format
DIRRegionAnalyzer.java: constructDIR(): key = return.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): val = this.book.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): key = $r0.publicationDate
DIRRegionAnalyzer.java: constructDIR(): val = this.book.publicationDate
DIRRegionAnalyzer.java: constructDIR(): key = $r0.ourPrice
DIRRegionAnalyzer.java: constructDIR(): val = this.book.ourPrice
DIRRegionAnalyzer.java: constructDIR(): key = $r0.shippingWeight
DIRRegionAnalyzer.java: constructDIR(): val = this.book.shippingWeight
DIRRegionAnalyzer.java: constructDIR(): key = $r0.isbn
DIRRegionAnalyzer.java: constructDIR(): val = this.book.isbn
DIRRegionAnalyzer.java: constructDIR(): key = $r0.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): val = this.book.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): key = $r0.publisher
DIRRegionAnalyzer.java: constructDIR(): val = this.book.publisher
DIRRegionAnalyzer.java: constructDIR(): key = $r0.language
DIRRegionAnalyzer.java: constructDIR(): val = this.book.language
DIRRegionAnalyzer.java: constructDIR(): key = return.publicationDate
DIRRegionAnalyzer.java: constructDIR(): val = this.book.publicationDate
DIRRegionAnalyzer.java: constructDIR(): key = return.id
DIRRegionAnalyzer.java: constructDIR(): val = this.book.id
DIRRegionAnalyzer.java: constructDIR(): key = return.language
DIRRegionAnalyzer.java: constructDIR(): val = this.book.language
DIRRegionAnalyzer.java: constructDIR(): key = $r0.numberOfPages
DIRRegionAnalyzer.java: constructDIR(): val = this.book.numberOfPages
DIRRegionAnalyzer.java: constructDIR(): key = $r0.description
DIRRegionAnalyzer.java: constructDIR(): val = this.book.description
DIRRegionAnalyzer.java: constructDIR(): key = $r0
DIRRegionAnalyzer.java: constructDIR(): val = this.book
DIRRegionAnalyzer.java: constructDIR(): key = return.listPrice
DIRRegionAnalyzer.java: constructDIR(): val = this.book.listPrice
DIRRegionAnalyzer.java: constructDIR(): key = return.ourPrice
DIRRegionAnalyzer.java: constructDIR(): val = this.book.ourPrice
DIRRegionAnalyzer.java: constructDIR(): key = this
DIRRegionAnalyzer.java: constructDIR(): val = Self
DIRRegionAnalyzer.java: constructDIR(): key = return.numberOfPages
DIRRegionAnalyzer.java: constructDIR(): val = this.book.numberOfPages
DIRRegionAnalyzer.java: constructDIR(): key = $r0.id
DIRRegionAnalyzer.java: constructDIR(): val = this.book.id
DIRRegionAnalyzer.java: constructDIR(): key = $r0.category
DIRRegionAnalyzer.java: constructDIR(): val = this.book.category
DIRRegionAnalyzer.java: constructDIR(): key = $r0.listPrice
DIRRegionAnalyzer.java: constructDIR(): val = this.book.listPrice
DIRRegionAnalyzer.java: constructDIR(): key = return.active
DIRRegionAnalyzer.java: constructDIR(): val = this.book.active
DIRRegionAnalyzer.java: constructDIR(): key = return.author
DIRRegionAnalyzer.java: constructDIR(): val = this.book.author
DIRRegionAnalyzer.java: constructDIR(): key = return.shippingWeight
DIRRegionAnalyzer.java: constructDIR(): val = this.book.shippingWeight
DIRRegionAnalyzer.java: constructDIR(): key = $r0.title
DIRRegionAnalyzer.java: constructDIR(): val = this.book.title
DIRRegionAnalyzer.java: constructDIR(): key = return.format
DIRRegionAnalyzer.java: constructDIR(): val = this.book.format
DIRRegionAnalyzer.java: constructDIR(): key = return.title
DIRRegionAnalyzer.java: constructDIR(): val = this.book.title
DIRRegionAnalyzer.java: constructDIR(): key = return.description
DIRRegionAnalyzer.java: constructDIR(): val = this.book.description
DIRRegionAnalyzer.java: constructDIR(): key = $r0.bookImage
DIRRegionAnalyzer.java: constructDIR(): val = this.book.bookImage
DIRRegionAnalyzer.java: constructDIR(): key = return.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): val = this.book.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = this.book
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = this.book
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook() END
DIRRegionAnalyzer.java: constructDIR(): v1 access paths: [$r5.id, $r5.title, $r5.author, $r5.publisher, $r5.publicationDate, $r5.language, $r5.category, $r5.numberOfPages, $r5.format, $r5.isbn, $r5.shippingWeight, $r5.listPrice, $r5.ourPrice, $r5.active, $r5.description, $r5.inStockNumber, $r5.bookImage, $r5.bookToCartItemsList]
DIRRegionAnalyzer.java: constructDIR(): key = $r5.id
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.id
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.id
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.id
DIRRegionAnalyzer.java: constructDIR(): key = $r5.title
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.title
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.title
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.title
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.title
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.title
DIRRegionAnalyzer.java: constructDIR(): key = $r5.author
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.author
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.author
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.author
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.author
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.author
DIRRegionAnalyzer.java: constructDIR(): key = $r5.publisher
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.publisher
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.publisher
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.publisher
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.publisher
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.publisher
DIRRegionAnalyzer.java: constructDIR(): key = $r5.publicationDate
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.publicationDate
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.publicationDate
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.publicationDate
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.publicationDate
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.publicationDate
DIRRegionAnalyzer.java: constructDIR(): key = $r5.language
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.language
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.language
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.language
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.language
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.language
DIRRegionAnalyzer.java: constructDIR(): key = $r5.category
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.category
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.category
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.category
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.category
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.category
DIRRegionAnalyzer.java: constructDIR(): key = $r5.numberOfPages
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.numberOfPages
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.numberOfPages
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.numberOfPages
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.numberOfPages
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.numberOfPages
DIRRegionAnalyzer.java: constructDIR(): key = $r5.format
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.format
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.format
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.format
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.format
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.format
DIRRegionAnalyzer.java: constructDIR(): key = $r5.isbn
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.isbn
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.isbn
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.isbn
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.isbn
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.isbn
DIRRegionAnalyzer.java: constructDIR(): key = $r5.shippingWeight
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.shippingWeight
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.shippingWeight
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.shippingWeight
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.shippingWeight
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.shippingWeight
DIRRegionAnalyzer.java: constructDIR(): key = $r5.listPrice
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.listPrice
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.listPrice
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.listPrice
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.listPrice
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.listPrice
DIRRegionAnalyzer.java: constructDIR(): key = $r5.ourPrice
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.ourPrice
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.ourPrice
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.ourPrice
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.ourPrice
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.ourPrice
DIRRegionAnalyzer.java: constructDIR(): key = $r5.active
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.active
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.active
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.active
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.active
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.active
DIRRegionAnalyzer.java: constructDIR(): key = $r5.description
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.description
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.description
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.description
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.description
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.description
DIRRegionAnalyzer.java: constructDIR(): key = $r5.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.inStockNumber
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.inStockNumber
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): key = $r5.bookImage
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.bookImage
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.bookImage
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.bookImage
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.bookImage
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.bookImage
DIRRegionAnalyzer.java: constructDIR(): key = $r5.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.bookToCartItemsList
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.bookToCartItemsList
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): curUnit = $i0 = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = getInStockNumber
construct/Utils.java: parseInvokeExpr(): methodSignature = com.bookstore.domain.Book: int getInStockNumber()
construct/Utils.java: parseObjectInvoke(): virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.bookstore.domain.Book: int getInStockNumber()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.bookstore.domain.Book: int getInStockNumber()>
construct/Utils.java: parseObjectInvoke(): methodName = getInStockNumber
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = com.bookstore.domain.Book: int getInStockNumber()
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: getInStockNumber
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.bookstore.domain.Book, $i0 = this.<com.bookstore.domain.Book: int inStockNumber>, return $i0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.bookstore.domain.Book
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = $i0 = this.<com.bookstore.domain.Book: int inStockNumber>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $i0 -> this.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $i0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $i0 ~~~
this.inStockNumber

~~~ return ~~~
this.inStockNumber

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $i0 ~~~
this.inStockNumber

~~~ return ~~~
this.inStockNumber

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: $i0=this.inStockNumber
DIR.java: updateRegion(): update region entry: return=this.inStockNumber
construct/Utils.java: parseObjectInvoke(): Put DIR of callee = com.bookstore.domain.Book: int getInStockNumber() in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = int
DIRRegionAnalyzer.java: constructDIR(): leftType : int
DIRRegionAnalyzer.java: constructDIR(): case : caseCallToMethodWBodyRetPrim()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), v1 is primitive, foo is not a library method
DIRRegionAnalyzer.java: constructDIR(): v1: $i0
DIRRegionAnalyzer.java: constructDIR(): foo: <com.bookstore.domain.Book: int getInStockNumber()>
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: getInStockNumber
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.bookstore.domain.Book: int getInStockNumber()
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.bookstore.domain.Book: int getInStockNumber()>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [$r5]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.bookstore.domain.Book
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: $r5
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.id, this.title, this.author, this.publisher, this.publicationDate, this.language, this.category, this.numberOfPages, this.format, this.isbn, this.shippingWeight, this.listPrice, this.ourPrice, this.active, this.description, this.inStockNumber, this.bookImage, this.bookToCartItemsList]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.title
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.author
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.publisher
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.publicationDate
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.language
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.category
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.numberOfPages
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.format
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.isbn
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.shippingWeight
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.listPrice
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.ourPrice
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.active
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.description
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.inStockNumber
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.bookImage
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.bookToCartItemsList
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = getInStockNumber, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: $r5
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.id, this.title, this.author, this.publisher, this.publicationDate, this.language, this.category, this.numberOfPages, this.format, this.isbn, this.shippingWeight, this.listPrice, this.ourPrice, this.active, this.description, this.inStockNumber, this.bookImage, this.bookToCartItemsList]
DIRRegionAnalyzer.java: constructDIR(): methodSig: com.bookstore.domain.Book: int getInStockNumber()
DIRRegionAnalyzer.java: constructDIR(): FuncStackAnalyzer.funcDIRMap: {com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)=~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

, com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.shoppingCart.GrandTotal ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ return.shoppingCart.cartItemList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.shoppingCart.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ return.shoppingCart.user ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

, com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()=~~~ $r0 ~~~
this.shoppingCart

~~~ $r0.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ $r0.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ $r0.id ~~~
this.shoppingCart.id

~~~ $r0.user ~~~
this.shoppingCart.user

~~~ return ~~~
this.shoppingCart

~~~ return ~~~
this.shoppingCart

~~~ return.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ return.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ return.id ~~~
this.shoppingCart.id

~~~ return.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

, com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)=~~~ $r0 ~~~
this.cartItemRepository

~~~ $r1 ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ this ~~~
Self

, com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ $r1.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ $r1.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ $r1.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ $r1.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ $r1.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ $r1.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ $r1.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ this ~~~
Self

, com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()=~~~ $r0 ~~~
this.book

~~~ $r0.active ~~~
this.book.active

~~~ $r0.author ~~~
this.book.author

~~~ $r0.bookImage ~~~
this.book.bookImage

~~~ $r0.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r0.category ~~~
this.book.category

~~~ $r0.description ~~~
this.book.description

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.inStockNumber ~~~
this.book.inStockNumber

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.listPrice ~~~
this.book.listPrice

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.ourPrice ~~~
this.book.ourPrice

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ return ~~~
this.book

~~~ return ~~~
this.book

~~~ return.active ~~~
this.book.active

~~~ return.author ~~~
this.book.author

~~~ return.bookImage ~~~
this.book.bookImage

~~~ return.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ return.category ~~~
this.book.category

~~~ return.description ~~~
this.book.description

~~~ return.format ~~~
this.book.format

~~~ return.id ~~~
this.book.id

~~~ return.inStockNumber ~~~
this.book.inStockNumber

~~~ return.isbn ~~~
this.book.isbn

~~~ return.language ~~~
this.book.language

~~~ return.listPrice ~~~
this.book.listPrice

~~~ return.numberOfPages ~~~
this.book.numberOfPages

~~~ return.ourPrice ~~~
this.book.ourPrice

~~~ return.publicationDate ~~~
this.book.publicationDate

~~~ return.publisher ~~~
this.book.publisher

~~~ return.shippingWeight ~~~
this.book.shippingWeight

~~~ return.title ~~~
this.book.title

~~~ this ~~~
Self

, com.bookstore.domain.Book: int getInStockNumber()=~~~ $i0 ~~~
this.inStockNumber

~~~ return ~~~
this.inStockNumber

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): dir callee: ~~~ $i0 ~~~
this.inStockNumber

~~~ return ~~~
this.inStockNumber

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): retCalleeCloned: this.inStockNumber
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.inStockNumber
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.Book: int getInStockNumber()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.Book: int getInStockNumber()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [$r5]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.title, this.author, this.publisher, this.publicationDate, this.language, this.category, this.numberOfPages, this.format, this.isbn, this.shippingWeight, this.listPrice, this.ourPrice, this.active, this.description, this.inStockNumber, this.bookImage, this.bookToCartItemsList]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): after dag formals to actuals: $r5.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): curUnit = if $i0 <= 0 goto (branch)
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()$i0 <= 0
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $i0 ~~~
this.book.inStockNumber

~~~ $r4 ~~~
NextOp

~~~ $r5 ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp

~~~ $r5.active ~~~
this.book.active

~~~ $r5.author ~~~
this.book.author

~~~ $r5.bookImage ~~~
this.book.bookImage

~~~ $r5.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r5.category ~~~
this.book.category

~~~ $r5.description ~~~
this.book.description

~~~ $r5.format ~~~
this.book.format

~~~ $r5.id ~~~
this.book.id

~~~ $r5.inStockNumber ~~~
this.book.inStockNumber

~~~ $r5.isbn ~~~
this.book.isbn

~~~ $r5.language ~~~
this.book.language

~~~ $r5.listPrice ~~~
this.book.listPrice

~~~ $r5.numberOfPages ~~~
this.book.numberOfPages

~~~ $r5.ourPrice ~~~
this.book.ourPrice

~~~ $r5.publicationDate ~~~
this.book.publicationDate

~~~ $r5.publisher ~~~
this.book.publisher

~~~ $r5.shippingWeight ~~~
this.book.shippingWeight

~~~ $r5.title ~~~
this.book.title

~~~ cartItem.book ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp

~~~ cartItem.book.active ~~~
FieldRef(com.bookstore.domain.Book.active)

~~~ cartItem.book.author ~~~
FieldRef(com.bookstore.domain.Book.author)

~~~ cartItem.book.category ~~~
FieldRef(com.bookstore.domain.Book.category)

~~~ cartItem.book.description ~~~
FieldRef(com.bookstore.domain.Book.description)

~~~ cartItem.book.format ~~~
FieldRef(com.bookstore.domain.Book.format)

~~~ cartItem.book.id ~~~
FieldRef(com.bookstore.domain.Book.id)

~~~ cartItem.book.inStockNumber ~~~
FieldRef(com.bookstore.domain.Book.inStockNumber)

~~~ cartItem.book.isbn ~~~
FieldRef(com.bookstore.domain.Book.isbn)

~~~ cartItem.book.language ~~~
FieldRef(com.bookstore.domain.Book.language)

~~~ cartItem.book.listPrice ~~~
FieldRef(com.bookstore.domain.Book.listPrice)

~~~ cartItem.book.numberOfPages ~~~
FieldRef(com.bookstore.domain.Book.numberOfPages)

~~~ cartItem.book.ourPrice ~~~
FieldRef(com.bookstore.domain.Book.ourPrice)

~~~ cartItem.book.publicationDate ~~~
FieldRef(com.bookstore.domain.Book.publicationDate)

~~~ cartItem.book.publisher ~~~
FieldRef(com.bookstore.domain.Book.publisher)

~~~ cartItem.book.shippingWeight ~~~
FieldRef(com.bookstore.domain.Book.shippingWeight)

~~~ cartItem.book.title ~~~
FieldRef(com.bookstore.domain.Book.title)

~~~ cartItem.id ~~~
FieldRef(com.bookstore.domain.CartItem.id)

~~~ cartItem.order ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Order)
| NullOp

~~~ cartItem.order.id ~~~
FieldRef(com.bookstore.domain.Order.id)

~~~ cartItem.order.orderDate ~~~
FieldRef(com.bookstore.domain.Order.orderDate)

~~~ cartItem.order.orderTotal ~~~
FieldRef(com.bookstore.domain.Order.orderTotal)

~~~ cartItem.order.orederStatus ~~~
FieldRef(com.bookstore.domain.Order.orederStatus)

~~~ cartItem.order.shippingDate ~~~
FieldRef(com.bookstore.domain.Order.shippingDate)

~~~ cartItem.order.shippingMethod ~~~
FieldRef(com.bookstore.domain.Order.shippingMethod)

~~~ cartItem.qty ~~~
FieldRef(com.bookstore.domain.CartItem.qty)

~~~ cartItem.shoppingCart ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp

~~~ cartItem.shoppingCart.GrandTotal ~~~
FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ cartItem.shoppingCart.id ~~~
FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ cartItem.subtotal ~~~
FieldRef(com.bookstore.domain.CartItem.subtotal)

~~~ condition ~~~
LessThanOrEquals
| this.book.inStockNumber
| 0


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $i0 ~~~
this.book.inStockNumber

~~~ $r4 ~~~
NextOp

~~~ $r5 ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp

~~~ $r5.active ~~~
this.book.active

~~~ $r5.author ~~~
this.book.author

~~~ $r5.bookImage ~~~
this.book.bookImage

~~~ $r5.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r5.category ~~~
this.book.category

~~~ $r5.description ~~~
this.book.description

~~~ $r5.format ~~~
this.book.format

~~~ $r5.id ~~~
this.book.id

~~~ $r5.inStockNumber ~~~
this.book.inStockNumber

~~~ $r5.isbn ~~~
this.book.isbn

~~~ $r5.language ~~~
this.book.language

~~~ $r5.listPrice ~~~
this.book.listPrice

~~~ $r5.numberOfPages ~~~
this.book.numberOfPages

~~~ $r5.ourPrice ~~~
this.book.ourPrice

~~~ $r5.publicationDate ~~~
this.book.publicationDate

~~~ $r5.publisher ~~~
this.book.publisher

~~~ $r5.shippingWeight ~~~
this.book.shippingWeight

~~~ $r5.title ~~~
this.book.title

~~~ cartItem.book ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp

~~~ cartItem.book.active ~~~
FieldRef(com.bookstore.domain.Book.active)

~~~ cartItem.book.author ~~~
FieldRef(com.bookstore.domain.Book.author)

~~~ cartItem.book.category ~~~
FieldRef(com.bookstore.domain.Book.category)

~~~ cartItem.book.description ~~~
FieldRef(com.bookstore.domain.Book.description)

~~~ cartItem.book.format ~~~
FieldRef(com.bookstore.domain.Book.format)

~~~ cartItem.book.id ~~~
FieldRef(com.bookstore.domain.Book.id)

~~~ cartItem.book.inStockNumber ~~~
FieldRef(com.bookstore.domain.Book.inStockNumber)

~~~ cartItem.book.isbn ~~~
FieldRef(com.bookstore.domain.Book.isbn)

~~~ cartItem.book.language ~~~
FieldRef(com.bookstore.domain.Book.language)

~~~ cartItem.book.listPrice ~~~
FieldRef(com.bookstore.domain.Book.listPrice)

~~~ cartItem.book.numberOfPages ~~~
FieldRef(com.bookstore.domain.Book.numberOfPages)

~~~ cartItem.book.ourPrice ~~~
FieldRef(com.bookstore.domain.Book.ourPrice)

~~~ cartItem.book.publicationDate ~~~
FieldRef(com.bookstore.domain.Book.publicationDate)

~~~ cartItem.book.publisher ~~~
FieldRef(com.bookstore.domain.Book.publisher)

~~~ cartItem.book.shippingWeight ~~~
FieldRef(com.bookstore.domain.Book.shippingWeight)

~~~ cartItem.book.title ~~~
FieldRef(com.bookstore.domain.Book.title)

~~~ cartItem.id ~~~
FieldRef(com.bookstore.domain.CartItem.id)

~~~ cartItem.order ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Order)
| NullOp

~~~ cartItem.order.id ~~~
FieldRef(com.bookstore.domain.Order.id)

~~~ cartItem.order.orderDate ~~~
FieldRef(com.bookstore.domain.Order.orderDate)

~~~ cartItem.order.orderTotal ~~~
FieldRef(com.bookstore.domain.Order.orderTotal)

~~~ cartItem.order.orederStatus ~~~
FieldRef(com.bookstore.domain.Order.orederStatus)

~~~ cartItem.order.shippingDate ~~~
FieldRef(com.bookstore.domain.Order.shippingDate)

~~~ cartItem.order.shippingMethod ~~~
FieldRef(com.bookstore.domain.Order.shippingMethod)

~~~ cartItem.qty ~~~
FieldRef(com.bookstore.domain.CartItem.qty)

~~~ cartItem.shoppingCart ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp

~~~ cartItem.shoppingCart.GrandTotal ~~~
FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ cartItem.shoppingCart.id ~~~
FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ cartItem.subtotal ~~~
FieldRef(com.bookstore.domain.CartItem.subtotal)

~~~ condition ~~~
LessThanOrEquals
| this.book.inStockNumber
| 0


DIR.java: updateRegion(): update region entry: cartItem.shoppingCart.GrandTotal=FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)
DIR.java: updateRegion(): update region entry: $r5.isbn=this.book.isbn
DIR.java: updateRegion(): update region entry: $i0=this.book.inStockNumber
DIR.java: updateRegion(): update region entry: $r5.listPrice=this.book.listPrice
DIR.java: updateRegion(): update region entry: $r5.id=this.book.id
DIR.java: updateRegion(): update region entry: $r5.bookToCartItemsList=this.book.bookToCartItemsList
DIR.java: updateRegion(): update region entry: cartItem.qty=FieldRef(com.bookstore.domain.CartItem.qty)
DIR.java: updateRegion(): update region entry: cartItem.book.title=FieldRef(com.bookstore.domain.Book.title)
DIR.java: updateRegion(): update region entry: cartItem.order.shippingMethod=FieldRef(com.bookstore.domain.Order.shippingMethod)
DIR.java: updateRegion(): update region entry: $r5.numberOfPages=this.book.numberOfPages
DIR.java: updateRegion(): update region entry: cartItem.shoppingCart=Join
| NextOp
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp
DIR.java: updateRegion(): update region entry: cartItem.order.id=FieldRef(com.bookstore.domain.Order.id)
DIR.java: updateRegion(): update region entry: cartItem.book=Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp
DIR.java: updateRegion(): update region entry: $r5.ourPrice=this.book.ourPrice
DIR.java: updateRegion(): update region entry: cartItem.book.numberOfPages=FieldRef(com.bookstore.domain.Book.numberOfPages)
DIR.java: updateRegion(): update region entry: $r5.language=this.book.language
DIR.java: updateRegion(): update region entry: cartItem.book.active=FieldRef(com.bookstore.domain.Book.active)
DIR.java: updateRegion(): update region entry: cartItem.book.author=FieldRef(com.bookstore.domain.Book.author)
DIR.java: updateRegion(): update region entry: $r4=NextOp
DIR.java: updateRegion(): update region entry: cartItem.book.publicationDate=FieldRef(com.bookstore.domain.Book.publicationDate)
DIR.java: updateRegion(): update region entry: $r5=Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp
DIR.java: updateRegion(): update region entry: $r5.publisher=this.book.publisher
DIR.java: updateRegion(): update region entry: $r5.category=this.book.category
DIR.java: updateRegion(): update region entry: $r5.shippingWeight=this.book.shippingWeight
DIR.java: updateRegion(): update region entry: condition=LessThanOrEquals
| this.book.inStockNumber
| 0
DIR.java: updateRegion(): update region entry: cartItem.order.orederStatus=FieldRef(com.bookstore.domain.Order.orederStatus)
DIR.java: updateRegion(): update region entry: $r5.format=this.book.format
DIR.java: updateRegion(): update region entry: cartItem.id=FieldRef(com.bookstore.domain.CartItem.id)
DIR.java: updateRegion(): update region entry: cartItem.book.category=FieldRef(com.bookstore.domain.Book.category)
DIR.java: updateRegion(): update region entry: cartItem.book.format=FieldRef(com.bookstore.domain.Book.format)
DIR.java: updateRegion(): update region entry: cartItem.order=Join
| NextOp
| ClassRef(com.bookstore.domain.Order)
| NullOp
DIR.java: updateRegion(): update region entry: cartItem.subtotal=FieldRef(com.bookstore.domain.CartItem.subtotal)
DIR.java: updateRegion(): update region entry: cartItem.book.id=FieldRef(com.bookstore.domain.Book.id)
DIR.java: updateRegion(): update region entry: $r5.author=this.book.author
DIR.java: updateRegion(): update region entry: cartItem.order.orderTotal=FieldRef(com.bookstore.domain.Order.orderTotal)
DIR.java: updateRegion(): update region entry: cartItem.book.listPrice=FieldRef(com.bookstore.domain.Book.listPrice)
DIR.java: updateRegion(): update region entry: $r5.publicationDate=this.book.publicationDate
DIR.java: updateRegion(): update region entry: cartItem.book.ourPrice=FieldRef(com.bookstore.domain.Book.ourPrice)
DIR.java: updateRegion(): update region entry: $r5.inStockNumber=this.book.inStockNumber
DIR.java: updateRegion(): update region entry: $r5.active=this.book.active
DIR.java: updateRegion(): update region entry: $r5.description=this.book.description
DIR.java: updateRegion(): update region entry: cartItem.book.inStockNumber=FieldRef(com.bookstore.domain.Book.inStockNumber)
DIR.java: updateRegion(): update region entry: cartItem.shoppingCart.id=FieldRef(com.bookstore.domain.ShoppingCart.id)
DIR.java: updateRegion(): update region entry: $r5.bookImage=this.book.bookImage
DIR.java: updateRegion(): update region entry: cartItem.book.language=FieldRef(com.bookstore.domain.Book.language)
DIR.java: updateRegion(): update region entry: cartItem.book.publisher=FieldRef(com.bookstore.domain.Book.publisher)
DIR.java: updateRegion(): update region entry: cartItem.book.shippingWeight=FieldRef(com.bookstore.domain.Book.shippingWeight)
DIR.java: updateRegion(): update region entry: cartItem.book.isbn=FieldRef(com.bookstore.domain.Book.isbn)
DIR.java: updateRegion(): update region entry: cartItem.order.shippingDate=FieldRef(com.bookstore.domain.Order.shippingDate)
DIR.java: updateRegion(): update region entry: cartItem.order.orderDate=FieldRef(com.bookstore.domain.Order.orderDate)
DIR.java: updateRegion(): update region entry: $r5.title=this.book.title
DIR.java: updateRegion(): update region entry: cartItem.book.description=FieldRef(com.bookstore.domain.Book.description)
ARegion.java: analyze(): set cur method of analyzer to: updateShoppingCart
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 3
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.bookstore.service.impl.ShoppingCartServiceImpl, shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart, $r0 = new java.math.BigDecimal, specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0), cartTotal = $r0, $r1 = new com.bookstore.service.impl.CartItemServiceImpl, cartItems = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart), this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1, l4 = interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal), $r4 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), cartItem = (com.bookstore.domain.CartItem) $r4, $r5 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>(), $i0 = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>(), if $i0 <= 0 goto (branch), $r6 = new com.bookstore.service.impl.CartItemServiceImpl, virtualinvoke $r6.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem), this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r6, $r8 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>(), cartTotal = virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal), $r2 = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.repository.ShoppingCartRepository shoppingCartRepository>, interfaceinvoke $r2.<com.bookstore.repository.ShoppingCartRepository: java.lang.Object save(java.lang.Object)>(shoppingCart), return shoppingCart]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r6 = new com.bookstore.service.impl.CartItemServiceImpl
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
DIRRegionAnalyzer.java: constructDIR(): curUnit = virtualinvoke $r6.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem)
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke $r6.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: updateCartItem
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [cartItem, this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [cartItem, $r6]
ARegion.java: analyze(): set cur method of analyzer to: updateCartItem
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.bookstore.service.impl.CartItemServiceImpl, cartItem := @parameter0: com.bookstore.domain.CartItem, $r0 = new java.math.BigDecimal, $r1 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>(), $d0 = virtualinvoke $r1.<com.bookstore.domain.Book: double getOurPrice()>(), specialinvoke $r0.<java.math.BigDecimal: void <init>(double)>($d0), $r2 = new java.math.BigDecimal, $i0 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: int getQty()>(), specialinvoke $r2.<java.math.BigDecimal: void <init>(int)>($i0), bigDecimal = virtualinvoke $r0.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r2), bigDecimal = virtualinvoke bigDecimal.<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>(2, 4), virtualinvoke cartItem.<com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)>(bigDecimal), $r3 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>, interfaceinvoke $r3.<com.bookstore.repository.CartItemRepository: java.lang.Object save(java.lang.Object)>(cartItem), return cartItem]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.bookstore.service.impl.CartItemServiceImpl
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = cartItem := @parameter0: com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = new java.math.BigDecimal
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
Utils.java: getVarNode(): $r0
Utils.java: getVarNode(): LinkedVariableBox($r0)
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = getBook
construct/Utils.java: parseInvokeExpr(): methodSignature = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
construct/Utils.java: parseObjectInvoke(): virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
construct/Utils.java: parseObjectInvoke(): methodName = getBook
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: getBook
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.bookstore.domain.CartItem, $r0 = this.<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, return $r0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.bookstore.domain.CartItem
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: valIsRepository(): fpar val: this.<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>
DIRRegionAnalyzer.java: valIsRepository(): refType: com.bookstore.domain.Book
DIRRegionAnalyzer.java: valIsRepository(): valClass: com.bookstore.domain.Book
DIRRegionAnalyzer.java: valIsRepository(): ret: false
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is not primitive
DIRRegionAnalyzer.java: constructDIR(): destPaths: [$r0.id, $r0.title, $r0.author, $r0.publisher, $r0.publicationDate, $r0.language, $r0.category, $r0.numberOfPages, $r0.format, $r0.isbn, $r0.shippingWeight, $r0.listPrice, $r0.ourPrice, $r0.active, $r0.description, $r0.inStockNumber, $r0.bookImage, $r0.bookToCartItemsList]
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.id
AccessPath.java: replaceBase(): input access path: $r0.id
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.id
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.id
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.id -> this.book.id
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.title
AccessPath.java: replaceBase(): input access path: $r0.title
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.title
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.id ~~~
this.book.id

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.title
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.title -> this.book.title
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.author
AccessPath.java: replaceBase(): input access path: $r0.author
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.author
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.id ~~~
this.book.id

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.author
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.author -> this.book.author
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.publisher
AccessPath.java: replaceBase(): input access path: $r0.publisher
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.publisher
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.author ~~~
this.book.author

~~~ $r0.id ~~~
this.book.id

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.publisher
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.publisher -> this.book.publisher
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.publicationDate
AccessPath.java: replaceBase(): input access path: $r0.publicationDate
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.publicationDate
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.author ~~~
this.book.author

~~~ $r0.id ~~~
this.book.id

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.publicationDate
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.publicationDate -> this.book.publicationDate
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.language
AccessPath.java: replaceBase(): input access path: $r0.language
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.language
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.author ~~~
this.book.author

~~~ $r0.id ~~~
this.book.id

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.language
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.language -> this.book.language
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.category
AccessPath.java: replaceBase(): input access path: $r0.category
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.category
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.author ~~~
this.book.author

~~~ $r0.id ~~~
this.book.id

~~~ $r0.language ~~~
this.book.language

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.category
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.category -> this.book.category
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.numberOfPages
AccessPath.java: replaceBase(): input access path: $r0.numberOfPages
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.numberOfPages
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.author ~~~
this.book.author

~~~ $r0.category ~~~
this.book.category

~~~ $r0.id ~~~
this.book.id

~~~ $r0.language ~~~
this.book.language

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.numberOfPages
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.numberOfPages -> this.book.numberOfPages
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.format
AccessPath.java: replaceBase(): input access path: $r0.format
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.format
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.author ~~~
this.book.author

~~~ $r0.category ~~~
this.book.category

~~~ $r0.id ~~~
this.book.id

~~~ $r0.language ~~~
this.book.language

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.format
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.format -> this.book.format
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.isbn
AccessPath.java: replaceBase(): input access path: $r0.isbn
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.isbn
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.author ~~~
this.book.author

~~~ $r0.category ~~~
this.book.category

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.language ~~~
this.book.language

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.isbn
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.isbn -> this.book.isbn
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.shippingWeight
AccessPath.java: replaceBase(): input access path: $r0.shippingWeight
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.shippingWeight
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.author ~~~
this.book.author

~~~ $r0.category ~~~
this.book.category

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.shippingWeight
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.shippingWeight -> this.book.shippingWeight
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.listPrice
AccessPath.java: replaceBase(): input access path: $r0.listPrice
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.listPrice
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.author ~~~
this.book.author

~~~ $r0.category ~~~
this.book.category

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.listPrice
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.listPrice -> this.book.listPrice
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.ourPrice
AccessPath.java: replaceBase(): input access path: $r0.ourPrice
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.ourPrice
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.author ~~~
this.book.author

~~~ $r0.category ~~~
this.book.category

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.listPrice ~~~
this.book.listPrice

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.ourPrice
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.ourPrice -> this.book.ourPrice
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.active
AccessPath.java: replaceBase(): input access path: $r0.active
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.active
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.author ~~~
this.book.author

~~~ $r0.category ~~~
this.book.category

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.listPrice ~~~
this.book.listPrice

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.ourPrice ~~~
this.book.ourPrice

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.active
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.active -> this.book.active
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.description
AccessPath.java: replaceBase(): input access path: $r0.description
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.description
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.active ~~~
this.book.active

~~~ $r0.author ~~~
this.book.author

~~~ $r0.category ~~~
this.book.category

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.listPrice ~~~
this.book.listPrice

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.ourPrice ~~~
this.book.ourPrice

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.description
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.description -> this.book.description
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.inStockNumber
AccessPath.java: replaceBase(): input access path: $r0.inStockNumber
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.active ~~~
this.book.active

~~~ $r0.author ~~~
this.book.author

~~~ $r0.category ~~~
this.book.category

~~~ $r0.description ~~~
this.book.description

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.listPrice ~~~
this.book.listPrice

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.ourPrice ~~~
this.book.ourPrice

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.inStockNumber -> this.book.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.bookImage
AccessPath.java: replaceBase(): input access path: $r0.bookImage
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.bookImage
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.active ~~~
this.book.active

~~~ $r0.author ~~~
this.book.author

~~~ $r0.category ~~~
this.book.category

~~~ $r0.description ~~~
this.book.description

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.inStockNumber ~~~
this.book.inStockNumber

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.listPrice ~~~
this.book.listPrice

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.ourPrice ~~~
this.book.ourPrice

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.bookImage
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.bookImage -> this.book.bookImage
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.bookToCartItemsList
AccessPath.java: replaceBase(): input access path: $r0.bookToCartItemsList
AccessPath.java: replaceBase(): replacement of base: this.book
DIRRegionAnalyzer.java: constructDIR(): source accp: this.book.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.book

~~~ $r0.active ~~~
this.book.active

~~~ $r0.author ~~~
this.book.author

~~~ $r0.bookImage ~~~
this.book.bookImage

~~~ $r0.category ~~~
this.book.category

~~~ $r0.description ~~~
this.book.description

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.inStockNumber ~~~
this.book.inStockNumber

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.listPrice ~~~
this.book.listPrice

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.ourPrice ~~~
this.book.ourPrice

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.book.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.bookToCartItemsList -> this.book.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $r0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: return
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r0
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [Book.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
]
AccessPath.java: replaceBase(): input access path: return.id
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.title
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.author
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.publisher
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.publicationDate
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.language
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.category
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.numberOfPages
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.format
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.isbn
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.shippingWeight
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.listPrice
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.ourPrice
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.active
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.description
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.inStockNumber
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.bookImage
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.bookToCartItemsList
AccessPath.java: replaceBase(): replacement of base: $r0
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.book

~~~ $r0.active ~~~
this.book.active

~~~ $r0.author ~~~
this.book.author

~~~ $r0.bookImage ~~~
this.book.bookImage

~~~ $r0.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r0.category ~~~
this.book.category

~~~ $r0.description ~~~
this.book.description

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.inStockNumber ~~~
this.book.inStockNumber

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.listPrice ~~~
this.book.listPrice

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.ourPrice ~~~
this.book.ourPrice

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ return ~~~
this.book

~~~ return ~~~
this.book

~~~ return.active ~~~
this.book.active

~~~ return.author ~~~
this.book.author

~~~ return.bookImage ~~~
this.book.bookImage

~~~ return.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ return.category ~~~
this.book.category

~~~ return.description ~~~
this.book.description

~~~ return.format ~~~
this.book.format

~~~ return.id ~~~
this.book.id

~~~ return.inStockNumber ~~~
this.book.inStockNumber

~~~ return.isbn ~~~
this.book.isbn

~~~ return.language ~~~
this.book.language

~~~ return.listPrice ~~~
this.book.listPrice

~~~ return.numberOfPages ~~~
this.book.numberOfPages

~~~ return.ourPrice ~~~
this.book.ourPrice

~~~ return.publicationDate ~~~
this.book.publicationDate

~~~ return.publisher ~~~
this.book.publisher

~~~ return.shippingWeight ~~~
this.book.shippingWeight

~~~ return.title ~~~
this.book.title

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.book

~~~ $r0.active ~~~
this.book.active

~~~ $r0.author ~~~
this.book.author

~~~ $r0.bookImage ~~~
this.book.bookImage

~~~ $r0.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r0.category ~~~
this.book.category

~~~ $r0.description ~~~
this.book.description

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.inStockNumber ~~~
this.book.inStockNumber

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.listPrice ~~~
this.book.listPrice

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.ourPrice ~~~
this.book.ourPrice

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ return ~~~
this.book

~~~ return ~~~
this.book

~~~ return.active ~~~
this.book.active

~~~ return.author ~~~
this.book.author

~~~ return.bookImage ~~~
this.book.bookImage

~~~ return.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ return.category ~~~
this.book.category

~~~ return.description ~~~
this.book.description

~~~ return.format ~~~
this.book.format

~~~ return.id ~~~
this.book.id

~~~ return.inStockNumber ~~~
this.book.inStockNumber

~~~ return.isbn ~~~
this.book.isbn

~~~ return.language ~~~
this.book.language

~~~ return.listPrice ~~~
this.book.listPrice

~~~ return.numberOfPages ~~~
this.book.numberOfPages

~~~ return.ourPrice ~~~
this.book.ourPrice

~~~ return.publicationDate ~~~
this.book.publicationDate

~~~ return.publisher ~~~
this.book.publisher

~~~ return.shippingWeight ~~~
this.book.shippingWeight

~~~ return.title ~~~
this.book.title

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r0.active=this.book.active
DIR.java: updateRegion(): update region entry: $r0.inStockNumber=this.book.inStockNumber
DIR.java: updateRegion(): update region entry: return.publisher=this.book.publisher
DIR.java: updateRegion(): update region entry: return.bookImage=this.book.bookImage
DIR.java: updateRegion(): update region entry: $r0.author=this.book.author
DIR.java: updateRegion(): update region entry: return.category=this.book.category
DIR.java: updateRegion(): update region entry: return.isbn=this.book.isbn
DIR.java: updateRegion(): update region entry: $r0.format=this.book.format
DIR.java: updateRegion(): update region entry: return.inStockNumber=this.book.inStockNumber
DIR.java: updateRegion(): update region entry: $r0.publicationDate=this.book.publicationDate
DIR.java: updateRegion(): update region entry: $r0.ourPrice=this.book.ourPrice
DIR.java: updateRegion(): update region entry: $r0.shippingWeight=this.book.shippingWeight
DIR.java: updateRegion(): update region entry: $r0.isbn=this.book.isbn
DIR.java: updateRegion(): update region entry: $r0.bookToCartItemsList=this.book.bookToCartItemsList
DIR.java: updateRegion(): update region entry: $r0.publisher=this.book.publisher
DIR.java: updateRegion(): update region entry: $r0.language=this.book.language
DIR.java: updateRegion(): update region entry: return.publicationDate=this.book.publicationDate
DIR.java: updateRegion(): update region entry: return.id=this.book.id
DIR.java: updateRegion(): update region entry: return.language=this.book.language
DIR.java: updateRegion(): update region entry: $r0.numberOfPages=this.book.numberOfPages
DIR.java: updateRegion(): update region entry: $r0.description=this.book.description
DIR.java: updateRegion(): update region entry: $r0=this.book
DIR.java: updateRegion(): update region entry: return.listPrice=this.book.listPrice
DIR.java: updateRegion(): update region entry: return.ourPrice=this.book.ourPrice
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: return.numberOfPages=this.book.numberOfPages
DIR.java: updateRegion(): update region entry: $r0.id=this.book.id
DIR.java: updateRegion(): update region entry: $r0.category=this.book.category
DIR.java: updateRegion(): update region entry: $r0.listPrice=this.book.listPrice
DIR.java: updateRegion(): update region entry: return.active=this.book.active
DIR.java: updateRegion(): update region entry: return.author=this.book.author
DIR.java: updateRegion(): update region entry: return.shippingWeight=this.book.shippingWeight
DIR.java: updateRegion(): update region entry: $r0.title=this.book.title
DIR.java: updateRegion(): update region entry: return.format=this.book.format
DIR.java: updateRegion(): update region entry: return.title=this.book.title
DIR.java: updateRegion(): update region entry: return.description=this.book.description
DIR.java: updateRegion(): update region entry: $r0.bookImage=this.book.bookImage
DIR.java: updateRegion(): update region entry: return.bookToCartItemsList=this.book.bookToCartItemsList
DIR.java: updateRegion(): update region entry: return=this.book
DIR.java: updateRegion(): update region entry: return=this.book
construct/Utils.java: parseObjectInvoke(): Put DIR of callee = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook() in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = com.bookstore.domain.Book
DIRRegionAnalyzer.java: constructDIR(): leftType : com.bookstore.domain.Book
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: $r1
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: constructDIR(): left type = com.bookstore.domain.Book
DIRRegionAnalyzer.java: constructDIR(): com.bookstore.domain.Book
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: com.bookstore.domain.Book
DIRRegionAnalyzer.java: constructDIR(): method sig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)=~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

, com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.shoppingCart.GrandTotal ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ return.shoppingCart.cartItemList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.shoppingCart.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ return.shoppingCart.user ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

, com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()=~~~ $r0 ~~~
this.shoppingCart

~~~ $r0.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ $r0.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ $r0.id ~~~
this.shoppingCart.id

~~~ $r0.user ~~~
this.shoppingCart.user

~~~ return ~~~
this.shoppingCart

~~~ return ~~~
this.shoppingCart

~~~ return.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ return.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ return.id ~~~
this.shoppingCart.id

~~~ return.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

, com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)=~~~ $r0 ~~~
this.cartItemRepository

~~~ $r1 ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ this ~~~
Self

, com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ $r1.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ $r1.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ $r1.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ $r1.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ $r1.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ $r1.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ $r1.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ this ~~~
Self

, com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()=~~~ $r0 ~~~
this.book

~~~ $r0.active ~~~
this.book.active

~~~ $r0.author ~~~
this.book.author

~~~ $r0.bookImage ~~~
this.book.bookImage

~~~ $r0.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r0.category ~~~
this.book.category

~~~ $r0.description ~~~
this.book.description

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.inStockNumber ~~~
this.book.inStockNumber

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.listPrice ~~~
this.book.listPrice

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.ourPrice ~~~
this.book.ourPrice

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ return ~~~
this.book

~~~ return ~~~
this.book

~~~ return.active ~~~
this.book.active

~~~ return.author ~~~
this.book.author

~~~ return.bookImage ~~~
this.book.bookImage

~~~ return.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ return.category ~~~
this.book.category

~~~ return.description ~~~
this.book.description

~~~ return.format ~~~
this.book.format

~~~ return.id ~~~
this.book.id

~~~ return.inStockNumber ~~~
this.book.inStockNumber

~~~ return.isbn ~~~
this.book.isbn

~~~ return.language ~~~
this.book.language

~~~ return.listPrice ~~~
this.book.listPrice

~~~ return.numberOfPages ~~~
this.book.numberOfPages

~~~ return.ourPrice ~~~
this.book.ourPrice

~~~ return.publicationDate ~~~
this.book.publicationDate

~~~ return.publisher ~~~
this.book.publisher

~~~ return.shippingWeight ~~~
this.book.shippingWeight

~~~ return.title ~~~
this.book.title

~~~ this ~~~
Self

, com.bookstore.domain.Book: int getInStockNumber()=~~~ $i0 ~~~
this.inStockNumber

~~~ return ~~~
this.inStockNumber

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ $r0 ~~~
this.book

~~~ $r0.active ~~~
this.book.active

~~~ $r0.author ~~~
this.book.author

~~~ $r0.bookImage ~~~
this.book.bookImage

~~~ $r0.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r0.category ~~~
this.book.category

~~~ $r0.description ~~~
this.book.description

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.inStockNumber ~~~
this.book.inStockNumber

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.listPrice ~~~
this.book.listPrice

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.ourPrice ~~~
this.book.ourPrice

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ return ~~~
this.book

~~~ return ~~~
this.book

~~~ return.active ~~~
this.book.active

~~~ return.author ~~~
this.book.author

~~~ return.bookImage ~~~
this.book.bookImage

~~~ return.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ return.category ~~~
this.book.category

~~~ return.description ~~~
this.book.description

~~~ return.format ~~~
this.book.format

~~~ return.id ~~~
this.book.id

~~~ return.inStockNumber ~~~
this.book.inStockNumber

~~~ return.isbn ~~~
this.book.isbn

~~~ return.language ~~~
this.book.language

~~~ return.listPrice ~~~
this.book.listPrice

~~~ return.numberOfPages ~~~
this.book.numberOfPages

~~~ return.ourPrice ~~~
this.book.ourPrice

~~~ return.publicationDate ~~~
this.book.publicationDate

~~~ return.publisher ~~~
this.book.publisher

~~~ return.shippingWeight ~~~
this.book.shippingWeight

~~~ return.title ~~~
this.book.title

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [Book.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book
DIRRegionAnalyzer.java: constructDIR(): leftType = com.bookstore.domain.Book
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: getBook
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: cartItem
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0.active, $r0.inStockNumber, return.publisher, return.bookImage, $r0.author, return.category, return.isbn, $r0.format, return.inStockNumber, $r0.publicationDate, $r0.ourPrice, $r0.shippingWeight, $r0.isbn, $r0.bookToCartItemsList, $r0.publisher, $r0.language, return.publicationDate, return.id, return.language, $r0.numberOfPages, $r0.description, $r0, return.listPrice, return.ourPrice, this, return.numberOfPages, $r0.id, $r0.category, $r0.listPrice, return.active, return.author, return.shippingWeight, $r0.title, return.format, return.title, return.description, $r0.bookImage, return.bookToCartItemsList, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.qty
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0.active, $r0.inStockNumber, return.publisher, return.bookImage, $r0.author, return.category, return.isbn, $r0.format, return.inStockNumber, $r0.publicationDate, $r0.ourPrice, $r0.shippingWeight, $r0.isbn, $r0.bookToCartItemsList, $r0.publisher, $r0.language, return.publicationDate, return.id, return.language, $r0.numberOfPages, $r0.description, $r0, return.listPrice, return.ourPrice, this, return.numberOfPages, $r0.id, $r0.category, $r0.listPrice, return.active, return.author, return.shippingWeight, $r0.title, return.format, return.title, return.description, $r0.bookImage, return.bookToCartItemsList, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0.active, $r0.inStockNumber, return.publisher, return.bookImage, $r0.author, return.category, return.isbn, $r0.format, return.inStockNumber, $r0.publicationDate, $r0.ourPrice, $r0.shippingWeight, $r0.isbn, $r0.bookToCartItemsList, $r0.publisher, $r0.language, return.publicationDate, return.id, return.language, $r0.numberOfPages, $r0.description, $r0, return.listPrice, return.ourPrice, this, return.numberOfPages, $r0.id, $r0.category, $r0.listPrice, return.active, return.author, return.shippingWeight, $r0.title, return.format, return.title, return.description, $r0.bookImage, return.bookToCartItemsList, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.book
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0.active, $r0.inStockNumber, return.publisher, return.bookImage, $r0.author, return.category, return.isbn, $r0.format, return.inStockNumber, $r0.publicationDate, $r0.ourPrice, $r0.shippingWeight, $r0.isbn, $r0.bookToCartItemsList, $r0.publisher, $r0.language, return.publicationDate, return.id, return.language, $r0.numberOfPages, $r0.description, $r0, return.listPrice, return.ourPrice, this, return.numberOfPages, $r0.id, $r0.category, $r0.listPrice, return.active, return.author, return.shippingWeight, $r0.title, return.format, return.title, return.description, $r0.bookImage, return.bookToCartItemsList, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.bookToCartItemList
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0.active, $r0.inStockNumber, return.publisher, return.bookImage, $r0.author, return.category, return.isbn, $r0.format, return.inStockNumber, $r0.publicationDate, $r0.ourPrice, $r0.shippingWeight, $r0.isbn, $r0.bookToCartItemsList, $r0.publisher, $r0.language, return.publicationDate, return.id, return.language, $r0.numberOfPages, $r0.description, $r0, return.listPrice, return.ourPrice, this, return.numberOfPages, $r0.id, $r0.category, $r0.listPrice, return.active, return.author, return.shippingWeight, $r0.title, return.format, return.title, return.description, $r0.bookImage, return.bookToCartItemsList, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0.active, $r0.inStockNumber, return.publisher, return.bookImage, $r0.author, return.category, return.isbn, $r0.format, return.inStockNumber, $r0.publicationDate, $r0.ourPrice, $r0.shippingWeight, $r0.isbn, $r0.bookToCartItemsList, $r0.publisher, $r0.language, return.publicationDate, return.id, return.language, $r0.numberOfPages, $r0.description, $r0, return.listPrice, return.ourPrice, this, return.numberOfPages, $r0.id, $r0.category, $r0.listPrice, return.active, return.author, return.shippingWeight, $r0.title, return.format, return.title, return.description, $r0.bookImage, return.bookToCartItemsList, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.order
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0.active, $r0.inStockNumber, return.publisher, return.bookImage, $r0.author, return.category, return.isbn, $r0.format, return.inStockNumber, $r0.publicationDate, $r0.ourPrice, $r0.shippingWeight, $r0.isbn, $r0.bookToCartItemsList, $r0.publisher, $r0.language, return.publicationDate, return.id, return.language, $r0.numberOfPages, $r0.description, $r0, return.listPrice, return.ourPrice, this, return.numberOfPages, $r0.id, $r0.category, $r0.listPrice, return.active, return.author, return.shippingWeight, $r0.title, return.format, return.title, return.description, $r0.bookImage, return.bookToCartItemsList, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = getBook, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: cartItem
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = $r1, com.bookstore.domain.Book
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.Book: int getInStockNumber()]
DIRRegionAnalyzer.java: constructDIR(): callee = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
Flatten.java: getNestedFields(): LVAL TYPE: com.bookstore.domain.Book
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: java.lang.Long id> = java.lang.Long
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
Flatten.java: getNestedFields(): Id fields=id
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: java.lang.String title> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: java.lang.String author> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: java.lang.String publisher> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: java.lang.String publicationDate> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: java.lang.String language> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: java.lang.String category> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: int numberOfPages> = int
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: java.lang.String format> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: java.lang.String isbn> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: double shippingWeight> = double
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: double listPrice> = double
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: double ourPrice> = double
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: boolean active> = boolean
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: java.lang.String description> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: columnDefinition value: text

]
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: int inStockNumber> = int
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage> = org.springframework.web.multipart.MultipartFile
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Transient; without elements
]
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.Book: java.util.List bookToCartItemsList> = java.util.List
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
Flatten.java: getNestedFields(): check *ToMany sf: bookToCartItemsList , type = java.util.List
Flatten.java: getNestedFields(): returning: [<com.bookstore.domain.Book: java.util.List bookToCartItemsList>]
DIRRegionAnalyzer.java: constructDIR(): check nestedFields=[<com.bookstore.domain.Book: java.util.List bookToCartItemsList>]
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=Book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.bookstore.domain.BookToCartItem
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.bookstore.domain.BookToCartItem
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.bookToCartItemsList
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): key= return.bookToCartItemsList
 value= this.book.bookToCartItemsList
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  book_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Book.id
| BookToCartItem.book_id
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: constructDIR(): key = $r0.active
DIRRegionAnalyzer.java: constructDIR(): val = this.book.active
DIRRegionAnalyzer.java: constructDIR(): key = $r0.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): val = this.book.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): key = return.publisher
DIRRegionAnalyzer.java: constructDIR(): val = this.book.publisher
DIRRegionAnalyzer.java: constructDIR(): key = return.bookImage
DIRRegionAnalyzer.java: constructDIR(): val = this.book.bookImage
DIRRegionAnalyzer.java: constructDIR(): key = $r0.author
DIRRegionAnalyzer.java: constructDIR(): val = this.book.author
DIRRegionAnalyzer.java: constructDIR(): key = return.category
DIRRegionAnalyzer.java: constructDIR(): val = this.book.category
DIRRegionAnalyzer.java: constructDIR(): key = return.isbn
DIRRegionAnalyzer.java: constructDIR(): val = this.book.isbn
DIRRegionAnalyzer.java: constructDIR(): key = $r0.format
DIRRegionAnalyzer.java: constructDIR(): val = this.book.format
DIRRegionAnalyzer.java: constructDIR(): key = return.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): val = this.book.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): key = $r0.publicationDate
DIRRegionAnalyzer.java: constructDIR(): val = this.book.publicationDate
DIRRegionAnalyzer.java: constructDIR(): key = $r0.ourPrice
DIRRegionAnalyzer.java: constructDIR(): val = this.book.ourPrice
DIRRegionAnalyzer.java: constructDIR(): key = $r0.shippingWeight
DIRRegionAnalyzer.java: constructDIR(): val = this.book.shippingWeight
DIRRegionAnalyzer.java: constructDIR(): key = $r0.isbn
DIRRegionAnalyzer.java: constructDIR(): val = this.book.isbn
DIRRegionAnalyzer.java: constructDIR(): key = $r0.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): val = this.book.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): key = $r0.publisher
DIRRegionAnalyzer.java: constructDIR(): val = this.book.publisher
DIRRegionAnalyzer.java: constructDIR(): key = $r0.language
DIRRegionAnalyzer.java: constructDIR(): val = this.book.language
DIRRegionAnalyzer.java: constructDIR(): key = return.publicationDate
DIRRegionAnalyzer.java: constructDIR(): val = this.book.publicationDate
DIRRegionAnalyzer.java: constructDIR(): key = return.id
DIRRegionAnalyzer.java: constructDIR(): val = this.book.id
DIRRegionAnalyzer.java: constructDIR(): key = return.language
DIRRegionAnalyzer.java: constructDIR(): val = this.book.language
DIRRegionAnalyzer.java: constructDIR(): key = $r0.numberOfPages
DIRRegionAnalyzer.java: constructDIR(): val = this.book.numberOfPages
DIRRegionAnalyzer.java: constructDIR(): key = $r0.description
DIRRegionAnalyzer.java: constructDIR(): val = this.book.description
DIRRegionAnalyzer.java: constructDIR(): key = $r0
DIRRegionAnalyzer.java: constructDIR(): val = this.book
DIRRegionAnalyzer.java: constructDIR(): key = return.listPrice
DIRRegionAnalyzer.java: constructDIR(): val = this.book.listPrice
DIRRegionAnalyzer.java: constructDIR(): key = return.ourPrice
DIRRegionAnalyzer.java: constructDIR(): val = this.book.ourPrice
DIRRegionAnalyzer.java: constructDIR(): key = this
DIRRegionAnalyzer.java: constructDIR(): val = Self
DIRRegionAnalyzer.java: constructDIR(): key = return.numberOfPages
DIRRegionAnalyzer.java: constructDIR(): val = this.book.numberOfPages
DIRRegionAnalyzer.java: constructDIR(): key = $r0.id
DIRRegionAnalyzer.java: constructDIR(): val = this.book.id
DIRRegionAnalyzer.java: constructDIR(): key = $r0.category
DIRRegionAnalyzer.java: constructDIR(): val = this.book.category
DIRRegionAnalyzer.java: constructDIR(): key = $r0.listPrice
DIRRegionAnalyzer.java: constructDIR(): val = this.book.listPrice
DIRRegionAnalyzer.java: constructDIR(): key = return.active
DIRRegionAnalyzer.java: constructDIR(): val = this.book.active
DIRRegionAnalyzer.java: constructDIR(): key = return.author
DIRRegionAnalyzer.java: constructDIR(): val = this.book.author
DIRRegionAnalyzer.java: constructDIR(): key = return.shippingWeight
DIRRegionAnalyzer.java: constructDIR(): val = this.book.shippingWeight
DIRRegionAnalyzer.java: constructDIR(): key = $r0.title
DIRRegionAnalyzer.java: constructDIR(): val = this.book.title
DIRRegionAnalyzer.java: constructDIR(): key = return.format
DIRRegionAnalyzer.java: constructDIR(): val = this.book.format
DIRRegionAnalyzer.java: constructDIR(): key = return.title
DIRRegionAnalyzer.java: constructDIR(): val = this.book.title
DIRRegionAnalyzer.java: constructDIR(): key = return.description
DIRRegionAnalyzer.java: constructDIR(): val = this.book.description
DIRRegionAnalyzer.java: constructDIR(): key = $r0.bookImage
DIRRegionAnalyzer.java: constructDIR(): val = this.book.bookImage
DIRRegionAnalyzer.java: constructDIR(): key = return.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): val = this.book.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = this.book
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = this.book
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook() END
DIRRegionAnalyzer.java: constructDIR(): v1 access paths: [$r1.id, $r1.title, $r1.author, $r1.publisher, $r1.publicationDate, $r1.language, $r1.category, $r1.numberOfPages, $r1.format, $r1.isbn, $r1.shippingWeight, $r1.listPrice, $r1.ourPrice, $r1.active, $r1.description, $r1.inStockNumber, $r1.bookImage, $r1.bookToCartItemsList]
DIRRegionAnalyzer.java: constructDIR(): key = $r1.id
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.id
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.id
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.id
DIRRegionAnalyzer.java: constructDIR(): key = $r1.title
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.title
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.title
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.title
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.title
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.title
DIRRegionAnalyzer.java: constructDIR(): key = $r1.author
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.author
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.author
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.author
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.author
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.author
DIRRegionAnalyzer.java: constructDIR(): key = $r1.publisher
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.publisher
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.publisher
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.publisher
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.publisher
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.publisher
DIRRegionAnalyzer.java: constructDIR(): key = $r1.publicationDate
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.publicationDate
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.publicationDate
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.publicationDate
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.publicationDate
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.publicationDate
DIRRegionAnalyzer.java: constructDIR(): key = $r1.language
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.language
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.language
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.language
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.language
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.language
DIRRegionAnalyzer.java: constructDIR(): key = $r1.category
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.category
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.category
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.category
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.category
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.category
DIRRegionAnalyzer.java: constructDIR(): key = $r1.numberOfPages
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.numberOfPages
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.numberOfPages
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.numberOfPages
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.numberOfPages
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.numberOfPages
DIRRegionAnalyzer.java: constructDIR(): key = $r1.format
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.format
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.format
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.format
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.format
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.format
DIRRegionAnalyzer.java: constructDIR(): key = $r1.isbn
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.isbn
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.isbn
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.isbn
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.isbn
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.isbn
DIRRegionAnalyzer.java: constructDIR(): key = $r1.shippingWeight
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.shippingWeight
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.shippingWeight
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.shippingWeight
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.shippingWeight
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.shippingWeight
DIRRegionAnalyzer.java: constructDIR(): key = $r1.listPrice
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.listPrice
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.listPrice
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.listPrice
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.listPrice
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.listPrice
DIRRegionAnalyzer.java: constructDIR(): key = $r1.ourPrice
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.ourPrice
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.ourPrice
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.ourPrice
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.ourPrice
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.ourPrice
DIRRegionAnalyzer.java: constructDIR(): key = $r1.active
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.active
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.active
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.active
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.active
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.active
DIRRegionAnalyzer.java: constructDIR(): key = $r1.description
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.description
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.description
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.description
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.description
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.description
DIRRegionAnalyzer.java: constructDIR(): key = $r1.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.inStockNumber
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.inStockNumber
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): key = $r1.bookImage
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.bookImage
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.bookImage
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.bookImage
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.bookImage
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.bookImage
DIRRegionAnalyzer.java: constructDIR(): key = $r1.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.bookToCartItemsList
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.book.bookToCartItemsList
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.book.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.book.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.book.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): curUnit = $d0 = virtualinvoke $r1.<com.bookstore.domain.Book: double getOurPrice()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = getOurPrice
construct/Utils.java: parseInvokeExpr(): methodSignature = com.bookstore.domain.Book: double getOurPrice()
construct/Utils.java: parseObjectInvoke(): virtualinvoke $r1.<com.bookstore.domain.Book: double getOurPrice()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.bookstore.domain.Book: double getOurPrice()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.bookstore.domain.Book: double getOurPrice()>
construct/Utils.java: parseObjectInvoke(): methodName = getOurPrice
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke $r1.<com.bookstore.domain.Book: double getOurPrice()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = com.bookstore.domain.Book: double getOurPrice()
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: getOurPrice
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.bookstore.domain.Book, $d0 = this.<com.bookstore.domain.Book: double ourPrice>, return $d0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.bookstore.domain.Book
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = $d0 = this.<com.bookstore.domain.Book: double ourPrice>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $d0 -> this.ourPrice
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $d0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $d0 ~~~
this.ourPrice

~~~ return ~~~
this.ourPrice

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $d0 ~~~
this.ourPrice

~~~ return ~~~
this.ourPrice

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $d0=this.ourPrice
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: return=this.ourPrice
construct/Utils.java: parseObjectInvoke(): Put DIR of callee = com.bookstore.domain.Book: double getOurPrice() in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = double
DIRRegionAnalyzer.java: constructDIR(): leftType : double
DIRRegionAnalyzer.java: constructDIR(): case : caseCallToMethodWBodyRetPrim()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), v1 is primitive, foo is not a library method
DIRRegionAnalyzer.java: constructDIR(): v1: $d0
DIRRegionAnalyzer.java: constructDIR(): foo: <com.bookstore.domain.Book: double getOurPrice()>
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke $r1.<com.bookstore.domain.Book: double getOurPrice()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: getOurPrice
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.bookstore.domain.Book: double getOurPrice()
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.bookstore.domain.Book: double getOurPrice()>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [$r1]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.bookstore.domain.Book
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: $r1
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.id, this.title, this.author, this.publisher, this.publicationDate, this.language, this.category, this.numberOfPages, this.format, this.isbn, this.shippingWeight, this.listPrice, this.ourPrice, this.active, this.description, this.inStockNumber, this.bookImage, this.bookToCartItemsList]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$d0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.title
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$d0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.author
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$d0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.publisher
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$d0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.publicationDate
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$d0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.language
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$d0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.category
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$d0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.numberOfPages
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$d0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.format
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$d0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.isbn
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$d0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.shippingWeight
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$d0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.listPrice
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$d0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.ourPrice
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$d0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.active
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$d0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.description
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$d0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.inStockNumber
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$d0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.bookImage
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$d0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.bookToCartItemsList
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$d0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = getOurPrice, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: $r1
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.id, this.title, this.author, this.publisher, this.publicationDate, this.language, this.category, this.numberOfPages, this.format, this.isbn, this.shippingWeight, this.listPrice, this.ourPrice, this.active, this.description, this.inStockNumber, this.bookImage, this.bookToCartItemsList]
DIRRegionAnalyzer.java: constructDIR(): methodSig: com.bookstore.domain.Book: double getOurPrice()
DIRRegionAnalyzer.java: constructDIR(): FuncStackAnalyzer.funcDIRMap: {com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)=~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

, com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.shoppingCart.GrandTotal ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ return.shoppingCart.cartItemList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.shoppingCart.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ return.shoppingCart.user ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

, com.bookstore.domain.Book: double getOurPrice()=~~~ $d0 ~~~
this.ourPrice

~~~ return ~~~
this.ourPrice

~~~ this ~~~
Self

, com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()=~~~ $r0 ~~~
this.shoppingCart

~~~ $r0.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ $r0.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ $r0.id ~~~
this.shoppingCart.id

~~~ $r0.user ~~~
this.shoppingCart.user

~~~ return ~~~
this.shoppingCart

~~~ return ~~~
this.shoppingCart

~~~ return.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ return.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ return.id ~~~
this.shoppingCart.id

~~~ return.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

, com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)=~~~ $r0 ~~~
this.cartItemRepository

~~~ $r1 ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ this ~~~
Self

, com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ $r1.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ $r1.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ $r1.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ $r1.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ $r1.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ $r1.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ $r1.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ this ~~~
Self

, com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()=~~~ $r0 ~~~
this.book

~~~ $r0.active ~~~
this.book.active

~~~ $r0.author ~~~
this.book.author

~~~ $r0.bookImage ~~~
this.book.bookImage

~~~ $r0.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r0.category ~~~
this.book.category

~~~ $r0.description ~~~
this.book.description

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.inStockNumber ~~~
this.book.inStockNumber

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.listPrice ~~~
this.book.listPrice

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.ourPrice ~~~
this.book.ourPrice

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ return ~~~
this.book

~~~ return ~~~
this.book

~~~ return.active ~~~
this.book.active

~~~ return.author ~~~
this.book.author

~~~ return.bookImage ~~~
this.book.bookImage

~~~ return.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ return.category ~~~
this.book.category

~~~ return.description ~~~
this.book.description

~~~ return.format ~~~
this.book.format

~~~ return.id ~~~
this.book.id

~~~ return.inStockNumber ~~~
this.book.inStockNumber

~~~ return.isbn ~~~
this.book.isbn

~~~ return.language ~~~
this.book.language

~~~ return.listPrice ~~~
this.book.listPrice

~~~ return.numberOfPages ~~~
this.book.numberOfPages

~~~ return.ourPrice ~~~
this.book.ourPrice

~~~ return.publicationDate ~~~
this.book.publicationDate

~~~ return.publisher ~~~
this.book.publisher

~~~ return.shippingWeight ~~~
this.book.shippingWeight

~~~ return.title ~~~
this.book.title

~~~ this ~~~
Self

, com.bookstore.domain.Book: int getInStockNumber()=~~~ $i0 ~~~
this.inStockNumber

~~~ return ~~~
this.inStockNumber

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): dir callee: ~~~ $d0 ~~~
this.ourPrice

~~~ return ~~~
this.ourPrice

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): retCalleeCloned: this.ourPrice
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.ourPrice
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r1.<com.bookstore.domain.Book: double getOurPrice()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r1.<com.bookstore.domain.Book: double getOurPrice()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.Book: double getOurPrice()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.Book: double getOurPrice()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [$r1]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.title, this.author, this.publisher, this.publicationDate, this.language, this.category, this.numberOfPages, this.format, this.isbn, this.shippingWeight, this.listPrice, this.ourPrice, this.active, this.description, this.inStockNumber, this.bookImage, this.bookToCartItemsList]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.ourPrice
DIRRegionAnalyzer.java: constructDIR(): after dag formals to actuals: $r1.ourPrice
DIRRegionAnalyzer.java: constructDIR(): curUnit = specialinvoke $r0.<java.math.BigDecimal: void <init>(double)>($d0)
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = specialinvoke $r0.<java.math.BigDecimal: void <init>(double)>($d0)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: <init>
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = java.math.BigDecimal: void <init>(double)
WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r2 = new java.math.BigDecimal
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
Utils.java: getVarNode(): $r2
Utils.java: getVarNode(): LinkedVariableBox($r2)
DIRRegionAnalyzer.java: constructDIR(): curUnit = $i0 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: int getQty()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = getQty
construct/Utils.java: parseInvokeExpr(): methodSignature = com.bookstore.domain.CartItem: int getQty()
construct/Utils.java: parseObjectInvoke(): virtualinvoke cartItem.<com.bookstore.domain.CartItem: int getQty()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.bookstore.domain.CartItem: int getQty()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.bookstore.domain.CartItem: int getQty()>
construct/Utils.java: parseObjectInvoke(): methodName = getQty
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: int getQty()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = com.bookstore.domain.CartItem: int getQty()
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: getQty
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.bookstore.domain.CartItem, $i0 = this.<com.bookstore.domain.CartItem: int qty>, return $i0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.bookstore.domain.CartItem
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = $i0 = this.<com.bookstore.domain.CartItem: int qty>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $i0 -> this.qty
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $i0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $i0 ~~~
this.qty

~~~ return ~~~
this.qty

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $i0 ~~~
this.qty

~~~ return ~~~
this.qty

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: $i0=this.qty
DIR.java: updateRegion(): update region entry: return=this.qty
construct/Utils.java: parseObjectInvoke(): Put DIR of callee = com.bookstore.domain.CartItem: int getQty() in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = int
DIRRegionAnalyzer.java: constructDIR(): leftType : int
DIRRegionAnalyzer.java: constructDIR(): case : caseCallToMethodWBodyRetPrim()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), v1 is primitive, foo is not a library method
DIRRegionAnalyzer.java: constructDIR(): v1: $i0
DIRRegionAnalyzer.java: constructDIR(): foo: <com.bookstore.domain.CartItem: int getQty()>
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: int getQty()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: getQty
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.bookstore.domain.CartItem: int getQty()
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.bookstore.domain.CartItem: int getQty()>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: cartItem
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.qty
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.book
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.bookToCartItemList
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.order
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $i0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = getQty, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: cartItem
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: constructDIR(): methodSig: com.bookstore.domain.CartItem: int getQty()
DIRRegionAnalyzer.java: constructDIR(): FuncStackAnalyzer.funcDIRMap: {com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)=~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

, com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.shoppingCart.GrandTotal ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ return.shoppingCart.cartItemList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.shoppingCart.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ return.shoppingCart.user ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

, com.bookstore.domain.Book: double getOurPrice()=~~~ $d0 ~~~
this.ourPrice

~~~ return ~~~
this.ourPrice

~~~ this ~~~
Self

, com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()=~~~ $r0 ~~~
this.shoppingCart

~~~ $r0.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ $r0.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ $r0.id ~~~
this.shoppingCart.id

~~~ $r0.user ~~~
this.shoppingCart.user

~~~ return ~~~
this.shoppingCart

~~~ return ~~~
this.shoppingCart

~~~ return.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ return.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ return.id ~~~
this.shoppingCart.id

~~~ return.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

, com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)=~~~ $r0 ~~~
this.cartItemRepository

~~~ $r1 ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ this ~~~
Self

, com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ $r1.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ $r1.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ $r1.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ $r1.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ $r1.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ $r1.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ $r1.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ this ~~~
Self

, com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()=~~~ $r0 ~~~
this.book

~~~ $r0.active ~~~
this.book.active

~~~ $r0.author ~~~
this.book.author

~~~ $r0.bookImage ~~~
this.book.bookImage

~~~ $r0.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r0.category ~~~
this.book.category

~~~ $r0.description ~~~
this.book.description

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.inStockNumber ~~~
this.book.inStockNumber

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.listPrice ~~~
this.book.listPrice

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.ourPrice ~~~
this.book.ourPrice

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ return ~~~
this.book

~~~ return ~~~
this.book

~~~ return.active ~~~
this.book.active

~~~ return.author ~~~
this.book.author

~~~ return.bookImage ~~~
this.book.bookImage

~~~ return.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ return.category ~~~
this.book.category

~~~ return.description ~~~
this.book.description

~~~ return.format ~~~
this.book.format

~~~ return.id ~~~
this.book.id

~~~ return.inStockNumber ~~~
this.book.inStockNumber

~~~ return.isbn ~~~
this.book.isbn

~~~ return.language ~~~
this.book.language

~~~ return.listPrice ~~~
this.book.listPrice

~~~ return.numberOfPages ~~~
this.book.numberOfPages

~~~ return.ourPrice ~~~
this.book.ourPrice

~~~ return.publicationDate ~~~
this.book.publicationDate

~~~ return.publisher ~~~
this.book.publisher

~~~ return.shippingWeight ~~~
this.book.shippingWeight

~~~ return.title ~~~
this.book.title

~~~ this ~~~
Self

, com.bookstore.domain.CartItem: int getQty()=~~~ $i0 ~~~
this.qty

~~~ return ~~~
this.qty

~~~ this ~~~
Self

, com.bookstore.domain.Book: int getInStockNumber()=~~~ $i0 ~~~
this.inStockNumber

~~~ return ~~~
this.inStockNumber

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): dir callee: ~~~ $i0 ~~~
this.qty

~~~ return ~~~
this.qty

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): retCalleeCloned: this.qty
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.qty
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: int getQty()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: int getQty()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: int getQty()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: int getQty()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.qty
DIRRegionAnalyzer.java: constructDIR(): after dag formals to actuals: cartItem.qty
DIRRegionAnalyzer.java: constructDIR(): curUnit = specialinvoke $r2.<java.math.BigDecimal: void <init>(int)>($i0)
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = specialinvoke $r2.<java.math.BigDecimal: void <init>(int)>($i0)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: <init>
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = java.math.BigDecimal: void <init>(int)
WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): curUnit = bigDecimal = virtualinvoke $r0.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r2)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = multiply
construct/Utils.java: parseInvokeExpr(): methodSignature = java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)
construct/Utils.java: parseObjectInvoke(): virtualinvoke $r0.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r2)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>
construct/Utils.java: parseObjectInvoke(): methodName = multiply
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke $r0.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r2)
construct/Utils.java: parseObjectInvoke(): methodSignature = java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
Utils.java: getVarNode(): bigDecimal
Utils.java: getVarNode(): LinkedVariableBox(bigDecimal)
JAssignStmtCons.java: construct(): virtualinvoke $r0.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r2)
construct/Utils.java: parseInvokeExpr(): methodName = multiply
construct/Utils.java: parseInvokeExpr(): methodSignature = java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)
construct/Utils.java: parseObjectInvoke(): virtualinvoke $r0.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r2)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>
construct/Utils.java: parseObjectInvoke(): methodName = multiply
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke $r0.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>($r2)
construct/Utils.java: parseObjectInvoke(): methodSignature = java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)
DIRRegionAnalyzer.java: constructDIR(): curUnit = bigDecimal = virtualinvoke bigDecimal.<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>(2, 4)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = setScale
construct/Utils.java: parseInvokeExpr(): methodSignature = java.math.BigDecimal: java.math.BigDecimal setScale(int,int)
construct/Utils.java: parseObjectInvoke(): virtualinvoke bigDecimal.<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>(2, 4)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>
construct/Utils.java: parseObjectInvoke(): methodName = setScale
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke bigDecimal.<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>(2, 4)
construct/Utils.java: parseObjectInvoke(): methodSignature = java.math.BigDecimal: java.math.BigDecimal setScale(int,int)
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
construct/Utils.java: parseObjectInvoke(): method wont handle 4
DIRRegionAnalyzer.java: constructDIR(): Wont handle this method
DIRRegionAnalyzer.java: constructDIR(): curUnit = virtualinvoke cartItem.<com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)>(bigDecimal)
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)>(bigDecimal)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: setSubtotal
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [subtotal, this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [bigDecimal, cartItem]
ARegion.java: analyze(): set cur method of analyzer to: setSubtotal
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.bookstore.domain.CartItem, subtotal := @parameter0: java.math.BigDecimal, this.<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal> = subtotal, return]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.bookstore.domain.CartItem
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = subtotal := @parameter0: java.math.BigDecimal
DIRRegionAnalyzer.java: constructDIR(): curUnit = this.<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal> = subtotal
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): Mapping: this.subtotal -> subtotal
DIRRegionAnalyzer.java: constructDIR(): curUnit = return
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ this ~~~
Self

~~~ this.subtotal ~~~
subtotal


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ this ~~~
Self

~~~ this.subtotal ~~~
subtotal


DIR.java: updateRegion(): update region entry: this.subtotal=subtotal
DIR.java: updateRegion(): update region entry: this=Self
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: subtotal
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: java.math.BigDecimal
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: bigDecimal
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: cartItem
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.subtotal, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.qty
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.subtotal, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.subtotal, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: subtotal
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)>(bigDecimal)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)>(bigDecimal)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [subtotal, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [bigDecimal, cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = subtotal, actual = bigDecimal
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: subtotal
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.book
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.subtotal, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.bookToCartItemList
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.subtotal, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.subtotal, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.order
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.subtotal, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = setSubtotal, [cartItem.subtotal]
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: subtotal
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: bigDecimal
DIRRegionAnalyzer.java: handleSideEffects(): Case the formal param is a primitive
DIRRegionAnalyzer.java: handleSideEffects(): fml: subtotal
DIRRegionAnalyzer.java: handleSideEffects(): actual arg (Soot Value): bigDecimal
DIRRegionAnalyzer.java: handleSideEffects(): actualNode (Node constructed from value): bigDecimal
DIRRegionAnalyzer.java: handleSideEffects(): formal = subtotal, actual = bigDecimal
DIRRegionAnalyzer.java: handleSideEffects(): resolvedActual: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): for key = cartItem.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): Case the formal param is a primitive, MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: cartItem
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $d0 ~~~
this.book.ourPrice

~~~ $i0 ~~~
cartItem.qty

~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
cartItem.book

~~~ $r1.active ~~~
this.book.active

~~~ $r1.author ~~~
this.book.author

~~~ $r1.bookImage ~~~
this.book.bookImage

~~~ $r1.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r1.category ~~~
this.book.category

~~~ $r1.description ~~~
this.book.description

~~~ $r1.format ~~~
this.book.format

~~~ $r1.id ~~~
this.book.id

~~~ $r1.inStockNumber ~~~
this.book.inStockNumber

~~~ $r1.isbn ~~~
this.book.isbn

~~~ $r1.language ~~~
this.book.language

~~~ $r1.listPrice ~~~
this.book.listPrice

~~~ $r1.numberOfPages ~~~
this.book.numberOfPages

~~~ $r1.ourPrice ~~~
this.book.ourPrice

~~~ $r1.publicationDate ~~~
this.book.publicationDate

~~~ $r1.publisher ~~~
this.book.publisher

~~~ $r1.shippingWeight ~~~
this.book.shippingWeight

~~~ $r1.title ~~~
this.book.title

~~~ $r2 ~~~
BottomNode

~~~ bigDecimal ~~~
MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp

~~~ this ~~~
Self


DIRRegionAnalyzer.java: handleSideEffects(): for key = cartItem.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $d0 ~~~
this.book.ourPrice

~~~ $i0 ~~~
cartItem.qty

~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
cartItem.book

~~~ $r1.active ~~~
this.book.active

~~~ $r1.author ~~~
this.book.author

~~~ $r1.bookImage ~~~
this.book.bookImage

~~~ $r1.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r1.category ~~~
this.book.category

~~~ $r1.description ~~~
this.book.description

~~~ $r1.format ~~~
this.book.format

~~~ $r1.id ~~~
this.book.id

~~~ $r1.inStockNumber ~~~
this.book.inStockNumber

~~~ $r1.isbn ~~~
this.book.isbn

~~~ $r1.language ~~~
this.book.language

~~~ $r1.listPrice ~~~
this.book.listPrice

~~~ $r1.numberOfPages ~~~
this.book.numberOfPages

~~~ $r1.ourPrice ~~~
this.book.ourPrice

~~~ $r1.publicationDate ~~~
this.book.publicationDate

~~~ $r1.publisher ~~~
this.book.publisher

~~~ $r1.shippingWeight ~~~
this.book.shippingWeight

~~~ $r1.title ~~~
this.book.title

~~~ $r2 ~~~
BottomNode

~~~ bigDecimal ~~~
MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp

~~~ this ~~~
Self


DIRRegionAnalyzer.java: handleSideEffects(): for key = cartItem.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $d0 ~~~
this.book.ourPrice

~~~ $i0 ~~~
cartItem.qty

~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
cartItem.book

~~~ $r1.active ~~~
this.book.active

~~~ $r1.author ~~~
this.book.author

~~~ $r1.bookImage ~~~
this.book.bookImage

~~~ $r1.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r1.category ~~~
this.book.category

~~~ $r1.description ~~~
this.book.description

~~~ $r1.format ~~~
this.book.format

~~~ $r1.id ~~~
this.book.id

~~~ $r1.inStockNumber ~~~
this.book.inStockNumber

~~~ $r1.isbn ~~~
this.book.isbn

~~~ $r1.language ~~~
this.book.language

~~~ $r1.listPrice ~~~
this.book.listPrice

~~~ $r1.numberOfPages ~~~
this.book.numberOfPages

~~~ $r1.ourPrice ~~~
this.book.ourPrice

~~~ $r1.publicationDate ~~~
this.book.publicationDate

~~~ $r1.publisher ~~~
this.book.publisher

~~~ $r1.shippingWeight ~~~
this.book.shippingWeight

~~~ $r1.title ~~~
this.book.title

~~~ $r2 ~~~
BottomNode

~~~ bigDecimal ~~~
MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp

~~~ this ~~~
Self


DIRRegionAnalyzer.java: handleSideEffects(): for key = cartItem.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $d0 ~~~
this.book.ourPrice

~~~ $i0 ~~~
cartItem.qty

~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
cartItem.book

~~~ $r1.active ~~~
this.book.active

~~~ $r1.author ~~~
this.book.author

~~~ $r1.bookImage ~~~
this.book.bookImage

~~~ $r1.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r1.category ~~~
this.book.category

~~~ $r1.description ~~~
this.book.description

~~~ $r1.format ~~~
this.book.format

~~~ $r1.id ~~~
this.book.id

~~~ $r1.inStockNumber ~~~
this.book.inStockNumber

~~~ $r1.isbn ~~~
this.book.isbn

~~~ $r1.language ~~~
this.book.language

~~~ $r1.listPrice ~~~
this.book.listPrice

~~~ $r1.numberOfPages ~~~
this.book.numberOfPages

~~~ $r1.ourPrice ~~~
this.book.ourPrice

~~~ $r1.publicationDate ~~~
this.book.publicationDate

~~~ $r1.publisher ~~~
this.book.publisher

~~~ $r1.shippingWeight ~~~
this.book.shippingWeight

~~~ $r1.title ~~~
this.book.title

~~~ $r2 ~~~
BottomNode

~~~ bigDecimal ~~~
MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp

~~~ this ~~~
Self


DIRRegionAnalyzer.java: handleSideEffects(): for key = cartItem.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $d0 ~~~
this.book.ourPrice

~~~ $i0 ~~~
cartItem.qty

~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
cartItem.book

~~~ $r1.active ~~~
this.book.active

~~~ $r1.author ~~~
this.book.author

~~~ $r1.bookImage ~~~
this.book.bookImage

~~~ $r1.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r1.category ~~~
this.book.category

~~~ $r1.description ~~~
this.book.description

~~~ $r1.format ~~~
this.book.format

~~~ $r1.id ~~~
this.book.id

~~~ $r1.inStockNumber ~~~
this.book.inStockNumber

~~~ $r1.isbn ~~~
this.book.isbn

~~~ $r1.language ~~~
this.book.language

~~~ $r1.listPrice ~~~
this.book.listPrice

~~~ $r1.numberOfPages ~~~
this.book.numberOfPages

~~~ $r1.ourPrice ~~~
this.book.ourPrice

~~~ $r1.publicationDate ~~~
this.book.publicationDate

~~~ $r1.publisher ~~~
this.book.publisher

~~~ $r1.shippingWeight ~~~
this.book.shippingWeight

~~~ $r1.title ~~~
this.book.title

~~~ $r2 ~~~
BottomNode

~~~ bigDecimal ~~~
MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp

~~~ this ~~~
Self


DIRRegionAnalyzer.java: handleSideEffects(): for key = cartItem.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $d0 ~~~
this.book.ourPrice

~~~ $i0 ~~~
cartItem.qty

~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
cartItem.book

~~~ $r1.active ~~~
this.book.active

~~~ $r1.author ~~~
this.book.author

~~~ $r1.bookImage ~~~
this.book.bookImage

~~~ $r1.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r1.category ~~~
this.book.category

~~~ $r1.description ~~~
this.book.description

~~~ $r1.format ~~~
this.book.format

~~~ $r1.id ~~~
this.book.id

~~~ $r1.inStockNumber ~~~
this.book.inStockNumber

~~~ $r1.isbn ~~~
this.book.isbn

~~~ $r1.language ~~~
this.book.language

~~~ $r1.listPrice ~~~
this.book.listPrice

~~~ $r1.numberOfPages ~~~
this.book.numberOfPages

~~~ $r1.ourPrice ~~~
this.book.ourPrice

~~~ $r1.publicationDate ~~~
this.book.publicationDate

~~~ $r1.publisher ~~~
this.book.publisher

~~~ $r1.shippingWeight ~~~
this.book.shippingWeight

~~~ $r1.title ~~~
this.book.title

~~~ $r2 ~~~
BottomNode

~~~ bigDecimal ~~~
MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp

~~~ this ~~~
Self


DIRRegionAnalyzer.java: handleSideEffects(): for key = cartItem.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $d0 ~~~
this.book.ourPrice

~~~ $i0 ~~~
cartItem.qty

~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
cartItem.book

~~~ $r1.active ~~~
this.book.active

~~~ $r1.author ~~~
this.book.author

~~~ $r1.bookImage ~~~
this.book.bookImage

~~~ $r1.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r1.category ~~~
this.book.category

~~~ $r1.description ~~~
this.book.description

~~~ $r1.format ~~~
this.book.format

~~~ $r1.id ~~~
this.book.id

~~~ $r1.inStockNumber ~~~
this.book.inStockNumber

~~~ $r1.isbn ~~~
this.book.isbn

~~~ $r1.language ~~~
this.book.language

~~~ $r1.listPrice ~~~
this.book.listPrice

~~~ $r1.numberOfPages ~~~
this.book.numberOfPages

~~~ $r1.ourPrice ~~~
this.book.ourPrice

~~~ $r1.publicationDate ~~~
this.book.publicationDate

~~~ $r1.publisher ~~~
this.book.publisher

~~~ $r1.shippingWeight ~~~
this.book.shippingWeight

~~~ $r1.title ~~~
this.book.title

~~~ $r2 ~~~
BottomNode

~~~ bigDecimal ~~~
MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp

~~~ this ~~~
Self


DIRRegionAnalyzer.java: handleSideEffects(): for key = cartItem.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: MethodWontHandleOp
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r3 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r3 -> this.cartItemRepository
DIRRegionAnalyzer.java: constructDIR(): curUnit = interfaceinvoke $r3.<com.bookstore.repository.CartItemRepository: java.lang.Object save(java.lang.Object)>(cartItem)
DIRRegionAnalyzer.java: constructDIR(): savestmt invoke expr: interfaceinvoke $r3.<com.bookstore.repository.CartItemRepository: java.lang.Object save(java.lang.Object)>(cartItem)
DIRRegionAnalyzer.java: constructDIR(): baseVarNode: $r3
DIRRegionAnalyzer.java: constructDIR(): dir till now: ~~~ $d0 ~~~
this.book.ourPrice

~~~ $i0 ~~~
cartItem.qty

~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
cartItem.book

~~~ $r1.active ~~~
this.book.active

~~~ $r1.author ~~~
this.book.author

~~~ $r1.bookImage ~~~
this.book.bookImage

~~~ $r1.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r1.category ~~~
this.book.category

~~~ $r1.description ~~~
this.book.description

~~~ $r1.format ~~~
this.book.format

~~~ $r1.id ~~~
this.book.id

~~~ $r1.inStockNumber ~~~
this.book.inStockNumber

~~~ $r1.isbn ~~~
this.book.isbn

~~~ $r1.language ~~~
this.book.language

~~~ $r1.listPrice ~~~
this.book.listPrice

~~~ $r1.numberOfPages ~~~
this.book.numberOfPages

~~~ $r1.ourPrice ~~~
this.book.ourPrice

~~~ $r1.publicationDate ~~~
this.book.publicationDate

~~~ $r1.publisher ~~~
this.book.publisher

~~~ $r1.shippingWeight ~~~
this.book.shippingWeight

~~~ $r1.title ~~~
this.book.title

~~~ $r2 ~~~
BottomNode

~~~ $r3 ~~~
this.cartItemRepository

~~~ bigDecimal ~~~
MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): ve map:{$r1.language=this.book.language, $r1.title=this.book.title, $r1.author=this.book.author, $r1.active=this.book.active, $r1.format=this.book.format, $i0=cartItem.qty, $r1.id=this.book.id, $r1.category=this.book.category, bigDecimal=MethodWontHandleOp, $r1.bookImage=this.book.bookImage, $r0=BottomNode, $r1=cartItem.book, $r1.publicationDate=this.book.publicationDate, $r2=BottomNode, $r1.shippingWeight=this.book.shippingWeight, $r1.description=this.book.description, $r1.inStockNumber=this.book.inStockNumber, $r3=this.cartItemRepository, $r1.isbn=this.book.isbn, $r1.ourPrice=this.book.ourPrice, this=Self, $d0=this.book.ourPrice, $r1.listPrice=this.book.listPrice, $r1.publisher=this.book.publisher, $r1.bookToCartItemsList=this.book.bookToCartItemsList, $r1.numberOfPages=this.book.numberOfPages, cartItem.subtotal=MethodWontHandleOp}
DIRRegionAnalyzer.java: constructDIR(): repo: this.cartItemRepository
DIRRegionAnalyzer.java: constructDIR(): argType: com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): table: com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): attributes: [id, qty, subtotal]
DIRRegionAnalyzer.java: constructDIR(): fieldVarNodes: [cartItem.id, cartItem.qty, cartItem.subtotal]
DIRRegionAnalyzer.java: constructDIR(): listNode.columns: [FieldRef(com.bookstore.domain.CartItem.id), FieldRef(com.bookstore.domain.CartItem.qty), FieldRef(com.bookstore.domain.CartItem.subtotal)]
DIRRegionAnalyzer.java: constructDIR(): mapping: this.cartItemRepository -> Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIRRegionAnalyzer.java: constructDIR(): savestmt args: [cartItem]
DIRRegionAnalyzer.java: constructDIR(): curUnit = return cartItem
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: return
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: cartItem
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [CartItem.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
]
AccessPath.java: replaceBase(): input access path: return.id
AccessPath.java: replaceBase(): replacement of base: cartItem
AccessPath.java: replaceBase(): input access path: return.qty
AccessPath.java: replaceBase(): replacement of base: cartItem
AccessPath.java: replaceBase(): input access path: return.subtotal
AccessPath.java: replaceBase(): replacement of base: cartItem
AccessPath.java: replaceBase(): input access path: return.book
AccessPath.java: replaceBase(): replacement of base: cartItem
AccessPath.java: replaceBase(): input access path: return.bookToCartItemList
AccessPath.java: replaceBase(): replacement of base: cartItem
AccessPath.java: replaceBase(): input access path: return.shoppingCart
AccessPath.java: replaceBase(): replacement of base: cartItem
AccessPath.java: replaceBase(): input access path: return.order
AccessPath.java: replaceBase(): replacement of base: cartItem
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $d0 ~~~
this.book.ourPrice

~~~ $i0 ~~~
cartItem.qty

~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
cartItem.book

~~~ $r1.active ~~~
this.book.active

~~~ $r1.author ~~~
this.book.author

~~~ $r1.bookImage ~~~
this.book.bookImage

~~~ $r1.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r1.category ~~~
this.book.category

~~~ $r1.description ~~~
this.book.description

~~~ $r1.format ~~~
this.book.format

~~~ $r1.id ~~~
this.book.id

~~~ $r1.inStockNumber ~~~
this.book.inStockNumber

~~~ $r1.isbn ~~~
this.book.isbn

~~~ $r1.language ~~~
this.book.language

~~~ $r1.listPrice ~~~
this.book.listPrice

~~~ $r1.numberOfPages ~~~
this.book.numberOfPages

~~~ $r1.ourPrice ~~~
this.book.ourPrice

~~~ $r1.publicationDate ~~~
this.book.publicationDate

~~~ $r1.publisher ~~~
this.book.publisher

~~~ $r1.shippingWeight ~~~
this.book.shippingWeight

~~~ $r1.title ~~~
this.book.title

~~~ $r2 ~~~
BottomNode

~~~ $r3 ~~~
this.cartItemRepository

~~~ bigDecimal ~~~
MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp

~~~ return ~~~
cartItem

~~~ return ~~~
cartItem

~~~ return.book ~~~
cartItem.book

~~~ return.bookToCartItemList ~~~
cartItem.bookToCartItemList

~~~ return.id ~~~
cartItem.id

~~~ return.order ~~~
cartItem.order

~~~ return.qty ~~~
cartItem.qty

~~~ return.shoppingCart ~~~
cartItem.shoppingCart

~~~ return.subtotal ~~~
MethodWontHandleOp

~~~ this ~~~
Self

~~~ this.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $d0 ~~~
this.book.ourPrice

~~~ $i0 ~~~
cartItem.qty

~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
cartItem.book

~~~ $r1.active ~~~
this.book.active

~~~ $r1.author ~~~
this.book.author

~~~ $r1.bookImage ~~~
this.book.bookImage

~~~ $r1.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r1.category ~~~
this.book.category

~~~ $r1.description ~~~
this.book.description

~~~ $r1.format ~~~
this.book.format

~~~ $r1.id ~~~
this.book.id

~~~ $r1.inStockNumber ~~~
this.book.inStockNumber

~~~ $r1.isbn ~~~
this.book.isbn

~~~ $r1.language ~~~
this.book.language

~~~ $r1.listPrice ~~~
this.book.listPrice

~~~ $r1.numberOfPages ~~~
this.book.numberOfPages

~~~ $r1.ourPrice ~~~
this.book.ourPrice

~~~ $r1.publicationDate ~~~
this.book.publicationDate

~~~ $r1.publisher ~~~
this.book.publisher

~~~ $r1.shippingWeight ~~~
this.book.shippingWeight

~~~ $r1.title ~~~
this.book.title

~~~ $r2 ~~~
BottomNode

~~~ $r3 ~~~
this.cartItemRepository

~~~ bigDecimal ~~~
MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp

~~~ return ~~~
cartItem

~~~ return ~~~
cartItem

~~~ return.book ~~~
cartItem.book

~~~ return.bookToCartItemList ~~~
cartItem.bookToCartItemList

~~~ return.id ~~~
cartItem.id

~~~ return.order ~~~
cartItem.order

~~~ return.qty ~~~
cartItem.qty

~~~ return.shoppingCart ~~~
cartItem.shoppingCart

~~~ return.subtotal ~~~
MethodWontHandleOp

~~~ this ~~~
Self

~~~ this.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp


DIR.java: updateRegion(): update region entry: $r1.language=this.book.language
DIR.java: updateRegion(): update region entry: $r1.title=this.book.title
DIR.java: updateRegion(): update region entry: $r1.author=this.book.author
DIR.java: updateRegion(): update region entry: $r1.active=this.book.active
DIR.java: updateRegion(): update region entry: $r1.format=this.book.format
DIR.java: updateRegion(): update region entry: return.book=cartItem.book
DIR.java: updateRegion(): update region entry: $i0=cartItem.qty
DIR.java: updateRegion(): update region entry: $r1.id=this.book.id
DIR.java: updateRegion(): update region entry: $r1.category=this.book.category
DIR.java: updateRegion(): update region entry: return.id=cartItem.id
DIR.java: updateRegion(): update region entry: return.qty=cartItem.qty
DIR.java: updateRegion(): update region entry: return.bookToCartItemList=cartItem.bookToCartItemList
DIR.java: updateRegion(): update region entry: bigDecimal=MethodWontHandleOp
DIR.java: updateRegion(): update region entry: $r1.bookImage=this.book.bookImage
DIR.java: updateRegion(): update region entry: $r0=BottomNode
DIR.java: updateRegion(): update region entry: this.cartItemRepository=Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIR.java: updateRegion(): update region entry: $r1=cartItem.book
DIR.java: updateRegion(): update region entry: $r1.publicationDate=this.book.publicationDate
DIR.java: updateRegion(): update region entry: $r2=BottomNode
DIR.java: updateRegion(): update region entry: $r1.shippingWeight=this.book.shippingWeight
DIR.java: updateRegion(): update region entry: $r1.description=this.book.description
DIR.java: updateRegion(): update region entry: $r1.inStockNumber=this.book.inStockNumber
DIR.java: updateRegion(): update region entry: $r3=this.cartItemRepository
DIR.java: updateRegion(): update region entry: $r1.isbn=this.book.isbn
DIR.java: updateRegion(): update region entry: $r1.ourPrice=this.book.ourPrice
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: return.shoppingCart=cartItem.shoppingCart
DIR.java: updateRegion(): update region entry: return.subtotal=MethodWontHandleOp
DIR.java: updateRegion(): update region entry: $d0=this.book.ourPrice
DIR.java: updateRegion(): update region entry: $r1.listPrice=this.book.listPrice
DIR.java: updateRegion(): update region entry: $r1.publisher=this.book.publisher
DIR.java: updateRegion(): update region entry: $r1.bookToCartItemsList=this.book.bookToCartItemsList
DIR.java: updateRegion(): update region entry: $r1.numberOfPages=this.book.numberOfPages
DIR.java: updateRegion(): update region entry: return.order=cartItem.order
DIR.java: updateRegion(): update region entry: cartItem.subtotal=MethodWontHandleOp
DIR.java: updateRegion(): update region entry: return=cartItem
DIR.java: updateRegion(): update region entry: return=cartItem
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: cartItem
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: cartItem
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: cartItem
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [cartItem.id, cartItem.qty, cartItem.subtotal, cartItem.book, cartItem.bookToCartItemList, cartItem.shoppingCart, cartItem.order]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: cartItem.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.language, $r1.title, $r1.author, $r1.active, $r1.format, return.book, $i0, $r1.id, $r1.category, return.id, return.qty, return.bookToCartItemList, bigDecimal, $r1.bookImage, $r0, this.cartItemRepository, $r1, $r1.publicationDate, $r2, $r1.shippingWeight, $r1.description, $r1.inStockNumber, $r3, $r1.isbn, $r1.ourPrice, this, return.shoppingCart, return.subtotal, $d0, $r1.listPrice, $r1.publisher, $r1.bookToCartItemsList, $r1.numberOfPages, return.order, cartItem.subtotal, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: cartItem.qty
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.language, $r1.title, $r1.author, $r1.active, $r1.format, return.book, $i0, $r1.id, $r1.category, return.id, return.qty, return.bookToCartItemList, bigDecimal, $r1.bookImage, $r0, this.cartItemRepository, $r1, $r1.publicationDate, $r2, $r1.shippingWeight, $r1.description, $r1.inStockNumber, $r3, $r1.isbn, $r1.ourPrice, this, return.shoppingCart, return.subtotal, $d0, $r1.listPrice, $r1.publisher, $r1.bookToCartItemsList, $r1.numberOfPages, return.order, cartItem.subtotal, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: cartItem.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.language, $r1.title, $r1.author, $r1.active, $r1.format, return.book, $i0, $r1.id, $r1.category, return.id, return.qty, return.bookToCartItemList, bigDecimal, $r1.bookImage, $r0, this.cartItemRepository, $r1, $r1.publicationDate, $r2, $r1.shippingWeight, $r1.description, $r1.inStockNumber, $r3, $r1.isbn, $r1.ourPrice, this, return.shoppingCart, return.subtotal, $d0, $r1.listPrice, $r1.publisher, $r1.bookToCartItemsList, $r1.numberOfPages, return.order, cartItem.subtotal, return, return]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: MethodWontHandleOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r6.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r6.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [cartItem, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem, $r6]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [cartItem.id, cartItem.qty, cartItem.subtotal, cartItem.book, cartItem.bookToCartItemList, cartItem.shoppingCart, cartItem.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: cartItem.book
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.language, $r1.title, $r1.author, $r1.active, $r1.format, return.book, $i0, $r1.id, $r1.category, return.id, return.qty, return.bookToCartItemList, bigDecimal, $r1.bookImage, $r0, this.cartItemRepository, $r1, $r1.publicationDate, $r2, $r1.shippingWeight, $r1.description, $r1.inStockNumber, $r3, $r1.isbn, $r1.ourPrice, this, return.shoppingCart, return.subtotal, $d0, $r1.listPrice, $r1.publisher, $r1.bookToCartItemsList, $r1.numberOfPages, return.order, cartItem.subtotal, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: cartItem.bookToCartItemList
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.language, $r1.title, $r1.author, $r1.active, $r1.format, return.book, $i0, $r1.id, $r1.category, return.id, return.qty, return.bookToCartItemList, bigDecimal, $r1.bookImage, $r0, this.cartItemRepository, $r1, $r1.publicationDate, $r2, $r1.shippingWeight, $r1.description, $r1.inStockNumber, $r3, $r1.isbn, $r1.ourPrice, this, return.shoppingCart, return.subtotal, $d0, $r1.listPrice, $r1.publisher, $r1.bookToCartItemsList, $r1.numberOfPages, return.order, cartItem.subtotal, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: cartItem.shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.language, $r1.title, $r1.author, $r1.active, $r1.format, return.book, $i0, $r1.id, $r1.category, return.id, return.qty, return.bookToCartItemList, bigDecimal, $r1.bookImage, $r0, this.cartItemRepository, $r1, $r1.publicationDate, $r2, $r1.shippingWeight, $r1.description, $r1.inStockNumber, $r3, $r1.isbn, $r1.ourPrice, this, return.shoppingCart, return.subtotal, $d0, $r1.listPrice, $r1.publisher, $r1.bookToCartItemsList, $r1.numberOfPages, return.order, cartItem.subtotal, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: cartItem.order
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.language, $r1.title, $r1.author, $r1.active, $r1.format, return.book, $i0, $r1.id, $r1.category, return.id, return.qty, return.bookToCartItemList, bigDecimal, $r1.bookImage, $r0, this.cartItemRepository, $r1, $r1.publicationDate, $r2, $r1.shippingWeight, $r1.description, $r1.inStockNumber, $r3, $r1.isbn, $r1.ourPrice, this, return.shoppingCart, return.subtotal, $d0, $r1.listPrice, $r1.publisher, $r1.bookToCartItemsList, $r1.numberOfPages, return.order, cartItem.subtotal, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.bookstore.service.impl.CartItemServiceImpl
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: $r6
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.bookToCartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.language, $r1.title, $r1.author, $r1.active, $r1.format, return.book, $i0, $r1.id, $r1.category, return.id, return.qty, return.bookToCartItemList, bigDecimal, $r1.bookImage, $r0, this.cartItemRepository, $r1, $r1.publicationDate, $r2, $r1.shippingWeight, $r1.description, $r1.inStockNumber, $r3, $r1.isbn, $r1.ourPrice, this, return.shoppingCart, return.subtotal, $d0, $r1.listPrice, $r1.publisher, $r1.bookToCartItemsList, $r1.numberOfPages, return.order, cartItem.subtotal, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.cartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.language, $r1.title, $r1.author, $r1.active, $r1.format, return.book, $i0, $r1.id, $r1.category, return.id, return.qty, return.bookToCartItemList, bigDecimal, $r1.bookImage, $r0, this.cartItemRepository, $r1, $r1.publicationDate, $r2, $r1.shippingWeight, $r1.description, $r1.inStockNumber, $r3, $r1.isbn, $r1.ourPrice, this, return.shoppingCart, return.subtotal, $d0, $r1.listPrice, $r1.publisher, $r1.bookToCartItemsList, $r1.numberOfPages, return.order, cartItem.subtotal, return, return]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r6.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r6.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [cartItem, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem, $r6]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [cartItem.id, cartItem.qty, cartItem.subtotal, cartItem.book, cartItem.bookToCartItemList, cartItem.shoppingCart, cartItem.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = updateCartItem, [cartItem.subtotal, $r6.cartItemRepository]
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: cartItem
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: cartItem
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [cartItem.id, cartItem.qty, cartItem.subtotal, cartItem.book, cartItem.bookToCartItemList, cartItem.shoppingCart, cartItem.order]
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r6.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = cartItem.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r6.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r6.cartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r6.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = cartItem.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r6.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r6.cartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r6.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = cartItem.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r6.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r6.cartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r6.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = cartItem.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r6.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r6.cartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r6.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = cartItem.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r6.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r6.cartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r6.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = cartItem.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r6.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r6.cartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r6.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = cartItem.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r6.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r6.cartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: $r6
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r6.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = cartItem.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r6.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r6.cartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r6.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = cartItem.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r6.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r6.cartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIRRegionAnalyzer.java: handleSideEffects(): after: Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIRRegionAnalyzer.java: constructDIR(): curUnit = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r6
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): CASE: v.f = expr, f is non-primtive
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>
DIRRegionAnalyzer.java: constructDIR(): accessPaths = [this.cartItemServiceImpl.bookToCartItemRepository, this.cartItemServiceImpl.cartItemRepository]
DIRRegionAnalyzer.java: constructDIR(): right val = $r6
DIRRegionAnalyzer.java: constructDIR(): Subcase: v1.f = v2
AccessPath.java: replaceBase(): input access path: this.cartItemServiceImpl.bookToCartItemRepository
AccessPath.java: replaceBase(): replacement of base: $r6
WARN: DIRRegionAnalyzer.java: constructDIR(): Invalid intermediate access path found
AccessPath.java: replaceBase(): input access path: this.cartItemServiceImpl.cartItemRepository
AccessPath.java: replaceBase(): replacement of base: $r6
DIRRegionAnalyzer.java: constructDIR(): Mapped: this.cartItemServiceImpl.cartItemRepository -> $r6.cartItemRepository
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r8 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = getSubtotal
construct/Utils.java: parseInvokeExpr(): methodSignature = com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()
construct/Utils.java: parseObjectInvoke(): virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>
construct/Utils.java: parseObjectInvoke(): methodName = getSubtotal
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: getSubtotal
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.bookstore.domain.CartItem, $r0 = this.<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, return $r0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.bookstore.domain.CartItem
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r0 -> this.subtotal
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $r0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.subtotal

~~~ return ~~~
this.subtotal

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.subtotal

~~~ return ~~~
this.subtotal

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r0=this.subtotal
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: return=this.subtotal
construct/Utils.java: parseObjectInvoke(): Put DIR of callee = com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal() in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = java.math.BigDecimal
DIRRegionAnalyzer.java: constructDIR(): leftType : java.math.BigDecimal
DIRRegionAnalyzer.java: constructDIR(): case : caseCallToMethodWBodyRetPrim()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), v1 is primitive, foo is not a library method
DIRRegionAnalyzer.java: constructDIR(): v1: $r8
DIRRegionAnalyzer.java: constructDIR(): foo: <com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: getSubtotal
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: cartItem
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.qty
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.book
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.bookToCartItemList
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.order
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = getSubtotal, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: cartItem
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: constructDIR(): methodSig: com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()
DIRRegionAnalyzer.java: constructDIR(): FuncStackAnalyzer.funcDIRMap: {com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal)=~~~ this ~~~
Self

~~~ this.subtotal ~~~
subtotal

, com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)=~~~ $d0 ~~~
this.book.ourPrice

~~~ $i0 ~~~
cartItem.qty

~~~ $r0 ~~~
BottomNode

~~~ $r1 ~~~
cartItem.book

~~~ $r1.active ~~~
this.book.active

~~~ $r1.author ~~~
this.book.author

~~~ $r1.bookImage ~~~
this.book.bookImage

~~~ $r1.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r1.category ~~~
this.book.category

~~~ $r1.description ~~~
this.book.description

~~~ $r1.format ~~~
this.book.format

~~~ $r1.id ~~~
this.book.id

~~~ $r1.inStockNumber ~~~
this.book.inStockNumber

~~~ $r1.isbn ~~~
this.book.isbn

~~~ $r1.language ~~~
this.book.language

~~~ $r1.listPrice ~~~
this.book.listPrice

~~~ $r1.numberOfPages ~~~
this.book.numberOfPages

~~~ $r1.ourPrice ~~~
this.book.ourPrice

~~~ $r1.publicationDate ~~~
this.book.publicationDate

~~~ $r1.publisher ~~~
this.book.publisher

~~~ $r1.shippingWeight ~~~
this.book.shippingWeight

~~~ $r1.title ~~~
this.book.title

~~~ $r2 ~~~
BottomNode

~~~ $r3 ~~~
this.cartItemRepository

~~~ bigDecimal ~~~
MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp

~~~ return ~~~
cartItem

~~~ return ~~~
cartItem

~~~ return.book ~~~
cartItem.book

~~~ return.bookToCartItemList ~~~
cartItem.bookToCartItemList

~~~ return.id ~~~
cartItem.id

~~~ return.order ~~~
cartItem.order

~~~ return.qty ~~~
cartItem.qty

~~~ return.shoppingCart ~~~
cartItem.shoppingCart

~~~ return.subtotal ~~~
MethodWontHandleOp

~~~ this ~~~
Self

~~~ this.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp

, com.bookstore.repository.CartItemRepository: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)=~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

, com.bookstore.repository.UserRepository: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.shoppingCart.GrandTotal ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ return.shoppingCart.cartItemList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.shoppingCart.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ return.shoppingCart.user ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

, com.bookstore.domain.Book: double getOurPrice()=~~~ $d0 ~~~
this.ourPrice

~~~ return ~~~
this.ourPrice

~~~ this ~~~
Self

, com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()=~~~ $r0 ~~~
this.shoppingCart

~~~ $r0.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ $r0.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ $r0.id ~~~
this.shoppingCart.id

~~~ $r0.user ~~~
this.shoppingCart.user

~~~ return ~~~
this.shoppingCart

~~~ return ~~~
this.shoppingCart

~~~ return.GrandTotal ~~~
this.shoppingCart.GrandTotal

~~~ return.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ return.id ~~~
this.shoppingCart.id

~~~ return.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

, com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)=~~~ $r0 ~~~
this.cartItemRepository

~~~ $r1 ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ return ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ this ~~~
Self

, com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)=~~~ $r0 ~~~
this.userRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ $r1.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ $r1.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ $r1.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ $r1.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ $r1.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ $r1.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ $r1.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ $r1.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ $r1.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ $r1.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | username
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ $r1.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | username

~~~ return.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| email

~~~ return.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| enabled

~~~ return.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| firstName

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| id

~~~ return.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| lastName

~~~ return.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| password

~~~ return.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| phone

~~~ return.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ return.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ return.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ return.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ return.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | username
| username

~~~ this ~~~
Self

, com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()=~~~ $r0 ~~~
this.subtotal

~~~ return ~~~
this.subtotal

~~~ this ~~~
Self

, com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()=~~~ $r0 ~~~
this.book

~~~ $r0.active ~~~
this.book.active

~~~ $r0.author ~~~
this.book.author

~~~ $r0.bookImage ~~~
this.book.bookImage

~~~ $r0.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r0.category ~~~
this.book.category

~~~ $r0.description ~~~
this.book.description

~~~ $r0.format ~~~
this.book.format

~~~ $r0.id ~~~
this.book.id

~~~ $r0.inStockNumber ~~~
this.book.inStockNumber

~~~ $r0.isbn ~~~
this.book.isbn

~~~ $r0.language ~~~
this.book.language

~~~ $r0.listPrice ~~~
this.book.listPrice

~~~ $r0.numberOfPages ~~~
this.book.numberOfPages

~~~ $r0.ourPrice ~~~
this.book.ourPrice

~~~ $r0.publicationDate ~~~
this.book.publicationDate

~~~ $r0.publisher ~~~
this.book.publisher

~~~ $r0.shippingWeight ~~~
this.book.shippingWeight

~~~ $r0.title ~~~
this.book.title

~~~ return ~~~
this.book

~~~ return ~~~
this.book

~~~ return.active ~~~
this.book.active

~~~ return.author ~~~
this.book.author

~~~ return.bookImage ~~~
this.book.bookImage

~~~ return.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ return.category ~~~
this.book.category

~~~ return.description ~~~
this.book.description

~~~ return.format ~~~
this.book.format

~~~ return.id ~~~
this.book.id

~~~ return.inStockNumber ~~~
this.book.inStockNumber

~~~ return.isbn ~~~
this.book.isbn

~~~ return.language ~~~
this.book.language

~~~ return.listPrice ~~~
this.book.listPrice

~~~ return.numberOfPages ~~~
this.book.numberOfPages

~~~ return.ourPrice ~~~
this.book.ourPrice

~~~ return.publicationDate ~~~
this.book.publicationDate

~~~ return.publisher ~~~
this.book.publisher

~~~ return.shippingWeight ~~~
this.book.shippingWeight

~~~ return.title ~~~
this.book.title

~~~ this ~~~
Self

, com.bookstore.domain.CartItem: int getQty()=~~~ $i0 ~~~
this.qty

~~~ return ~~~
this.qty

~~~ this ~~~
Self

, com.bookstore.domain.Book: int getInStockNumber()=~~~ $i0 ~~~
this.inStockNumber

~~~ return ~~~
this.inStockNumber

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): dir callee: ~~~ $r0 ~~~
this.subtotal

~~~ return ~~~
this.subtotal

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): retCalleeCloned: this.subtotal
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.subtotal
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartItem]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.qty, this.subtotal, this.book, this.bookToCartItemList, this.shoppingCart, this.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.subtotal
DIRRegionAnalyzer.java: constructDIR(): after dag formals to actuals: cartItem.subtotal
DIRRegionAnalyzer.java: constructDIR(): curUnit = cartTotal = virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = add
construct/Utils.java: parseInvokeExpr(): methodSignature = java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)
construct/Utils.java: parseObjectInvoke(): virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>
construct/Utils.java: parseObjectInvoke(): methodName = add
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8)
construct/Utils.java: parseObjectInvoke(): methodSignature = java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
Utils.java: getVarNode(): cartTotal
Utils.java: getVarNode(): LinkedVariableBox(cartTotal)
JAssignStmtCons.java: construct(): virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8)
construct/Utils.java: parseInvokeExpr(): methodName = add
construct/Utils.java: parseInvokeExpr(): methodSignature = java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)
construct/Utils.java: parseObjectInvoke(): virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>
construct/Utils.java: parseObjectInvoke(): methodName = add
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8)
construct/Utils.java: parseObjectInvoke(): methodSignature = java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock3
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r6.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp

~~~ $r8 ~~~
MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp

~~~ cartTotal ~~~
+
| cartTotal
| MethodWontHandleOp

~~~ this.cartItemServiceImpl.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r6.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp

~~~ $r8 ~~~
MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp

~~~ cartTotal ~~~
+
| cartTotal
| MethodWontHandleOp

~~~ this.cartItemServiceImpl.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp


DIR.java: updateRegion(): update region entry: cartTotal=+
| cartTotal
| MethodWontHandleOp
DIR.java: updateRegion(): update region entry: $r6.cartItemRepository=Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIR.java: updateRegion(): update region entry: this.cartItemServiceImpl.cartItemRepository=Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
DIR.java: updateRegion(): update region entry: $r8=MethodWontHandleOp
DIR.java: updateRegion(): update region entry: cartItem.subtotal=MethodWontHandleOp
DIRIfThenRegionAnalyzer.java: constructDIR(): headDIR: ~~~ $i0 ~~~
this.book.inStockNumber

~~~ $r4 ~~~
NextOp

~~~ $r5 ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp

~~~ $r5.active ~~~
this.book.active

~~~ $r5.author ~~~
this.book.author

~~~ $r5.bookImage ~~~
this.book.bookImage

~~~ $r5.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r5.category ~~~
this.book.category

~~~ $r5.description ~~~
this.book.description

~~~ $r5.format ~~~
this.book.format

~~~ $r5.id ~~~
this.book.id

~~~ $r5.inStockNumber ~~~
this.book.inStockNumber

~~~ $r5.isbn ~~~
this.book.isbn

~~~ $r5.language ~~~
this.book.language

~~~ $r5.listPrice ~~~
this.book.listPrice

~~~ $r5.numberOfPages ~~~
this.book.numberOfPages

~~~ $r5.ourPrice ~~~
this.book.ourPrice

~~~ $r5.publicationDate ~~~
this.book.publicationDate

~~~ $r5.publisher ~~~
this.book.publisher

~~~ $r5.shippingWeight ~~~
this.book.shippingWeight

~~~ $r5.title ~~~
this.book.title

~~~ cartItem.book ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp

~~~ cartItem.book.active ~~~
FieldRef(com.bookstore.domain.Book.active)

~~~ cartItem.book.author ~~~
FieldRef(com.bookstore.domain.Book.author)

~~~ cartItem.book.category ~~~
FieldRef(com.bookstore.domain.Book.category)

~~~ cartItem.book.description ~~~
FieldRef(com.bookstore.domain.Book.description)

~~~ cartItem.book.format ~~~
FieldRef(com.bookstore.domain.Book.format)

~~~ cartItem.book.id ~~~
FieldRef(com.bookstore.domain.Book.id)

~~~ cartItem.book.inStockNumber ~~~
FieldRef(com.bookstore.domain.Book.inStockNumber)

~~~ cartItem.book.isbn ~~~
FieldRef(com.bookstore.domain.Book.isbn)

~~~ cartItem.book.language ~~~
FieldRef(com.bookstore.domain.Book.language)

~~~ cartItem.book.listPrice ~~~
FieldRef(com.bookstore.domain.Book.listPrice)

~~~ cartItem.book.numberOfPages ~~~
FieldRef(com.bookstore.domain.Book.numberOfPages)

~~~ cartItem.book.ourPrice ~~~
FieldRef(com.bookstore.domain.Book.ourPrice)

~~~ cartItem.book.publicationDate ~~~
FieldRef(com.bookstore.domain.Book.publicationDate)

~~~ cartItem.book.publisher ~~~
FieldRef(com.bookstore.domain.Book.publisher)

~~~ cartItem.book.shippingWeight ~~~
FieldRef(com.bookstore.domain.Book.shippingWeight)

~~~ cartItem.book.title ~~~
FieldRef(com.bookstore.domain.Book.title)

~~~ cartItem.id ~~~
FieldRef(com.bookstore.domain.CartItem.id)

~~~ cartItem.order ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Order)
| NullOp

~~~ cartItem.order.id ~~~
FieldRef(com.bookstore.domain.Order.id)

~~~ cartItem.order.orderDate ~~~
FieldRef(com.bookstore.domain.Order.orderDate)

~~~ cartItem.order.orderTotal ~~~
FieldRef(com.bookstore.domain.Order.orderTotal)

~~~ cartItem.order.orederStatus ~~~
FieldRef(com.bookstore.domain.Order.orederStatus)

~~~ cartItem.order.shippingDate ~~~
FieldRef(com.bookstore.domain.Order.shippingDate)

~~~ cartItem.order.shippingMethod ~~~
FieldRef(com.bookstore.domain.Order.shippingMethod)

~~~ cartItem.qty ~~~
FieldRef(com.bookstore.domain.CartItem.qty)

~~~ cartItem.shoppingCart ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp

~~~ cartItem.shoppingCart.GrandTotal ~~~
FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ cartItem.shoppingCart.id ~~~
FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ cartItem.subtotal ~~~
FieldRef(com.bookstore.domain.CartItem.subtotal)

~~~ condition ~~~
LessThanOrEquals
| this.book.inStockNumber
| 0


DIRIfThenRegionAnalyzer.java: constructDIR(): trueDIR: ~~~ $r6.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp

~~~ $r8 ~~~
MethodWontHandleOp

~~~ cartItem.subtotal ~~~
MethodWontHandleOp

~~~ cartTotal ~~~
+
| cartTotal
| MethodWontHandleOp

~~~ this.cartItemServiceImpl.cartItemRepository ~~~
Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp


analysis/Utils.java: extractCondition(): condVar: condition
analysis/Utils.java: extractCondition(): input dir (of headRegion): ~~~ $i0 ~~~
this.book.inStockNumber

~~~ $r4 ~~~
NextOp

~~~ $r5 ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp

~~~ $r5.active ~~~
this.book.active

~~~ $r5.author ~~~
this.book.author

~~~ $r5.bookImage ~~~
this.book.bookImage

~~~ $r5.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r5.category ~~~
this.book.category

~~~ $r5.description ~~~
this.book.description

~~~ $r5.format ~~~
this.book.format

~~~ $r5.id ~~~
this.book.id

~~~ $r5.inStockNumber ~~~
this.book.inStockNumber

~~~ $r5.isbn ~~~
this.book.isbn

~~~ $r5.language ~~~
this.book.language

~~~ $r5.listPrice ~~~
this.book.listPrice

~~~ $r5.numberOfPages ~~~
this.book.numberOfPages

~~~ $r5.ourPrice ~~~
this.book.ourPrice

~~~ $r5.publicationDate ~~~
this.book.publicationDate

~~~ $r5.publisher ~~~
this.book.publisher

~~~ $r5.shippingWeight ~~~
this.book.shippingWeight

~~~ $r5.title ~~~
this.book.title

~~~ cartItem.book ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp

~~~ cartItem.book.active ~~~
FieldRef(com.bookstore.domain.Book.active)

~~~ cartItem.book.author ~~~
FieldRef(com.bookstore.domain.Book.author)

~~~ cartItem.book.category ~~~
FieldRef(com.bookstore.domain.Book.category)

~~~ cartItem.book.description ~~~
FieldRef(com.bookstore.domain.Book.description)

~~~ cartItem.book.format ~~~
FieldRef(com.bookstore.domain.Book.format)

~~~ cartItem.book.id ~~~
FieldRef(com.bookstore.domain.Book.id)

~~~ cartItem.book.inStockNumber ~~~
FieldRef(com.bookstore.domain.Book.inStockNumber)

~~~ cartItem.book.isbn ~~~
FieldRef(com.bookstore.domain.Book.isbn)

~~~ cartItem.book.language ~~~
FieldRef(com.bookstore.domain.Book.language)

~~~ cartItem.book.listPrice ~~~
FieldRef(com.bookstore.domain.Book.listPrice)

~~~ cartItem.book.numberOfPages ~~~
FieldRef(com.bookstore.domain.Book.numberOfPages)

~~~ cartItem.book.ourPrice ~~~
FieldRef(com.bookstore.domain.Book.ourPrice)

~~~ cartItem.book.publicationDate ~~~
FieldRef(com.bookstore.domain.Book.publicationDate)

~~~ cartItem.book.publisher ~~~
FieldRef(com.bookstore.domain.Book.publisher)

~~~ cartItem.book.shippingWeight ~~~
FieldRef(com.bookstore.domain.Book.shippingWeight)

~~~ cartItem.book.title ~~~
FieldRef(com.bookstore.domain.Book.title)

~~~ cartItem.id ~~~
FieldRef(com.bookstore.domain.CartItem.id)

~~~ cartItem.order ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Order)
| NullOp

~~~ cartItem.order.id ~~~
FieldRef(com.bookstore.domain.Order.id)

~~~ cartItem.order.orderDate ~~~
FieldRef(com.bookstore.domain.Order.orderDate)

~~~ cartItem.order.orderTotal ~~~
FieldRef(com.bookstore.domain.Order.orderTotal)

~~~ cartItem.order.orederStatus ~~~
FieldRef(com.bookstore.domain.Order.orederStatus)

~~~ cartItem.order.shippingDate ~~~
FieldRef(com.bookstore.domain.Order.shippingDate)

~~~ cartItem.order.shippingMethod ~~~
FieldRef(com.bookstore.domain.Order.shippingMethod)

~~~ cartItem.qty ~~~
FieldRef(com.bookstore.domain.CartItem.qty)

~~~ cartItem.shoppingCart ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp

~~~ cartItem.shoppingCart.GrandTotal ~~~
FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ cartItem.shoppingCart.id ~~~
FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ cartItem.subtotal ~~~
FieldRef(com.bookstore.domain.CartItem.subtotal)

~~~ condition ~~~
LessThanOrEquals
| this.book.inStockNumber
| 0


DIRIfThenRegionAnalyzer.java: constructDIR(): condition: LessThanOrEquals
| this.book.inStockNumber
| 0
DIRIfThenRegionAnalyzer.java: constructDIR(): condition after inversion: MoreThan
| this.book.inStockNumber
| 0
DIRIfThenRegionAnalyzer.java: constructDIR(): merging head with cond
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| MoreThan
| | this.book.inStockNumber
| | 0
| +
| | cartTotal
| | MethodWontHandleOp
| cartTotal
analysis/Utils.java: resolveTree(): i = 0 child of top:MoreThan
| this.book.inStockNumber
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:+
| cartTotal
| MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:cartTotal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: cartTotal
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: +
| cartTotal
| MethodWontHandleOp
analysis/Utils.java: resolveTree(): i = 0 child of top:cartTotal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: cartTotal
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MoreThan
| this.book.inStockNumber
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:this.book.inStockNumber
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.book.inStockNumber
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| MoreThan
| | this.book.inStockNumber
| | 0
| Save
| | $r3
| | Tuple
| | | cartItem
| | | List
| | | | cartItem.id
| | | | cartItem.qty
| | | | MethodWontHandleOp
| $r6.cartItemRepository
analysis/Utils.java: resolveTree(): i = 0 child of top:MoreThan
| this.book.inStockNumber
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r6.cartItemRepository
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r6.cartItemRepository
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Save
| $r3
| Tuple
| | cartItem
| | List
| | | cartItem.id
| | | cartItem.qty
| | | MethodWontHandleOp
analysis/Utils.java: resolveTree(): i = 0 child of top:$r3
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Tuple
| cartItem
| List
| | cartItem.id
| | cartItem.qty
| | MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Tuple
| cartItem
| List
| | cartItem.id
| | cartItem.qty
| | MethodWontHandleOp
analysis/Utils.java: resolveTree(): i = 0 child of top:cartItem
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:List
| cartItem.id
| cartItem.qty
| MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: List
| cartItem.id
| cartItem.qty
| MethodWontHandleOp
analysis/Utils.java: resolveTree(): i = 0 child of top:cartItem.id
analysis/Utils.java: resolveTree(): top: List
| cartItem.id
| cartItem.qty
| MethodWontHandleOp
analysis/Utils.java: resolveTree(): resolvedValChild: FieldRef(com.bookstore.domain.CartItem.id)
analysis/Utils.java: resolveTree(): new top: List
| FieldRef(com.bookstore.domain.CartItem.id)
| cartItem.qty
| MethodWontHandleOp
analysis/Utils.java: resolveTree(): i = 1 child of top:cartItem.qty
analysis/Utils.java: resolveTree(): top: List
| FieldRef(com.bookstore.domain.CartItem.id)
| cartItem.qty
| MethodWontHandleOp
analysis/Utils.java: resolveTree(): resolvedValChild: FieldRef(com.bookstore.domain.CartItem.qty)
analysis/Utils.java: resolveTree(): new top: List
| FieldRef(com.bookstore.domain.CartItem.id)
| FieldRef(com.bookstore.domain.CartItem.qty)
| MethodWontHandleOp
analysis/Utils.java: resolveTree(): i = 2 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 2
analysis/Utils.java: resolveTree(): newChildValueList: [0=FieldRef(com.bookstore.domain.CartItem.id), 1=FieldRef(com.bookstore.domain.CartItem.qty)]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: cartItem
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r3
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MoreThan
| this.book.inStockNumber
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:this.book.inStockNumber
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.book.inStockNumber
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| MoreThan
| | this.book.inStockNumber
| | 0
| Save
| | $r3
| | Tuple
| | | cartItem
| | | List
| | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | MethodWontHandleOp
| this.cartItemServiceImpl.cartItemRepository
analysis/Utils.java: resolveTree(): i = 0 child of top:MoreThan
| this.book.inStockNumber
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Save
| $r3
| Tuple
| | cartItem
| | List
| | | FieldRef(com.bookstore.domain.CartItem.id)
| | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:this.cartItemServiceImpl.cartItemRepository
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.cartItemServiceImpl.cartItemRepository
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Save
| $r3
| Tuple
| | cartItem
| | List
| | | FieldRef(com.bookstore.domain.CartItem.id)
| | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | MethodWontHandleOp
analysis/Utils.java: resolveTree(): i = 0 child of top:$r3
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Tuple
| cartItem
| List
| | FieldRef(com.bookstore.domain.CartItem.id)
| | FieldRef(com.bookstore.domain.CartItem.qty)
| | MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Tuple
| cartItem
| List
| | FieldRef(com.bookstore.domain.CartItem.id)
| | FieldRef(com.bookstore.domain.CartItem.qty)
| | MethodWontHandleOp
analysis/Utils.java: resolveTree(): i = 0 child of top:cartItem
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:List
| FieldRef(com.bookstore.domain.CartItem.id)
| FieldRef(com.bookstore.domain.CartItem.qty)
| MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: List
| FieldRef(com.bookstore.domain.CartItem.id)
| FieldRef(com.bookstore.domain.CartItem.qty)
| MethodWontHandleOp
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.bookstore.domain.CartItem.id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:FieldRef(com.bookstore.domain.CartItem.qty)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.bookstore.domain.CartItem.qty)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.bookstore.domain.CartItem.id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: cartItem
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r3
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MoreThan
| this.book.inStockNumber
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:this.book.inStockNumber
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.book.inStockNumber
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| $r8
analysis/Utils.java: resolveTree(): i = 0 child of top:MoreThan
| this.book.inStockNumber
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r8
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r8
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MoreThan
| this.book.inStockNumber
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:this.book.inStockNumber
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.book.inStockNumber
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| cartItem.subtotal
analysis/Utils.java: resolveTree(): i = 0 child of top:MoreThan
| this.book.inStockNumber
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:cartItem.subtotal
analysis/Utils.java: resolveTree(): top: ?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| cartItem.subtotal
analysis/Utils.java: resolveTree(): resolvedValChild: FieldRef(com.bookstore.domain.CartItem.subtotal)
analysis/Utils.java: resolveTree(): new top: ?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| FieldRef(com.bookstore.domain.CartItem.subtotal)
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [2=FieldRef(com.bookstore.domain.CartItem.subtotal)]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MoreThan
| this.book.inStockNumber
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:this.book.inStockNumber
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.book.inStockNumber
analysis/Utils.java: resolveTree(): return
DIRIfThenRegionAnalyzer.java: constructDIR(): IfThenRegion: | IfThen
| | BasicBlock2
| | BasicBlock3

DIRIfThenRegionAnalyzer.java: constructDIR(): IfThenRegionDIR: ~~~ $i0 ~~~
this.book.inStockNumber

~~~ $r4 ~~~
NextOp

~~~ $r5 ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp

~~~ $r5.active ~~~
this.book.active

~~~ $r5.author ~~~
this.book.author

~~~ $r5.bookImage ~~~
this.book.bookImage

~~~ $r5.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r5.category ~~~
this.book.category

~~~ $r5.description ~~~
this.book.description

~~~ $r5.format ~~~
this.book.format

~~~ $r5.id ~~~
this.book.id

~~~ $r5.inStockNumber ~~~
this.book.inStockNumber

~~~ $r5.isbn ~~~
this.book.isbn

~~~ $r5.language ~~~
this.book.language

~~~ $r5.listPrice ~~~
this.book.listPrice

~~~ $r5.numberOfPages ~~~
this.book.numberOfPages

~~~ $r5.ourPrice ~~~
this.book.ourPrice

~~~ $r5.publicationDate ~~~
this.book.publicationDate

~~~ $r5.publisher ~~~
this.book.publisher

~~~ $r5.shippingWeight ~~~
this.book.shippingWeight

~~~ $r5.title ~~~
this.book.title

~~~ $r6.cartItemRepository ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| Save
| | $r3
| | Tuple
| | | cartItem
| | | List
| | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | MethodWontHandleOp
| $r6.cartItemRepository

~~~ $r8 ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| $r8

~~~ cartItem.book ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp

~~~ cartItem.book.active ~~~
FieldRef(com.bookstore.domain.Book.active)

~~~ cartItem.book.author ~~~
FieldRef(com.bookstore.domain.Book.author)

~~~ cartItem.book.category ~~~
FieldRef(com.bookstore.domain.Book.category)

~~~ cartItem.book.description ~~~
FieldRef(com.bookstore.domain.Book.description)

~~~ cartItem.book.format ~~~
FieldRef(com.bookstore.domain.Book.format)

~~~ cartItem.book.id ~~~
FieldRef(com.bookstore.domain.Book.id)

~~~ cartItem.book.inStockNumber ~~~
FieldRef(com.bookstore.domain.Book.inStockNumber)

~~~ cartItem.book.isbn ~~~
FieldRef(com.bookstore.domain.Book.isbn)

~~~ cartItem.book.language ~~~
FieldRef(com.bookstore.domain.Book.language)

~~~ cartItem.book.listPrice ~~~
FieldRef(com.bookstore.domain.Book.listPrice)

~~~ cartItem.book.numberOfPages ~~~
FieldRef(com.bookstore.domain.Book.numberOfPages)

~~~ cartItem.book.ourPrice ~~~
FieldRef(com.bookstore.domain.Book.ourPrice)

~~~ cartItem.book.publicationDate ~~~
FieldRef(com.bookstore.domain.Book.publicationDate)

~~~ cartItem.book.publisher ~~~
FieldRef(com.bookstore.domain.Book.publisher)

~~~ cartItem.book.shippingWeight ~~~
FieldRef(com.bookstore.domain.Book.shippingWeight)

~~~ cartItem.book.title ~~~
FieldRef(com.bookstore.domain.Book.title)

~~~ cartItem.id ~~~
FieldRef(com.bookstore.domain.CartItem.id)

~~~ cartItem.order ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Order)
| NullOp

~~~ cartItem.order.id ~~~
FieldRef(com.bookstore.domain.Order.id)

~~~ cartItem.order.orderDate ~~~
FieldRef(com.bookstore.domain.Order.orderDate)

~~~ cartItem.order.orderTotal ~~~
FieldRef(com.bookstore.domain.Order.orderTotal)

~~~ cartItem.order.orederStatus ~~~
FieldRef(com.bookstore.domain.Order.orederStatus)

~~~ cartItem.order.shippingDate ~~~
FieldRef(com.bookstore.domain.Order.shippingDate)

~~~ cartItem.order.shippingMethod ~~~
FieldRef(com.bookstore.domain.Order.shippingMethod)

~~~ cartItem.qty ~~~
FieldRef(com.bookstore.domain.CartItem.qty)

~~~ cartItem.shoppingCart ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp

~~~ cartItem.shoppingCart.GrandTotal ~~~
FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ cartItem.shoppingCart.id ~~~
FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ cartItem.subtotal ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| FieldRef(com.bookstore.domain.CartItem.subtotal)

~~~ cartTotal ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| +
| | cartTotal
| | MethodWontHandleOp
| cartTotal

~~~ condition ~~~
LessThanOrEquals
| this.book.inStockNumber
| 0

~~~ this.cartItemServiceImpl.cartItemRepository ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| Save
| | $r3
| | Tuple
| | | cartItem
| | | List
| | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | MethodWontHandleOp
| this.cartItemServiceImpl.cartItemRepository


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $i0 ~~~
this.book.inStockNumber

~~~ $r4 ~~~
NextOp

~~~ $r5 ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp

~~~ $r5.active ~~~
this.book.active

~~~ $r5.author ~~~
this.book.author

~~~ $r5.bookImage ~~~
this.book.bookImage

~~~ $r5.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r5.category ~~~
this.book.category

~~~ $r5.description ~~~
this.book.description

~~~ $r5.format ~~~
this.book.format

~~~ $r5.id ~~~
this.book.id

~~~ $r5.inStockNumber ~~~
this.book.inStockNumber

~~~ $r5.isbn ~~~
this.book.isbn

~~~ $r5.language ~~~
this.book.language

~~~ $r5.listPrice ~~~
this.book.listPrice

~~~ $r5.numberOfPages ~~~
this.book.numberOfPages

~~~ $r5.ourPrice ~~~
this.book.ourPrice

~~~ $r5.publicationDate ~~~
this.book.publicationDate

~~~ $r5.publisher ~~~
this.book.publisher

~~~ $r5.shippingWeight ~~~
this.book.shippingWeight

~~~ $r5.title ~~~
this.book.title

~~~ $r6.cartItemRepository ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| Save
| | $r3
| | Tuple
| | | cartItem
| | | List
| | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | MethodWontHandleOp
| $r6.cartItemRepository

~~~ $r8 ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| $r8

~~~ cartItem.book ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp

~~~ cartItem.book.active ~~~
FieldRef(com.bookstore.domain.Book.active)

~~~ cartItem.book.author ~~~
FieldRef(com.bookstore.domain.Book.author)

~~~ cartItem.book.category ~~~
FieldRef(com.bookstore.domain.Book.category)

~~~ cartItem.book.description ~~~
FieldRef(com.bookstore.domain.Book.description)

~~~ cartItem.book.format ~~~
FieldRef(com.bookstore.domain.Book.format)

~~~ cartItem.book.id ~~~
FieldRef(com.bookstore.domain.Book.id)

~~~ cartItem.book.inStockNumber ~~~
FieldRef(com.bookstore.domain.Book.inStockNumber)

~~~ cartItem.book.isbn ~~~
FieldRef(com.bookstore.domain.Book.isbn)

~~~ cartItem.book.language ~~~
FieldRef(com.bookstore.domain.Book.language)

~~~ cartItem.book.listPrice ~~~
FieldRef(com.bookstore.domain.Book.listPrice)

~~~ cartItem.book.numberOfPages ~~~
FieldRef(com.bookstore.domain.Book.numberOfPages)

~~~ cartItem.book.ourPrice ~~~
FieldRef(com.bookstore.domain.Book.ourPrice)

~~~ cartItem.book.publicationDate ~~~
FieldRef(com.bookstore.domain.Book.publicationDate)

~~~ cartItem.book.publisher ~~~
FieldRef(com.bookstore.domain.Book.publisher)

~~~ cartItem.book.shippingWeight ~~~
FieldRef(com.bookstore.domain.Book.shippingWeight)

~~~ cartItem.book.title ~~~
FieldRef(com.bookstore.domain.Book.title)

~~~ cartItem.id ~~~
FieldRef(com.bookstore.domain.CartItem.id)

~~~ cartItem.order ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Order)
| NullOp

~~~ cartItem.order.id ~~~
FieldRef(com.bookstore.domain.Order.id)

~~~ cartItem.order.orderDate ~~~
FieldRef(com.bookstore.domain.Order.orderDate)

~~~ cartItem.order.orderTotal ~~~
FieldRef(com.bookstore.domain.Order.orderTotal)

~~~ cartItem.order.orederStatus ~~~
FieldRef(com.bookstore.domain.Order.orederStatus)

~~~ cartItem.order.shippingDate ~~~
FieldRef(com.bookstore.domain.Order.shippingDate)

~~~ cartItem.order.shippingMethod ~~~
FieldRef(com.bookstore.domain.Order.shippingMethod)

~~~ cartItem.qty ~~~
FieldRef(com.bookstore.domain.CartItem.qty)

~~~ cartItem.shoppingCart ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp

~~~ cartItem.shoppingCart.GrandTotal ~~~
FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ cartItem.shoppingCart.id ~~~
FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ cartItem.subtotal ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| FieldRef(com.bookstore.domain.CartItem.subtotal)

~~~ cartTotal ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| +
| | cartTotal
| | MethodWontHandleOp
| cartTotal

~~~ condition ~~~
LessThanOrEquals
| this.book.inStockNumber
| 0

~~~ this.cartItemServiceImpl.cartItemRepository ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| Save
| | $r3
| | Tuple
| | | cartItem
| | | List
| | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | MethodWontHandleOp
| this.cartItemServiceImpl.cartItemRepository


DIR.java: updateRegion(): update region entry: cartItem.shoppingCart.GrandTotal=FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)
DIR.java: updateRegion(): update region entry: $r6.cartItemRepository=?
| MoreThan
| | this.book.inStockNumber
| | 0
| Save
| | $r3
| | Tuple
| | | cartItem
| | | List
| | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | MethodWontHandleOp
| $r6.cartItemRepository
DIR.java: updateRegion(): update region entry: $r5.isbn=this.book.isbn
DIR.java: updateRegion(): update region entry: $i0=this.book.inStockNumber
DIR.java: updateRegion(): update region entry: $r5.listPrice=this.book.listPrice
DIR.java: updateRegion(): update region entry: $r5.id=this.book.id
DIR.java: updateRegion(): update region entry: $r5.bookToCartItemsList=this.book.bookToCartItemsList
DIR.java: updateRegion(): update region entry: cartItem.qty=FieldRef(com.bookstore.domain.CartItem.qty)
DIR.java: updateRegion(): update region entry: cartItem.book.title=FieldRef(com.bookstore.domain.Book.title)
DIR.java: updateRegion(): update region entry: cartItem.order.shippingMethod=FieldRef(com.bookstore.domain.Order.shippingMethod)
DIR.java: updateRegion(): update region entry: cartTotal=?
| MoreThan
| | this.book.inStockNumber
| | 0
| +
| | cartTotal
| | MethodWontHandleOp
| cartTotal
DIR.java: updateRegion(): update region entry: $r5.numberOfPages=this.book.numberOfPages
DIR.java: updateRegion(): update region entry: cartItem.shoppingCart=Join
| NextOp
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp
DIR.java: updateRegion(): update region entry: cartItem.order.id=FieldRef(com.bookstore.domain.Order.id)
DIR.java: updateRegion(): update region entry: cartItem.book=Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp
DIR.java: updateRegion(): update region entry: $r5.ourPrice=this.book.ourPrice
DIR.java: updateRegion(): update region entry: this.cartItemServiceImpl.cartItemRepository=?
| MoreThan
| | this.book.inStockNumber
| | 0
| Save
| | $r3
| | Tuple
| | | cartItem
| | | List
| | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | MethodWontHandleOp
| this.cartItemServiceImpl.cartItemRepository
DIR.java: updateRegion(): update region entry: cartItem.book.numberOfPages=FieldRef(com.bookstore.domain.Book.numberOfPages)
DIR.java: updateRegion(): update region entry: $r5.language=this.book.language
DIR.java: updateRegion(): update region entry: cartItem.book.active=FieldRef(com.bookstore.domain.Book.active)
DIR.java: updateRegion(): update region entry: cartItem.book.author=FieldRef(com.bookstore.domain.Book.author)
DIR.java: updateRegion(): update region entry: $r4=NextOp
DIR.java: updateRegion(): update region entry: cartItem.book.publicationDate=FieldRef(com.bookstore.domain.Book.publicationDate)
DIR.java: updateRegion(): update region entry: $r5=Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp
DIR.java: updateRegion(): update region entry: $r8=?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| $r8
DIR.java: updateRegion(): update region entry: $r5.publisher=this.book.publisher
DIR.java: updateRegion(): update region entry: $r5.category=this.book.category
DIR.java: updateRegion(): update region entry: $r5.shippingWeight=this.book.shippingWeight
DIR.java: updateRegion(): update region entry: condition=LessThanOrEquals
| this.book.inStockNumber
| 0
DIR.java: updateRegion(): update region entry: cartItem.order.orederStatus=FieldRef(com.bookstore.domain.Order.orederStatus)
DIR.java: updateRegion(): update region entry: $r5.format=this.book.format
DIR.java: updateRegion(): update region entry: cartItem.id=FieldRef(com.bookstore.domain.CartItem.id)
DIR.java: updateRegion(): update region entry: cartItem.book.category=FieldRef(com.bookstore.domain.Book.category)
DIR.java: updateRegion(): update region entry: cartItem.book.format=FieldRef(com.bookstore.domain.Book.format)
DIR.java: updateRegion(): update region entry: cartItem.order=Join
| NextOp
| ClassRef(com.bookstore.domain.Order)
| NullOp
DIR.java: updateRegion(): update region entry: cartItem.subtotal=?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| FieldRef(com.bookstore.domain.CartItem.subtotal)
DIR.java: updateRegion(): update region entry: cartItem.book.id=FieldRef(com.bookstore.domain.Book.id)
DIR.java: updateRegion(): update region entry: $r5.author=this.book.author
DIR.java: updateRegion(): update region entry: cartItem.order.orderTotal=FieldRef(com.bookstore.domain.Order.orderTotal)
DIR.java: updateRegion(): update region entry: cartItem.book.listPrice=FieldRef(com.bookstore.domain.Book.listPrice)
DIR.java: updateRegion(): update region entry: $r5.publicationDate=this.book.publicationDate
DIR.java: updateRegion(): update region entry: cartItem.book.ourPrice=FieldRef(com.bookstore.domain.Book.ourPrice)
DIR.java: updateRegion(): update region entry: $r5.inStockNumber=this.book.inStockNumber
DIR.java: updateRegion(): update region entry: $r5.active=this.book.active
DIR.java: updateRegion(): update region entry: $r5.description=this.book.description
DIR.java: updateRegion(): update region entry: cartItem.book.inStockNumber=FieldRef(com.bookstore.domain.Book.inStockNumber)
DIR.java: updateRegion(): update region entry: cartItem.shoppingCart.id=FieldRef(com.bookstore.domain.ShoppingCart.id)
DIR.java: updateRegion(): update region entry: $r5.bookImage=this.book.bookImage
DIR.java: updateRegion(): update region entry: cartItem.book.language=FieldRef(com.bookstore.domain.Book.language)
DIR.java: updateRegion(): update region entry: cartItem.book.publisher=FieldRef(com.bookstore.domain.Book.publisher)
DIR.java: updateRegion(): update region entry: cartItem.book.shippingWeight=FieldRef(com.bookstore.domain.Book.shippingWeight)
DIR.java: updateRegion(): update region entry: cartItem.book.isbn=FieldRef(com.bookstore.domain.Book.isbn)
DIR.java: updateRegion(): update region entry: cartItem.order.shippingDate=FieldRef(com.bookstore.domain.Order.shippingDate)
DIR.java: updateRegion(): update region entry: cartItem.order.orderDate=FieldRef(com.bookstore.domain.Order.orderDate)
DIR.java: updateRegion(): update region entry: $r5.title=this.book.title
DIR.java: updateRegion(): update region entry: cartItem.book.description=FieldRef(com.bookstore.domain.Book.description)
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | IfThen
| | BasicBlock2
| | BasicBlock3

DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ $i0 ~~~
this.book.inStockNumber

~~~ $r4 ~~~
NextOp

~~~ $r5 ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp

~~~ $r5.active ~~~
this.book.active

~~~ $r5.author ~~~
this.book.author

~~~ $r5.bookImage ~~~
this.book.bookImage

~~~ $r5.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r5.category ~~~
this.book.category

~~~ $r5.description ~~~
this.book.description

~~~ $r5.format ~~~
this.book.format

~~~ $r5.id ~~~
this.book.id

~~~ $r5.inStockNumber ~~~
this.book.inStockNumber

~~~ $r5.isbn ~~~
this.book.isbn

~~~ $r5.language ~~~
this.book.language

~~~ $r5.listPrice ~~~
this.book.listPrice

~~~ $r5.numberOfPages ~~~
this.book.numberOfPages

~~~ $r5.ourPrice ~~~
this.book.ourPrice

~~~ $r5.publicationDate ~~~
this.book.publicationDate

~~~ $r5.publisher ~~~
this.book.publisher

~~~ $r5.shippingWeight ~~~
this.book.shippingWeight

~~~ $r5.title ~~~
this.book.title

~~~ $r6.cartItemRepository ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| Save
| | $r3
| | Tuple
| | | cartItem
| | | List
| | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | MethodWontHandleOp
| $r6.cartItemRepository

~~~ $r8 ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| $r8

~~~ cartItem.book ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp

~~~ cartItem.book.active ~~~
FieldRef(com.bookstore.domain.Book.active)

~~~ cartItem.book.author ~~~
FieldRef(com.bookstore.domain.Book.author)

~~~ cartItem.book.category ~~~
FieldRef(com.bookstore.domain.Book.category)

~~~ cartItem.book.description ~~~
FieldRef(com.bookstore.domain.Book.description)

~~~ cartItem.book.format ~~~
FieldRef(com.bookstore.domain.Book.format)

~~~ cartItem.book.id ~~~
FieldRef(com.bookstore.domain.Book.id)

~~~ cartItem.book.inStockNumber ~~~
FieldRef(com.bookstore.domain.Book.inStockNumber)

~~~ cartItem.book.isbn ~~~
FieldRef(com.bookstore.domain.Book.isbn)

~~~ cartItem.book.language ~~~
FieldRef(com.bookstore.domain.Book.language)

~~~ cartItem.book.listPrice ~~~
FieldRef(com.bookstore.domain.Book.listPrice)

~~~ cartItem.book.numberOfPages ~~~
FieldRef(com.bookstore.domain.Book.numberOfPages)

~~~ cartItem.book.ourPrice ~~~
FieldRef(com.bookstore.domain.Book.ourPrice)

~~~ cartItem.book.publicationDate ~~~
FieldRef(com.bookstore.domain.Book.publicationDate)

~~~ cartItem.book.publisher ~~~
FieldRef(com.bookstore.domain.Book.publisher)

~~~ cartItem.book.shippingWeight ~~~
FieldRef(com.bookstore.domain.Book.shippingWeight)

~~~ cartItem.book.title ~~~
FieldRef(com.bookstore.domain.Book.title)

~~~ cartItem.id ~~~
FieldRef(com.bookstore.domain.CartItem.id)

~~~ cartItem.order ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Order)
| NullOp

~~~ cartItem.order.id ~~~
FieldRef(com.bookstore.domain.Order.id)

~~~ cartItem.order.orderDate ~~~
FieldRef(com.bookstore.domain.Order.orderDate)

~~~ cartItem.order.orderTotal ~~~
FieldRef(com.bookstore.domain.Order.orderTotal)

~~~ cartItem.order.orederStatus ~~~
FieldRef(com.bookstore.domain.Order.orederStatus)

~~~ cartItem.order.shippingDate ~~~
FieldRef(com.bookstore.domain.Order.shippingDate)

~~~ cartItem.order.shippingMethod ~~~
FieldRef(com.bookstore.domain.Order.shippingMethod)

~~~ cartItem.qty ~~~
FieldRef(com.bookstore.domain.CartItem.qty)

~~~ cartItem.shoppingCart ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp

~~~ cartItem.shoppingCart.GrandTotal ~~~
FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ cartItem.shoppingCart.id ~~~
FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ cartItem.subtotal ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| FieldRef(com.bookstore.domain.CartItem.subtotal)

~~~ cartTotal ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| +
| | cartTotal
| | MethodWontHandleOp
| cartTotal

~~~ condition ~~~
LessThanOrEquals
| this.book.inStockNumber
| 0

~~~ this.cartItemServiceImpl.cartItemRepository ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| Save
| | $r3
| | Tuple
| | | cartItem
| | | List
| | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | MethodWontHandleOp
| this.cartItemServiceImpl.cartItemRepository


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| MoreThan
| | this.book.inStockNumber
| | 0
| Save
| | $r3
| | Tuple
| | | cartItem
| | | List
| | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | MethodWontHandleOp
| $r6.cartItemRepository
analysis/Utils.java: resolveTree(): i = 0 child of top:MoreThan
| this.book.inStockNumber
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Save
| $r3
| Tuple
| | cartItem
| | List
| | | FieldRef(com.bookstore.domain.CartItem.id)
| | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r6.cartItemRepository
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r6.cartItemRepository
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Save
| $r3
| Tuple
| | cartItem
| | List
| | | FieldRef(com.bookstore.domain.CartItem.id)
| | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | MethodWontHandleOp
analysis/Utils.java: resolveTree(): i = 0 child of top:$r3
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Tuple
| cartItem
| List
| | FieldRef(com.bookstore.domain.CartItem.id)
| | FieldRef(com.bookstore.domain.CartItem.qty)
| | MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Tuple
| cartItem
| List
| | FieldRef(com.bookstore.domain.CartItem.id)
| | FieldRef(com.bookstore.domain.CartItem.qty)
| | MethodWontHandleOp
analysis/Utils.java: resolveTree(): i = 0 child of top:cartItem
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:List
| FieldRef(com.bookstore.domain.CartItem.id)
| FieldRef(com.bookstore.domain.CartItem.qty)
| MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: List
| FieldRef(com.bookstore.domain.CartItem.id)
| FieldRef(com.bookstore.domain.CartItem.qty)
| MethodWontHandleOp
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.bookstore.domain.CartItem.id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:FieldRef(com.bookstore.domain.CartItem.qty)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.bookstore.domain.CartItem.qty)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.bookstore.domain.CartItem.id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: cartItem
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r3
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MoreThan
| this.book.inStockNumber
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:this.book.inStockNumber
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.book.inStockNumber
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| MoreThan
| | this.book.inStockNumber
| | 0
| +
| | cartTotal
| | MethodWontHandleOp
| cartTotal
analysis/Utils.java: resolveTree(): i = 0 child of top:MoreThan
| this.book.inStockNumber
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:+
| cartTotal
| MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:cartTotal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: cartTotal
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: +
| cartTotal
| MethodWontHandleOp
analysis/Utils.java: resolveTree(): i = 0 child of top:cartTotal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: cartTotal
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MoreThan
| this.book.inStockNumber
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:this.book.inStockNumber
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.book.inStockNumber
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Join
| NextOp
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:NextOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:ClassRef(com.bookstore.domain.ShoppingCart)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.bookstore.domain.ShoppingCart)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NextOp
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:NextOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:ClassRef(com.bookstore.domain.Book)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.bookstore.domain.Book)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NextOp
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| MoreThan
| | this.book.inStockNumber
| | 0
| Save
| | $r3
| | Tuple
| | | cartItem
| | | List
| | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | MethodWontHandleOp
| this.cartItemServiceImpl.cartItemRepository
analysis/Utils.java: resolveTree(): i = 0 child of top:MoreThan
| this.book.inStockNumber
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Save
| $r3
| Tuple
| | cartItem
| | List
| | | FieldRef(com.bookstore.domain.CartItem.id)
| | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:this.cartItemServiceImpl.cartItemRepository
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.cartItemServiceImpl.cartItemRepository
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Save
| $r3
| Tuple
| | cartItem
| | List
| | | FieldRef(com.bookstore.domain.CartItem.id)
| | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | MethodWontHandleOp
analysis/Utils.java: resolveTree(): i = 0 child of top:$r3
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Tuple
| cartItem
| List
| | FieldRef(com.bookstore.domain.CartItem.id)
| | FieldRef(com.bookstore.domain.CartItem.qty)
| | MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Tuple
| cartItem
| List
| | FieldRef(com.bookstore.domain.CartItem.id)
| | FieldRef(com.bookstore.domain.CartItem.qty)
| | MethodWontHandleOp
analysis/Utils.java: resolveTree(): i = 0 child of top:cartItem
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:List
| FieldRef(com.bookstore.domain.CartItem.id)
| FieldRef(com.bookstore.domain.CartItem.qty)
| MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: List
| FieldRef(com.bookstore.domain.CartItem.id)
| FieldRef(com.bookstore.domain.CartItem.qty)
| MethodWontHandleOp
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.bookstore.domain.CartItem.id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:FieldRef(com.bookstore.domain.CartItem.qty)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.bookstore.domain.CartItem.qty)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.bookstore.domain.CartItem.id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: cartItem
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r3
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MoreThan
| this.book.inStockNumber
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:this.book.inStockNumber
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.book.inStockNumber
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:NextOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:ClassRef(com.bookstore.domain.Book)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.bookstore.domain.Book)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NextOp
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| $r8
analysis/Utils.java: resolveTree(): i = 0 child of top:MoreThan
| this.book.inStockNumber
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r8
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r8
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MoreThan
| this.book.inStockNumber
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:this.book.inStockNumber
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.book.inStockNumber
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: LessThanOrEquals
| this.book.inStockNumber
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:this.book.inStockNumber
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.book.inStockNumber
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Join
| NextOp
| ClassRef(com.bookstore.domain.Order)
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:NextOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:ClassRef(com.bookstore.domain.Order)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.bookstore.domain.Order)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NextOp
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| FieldRef(com.bookstore.domain.CartItem.subtotal)
analysis/Utils.java: resolveTree(): i = 0 child of top:MoreThan
| this.book.inStockNumber
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:FieldRef(com.bookstore.domain.CartItem.subtotal)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.bookstore.domain.CartItem.subtotal)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MoreThan
| this.book.inStockNumber
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:this.book.inStockNumber
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.book.inStockNumber
analysis/Utils.java: resolveTree(): return
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: updateShoppingCart
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 4
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.bookstore.service.impl.ShoppingCartServiceImpl, shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart, $r0 = new java.math.BigDecimal, specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0), cartTotal = $r0, $r1 = new com.bookstore.service.impl.CartItemServiceImpl, cartItems = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart), this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1, l4 = interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal), $r4 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), cartItem = (com.bookstore.domain.CartItem) $r4, $r5 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>(), $i0 = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>(), if $i0 <= 0 goto (branch), $r6 = new com.bookstore.service.impl.CartItemServiceImpl, virtualinvoke $r6.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem), this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r6, $r8 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>(), cartTotal = virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal), $r2 = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.repository.ShoppingCartRepository shoppingCartRepository>, interfaceinvoke $r2.<com.bookstore.repository.ShoppingCartRepository: java.lang.Object save(java.lang.Object)>(shoppingCart), return shoppingCart]
DIRRegionAnalyzer.java: constructDIR(): curUnit = goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()]
DIRRegionAnalyzer.java: constructDIR(): GOTO stmt in seq region
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock4
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: 
AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: 
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | BasicBlock4
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: 
DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $i0 ~~~
this.book.inStockNumber

~~~ $r4 ~~~
NextOp

~~~ $r5 ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp

~~~ $r5.active ~~~
this.book.active

~~~ $r5.author ~~~
this.book.author

~~~ $r5.bookImage ~~~
this.book.bookImage

~~~ $r5.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r5.category ~~~
this.book.category

~~~ $r5.description ~~~
this.book.description

~~~ $r5.format ~~~
this.book.format

~~~ $r5.id ~~~
this.book.id

~~~ $r5.inStockNumber ~~~
this.book.inStockNumber

~~~ $r5.isbn ~~~
this.book.isbn

~~~ $r5.language ~~~
this.book.language

~~~ $r5.listPrice ~~~
this.book.listPrice

~~~ $r5.numberOfPages ~~~
this.book.numberOfPages

~~~ $r5.ourPrice ~~~
this.book.ourPrice

~~~ $r5.publicationDate ~~~
this.book.publicationDate

~~~ $r5.publisher ~~~
this.book.publisher

~~~ $r5.shippingWeight ~~~
this.book.shippingWeight

~~~ $r5.title ~~~
this.book.title

~~~ $r6.cartItemRepository ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| Save
| | $r3
| | Tuple
| | | cartItem
| | | List
| | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | MethodWontHandleOp
| $r6.cartItemRepository

~~~ $r8 ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| $r8

~~~ cartItem.book ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp

~~~ cartItem.book.active ~~~
FieldRef(com.bookstore.domain.Book.active)

~~~ cartItem.book.author ~~~
FieldRef(com.bookstore.domain.Book.author)

~~~ cartItem.book.category ~~~
FieldRef(com.bookstore.domain.Book.category)

~~~ cartItem.book.description ~~~
FieldRef(com.bookstore.domain.Book.description)

~~~ cartItem.book.format ~~~
FieldRef(com.bookstore.domain.Book.format)

~~~ cartItem.book.id ~~~
FieldRef(com.bookstore.domain.Book.id)

~~~ cartItem.book.inStockNumber ~~~
FieldRef(com.bookstore.domain.Book.inStockNumber)

~~~ cartItem.book.isbn ~~~
FieldRef(com.bookstore.domain.Book.isbn)

~~~ cartItem.book.language ~~~
FieldRef(com.bookstore.domain.Book.language)

~~~ cartItem.book.listPrice ~~~
FieldRef(com.bookstore.domain.Book.listPrice)

~~~ cartItem.book.numberOfPages ~~~
FieldRef(com.bookstore.domain.Book.numberOfPages)

~~~ cartItem.book.ourPrice ~~~
FieldRef(com.bookstore.domain.Book.ourPrice)

~~~ cartItem.book.publicationDate ~~~
FieldRef(com.bookstore.domain.Book.publicationDate)

~~~ cartItem.book.publisher ~~~
FieldRef(com.bookstore.domain.Book.publisher)

~~~ cartItem.book.shippingWeight ~~~
FieldRef(com.bookstore.domain.Book.shippingWeight)

~~~ cartItem.book.title ~~~
FieldRef(com.bookstore.domain.Book.title)

~~~ cartItem.id ~~~
FieldRef(com.bookstore.domain.CartItem.id)

~~~ cartItem.order ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Order)
| NullOp

~~~ cartItem.order.id ~~~
FieldRef(com.bookstore.domain.Order.id)

~~~ cartItem.order.orderDate ~~~
FieldRef(com.bookstore.domain.Order.orderDate)

~~~ cartItem.order.orderTotal ~~~
FieldRef(com.bookstore.domain.Order.orderTotal)

~~~ cartItem.order.orederStatus ~~~
FieldRef(com.bookstore.domain.Order.orederStatus)

~~~ cartItem.order.shippingDate ~~~
FieldRef(com.bookstore.domain.Order.shippingDate)

~~~ cartItem.order.shippingMethod ~~~
FieldRef(com.bookstore.domain.Order.shippingMethod)

~~~ cartItem.qty ~~~
FieldRef(com.bookstore.domain.CartItem.qty)

~~~ cartItem.shoppingCart ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp

~~~ cartItem.shoppingCart.GrandTotal ~~~
FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ cartItem.shoppingCart.id ~~~
FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ cartItem.subtotal ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| FieldRef(com.bookstore.domain.CartItem.subtotal)

~~~ cartTotal ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| +
| | cartTotal
| | MethodWontHandleOp
| cartTotal

~~~ condition ~~~
LessThanOrEquals
| this.book.inStockNumber
| 0

~~~ this.cartItemServiceImpl.cartItemRepository ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| Save
| | $r3
| | Tuple
| | | cartItem
| | | List
| | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | MethodWontHandleOp
| this.cartItemServiceImpl.cartItemRepository


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $i0 ~~~
this.book.inStockNumber

~~~ $r4 ~~~
NextOp

~~~ $r5 ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp

~~~ $r5.active ~~~
this.book.active

~~~ $r5.author ~~~
this.book.author

~~~ $r5.bookImage ~~~
this.book.bookImage

~~~ $r5.bookToCartItemsList ~~~
this.book.bookToCartItemsList

~~~ $r5.category ~~~
this.book.category

~~~ $r5.description ~~~
this.book.description

~~~ $r5.format ~~~
this.book.format

~~~ $r5.id ~~~
this.book.id

~~~ $r5.inStockNumber ~~~
this.book.inStockNumber

~~~ $r5.isbn ~~~
this.book.isbn

~~~ $r5.language ~~~
this.book.language

~~~ $r5.listPrice ~~~
this.book.listPrice

~~~ $r5.numberOfPages ~~~
this.book.numberOfPages

~~~ $r5.ourPrice ~~~
this.book.ourPrice

~~~ $r5.publicationDate ~~~
this.book.publicationDate

~~~ $r5.publisher ~~~
this.book.publisher

~~~ $r5.shippingWeight ~~~
this.book.shippingWeight

~~~ $r5.title ~~~
this.book.title

~~~ $r6.cartItemRepository ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| Save
| | $r3
| | Tuple
| | | cartItem
| | | List
| | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | MethodWontHandleOp
| $r6.cartItemRepository

~~~ $r8 ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| $r8

~~~ cartItem.book ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp

~~~ cartItem.book.active ~~~
FieldRef(com.bookstore.domain.Book.active)

~~~ cartItem.book.author ~~~
FieldRef(com.bookstore.domain.Book.author)

~~~ cartItem.book.category ~~~
FieldRef(com.bookstore.domain.Book.category)

~~~ cartItem.book.description ~~~
FieldRef(com.bookstore.domain.Book.description)

~~~ cartItem.book.format ~~~
FieldRef(com.bookstore.domain.Book.format)

~~~ cartItem.book.id ~~~
FieldRef(com.bookstore.domain.Book.id)

~~~ cartItem.book.inStockNumber ~~~
FieldRef(com.bookstore.domain.Book.inStockNumber)

~~~ cartItem.book.isbn ~~~
FieldRef(com.bookstore.domain.Book.isbn)

~~~ cartItem.book.language ~~~
FieldRef(com.bookstore.domain.Book.language)

~~~ cartItem.book.listPrice ~~~
FieldRef(com.bookstore.domain.Book.listPrice)

~~~ cartItem.book.numberOfPages ~~~
FieldRef(com.bookstore.domain.Book.numberOfPages)

~~~ cartItem.book.ourPrice ~~~
FieldRef(com.bookstore.domain.Book.ourPrice)

~~~ cartItem.book.publicationDate ~~~
FieldRef(com.bookstore.domain.Book.publicationDate)

~~~ cartItem.book.publisher ~~~
FieldRef(com.bookstore.domain.Book.publisher)

~~~ cartItem.book.shippingWeight ~~~
FieldRef(com.bookstore.domain.Book.shippingWeight)

~~~ cartItem.book.title ~~~
FieldRef(com.bookstore.domain.Book.title)

~~~ cartItem.id ~~~
FieldRef(com.bookstore.domain.CartItem.id)

~~~ cartItem.order ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.Order)
| NullOp

~~~ cartItem.order.id ~~~
FieldRef(com.bookstore.domain.Order.id)

~~~ cartItem.order.orderDate ~~~
FieldRef(com.bookstore.domain.Order.orderDate)

~~~ cartItem.order.orderTotal ~~~
FieldRef(com.bookstore.domain.Order.orderTotal)

~~~ cartItem.order.orederStatus ~~~
FieldRef(com.bookstore.domain.Order.orederStatus)

~~~ cartItem.order.shippingDate ~~~
FieldRef(com.bookstore.domain.Order.shippingDate)

~~~ cartItem.order.shippingMethod ~~~
FieldRef(com.bookstore.domain.Order.shippingMethod)

~~~ cartItem.qty ~~~
FieldRef(com.bookstore.domain.CartItem.qty)

~~~ cartItem.shoppingCart ~~~
Join
| NextOp
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp

~~~ cartItem.shoppingCart.GrandTotal ~~~
FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ cartItem.shoppingCart.id ~~~
FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ cartItem.subtotal ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| FieldRef(com.bookstore.domain.CartItem.subtotal)

~~~ cartTotal ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| +
| | cartTotal
| | MethodWontHandleOp
| cartTotal

~~~ condition ~~~
LessThanOrEquals
| this.book.inStockNumber
| 0

~~~ this.cartItemServiceImpl.cartItemRepository ~~~
?
| MoreThan
| | this.book.inStockNumber
| | 0
| Save
| | $r3
| | Tuple
| | | cartItem
| | | List
| | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | MethodWontHandleOp
| this.cartItemServiceImpl.cartItemRepository


DIR.java: updateRegion(): update region entry: cartItem.shoppingCart.GrandTotal=FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)
DIR.java: updateRegion(): update region entry: $r6.cartItemRepository=?
| MoreThan
| | this.book.inStockNumber
| | 0
| Save
| | $r3
| | Tuple
| | | cartItem
| | | List
| | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | MethodWontHandleOp
| $r6.cartItemRepository
DIR.java: updateRegion(): update region entry: $r5.isbn=this.book.isbn
DIR.java: updateRegion(): update region entry: $i0=this.book.inStockNumber
DIR.java: updateRegion(): update region entry: $r5.listPrice=this.book.listPrice
DIR.java: updateRegion(): update region entry: $r5.id=this.book.id
DIR.java: updateRegion(): update region entry: $r5.bookToCartItemsList=this.book.bookToCartItemsList
DIR.java: updateRegion(): update region entry: cartItem.qty=FieldRef(com.bookstore.domain.CartItem.qty)
DIR.java: updateRegion(): update region entry: cartItem.book.title=FieldRef(com.bookstore.domain.Book.title)
DIR.java: updateRegion(): update region entry: cartItem.order.shippingMethod=FieldRef(com.bookstore.domain.Order.shippingMethod)
DIR.java: updateRegion(): update region entry: cartTotal=?
| MoreThan
| | this.book.inStockNumber
| | 0
| +
| | cartTotal
| | MethodWontHandleOp
| cartTotal
DIR.java: updateRegion(): update region entry: $r5.numberOfPages=this.book.numberOfPages
DIR.java: updateRegion(): update region entry: cartItem.shoppingCart=Join
| NextOp
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp
DIR.java: updateRegion(): update region entry: cartItem.order.id=FieldRef(com.bookstore.domain.Order.id)
DIR.java: updateRegion(): update region entry: cartItem.book=Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp
DIR.java: updateRegion(): update region entry: $r5.ourPrice=this.book.ourPrice
DIR.java: updateRegion(): update region entry: this.cartItemServiceImpl.cartItemRepository=?
| MoreThan
| | this.book.inStockNumber
| | 0
| Save
| | $r3
| | Tuple
| | | cartItem
| | | List
| | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | MethodWontHandleOp
| this.cartItemServiceImpl.cartItemRepository
DIR.java: updateRegion(): update region entry: cartItem.book.numberOfPages=FieldRef(com.bookstore.domain.Book.numberOfPages)
DIR.java: updateRegion(): update region entry: $r5.language=this.book.language
DIR.java: updateRegion(): update region entry: cartItem.book.active=FieldRef(com.bookstore.domain.Book.active)
DIR.java: updateRegion(): update region entry: cartItem.book.author=FieldRef(com.bookstore.domain.Book.author)
DIR.java: updateRegion(): update region entry: $r4=NextOp
DIR.java: updateRegion(): update region entry: cartItem.book.publicationDate=FieldRef(com.bookstore.domain.Book.publicationDate)
DIR.java: updateRegion(): update region entry: $r5=Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp
DIR.java: updateRegion(): update region entry: $r8=?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| $r8
DIR.java: updateRegion(): update region entry: $r5.publisher=this.book.publisher
DIR.java: updateRegion(): update region entry: $r5.category=this.book.category
DIR.java: updateRegion(): update region entry: $r5.shippingWeight=this.book.shippingWeight
DIR.java: updateRegion(): update region entry: condition=LessThanOrEquals
| this.book.inStockNumber
| 0
DIR.java: updateRegion(): update region entry: cartItem.order.orederStatus=FieldRef(com.bookstore.domain.Order.orederStatus)
DIR.java: updateRegion(): update region entry: $r5.format=this.book.format
DIR.java: updateRegion(): update region entry: cartItem.id=FieldRef(com.bookstore.domain.CartItem.id)
DIR.java: updateRegion(): update region entry: cartItem.book.category=FieldRef(com.bookstore.domain.Book.category)
DIR.java: updateRegion(): update region entry: cartItem.book.format=FieldRef(com.bookstore.domain.Book.format)
DIR.java: updateRegion(): update region entry: cartItem.order=Join
| NextOp
| ClassRef(com.bookstore.domain.Order)
| NullOp
DIR.java: updateRegion(): update region entry: cartItem.subtotal=?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| FieldRef(com.bookstore.domain.CartItem.subtotal)
DIR.java: updateRegion(): update region entry: cartItem.book.id=FieldRef(com.bookstore.domain.Book.id)
DIR.java: updateRegion(): update region entry: $r5.author=this.book.author
DIR.java: updateRegion(): update region entry: cartItem.order.orderTotal=FieldRef(com.bookstore.domain.Order.orderTotal)
DIR.java: updateRegion(): update region entry: cartItem.book.listPrice=FieldRef(com.bookstore.domain.Book.listPrice)
DIR.java: updateRegion(): update region entry: $r5.publicationDate=this.book.publicationDate
DIR.java: updateRegion(): update region entry: cartItem.book.ourPrice=FieldRef(com.bookstore.domain.Book.ourPrice)
DIR.java: updateRegion(): update region entry: $r5.inStockNumber=this.book.inStockNumber
DIR.java: updateRegion(): update region entry: $r5.active=this.book.active
DIR.java: updateRegion(): update region entry: $r5.description=this.book.description
DIR.java: updateRegion(): update region entry: cartItem.book.inStockNumber=FieldRef(com.bookstore.domain.Book.inStockNumber)
DIR.java: updateRegion(): update region entry: cartItem.shoppingCart.id=FieldRef(com.bookstore.domain.ShoppingCart.id)
DIR.java: updateRegion(): update region entry: $r5.bookImage=this.book.bookImage
DIR.java: updateRegion(): update region entry: cartItem.book.language=FieldRef(com.bookstore.domain.Book.language)
DIR.java: updateRegion(): update region entry: cartItem.book.publisher=FieldRef(com.bookstore.domain.Book.publisher)
DIR.java: updateRegion(): update region entry: cartItem.book.shippingWeight=FieldRef(com.bookstore.domain.Book.shippingWeight)
DIR.java: updateRegion(): update region entry: cartItem.book.isbn=FieldRef(com.bookstore.domain.Book.isbn)
DIR.java: updateRegion(): update region entry: cartItem.order.shippingDate=FieldRef(com.bookstore.domain.Order.shippingDate)
DIR.java: updateRegion(): update region entry: cartItem.order.orderDate=FieldRef(com.bookstore.domain.Order.orderDate)
DIR.java: updateRegion(): update region entry: $r5.title=this.book.title
DIR.java: updateRegion(): update region entry: cartItem.book.description=FieldRef(com.bookstore.domain.Book.description)
DIRLoopRegionAnalyzer.java: constructDIR(): Done with analyzing loop body
DIRLoopRegionAnalyzer.java: constructDIR(): bodyVEMap: {cartItem.shoppingCart.GrandTotal=FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal), $r6.cartItemRepository=?
| MoreThan
| | this.book.inStockNumber
| | 0
| Save
| | $r3
| | Tuple
| | | cartItem
| | | List
| | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | MethodWontHandleOp
| $r6.cartItemRepository, $r5.isbn=this.book.isbn, $i0=this.book.inStockNumber, $r5.listPrice=this.book.listPrice, $r5.id=this.book.id, $r5.bookToCartItemsList=this.book.bookToCartItemsList, cartItem.qty=FieldRef(com.bookstore.domain.CartItem.qty), cartItem.book.title=FieldRef(com.bookstore.domain.Book.title), cartItem.order.shippingMethod=FieldRef(com.bookstore.domain.Order.shippingMethod), cartTotal=?
| MoreThan
| | this.book.inStockNumber
| | 0
| +
| | cartTotal
| | MethodWontHandleOp
| cartTotal, $r5.numberOfPages=this.book.numberOfPages, cartItem.shoppingCart=Join
| NextOp
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp, cartItem.order.id=FieldRef(com.bookstore.domain.Order.id), cartItem.book=Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp, $r5.ourPrice=this.book.ourPrice, this.cartItemServiceImpl.cartItemRepository=?
| MoreThan
| | this.book.inStockNumber
| | 0
| Save
| | $r3
| | Tuple
| | | cartItem
| | | List
| | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | MethodWontHandleOp
| this.cartItemServiceImpl.cartItemRepository, cartItem.book.numberOfPages=FieldRef(com.bookstore.domain.Book.numberOfPages), $r5.language=this.book.language, cartItem.book.active=FieldRef(com.bookstore.domain.Book.active), cartItem.book.author=FieldRef(com.bookstore.domain.Book.author), $r4=NextOp, cartItem.book.publicationDate=FieldRef(com.bookstore.domain.Book.publicationDate), $r5=Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp, $r8=?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| $r8, $r5.publisher=this.book.publisher, $r5.category=this.book.category, $r5.shippingWeight=this.book.shippingWeight, condition=LessThanOrEquals
| this.book.inStockNumber
| 0, cartItem.order.orederStatus=FieldRef(com.bookstore.domain.Order.orederStatus), $r5.format=this.book.format, cartItem.id=FieldRef(com.bookstore.domain.CartItem.id), cartItem.book.category=FieldRef(com.bookstore.domain.Book.category), cartItem.book.format=FieldRef(com.bookstore.domain.Book.format), cartItem.order=Join
| NextOp
| ClassRef(com.bookstore.domain.Order)
| NullOp, cartItem.subtotal=?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| FieldRef(com.bookstore.domain.CartItem.subtotal), cartItem.book.id=FieldRef(com.bookstore.domain.Book.id), $r5.author=this.book.author, cartItem.order.orderTotal=FieldRef(com.bookstore.domain.Order.orderTotal), cartItem.book.listPrice=FieldRef(com.bookstore.domain.Book.listPrice), $r5.publicationDate=this.book.publicationDate, cartItem.book.ourPrice=FieldRef(com.bookstore.domain.Book.ourPrice), $r5.inStockNumber=this.book.inStockNumber, $r5.active=this.book.active, $r5.description=this.book.description, cartItem.book.inStockNumber=FieldRef(com.bookstore.domain.Book.inStockNumber), cartItem.shoppingCart.id=FieldRef(com.bookstore.domain.ShoppingCart.id), $r5.bookImage=this.book.bookImage, cartItem.book.language=FieldRef(com.bookstore.domain.Book.language), cartItem.book.publisher=FieldRef(com.bookstore.domain.Book.publisher), cartItem.book.shippingWeight=FieldRef(com.bookstore.domain.Book.shippingWeight), cartItem.book.isbn=FieldRef(com.bookstore.domain.Book.isbn), cartItem.order.shippingDate=FieldRef(com.bookstore.domain.Order.shippingDate), cartItem.order.orderDate=FieldRef(com.bookstore.domain.Order.orderDate), $r5.title=this.book.title, cartItem.book.description=FieldRef(com.bookstore.domain.Book.description)}
DIRLoopRegionAnalyzer.java: constructDIR(): headVEMap: {condition=Equals
| InvokeMethod
| | l4
| | HasNext()
| 0, $z0=InvokeMethod
| l4
| HasNext()}
DIRLoopRegionAnalyzer.java: constructDIR(): headR: | BasicBlock1
DIRLoopRegionAnalyzer.java: getLoopingCol(): headDIR: ~~~ $z0 ~~~
InvokeMethod
| l4
| HasNext()

~~~ condition ~~~
Equals
| InvokeMethod
| | l4
| | HasNext()
| 0


DIRLoopRegionAnalyzer.java: constructDIR(): loopingVar: l4
DIRLoopRegionAnalyzer.java: constructDIR(): foldVars: [cartItem.shoppingCart.GrandTotal, $r6.cartItemRepository, $r5.isbn, $i0, $r5.listPrice, $r5.id, $r5.bookToCartItemsList, cartItem.qty, cartItem.book.title, cartItem.order.shippingMethod, cartTotal, $r5.numberOfPages, cartItem.shoppingCart, cartItem.order.id, cartItem.book, $r5.ourPrice, this.cartItemServiceImpl.cartItemRepository, cartItem.book.numberOfPages, $r5.language, cartItem.book.active, cartItem.book.author, $r4, cartItem.book.publicationDate, $r5, $r8, $r5.publisher, $r5.category, $r5.shippingWeight, condition, cartItem.order.orederStatus, $r5.format, cartItem.id, cartItem.book.category, cartItem.book.format, cartItem.order, cartItem.subtotal, cartItem.book.id, $r5.author, cartItem.order.orderTotal, cartItem.book.listPrice, $r5.publicationDate, l4, cartItem.book.ourPrice, $r5.inStockNumber, $r5.active, $r5.description, cartItem.book.inStockNumber, cartItem.shoppingCart.id, $r5.bookImage, cartItem.book.language, cartItem.book.publisher, cartItem.book.shippingWeight, cartItem.book.isbn, cartItem.order.shippingDate, cartItem.order.orderDate, $r5.title, cartItem.book.description]
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.shoppingCart.GrandTotal
Body_Expr:
FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r6.cartItemRepository
Body_Expr:
?
| MoreThan
| | this.book.inStockNumber
| | 0
| Save
| | $r3
| | Tuple
| | | cartItem
| | | List
| | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | MethodWontHandleOp
| <v2>
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r5.isbn
Body_Expr:
this.book.isbn
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $i0
Body_Expr:
this.book.inStockNumber
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r5.listPrice
Body_Expr:
this.book.listPrice
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r5.id
Body_Expr:
this.book.id
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r5.bookToCartItemsList
Body_Expr:
this.book.bookToCartItemsList
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.qty
Body_Expr:
FieldRef(com.bookstore.domain.CartItem.qty)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.book.title
Body_Expr:
FieldRef(com.bookstore.domain.Book.title)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.order.shippingMethod
Body_Expr:
FieldRef(com.bookstore.domain.Order.shippingMethod)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartTotal
Body_Expr:
?
| MoreThan
| | this.book.inStockNumber
| | 0
| +
| | <v11>
| | MethodWontHandleOp
| <v11>
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r5.numberOfPages
Body_Expr:
this.book.numberOfPages
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.shoppingCart
Body_Expr:
Join
| NextOp
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.order.id
Body_Expr:
FieldRef(com.bookstore.domain.Order.id)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.book
Body_Expr:
Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r5.ourPrice
Body_Expr:
this.book.ourPrice
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: this.cartItemServiceImpl.cartItemRepository
Body_Expr:
?
| MoreThan
| | this.book.inStockNumber
| | 0
| Save
| | $r3
| | Tuple
| | | cartItem
| | | List
| | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | MethodWontHandleOp
| <v17>
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.book.numberOfPages
Body_Expr:
FieldRef(com.bookstore.domain.Book.numberOfPages)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r5.language
Body_Expr:
this.book.language
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.book.active
Body_Expr:
FieldRef(com.bookstore.domain.Book.active)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.book.author
Body_Expr:
FieldRef(com.bookstore.domain.Book.author)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r4
Body_Expr:
NextOp
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.book.publicationDate
Body_Expr:
FieldRef(com.bookstore.domain.Book.publicationDate)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r5
Body_Expr:
Join
| NextOp
| ClassRef(com.bookstore.domain.Book)
| NullOp
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r8
Body_Expr:
?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| <v25>
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r5.publisher
Body_Expr:
this.book.publisher
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r5.category
Body_Expr:
this.book.category
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r5.shippingWeight
Body_Expr:
this.book.shippingWeight
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: condition
Body_Expr:
LessThanOrEquals
| this.book.inStockNumber
| 0
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.order.orederStatus
Body_Expr:
FieldRef(com.bookstore.domain.Order.orederStatus)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r5.format
Body_Expr:
this.book.format
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.id
Body_Expr:
FieldRef(com.bookstore.domain.CartItem.id)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.book.category
Body_Expr:
FieldRef(com.bookstore.domain.Book.category)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.book.format
Body_Expr:
FieldRef(com.bookstore.domain.Book.format)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.order
Body_Expr:
Join
| NextOp
| ClassRef(com.bookstore.domain.Order)
| NullOp
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.subtotal
Body_Expr:
?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| FieldRef(com.bookstore.domain.CartItem.subtotal)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.book.id
Body_Expr:
FieldRef(com.bookstore.domain.Book.id)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r5.author
Body_Expr:
this.book.author
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.order.orderTotal
Body_Expr:
FieldRef(com.bookstore.domain.Order.orderTotal)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.book.listPrice
Body_Expr:
FieldRef(com.bookstore.domain.Book.listPrice)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r5.publicationDate
Body_Expr:
this.book.publicationDate
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: l4
DIRLoopRegionAnalyzer.java: constructDIR(): mapping new coll l4_new -> Fold
| FuncExpr
| | AddWithFieldExprs
| | | <v42>
| | | Tuple
| | | | l4
| | | | List
| | | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | | ?
| | | | | | MoreThan
| | | | | | | this.book.inStockNumber
| | | | | | | 0
| | | | | | MethodWontHandleOp
| | | | | | FieldRef(com.bookstore.domain.CartItem.subtotal)
| l4_new
| l4
| NextOp
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.book.ourPrice
Body_Expr:
FieldRef(com.bookstore.domain.Book.ourPrice)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r5.inStockNumber
Body_Expr:
this.book.inStockNumber
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r5.active
Body_Expr:
this.book.active
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r5.description
Body_Expr:
this.book.description
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.book.inStockNumber
Body_Expr:
FieldRef(com.bookstore.domain.Book.inStockNumber)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.shoppingCart.id
Body_Expr:
FieldRef(com.bookstore.domain.ShoppingCart.id)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r5.bookImage
Body_Expr:
this.book.bookImage
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.book.language
Body_Expr:
FieldRef(com.bookstore.domain.Book.language)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.book.publisher
Body_Expr:
FieldRef(com.bookstore.domain.Book.publisher)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.book.shippingWeight
Body_Expr:
FieldRef(com.bookstore.domain.Book.shippingWeight)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.book.isbn
Body_Expr:
FieldRef(com.bookstore.domain.Book.isbn)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.order.shippingDate
Body_Expr:
FieldRef(com.bookstore.domain.Order.shippingDate)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.order.orderDate
Body_Expr:
FieldRef(com.bookstore.domain.Order.orderDate)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r5.title
Body_Expr:
this.book.title
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: cartItem.book.description
Body_Expr:
FieldRef(com.bookstore.domain.Book.description)
DIRLoopRegionAnalyzer.java: constructDIR(): loopDIR: {cartItem.shoppingCart.GrandTotal=UnknownNode, $r6.cartItemRepository=UnknownNode, $r5.isbn=UnknownNode, $i0=UnknownNode, $r5.listPrice=UnknownNode, $r5.id=UnknownNode, $r5.bookToCartItemsList=UnknownNode, cartItem.qty=UnknownNode, cartItem.book.title=UnknownNode, cartItem.order.shippingMethod=UnknownNode, cartTotal=UnknownNode, $r5.numberOfPages=UnknownNode, cartItem.shoppingCart=UnknownNode, cartItem.order.id=UnknownNode, cartItem.book=UnknownNode, $r5.ourPrice=UnknownNode, this.cartItemServiceImpl.cartItemRepository=UnknownNode, cartItem.book.numberOfPages=UnknownNode, $r5.language=UnknownNode, cartItem.book.active=UnknownNode, cartItem.book.author=UnknownNode, $r4=UnknownNode, cartItem.book.publicationDate=UnknownNode, $r5=UnknownNode, $r8=UnknownNode, $r5.publisher=UnknownNode, $r5.category=UnknownNode, $r5.shippingWeight=UnknownNode, condition=UnknownNode, cartItem.order.orederStatus=UnknownNode, $r5.format=UnknownNode, cartItem.id=UnknownNode, cartItem.book.category=UnknownNode, cartItem.book.format=UnknownNode, cartItem.order=UnknownNode, cartItem.subtotal=UnknownNode, cartItem.book.id=UnknownNode, $r5.author=UnknownNode, cartItem.order.orderTotal=UnknownNode, cartItem.book.listPrice=UnknownNode, $r5.publicationDate=UnknownNode, cartItem.book.ourPrice=UnknownNode, $r5.inStockNumber=UnknownNode, $r5.active=UnknownNode, $r5.description=UnknownNode, cartItem.book.inStockNumber=UnknownNode, cartItem.shoppingCart.id=UnknownNode, $r5.bookImage=UnknownNode, cartItem.book.language=UnknownNode, cartItem.book.publisher=UnknownNode, cartItem.book.shippingWeight=UnknownNode, cartItem.book.isbn=UnknownNode, cartItem.order.shippingDate=UnknownNode, cartItem.order.orderDate=UnknownNode, $r5.title=UnknownNode, cartItem.book.description=UnknownNode, l4_new=Fold
| FuncExpr
| | AddWithFieldExprs
| | | <v42>
| | | Tuple
| | | | l4
| | | | List
| | | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | | ?
| | | | | | MoreThan
| | | | | | | this.book.inStockNumber
| | | | | | | 0
| | | | | | MethodWontHandleOp
| | | | | | FieldRef(com.bookstore.domain.CartItem.subtotal)
| l4_new
| l4
| NextOp}
AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $i0 ~~~
UnknownNode

~~~ $r4 ~~~
UnknownNode

~~~ $r5 ~~~
UnknownNode

~~~ $r5.active ~~~
UnknownNode

~~~ $r5.author ~~~
UnknownNode

~~~ $r5.bookImage ~~~
UnknownNode

~~~ $r5.bookToCartItemsList ~~~
UnknownNode

~~~ $r5.category ~~~
UnknownNode

~~~ $r5.description ~~~
UnknownNode

~~~ $r5.format ~~~
UnknownNode

~~~ $r5.id ~~~
UnknownNode

~~~ $r5.inStockNumber ~~~
UnknownNode

~~~ $r5.isbn ~~~
UnknownNode

~~~ $r5.language ~~~
UnknownNode

~~~ $r5.listPrice ~~~
UnknownNode

~~~ $r5.numberOfPages ~~~
UnknownNode

~~~ $r5.ourPrice ~~~
UnknownNode

~~~ $r5.publicationDate ~~~
UnknownNode

~~~ $r5.publisher ~~~
UnknownNode

~~~ $r5.shippingWeight ~~~
UnknownNode

~~~ $r5.title ~~~
UnknownNode

~~~ $r6.cartItemRepository ~~~
UnknownNode

~~~ $r8 ~~~
UnknownNode

~~~ cartItem.book ~~~
UnknownNode

~~~ cartItem.book.active ~~~
UnknownNode

~~~ cartItem.book.author ~~~
UnknownNode

~~~ cartItem.book.category ~~~
UnknownNode

~~~ cartItem.book.description ~~~
UnknownNode

~~~ cartItem.book.format ~~~
UnknownNode

~~~ cartItem.book.id ~~~
UnknownNode

~~~ cartItem.book.inStockNumber ~~~
UnknownNode

~~~ cartItem.book.isbn ~~~
UnknownNode

~~~ cartItem.book.language ~~~
UnknownNode

~~~ cartItem.book.listPrice ~~~
UnknownNode

~~~ cartItem.book.numberOfPages ~~~
UnknownNode

~~~ cartItem.book.ourPrice ~~~
UnknownNode

~~~ cartItem.book.publicationDate ~~~
UnknownNode

~~~ cartItem.book.publisher ~~~
UnknownNode

~~~ cartItem.book.shippingWeight ~~~
UnknownNode

~~~ cartItem.book.title ~~~
UnknownNode

~~~ cartItem.id ~~~
UnknownNode

~~~ cartItem.order ~~~
UnknownNode

~~~ cartItem.order.id ~~~
UnknownNode

~~~ cartItem.order.orderDate ~~~
UnknownNode

~~~ cartItem.order.orderTotal ~~~
UnknownNode

~~~ cartItem.order.orederStatus ~~~
UnknownNode

~~~ cartItem.order.shippingDate ~~~
UnknownNode

~~~ cartItem.order.shippingMethod ~~~
UnknownNode

~~~ cartItem.qty ~~~
UnknownNode

~~~ cartItem.shoppingCart ~~~
UnknownNode

~~~ cartItem.shoppingCart.GrandTotal ~~~
UnknownNode

~~~ cartItem.shoppingCart.id ~~~
UnknownNode

~~~ cartItem.subtotal ~~~
UnknownNode

~~~ cartTotal ~~~
UnknownNode

~~~ condition ~~~
UnknownNode

~~~ l4_new ~~~
Fold
| FuncExpr
| | AddWithFieldExprs
| | | <v42>
| | | Tuple
| | | | l4
| | | | List
| | | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | | ?
| | | | | | MoreThan
| | | | | | | this.book.inStockNumber
| | | | | | | 0
| | | | | | MethodWontHandleOp
| | | | | | FieldRef(com.bookstore.domain.CartItem.subtotal)
| l4_new
| l4
| NextOp

~~~ this.cartItemServiceImpl.cartItemRepository ~~~
UnknownNode


DIR.java: updateRegion(): update region entry: cartItem.shoppingCart.GrandTotal=UnknownNode
DIR.java: updateRegion(): update region entry: $r6.cartItemRepository=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.isbn=UnknownNode
DIR.java: updateRegion(): update region entry: $i0=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.listPrice=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.id=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.bookToCartItemsList=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.qty=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.title=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.order.shippingMethod=UnknownNode
DIR.java: updateRegion(): update region entry: cartTotal=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.numberOfPages=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.shoppingCart=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.order.id=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.ourPrice=UnknownNode
DIR.java: updateRegion(): update region entry: this.cartItemServiceImpl.cartItemRepository=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.numberOfPages=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.language=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.active=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.author=UnknownNode
DIR.java: updateRegion(): update region entry: $r4=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.publicationDate=UnknownNode
DIR.java: updateRegion(): update region entry: $r5=UnknownNode
DIR.java: updateRegion(): update region entry: $r8=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.publisher=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.category=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.shippingWeight=UnknownNode
DIR.java: updateRegion(): update region entry: condition=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.order.orederStatus=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.format=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.id=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.category=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.format=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.order=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.subtotal=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.id=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.author=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.order.orderTotal=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.listPrice=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.publicationDate=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.ourPrice=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.inStockNumber=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.active=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.description=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.inStockNumber=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.shoppingCart.id=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.bookImage=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.language=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.publisher=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.shippingWeight=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.isbn=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.order.shippingDate=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.order.orderDate=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.title=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.description=UnknownNode
DIR.java: updateRegion(): update region entry: l4_new=Fold
| FuncExpr
| | AddWithFieldExprs
| | | <v42>
| | | Tuple
| | | | l4
| | | | List
| | | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | | ?
| | | | | | MoreThan
| | | | | | | this.book.inStockNumber
| | | | | | | 0
| | | | | | MethodWontHandleOp
| | | | | | FieldRef(com.bookstore.domain.CartItem.subtotal)
| l4_new
| l4
| NextOp
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | WhileLoop
| | BasicBlock1
| | Sequential
| | | IfThen
| | | | BasicBlock2
| | | | BasicBlock3
| | | BasicBlock4

DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ $i0 ~~~
UnknownNode

~~~ $r4 ~~~
UnknownNode

~~~ $r5 ~~~
UnknownNode

~~~ $r5.active ~~~
UnknownNode

~~~ $r5.author ~~~
UnknownNode

~~~ $r5.bookImage ~~~
UnknownNode

~~~ $r5.bookToCartItemsList ~~~
UnknownNode

~~~ $r5.category ~~~
UnknownNode

~~~ $r5.description ~~~
UnknownNode

~~~ $r5.format ~~~
UnknownNode

~~~ $r5.id ~~~
UnknownNode

~~~ $r5.inStockNumber ~~~
UnknownNode

~~~ $r5.isbn ~~~
UnknownNode

~~~ $r5.language ~~~
UnknownNode

~~~ $r5.listPrice ~~~
UnknownNode

~~~ $r5.numberOfPages ~~~
UnknownNode

~~~ $r5.ourPrice ~~~
UnknownNode

~~~ $r5.publicationDate ~~~
UnknownNode

~~~ $r5.publisher ~~~
UnknownNode

~~~ $r5.shippingWeight ~~~
UnknownNode

~~~ $r5.title ~~~
UnknownNode

~~~ $r6.cartItemRepository ~~~
UnknownNode

~~~ $r8 ~~~
UnknownNode

~~~ cartItem.book ~~~
UnknownNode

~~~ cartItem.book.active ~~~
UnknownNode

~~~ cartItem.book.author ~~~
UnknownNode

~~~ cartItem.book.category ~~~
UnknownNode

~~~ cartItem.book.description ~~~
UnknownNode

~~~ cartItem.book.format ~~~
UnknownNode

~~~ cartItem.book.id ~~~
UnknownNode

~~~ cartItem.book.inStockNumber ~~~
UnknownNode

~~~ cartItem.book.isbn ~~~
UnknownNode

~~~ cartItem.book.language ~~~
UnknownNode

~~~ cartItem.book.listPrice ~~~
UnknownNode

~~~ cartItem.book.numberOfPages ~~~
UnknownNode

~~~ cartItem.book.ourPrice ~~~
UnknownNode

~~~ cartItem.book.publicationDate ~~~
UnknownNode

~~~ cartItem.book.publisher ~~~
UnknownNode

~~~ cartItem.book.shippingWeight ~~~
UnknownNode

~~~ cartItem.book.title ~~~
UnknownNode

~~~ cartItem.id ~~~
UnknownNode

~~~ cartItem.order ~~~
UnknownNode

~~~ cartItem.order.id ~~~
UnknownNode

~~~ cartItem.order.orderDate ~~~
UnknownNode

~~~ cartItem.order.orderTotal ~~~
UnknownNode

~~~ cartItem.order.orederStatus ~~~
UnknownNode

~~~ cartItem.order.shippingDate ~~~
UnknownNode

~~~ cartItem.order.shippingMethod ~~~
UnknownNode

~~~ cartItem.qty ~~~
UnknownNode

~~~ cartItem.shoppingCart ~~~
UnknownNode

~~~ cartItem.shoppingCart.GrandTotal ~~~
UnknownNode

~~~ cartItem.shoppingCart.id ~~~
UnknownNode

~~~ cartItem.subtotal ~~~
UnknownNode

~~~ cartTotal ~~~
UnknownNode

~~~ condition ~~~
UnknownNode

~~~ l4_new ~~~
Fold
| FuncExpr
| | AddWithFieldExprs
| | | <v42>
| | | Tuple
| | | | l4
| | | | List
| | | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | | ?
| | | | | | MoreThan
| | | | | | | this.book.inStockNumber
| | | | | | | 0
| | | | | | MethodWontHandleOp
| | | | | | FieldRef(com.bookstore.domain.CartItem.subtotal)
| l4_new
| l4
| NextOp

~~~ this.cartItemServiceImpl.cartItemRepository ~~~
UnknownNode


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $r0 ~~~
BottomNode

~~~ cartItems ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ cartTotal ~~~
BottomNode

~~~ l4 ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Fold
| FuncExpr
| | AddWithFieldExprs
| | | <v42>
| | | Tuple
| | | | l4
| | | | List
| | | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | | ?
| | | | | | MoreThan
| | | | | | | this.book.inStockNumber
| | | | | | | 0
| | | | | | MethodWontHandleOp
| | | | | | FieldRef(com.bookstore.domain.CartItem.subtotal)
| l4_new
| l4
| NextOp
analysis/Utils.java: resolveTree(): i = 0 child of top:FuncExpr
| AddWithFieldExprs
| | <v42>
| | Tuple
| | | l4
| | | List
| | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | ?
| | | | | MoreThan
| | | | | | this.book.inStockNumber
| | | | | | 0
| | | | | MethodWontHandleOp
| | | | | FieldRef(com.bookstore.domain.CartItem.subtotal)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:l4_new
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:l4
analysis/Utils.java: resolveTree(): top: Fold
| FuncExpr
| | AddWithFieldExprs
| | | <v42>
| | | Tuple
| | | | l4
| | | | List
| | | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | | ?
| | | | | | MoreThan
| | | | | | | this.book.inStockNumber
| | | | | | | 0
| | | | | | MethodWontHandleOp
| | | | | | FieldRef(com.bookstore.domain.CartItem.subtotal)
| l4_new
| l4
| NextOp
analysis/Utils.java: resolveTree(): resolvedValChild: Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
analysis/Utils.java: resolveTree(): new top: Fold
| FuncExpr
| | AddWithFieldExprs
| | | <v42>
| | | Tuple
| | | | l4
| | | | List
| | | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | | ?
| | | | | | MoreThan
| | | | | | | this.book.inStockNumber
| | | | | | | 0
| | | | | | MethodWontHandleOp
| | | | | | FieldRef(com.bookstore.domain.CartItem.subtotal)
| l4_new
| Join
| | shoppingCart
| | ClassRef(com.bookstore.repository.CartItemRepository)
| | NullOp
| NextOp
analysis/Utils.java: resolveTree(): i = 3 child of top:NextOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [2=Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NextOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: l4_new
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FuncExpr
| AddWithFieldExprs
| | <v42>
| | Tuple
| | | l4
| | | List
| | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | ?
| | | | | MoreThan
| | | | | | this.book.inStockNumber
| | | | | | 0
| | | | | MethodWontHandleOp
| | | | | FieldRef(com.bookstore.domain.CartItem.subtotal)
analysis/Utils.java: resolveTree(): i = 0 child of top:AddWithFieldExprs
| <v42>
| Tuple
| | l4
| | List
| | | FieldRef(com.bookstore.domain.CartItem.id)
| | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | ?
| | | | MoreThan
| | | | | this.book.inStockNumber
| | | | | 0
| | | | MethodWontHandleOp
| | | | FieldRef(com.bookstore.domain.CartItem.subtotal)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: AddWithFieldExprs
| <v42>
| Tuple
| | l4
| | List
| | | FieldRef(com.bookstore.domain.CartItem.id)
| | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | ?
| | | | MoreThan
| | | | | this.book.inStockNumber
| | | | | 0
| | | | MethodWontHandleOp
| | | | FieldRef(com.bookstore.domain.CartItem.subtotal)
analysis/Utils.java: resolveTree(): i = 0 child of top:<v42>
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Tuple
| l4
| List
| | FieldRef(com.bookstore.domain.CartItem.id)
| | FieldRef(com.bookstore.domain.CartItem.qty)
| | ?
| | | MoreThan
| | | | this.book.inStockNumber
| | | | 0
| | | MethodWontHandleOp
| | | FieldRef(com.bookstore.domain.CartItem.subtotal)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Tuple
| l4
| List
| | FieldRef(com.bookstore.domain.CartItem.id)
| | FieldRef(com.bookstore.domain.CartItem.qty)
| | ?
| | | MoreThan
| | | | this.book.inStockNumber
| | | | 0
| | | MethodWontHandleOp
| | | FieldRef(com.bookstore.domain.CartItem.subtotal)
analysis/Utils.java: resolveTree(): i = 0 child of top:l4
analysis/Utils.java: resolveTree(): top: Tuple
| l4
| List
| | FieldRef(com.bookstore.domain.CartItem.id)
| | FieldRef(com.bookstore.domain.CartItem.qty)
| | ?
| | | MoreThan
| | | | this.book.inStockNumber
| | | | 0
| | | MethodWontHandleOp
| | | FieldRef(com.bookstore.domain.CartItem.subtotal)
analysis/Utils.java: resolveTree(): resolvedValChild: Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
analysis/Utils.java: resolveTree(): new top: Tuple
| Join
| | shoppingCart
| | ClassRef(com.bookstore.repository.CartItemRepository)
| | NullOp
| List
| | FieldRef(com.bookstore.domain.CartItem.id)
| | FieldRef(com.bookstore.domain.CartItem.qty)
| | ?
| | | MoreThan
| | | | this.book.inStockNumber
| | | | 0
| | | MethodWontHandleOp
| | | FieldRef(com.bookstore.domain.CartItem.subtotal)
analysis/Utils.java: resolveTree(): i = 1 child of top:List
| FieldRef(com.bookstore.domain.CartItem.id)
| FieldRef(com.bookstore.domain.CartItem.qty)
| ?
| | MoreThan
| | | this.book.inStockNumber
| | | 0
| | MethodWontHandleOp
| | FieldRef(com.bookstore.domain.CartItem.subtotal)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [0=Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: List
| FieldRef(com.bookstore.domain.CartItem.id)
| FieldRef(com.bookstore.domain.CartItem.qty)
| ?
| | MoreThan
| | | this.book.inStockNumber
| | | 0
| | MethodWontHandleOp
| | FieldRef(com.bookstore.domain.CartItem.subtotal)
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.bookstore.domain.CartItem.id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:FieldRef(com.bookstore.domain.CartItem.qty)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| FieldRef(com.bookstore.domain.CartItem.subtotal)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| MoreThan
| | this.book.inStockNumber
| | 0
| MethodWontHandleOp
| FieldRef(com.bookstore.domain.CartItem.subtotal)
analysis/Utils.java: resolveTree(): i = 0 child of top:MoreThan
| this.book.inStockNumber
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:FieldRef(com.bookstore.domain.CartItem.subtotal)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.bookstore.domain.CartItem.subtotal)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MoreThan
| this.book.inStockNumber
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:this.book.inStockNumber
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.book.inStockNumber
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.bookstore.domain.CartItem.qty)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.bookstore.domain.CartItem.id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: <v42>
analysis/Utils.java: resolveTree(): return
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: updateShoppingCart
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 5
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.bookstore.service.impl.ShoppingCartServiceImpl, shoppingCart := @parameter0: com.bookstore.domain.ShoppingCart, $r0 = new java.math.BigDecimal, specialinvoke $r0.<java.math.BigDecimal: void <init>(int)>(0), cartTotal = $r0, $r1 = new com.bookstore.service.impl.CartItemServiceImpl, cartItems = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart), this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1, l4 = interfaceinvoke cartItems.<java.util.List: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal), $r4 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), cartItem = (com.bookstore.domain.CartItem) $r4, $r5 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook()>(), $i0 = virtualinvoke $r5.<com.bookstore.domain.Book: int getInStockNumber()>(), if $i0 <= 0 goto (branch), $r6 = new com.bookstore.service.impl.CartItemServiceImpl, virtualinvoke $r6.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem), this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r6, $r8 = virtualinvoke cartItem.<com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal()>(), cartTotal = virtualinvoke cartTotal.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>($r8), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal), $r2 = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.repository.ShoppingCartRepository shoppingCartRepository>, interfaceinvoke $r2.<com.bookstore.repository.ShoppingCartRepository: java.lang.Object save(java.lang.Object)>(shoppingCart), return shoppingCart]
DIRRegionAnalyzer.java: constructDIR(): curUnit = virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal)
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: setGrandTotal
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [grandTotal, this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [cartTotal, shoppingCart]
ARegion.java: analyze(): set cur method of analyzer to: setGrandTotal
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.bookstore.domain.ShoppingCart, grandTotal := @parameter0: java.math.BigDecimal, this.<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal> = grandTotal, return]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.bookstore.domain.ShoppingCart
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = grandTotal := @parameter0: java.math.BigDecimal
DIRRegionAnalyzer.java: constructDIR(): curUnit = this.<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal> = grandTotal
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): Mapping: this.GrandTotal -> grandTotal
DIRRegionAnalyzer.java: constructDIR(): curUnit = return
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ this ~~~
Self

~~~ this.GrandTotal ~~~
grandTotal


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ this ~~~
Self

~~~ this.GrandTotal ~~~
grandTotal


DIR.java: updateRegion(): update region entry: this.GrandTotal=grandTotal
DIR.java: updateRegion(): update region entry: this=Self
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: grandTotal
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: java.math.BigDecimal
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: cartTotal
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.id, this.GrandTotal, this.cartItemList, this.user]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.GrandTotal, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.GrandTotal
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.GrandTotal, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: grandTotal
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke shoppingCart.<com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>(cartTotal)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [grandTotal, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [cartTotal, shoppingCart]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = grandTotal, actual = cartTotal
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.GrandTotal, this.cartItemList, this.user]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: grandTotal
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = cartTotal
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.cartItemList
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.GrandTotal, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.user
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.GrandTotal, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = setGrandTotal, [shoppingCart.GrandTotal]
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: grandTotal
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: cartTotal
DIRRegionAnalyzer.java: handleSideEffects(): Case the formal param is a primitive
DIRRegionAnalyzer.java: handleSideEffects(): fml: grandTotal
DIRRegionAnalyzer.java: handleSideEffects(): actual arg (Soot Value): cartTotal
DIRRegionAnalyzer.java: handleSideEffects(): actualNode (Node constructed from value): cartTotal
DIRRegionAnalyzer.java: handleSideEffects(): formal = grandTotal, actual = cartTotal
DIRRegionAnalyzer.java: handleSideEffects(): resolvedActual: cartTotal
DIRRegionAnalyzer.java: handleSideEffects(): for key = shoppingCart.GrandTotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: cartTotal
DIRRegionAnalyzer.java: handleSideEffects(): Case the formal param is a primitive, cartTotal
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.id, this.GrandTotal, this.cartItemList, this.user]
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ shoppingCart.GrandTotal ~~~
cartTotal


DIRRegionAnalyzer.java: handleSideEffects(): for key = shoppingCart.GrandTotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: cartTotal
DIRRegionAnalyzer.java: handleSideEffects(): after: cartTotal
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ shoppingCart.GrandTotal ~~~
cartTotal


DIRRegionAnalyzer.java: handleSideEffects(): for key = shoppingCart.GrandTotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: cartTotal
DIRRegionAnalyzer.java: handleSideEffects(): after: cartTotal
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ shoppingCart.GrandTotal ~~~
cartTotal


DIRRegionAnalyzer.java: handleSideEffects(): for key = shoppingCart.GrandTotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: cartTotal
DIRRegionAnalyzer.java: handleSideEffects(): after: cartTotal
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ shoppingCart.GrandTotal ~~~
cartTotal


DIRRegionAnalyzer.java: handleSideEffects(): for key = shoppingCart.GrandTotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: cartTotal
DIRRegionAnalyzer.java: handleSideEffects(): after: cartTotal
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r2 = this.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.repository.ShoppingCartRepository shoppingCartRepository>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r2 -> this.shoppingCartRepository
DIRRegionAnalyzer.java: constructDIR(): curUnit = interfaceinvoke $r2.<com.bookstore.repository.ShoppingCartRepository: java.lang.Object save(java.lang.Object)>(shoppingCart)
DIRRegionAnalyzer.java: constructDIR(): savestmt invoke expr: interfaceinvoke $r2.<com.bookstore.repository.ShoppingCartRepository: java.lang.Object save(java.lang.Object)>(shoppingCart)
DIRRegionAnalyzer.java: constructDIR(): baseVarNode: $r2
DIRRegionAnalyzer.java: constructDIR(): dir till now: ~~~ $r2 ~~~
this.shoppingCartRepository

~~~ shoppingCart.GrandTotal ~~~
cartTotal


DIRRegionAnalyzer.java: constructDIR(): ve map:{$r2=this.shoppingCartRepository, shoppingCart.GrandTotal=cartTotal}
DIRRegionAnalyzer.java: constructDIR(): repo: this.shoppingCartRepository
DIRRegionAnalyzer.java: constructDIR(): argType: com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: constructDIR(): table: com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: constructDIR(): attributes: [id, GrandTotal]
DIRRegionAnalyzer.java: constructDIR(): fieldVarNodes: [shoppingCart.id, shoppingCart.GrandTotal]
DIRRegionAnalyzer.java: constructDIR(): listNode.columns: [FieldRef(com.bookstore.domain.ShoppingCart.id), FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)]
DIRRegionAnalyzer.java: constructDIR(): mapping: this.shoppingCartRepository -> Save
| $r2
| Tuple
| | shoppingCart
| | List
| | | shoppingCart.id
| | | cartTotal
DIRRegionAnalyzer.java: constructDIR(): savestmt args: [shoppingCart]
DIRRegionAnalyzer.java: constructDIR(): curUnit = return shoppingCart
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: return
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: shoppingCart
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [ShoppingCart.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
]
AccessPath.java: replaceBase(): input access path: return.id
AccessPath.java: replaceBase(): replacement of base: shoppingCart
AccessPath.java: replaceBase(): input access path: return.GrandTotal
AccessPath.java: replaceBase(): replacement of base: shoppingCart
AccessPath.java: replaceBase(): input access path: return.cartItemList
AccessPath.java: replaceBase(): replacement of base: shoppingCart
AccessPath.java: replaceBase(): input access path: return.user
AccessPath.java: replaceBase(): replacement of base: shoppingCart
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock5
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r2 ~~~
this.shoppingCartRepository

~~~ return ~~~
shoppingCart

~~~ return ~~~
shoppingCart

~~~ return.GrandTotal ~~~
cartTotal

~~~ return.cartItemList ~~~
shoppingCart.cartItemList

~~~ return.id ~~~
shoppingCart.id

~~~ return.user ~~~
shoppingCart.user

~~~ shoppingCart.GrandTotal ~~~
cartTotal

~~~ this.shoppingCartRepository ~~~
Save
| $r2
| Tuple
| | shoppingCart
| | List
| | | shoppingCart.id
| | | cartTotal


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r2 ~~~
this.shoppingCartRepository

~~~ return ~~~
shoppingCart

~~~ return ~~~
shoppingCart

~~~ return.GrandTotal ~~~
cartTotal

~~~ return.cartItemList ~~~
shoppingCart.cartItemList

~~~ return.id ~~~
shoppingCart.id

~~~ return.user ~~~
shoppingCart.user

~~~ shoppingCart.GrandTotal ~~~
cartTotal

~~~ this.shoppingCartRepository ~~~
Save
| $r2
| Tuple
| | shoppingCart
| | List
| | | shoppingCart.id
| | | cartTotal


DIR.java: updateRegion(): update region entry: $r2=this.shoppingCartRepository
DIR.java: updateRegion(): update region entry: return.GrandTotal=cartTotal
DIR.java: updateRegion(): update region entry: return.id=shoppingCart.id
DIR.java: updateRegion(): update region entry: return.cartItemList=shoppingCart.cartItemList
DIR.java: updateRegion(): update region entry: this.shoppingCartRepository=Save
| $r2
| Tuple
| | shoppingCart
| | List
| | | shoppingCart.id
| | | cartTotal
DIR.java: updateRegion(): update region entry: shoppingCart.GrandTotal=cartTotal
DIR.java: updateRegion(): update region entry: return=shoppingCart
DIR.java: updateRegion(): update region entry: return.user=shoppingCart.user
DIR.java: updateRegion(): update region entry: return=shoppingCart
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | BasicBlock5
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ $r2 ~~~
this.shoppingCartRepository

~~~ return ~~~
shoppingCart

~~~ return ~~~
shoppingCart

~~~ return.GrandTotal ~~~
cartTotal

~~~ return.cartItemList ~~~
shoppingCart.cartItemList

~~~ return.id ~~~
shoppingCart.id

~~~ return.user ~~~
shoppingCart.user

~~~ shoppingCart.GrandTotal ~~~
cartTotal

~~~ this.shoppingCartRepository ~~~
Save
| $r2
| Tuple
| | shoppingCart
| | List
| | | shoppingCart.id
| | | cartTotal


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $i0 ~~~
UnknownNode

~~~ $r0 ~~~
BottomNode

~~~ $r4 ~~~
UnknownNode

~~~ $r5 ~~~
UnknownNode

~~~ $r5.active ~~~
UnknownNode

~~~ $r5.author ~~~
UnknownNode

~~~ $r5.bookImage ~~~
UnknownNode

~~~ $r5.bookToCartItemsList ~~~
UnknownNode

~~~ $r5.category ~~~
UnknownNode

~~~ $r5.description ~~~
UnknownNode

~~~ $r5.format ~~~
UnknownNode

~~~ $r5.id ~~~
UnknownNode

~~~ $r5.inStockNumber ~~~
UnknownNode

~~~ $r5.isbn ~~~
UnknownNode

~~~ $r5.language ~~~
UnknownNode

~~~ $r5.listPrice ~~~
UnknownNode

~~~ $r5.numberOfPages ~~~
UnknownNode

~~~ $r5.ourPrice ~~~
UnknownNode

~~~ $r5.publicationDate ~~~
UnknownNode

~~~ $r5.publisher ~~~
UnknownNode

~~~ $r5.shippingWeight ~~~
UnknownNode

~~~ $r5.title ~~~
UnknownNode

~~~ $r6.cartItemRepository ~~~
UnknownNode

~~~ $r8 ~~~
UnknownNode

~~~ cartItem.book ~~~
UnknownNode

~~~ cartItem.book.active ~~~
UnknownNode

~~~ cartItem.book.author ~~~
UnknownNode

~~~ cartItem.book.category ~~~
UnknownNode

~~~ cartItem.book.description ~~~
UnknownNode

~~~ cartItem.book.format ~~~
UnknownNode

~~~ cartItem.book.id ~~~
UnknownNode

~~~ cartItem.book.inStockNumber ~~~
UnknownNode

~~~ cartItem.book.isbn ~~~
UnknownNode

~~~ cartItem.book.language ~~~
UnknownNode

~~~ cartItem.book.listPrice ~~~
UnknownNode

~~~ cartItem.book.numberOfPages ~~~
UnknownNode

~~~ cartItem.book.ourPrice ~~~
UnknownNode

~~~ cartItem.book.publicationDate ~~~
UnknownNode

~~~ cartItem.book.publisher ~~~
UnknownNode

~~~ cartItem.book.shippingWeight ~~~
UnknownNode

~~~ cartItem.book.title ~~~
UnknownNode

~~~ cartItem.id ~~~
UnknownNode

~~~ cartItem.order ~~~
UnknownNode

~~~ cartItem.order.id ~~~
UnknownNode

~~~ cartItem.order.orderDate ~~~
UnknownNode

~~~ cartItem.order.orderTotal ~~~
UnknownNode

~~~ cartItem.order.orederStatus ~~~
UnknownNode

~~~ cartItem.order.shippingDate ~~~
UnknownNode

~~~ cartItem.order.shippingMethod ~~~
UnknownNode

~~~ cartItem.qty ~~~
UnknownNode

~~~ cartItem.shoppingCart ~~~
UnknownNode

~~~ cartItem.shoppingCart.GrandTotal ~~~
UnknownNode

~~~ cartItem.shoppingCart.id ~~~
UnknownNode

~~~ cartItem.subtotal ~~~
UnknownNode

~~~ cartItems ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ cartTotal ~~~
UnknownNode

~~~ condition ~~~
UnknownNode

~~~ l4 ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ l4_new ~~~
Fold
| FuncExpr
| | AddWithFieldExprs
| | | <v42>
| | | Tuple
| | | | Join
| | | | | shoppingCart
| | | | | ClassRef(com.bookstore.repository.CartItemRepository)
| | | | | NullOp
| | | | List
| | | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | | ?
| | | | | | MoreThan
| | | | | | | this.book.inStockNumber
| | | | | | | 0
| | | | | | MethodWontHandleOp
| | | | | | FieldRef(com.bookstore.domain.CartItem.subtotal)
| l4_new
| Join
| | shoppingCart
| | ClassRef(com.bookstore.repository.CartItemRepository)
| | NullOp
| NextOp

~~~ this ~~~
Self

~~~ this.cartItemServiceImpl.cartItemRepository ~~~
UnknownNode


analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Save
| $r2
| Tuple
| | shoppingCart
| | List
| | | shoppingCart.id
| | | cartTotal
analysis/Utils.java: resolveTree(): i = 0 child of top:$r2
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Tuple
| shoppingCart
| List
| | shoppingCart.id
| | cartTotal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Tuple
| shoppingCart
| List
| | shoppingCart.id
| | cartTotal
analysis/Utils.java: resolveTree(): i = 0 child of top:shoppingCart
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:List
| shoppingCart.id
| cartTotal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: List
| shoppingCart.id
| cartTotal
analysis/Utils.java: resolveTree(): i = 0 child of top:shoppingCart.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:cartTotal
analysis/Utils.java: resolveTree(): top: List
| shoppingCart.id
| cartTotal
analysis/Utils.java: resolveTree(): resolvedValChild: UnknownNode
analysis/Utils.java: resolveTree(): new top: List
| shoppingCart.id
| UnknownNode
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=UnknownNode]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: shoppingCart.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: shoppingCart
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r2
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): return
AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $i0 ~~~
UnknownNode

~~~ $r0 ~~~
BottomNode

~~~ $r2 ~~~
this.shoppingCartRepository

~~~ $r4 ~~~
UnknownNode

~~~ $r5 ~~~
UnknownNode

~~~ $r5.active ~~~
UnknownNode

~~~ $r5.author ~~~
UnknownNode

~~~ $r5.bookImage ~~~
UnknownNode

~~~ $r5.bookToCartItemsList ~~~
UnknownNode

~~~ $r5.category ~~~
UnknownNode

~~~ $r5.description ~~~
UnknownNode

~~~ $r5.format ~~~
UnknownNode

~~~ $r5.id ~~~
UnknownNode

~~~ $r5.inStockNumber ~~~
UnknownNode

~~~ $r5.isbn ~~~
UnknownNode

~~~ $r5.language ~~~
UnknownNode

~~~ $r5.listPrice ~~~
UnknownNode

~~~ $r5.numberOfPages ~~~
UnknownNode

~~~ $r5.ourPrice ~~~
UnknownNode

~~~ $r5.publicationDate ~~~
UnknownNode

~~~ $r5.publisher ~~~
UnknownNode

~~~ $r5.shippingWeight ~~~
UnknownNode

~~~ $r5.title ~~~
UnknownNode

~~~ $r6.cartItemRepository ~~~
UnknownNode

~~~ $r8 ~~~
UnknownNode

~~~ cartItem.book ~~~
UnknownNode

~~~ cartItem.book.active ~~~
UnknownNode

~~~ cartItem.book.author ~~~
UnknownNode

~~~ cartItem.book.category ~~~
UnknownNode

~~~ cartItem.book.description ~~~
UnknownNode

~~~ cartItem.book.format ~~~
UnknownNode

~~~ cartItem.book.id ~~~
UnknownNode

~~~ cartItem.book.inStockNumber ~~~
UnknownNode

~~~ cartItem.book.isbn ~~~
UnknownNode

~~~ cartItem.book.language ~~~
UnknownNode

~~~ cartItem.book.listPrice ~~~
UnknownNode

~~~ cartItem.book.numberOfPages ~~~
UnknownNode

~~~ cartItem.book.ourPrice ~~~
UnknownNode

~~~ cartItem.book.publicationDate ~~~
UnknownNode

~~~ cartItem.book.publisher ~~~
UnknownNode

~~~ cartItem.book.shippingWeight ~~~
UnknownNode

~~~ cartItem.book.title ~~~
UnknownNode

~~~ cartItem.id ~~~
UnknownNode

~~~ cartItem.order ~~~
UnknownNode

~~~ cartItem.order.id ~~~
UnknownNode

~~~ cartItem.order.orderDate ~~~
UnknownNode

~~~ cartItem.order.orderTotal ~~~
UnknownNode

~~~ cartItem.order.orederStatus ~~~
UnknownNode

~~~ cartItem.order.shippingDate ~~~
UnknownNode

~~~ cartItem.order.shippingMethod ~~~
UnknownNode

~~~ cartItem.qty ~~~
UnknownNode

~~~ cartItem.shoppingCart ~~~
UnknownNode

~~~ cartItem.shoppingCart.GrandTotal ~~~
UnknownNode

~~~ cartItem.shoppingCart.id ~~~
UnknownNode

~~~ cartItem.subtotal ~~~
UnknownNode

~~~ cartItems ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ cartTotal ~~~
UnknownNode

~~~ condition ~~~
UnknownNode

~~~ l4 ~~~
Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ l4_new ~~~
Fold
| FuncExpr
| | AddWithFieldExprs
| | | <v42>
| | | Tuple
| | | | Join
| | | | | shoppingCart
| | | | | ClassRef(com.bookstore.repository.CartItemRepository)
| | | | | NullOp
| | | | List
| | | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | | ?
| | | | | | MoreThan
| | | | | | | this.book.inStockNumber
| | | | | | | 0
| | | | | | MethodWontHandleOp
| | | | | | FieldRef(com.bookstore.domain.CartItem.subtotal)
| l4_new
| Join
| | shoppingCart
| | ClassRef(com.bookstore.repository.CartItemRepository)
| | NullOp
| NextOp

~~~ return ~~~
shoppingCart

~~~ return ~~~
shoppingCart

~~~ return.GrandTotal ~~~
UnknownNode

~~~ return.cartItemList ~~~
shoppingCart.cartItemList

~~~ return.id ~~~
shoppingCart.id

~~~ return.user ~~~
shoppingCart.user

~~~ shoppingCart.GrandTotal ~~~
UnknownNode

~~~ this ~~~
Self

~~~ this.cartItemServiceImpl.cartItemRepository ~~~
UnknownNode

~~~ this.shoppingCartRepository ~~~
Save
| $r2
| Tuple
| | shoppingCart
| | List
| | | shoppingCart.id
| | | UnknownNode


DIR.java: updateRegion(): update region entry: cartItem.shoppingCart.GrandTotal=UnknownNode
DIR.java: updateRegion(): update region entry: $r6.cartItemRepository=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.isbn=UnknownNode
DIR.java: updateRegion(): update region entry: $i0=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.listPrice=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.id=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.bookToCartItemsList=UnknownNode
DIR.java: updateRegion(): update region entry: cartTotal=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.qty=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.title=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.order.shippingMethod=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.numberOfPages=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.shoppingCart=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.order.id=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.ourPrice=UnknownNode
DIR.java: updateRegion(): update region entry: this.cartItemServiceImpl.cartItemRepository=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.numberOfPages=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.language=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.active=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.author=UnknownNode
DIR.java: updateRegion(): update region entry: $r0=BottomNode
DIR.java: updateRegion(): update region entry: $r2=this.shoppingCartRepository
DIR.java: updateRegion(): update region entry: $r4=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.publicationDate=UnknownNode
DIR.java: updateRegion(): update region entry: $r5=UnknownNode
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: $r8=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.publisher=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.category=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.shippingWeight=UnknownNode
DIR.java: updateRegion(): update region entry: condition=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.order.orederStatus=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.format=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.id=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.category=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.format=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.order=UnknownNode
DIR.java: updateRegion(): update region entry: return.cartItemList=shoppingCart.cartItemList
DIR.java: updateRegion(): update region entry: cartItem.subtotal=UnknownNode
DIR.java: updateRegion(): update region entry: this.shoppingCartRepository=Save
| $r2
| Tuple
| | shoppingCart
| | List
| | | shoppingCart.id
| | | UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.id=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.author=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.order.orderTotal=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.listPrice=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.publicationDate=UnknownNode
DIR.java: updateRegion(): update region entry: l4=Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
DIR.java: updateRegion(): update region entry: cartItem.book.ourPrice=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.inStockNumber=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.active=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.description=UnknownNode
DIR.java: updateRegion(): update region entry: return.id=shoppingCart.id
DIR.java: updateRegion(): update region entry: cartItem.book.inStockNumber=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.shoppingCart.id=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.bookImage=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.language=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.publisher=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.shippingWeight=UnknownNode
DIR.java: updateRegion(): update region entry: return.GrandTotal=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.isbn=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.order.shippingDate=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.order.orderDate=UnknownNode
DIR.java: updateRegion(): update region entry: $r5.title=UnknownNode
DIR.java: updateRegion(): update region entry: cartItem.book.description=UnknownNode
DIR.java: updateRegion(): update region entry: cartItems=Join
| shoppingCart
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
DIR.java: updateRegion(): update region entry: l4_new=Fold
| FuncExpr
| | AddWithFieldExprs
| | | <v42>
| | | Tuple
| | | | Join
| | | | | shoppingCart
| | | | | ClassRef(com.bookstore.repository.CartItemRepository)
| | | | | NullOp
| | | | List
| | | | | FieldRef(com.bookstore.domain.CartItem.id)
| | | | | FieldRef(com.bookstore.domain.CartItem.qty)
| | | | | ?
| | | | | | MoreThan
| | | | | | | this.book.inStockNumber
| | | | | | | 0
| | | | | | MethodWontHandleOp
| | | | | | FieldRef(com.bookstore.domain.CartItem.subtotal)
| l4_new
| Join
| | shoppingCart
| | ClassRef(com.bookstore.repository.CartItemRepository)
| | NullOp
| NextOp
DIR.java: updateRegion(): update region entry: shoppingCart.GrandTotal=UnknownNode
DIR.java: updateRegion(): update region entry: return=shoppingCart
DIR.java: updateRegion(): update region entry: return.user=shoppingCart.user
DIR.java: updateRegion(): update region entry: return=shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [shoppingCart.id, shoppingCart.GrandTotal, shoppingCart.cartItemList, shoppingCart.user]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: shoppingCart.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [cartItem.shoppingCart.GrandTotal, $r6.cartItemRepository, $r5.isbn, $i0, $r5.listPrice, $r5.id, $r5.bookToCartItemsList, cartTotal, cartItem.qty, cartItem.book.title, cartItem.order.shippingMethod, $r5.numberOfPages, cartItem.shoppingCart, cartItem.order.id, cartItem.book, $r5.ourPrice, this.cartItemServiceImpl.cartItemRepository, cartItem.book.numberOfPages, $r5.language, cartItem.book.active, cartItem.book.author, $r0, $r2, $r4, cartItem.book.publicationDate, $r5, this, $r8, $r5.publisher, $r5.category, $r5.shippingWeight, condition, cartItem.order.orederStatus, $r5.format, cartItem.id, cartItem.book.category, cartItem.book.format, cartItem.order, return.cartItemList, cartItem.subtotal, this.shoppingCartRepository, cartItem.book.id, $r5.author, cartItem.order.orderTotal, cartItem.book.listPrice, $r5.publicationDate, l4, cartItem.book.ourPrice, $r5.inStockNumber, $r5.active, $r5.description, return.id, cartItem.book.inStockNumber, cartItem.shoppingCart.id, $r5.bookImage, cartItem.book.language, cartItem.book.publisher, cartItem.book.shippingWeight, return.GrandTotal, cartItem.book.isbn, cartItem.order.shippingDate, cartItem.order.orderDate, $r5.title, cartItem.book.description, cartItems, l4_new, shoppingCart.GrandTotal, return, return.user, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: shoppingCart.GrandTotal
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [cartItem.shoppingCart.GrandTotal, $r6.cartItemRepository, $r5.isbn, $i0, $r5.listPrice, $r5.id, $r5.bookToCartItemsList, cartTotal, cartItem.qty, cartItem.book.title, cartItem.order.shippingMethod, $r5.numberOfPages, cartItem.shoppingCart, cartItem.order.id, cartItem.book, $r5.ourPrice, this.cartItemServiceImpl.cartItemRepository, cartItem.book.numberOfPages, $r5.language, cartItem.book.active, cartItem.book.author, $r0, $r2, $r4, cartItem.book.publicationDate, $r5, this, $r8, $r5.publisher, $r5.category, $r5.shippingWeight, condition, cartItem.order.orederStatus, $r5.format, cartItem.id, cartItem.book.category, cartItem.book.format, cartItem.order, return.cartItemList, cartItem.subtotal, this.shoppingCartRepository, cartItem.book.id, $r5.author, cartItem.order.orderTotal, cartItem.book.listPrice, $r5.publicationDate, l4, cartItem.book.ourPrice, $r5.inStockNumber, $r5.active, $r5.description, return.id, cartItem.book.inStockNumber, cartItem.shoppingCart.id, $r5.bookImage, cartItem.book.language, cartItem.book.publisher, cartItem.book.shippingWeight, return.GrandTotal, cartItem.book.isbn, cartItem.order.shippingDate, cartItem.order.orderDate, $r5.title, cartItem.book.description, cartItems, l4_new, shoppingCart.GrandTotal, return, return.user, return]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: UnknownNode
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r3.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r3.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [shoppingCart, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [shoppingCart, $r3]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [shoppingCart.id, shoppingCart.GrandTotal, shoppingCart.cartItemList, shoppingCart.user]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.shoppingCartRepository, this.cartItemServiceImpl]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: shoppingCart.cartItemList
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [cartItem.shoppingCart.GrandTotal, $r6.cartItemRepository, $r5.isbn, $i0, $r5.listPrice, $r5.id, $r5.bookToCartItemsList, cartTotal, cartItem.qty, cartItem.book.title, cartItem.order.shippingMethod, $r5.numberOfPages, cartItem.shoppingCart, cartItem.order.id, cartItem.book, $r5.ourPrice, this.cartItemServiceImpl.cartItemRepository, cartItem.book.numberOfPages, $r5.language, cartItem.book.active, cartItem.book.author, $r0, $r2, $r4, cartItem.book.publicationDate, $r5, this, $r8, $r5.publisher, $r5.category, $r5.shippingWeight, condition, cartItem.order.orederStatus, $r5.format, cartItem.id, cartItem.book.category, cartItem.book.format, cartItem.order, return.cartItemList, cartItem.subtotal, this.shoppingCartRepository, cartItem.book.id, $r5.author, cartItem.order.orderTotal, cartItem.book.listPrice, $r5.publicationDate, l4, cartItem.book.ourPrice, $r5.inStockNumber, $r5.active, $r5.description, return.id, cartItem.book.inStockNumber, cartItem.shoppingCart.id, $r5.bookImage, cartItem.book.language, cartItem.book.publisher, cartItem.book.shippingWeight, return.GrandTotal, cartItem.book.isbn, cartItem.order.shippingDate, cartItem.order.orderDate, $r5.title, cartItem.book.description, cartItems, l4_new, shoppingCart.GrandTotal, return, return.user, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: shoppingCart.user
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [cartItem.shoppingCart.GrandTotal, $r6.cartItemRepository, $r5.isbn, $i0, $r5.listPrice, $r5.id, $r5.bookToCartItemsList, cartTotal, cartItem.qty, cartItem.book.title, cartItem.order.shippingMethod, $r5.numberOfPages, cartItem.shoppingCart, cartItem.order.id, cartItem.book, $r5.ourPrice, this.cartItemServiceImpl.cartItemRepository, cartItem.book.numberOfPages, $r5.language, cartItem.book.active, cartItem.book.author, $r0, $r2, $r4, cartItem.book.publicationDate, $r5, this, $r8, $r5.publisher, $r5.category, $r5.shippingWeight, condition, cartItem.order.orederStatus, $r5.format, cartItem.id, cartItem.book.category, cartItem.book.format, cartItem.order, return.cartItemList, cartItem.subtotal, this.shoppingCartRepository, cartItem.book.id, $r5.author, cartItem.order.orderTotal, cartItem.book.listPrice, $r5.publicationDate, l4, cartItem.book.ourPrice, $r5.inStockNumber, $r5.active, $r5.description, return.id, cartItem.book.inStockNumber, cartItem.shoppingCart.id, $r5.bookImage, cartItem.book.language, cartItem.book.publisher, cartItem.book.shippingWeight, return.GrandTotal, cartItem.book.isbn, cartItem.order.shippingDate, cartItem.order.orderDate, $r5.title, cartItem.book.description, cartItems, l4_new, shoppingCart.GrandTotal, return, return.user, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.bookstore.service.impl.ShoppingCartServiceImpl
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: $r3
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.shoppingCartRepository, this.cartItemServiceImpl]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.shoppingCartRepository
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [cartItem.shoppingCart.GrandTotal, $r6.cartItemRepository, $r5.isbn, $i0, $r5.listPrice, $r5.id, $r5.bookToCartItemsList, cartTotal, cartItem.qty, cartItem.book.title, cartItem.order.shippingMethod, $r5.numberOfPages, cartItem.shoppingCart, cartItem.order.id, cartItem.book, $r5.ourPrice, this.cartItemServiceImpl.cartItemRepository, cartItem.book.numberOfPages, $r5.language, cartItem.book.active, cartItem.book.author, $r0, $r2, $r4, cartItem.book.publicationDate, $r5, this, $r8, $r5.publisher, $r5.category, $r5.shippingWeight, condition, cartItem.order.orederStatus, $r5.format, cartItem.id, cartItem.book.category, cartItem.book.format, cartItem.order, return.cartItemList, cartItem.subtotal, this.shoppingCartRepository, cartItem.book.id, $r5.author, cartItem.order.orderTotal, cartItem.book.listPrice, $r5.publicationDate, l4, cartItem.book.ourPrice, $r5.inStockNumber, $r5.active, $r5.description, return.id, cartItem.book.inStockNumber, cartItem.shoppingCart.id, $r5.bookImage, cartItem.book.language, cartItem.book.publisher, cartItem.book.shippingWeight, return.GrandTotal, cartItem.book.isbn, cartItem.order.shippingDate, cartItem.order.orderDate, $r5.title, cartItem.book.description, cartItems, l4_new, shoppingCart.GrandTotal, return, return.user, return]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Save
| $r2
| Tuple
| | shoppingCart
| | List
| | | shoppingCart.id
| | | UnknownNode
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r3.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r3.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.domain.ShoppingCart: void setGrandTotal(java.math.BigDecimal), com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal), com.bookstore.service.impl.UserServiceImpl: void <clinit>(), com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart(), com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart), com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String), com.bookstore.domain.Book: int getInStockNumber(), com.bookstore.domain.CartItem: void setSubtotal(java.math.BigDecimal), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem), com.bookstore.domain.Book: double getOurPrice(), com.bookstore.domain.CartItem: java.math.BigDecimal getSubtotal(), com.bookstore.domain.CartItem: com.bookstore.domain.Book getBook(), com.bookstore.domain.CartItem: int getQty()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [shoppingCart, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [shoppingCart, $r3]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [shoppingCart.id, shoppingCart.GrandTotal, shoppingCart.cartItemList, shoppingCart.user]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.shoppingCartRepository, this.cartItemServiceImpl]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Save
| $r2
| Tuple
| | shoppingCart
| | List
| | | shoppingCart.id
| | | UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.cartItemServiceImpl
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [cartItem.shoppingCart.GrandTotal, $r6.cartItemRepository, $r5.isbn, $i0, $r5.listPrice, $r5.id, $r5.bookToCartItemsList, cartTotal, cartItem.qty, cartItem.book.title, cartItem.order.shippingMethod, $r5.numberOfPages, cartItem.shoppingCart, cartItem.order.id, cartItem.book, $r5.ourPrice, this.cartItemServiceImpl.cartItemRepository, cartItem.book.numberOfPages, $r5.language, cartItem.book.active, cartItem.book.author, $r0, $r2, $r4, cartItem.book.publicationDate, $r5, this, $r8, $r5.publisher, $r5.category, $r5.shippingWeight, condition, cartItem.order.orederStatus, $r5.format, cartItem.id, cartItem.book.category, cartItem.book.format, cartItem.order, return.cartItemList, cartItem.subtotal, this.shoppingCartRepository, cartItem.book.id, $r5.author, cartItem.order.orderTotal, cartItem.book.listPrice, $r5.publicationDate, l4, cartItem.book.ourPrice, $r5.inStockNumber, $r5.active, $r5.description, return.id, cartItem.book.inStockNumber, cartItem.shoppingCart.id, $r5.bookImage, cartItem.book.language, cartItem.book.publisher, cartItem.book.shippingWeight, return.GrandTotal, cartItem.book.isbn, cartItem.order.shippingDate, cartItem.order.orderDate, $r5.title, cartItem.book.description, cartItems, l4_new, shoppingCart.GrandTotal, return, return.user, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = updateShoppingCart, [shoppingCart.GrandTotal, $r3.shoppingCartRepository]
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [shoppingCart.id, shoppingCart.GrandTotal, shoppingCart.cartItemList, shoppingCart.user]
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r1 ~~~
MethodWontHandleOp

~~~ $r3.shoppingCartRepository ~~~
Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode

~~~ cartItemList ~~~
Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ shoppingCart.GrandTotal ~~~
UnknownNode

~~~ shoppingCart.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ shoppingCart.id ~~~
this.shoppingCart.id

~~~ shoppingCart.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

~~~ user ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | MethodWontHandleOp

~~~ user.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| email

~~~ user.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| enabled

~~~ user.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| firstName

~~~ user.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| id

~~~ user.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| lastName

~~~ user.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| password

~~~ user.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| phone

~~~ user.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ user.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ user.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ user.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ user.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = shoppingCart.GrandTotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): after: UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r1 ~~~
MethodWontHandleOp

~~~ $r3.shoppingCartRepository ~~~
Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode

~~~ cartItemList ~~~
Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ shoppingCart.GrandTotal ~~~
UnknownNode

~~~ shoppingCart.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ shoppingCart.id ~~~
this.shoppingCart.id

~~~ shoppingCart.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

~~~ user ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | MethodWontHandleOp

~~~ user.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| email

~~~ user.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| enabled

~~~ user.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| firstName

~~~ user.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| id

~~~ user.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| lastName

~~~ user.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| password

~~~ user.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| phone

~~~ user.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ user.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ user.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ user.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ user.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r3.shoppingCartRepository
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): after: Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r1 ~~~
MethodWontHandleOp

~~~ $r3.shoppingCartRepository ~~~
Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode

~~~ cartItemList ~~~
Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ shoppingCart.GrandTotal ~~~
UnknownNode

~~~ shoppingCart.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ shoppingCart.id ~~~
this.shoppingCart.id

~~~ shoppingCart.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

~~~ user ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | MethodWontHandleOp

~~~ user.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| email

~~~ user.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| enabled

~~~ user.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| firstName

~~~ user.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| id

~~~ user.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| lastName

~~~ user.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| password

~~~ user.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| phone

~~~ user.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ user.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ user.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ user.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ user.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = shoppingCart.GrandTotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): after: UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r1 ~~~
MethodWontHandleOp

~~~ $r3.shoppingCartRepository ~~~
Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode

~~~ cartItemList ~~~
Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ shoppingCart.GrandTotal ~~~
UnknownNode

~~~ shoppingCart.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ shoppingCart.id ~~~
this.shoppingCart.id

~~~ shoppingCart.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

~~~ user ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | MethodWontHandleOp

~~~ user.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| email

~~~ user.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| enabled

~~~ user.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| firstName

~~~ user.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| id

~~~ user.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| lastName

~~~ user.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| password

~~~ user.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| phone

~~~ user.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ user.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ user.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ user.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ user.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r3.shoppingCartRepository
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): after: Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r1 ~~~
MethodWontHandleOp

~~~ $r3.shoppingCartRepository ~~~
Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode

~~~ cartItemList ~~~
Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ shoppingCart.GrandTotal ~~~
UnknownNode

~~~ shoppingCart.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ shoppingCart.id ~~~
this.shoppingCart.id

~~~ shoppingCart.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

~~~ user ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | MethodWontHandleOp

~~~ user.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| email

~~~ user.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| enabled

~~~ user.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| firstName

~~~ user.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| id

~~~ user.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| lastName

~~~ user.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| password

~~~ user.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| phone

~~~ user.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ user.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ user.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ user.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ user.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = shoppingCart.GrandTotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): after: UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r1 ~~~
MethodWontHandleOp

~~~ $r3.shoppingCartRepository ~~~
Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode

~~~ cartItemList ~~~
Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ shoppingCart.GrandTotal ~~~
UnknownNode

~~~ shoppingCart.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ shoppingCart.id ~~~
this.shoppingCart.id

~~~ shoppingCart.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

~~~ user ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | MethodWontHandleOp

~~~ user.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| email

~~~ user.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| enabled

~~~ user.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| firstName

~~~ user.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| id

~~~ user.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| lastName

~~~ user.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| password

~~~ user.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| phone

~~~ user.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ user.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ user.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ user.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ user.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r3.shoppingCartRepository
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): after: Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r1 ~~~
MethodWontHandleOp

~~~ $r3.shoppingCartRepository ~~~
Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode

~~~ cartItemList ~~~
Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ shoppingCart.GrandTotal ~~~
UnknownNode

~~~ shoppingCart.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ shoppingCart.id ~~~
this.shoppingCart.id

~~~ shoppingCart.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

~~~ user ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | MethodWontHandleOp

~~~ user.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| email

~~~ user.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| enabled

~~~ user.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| firstName

~~~ user.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| id

~~~ user.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| lastName

~~~ user.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| password

~~~ user.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| phone

~~~ user.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ user.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ user.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ user.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ user.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = shoppingCart.GrandTotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): after: UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r1 ~~~
MethodWontHandleOp

~~~ $r3.shoppingCartRepository ~~~
Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode

~~~ cartItemList ~~~
Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ shoppingCart.GrandTotal ~~~
UnknownNode

~~~ shoppingCart.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ shoppingCart.id ~~~
this.shoppingCart.id

~~~ shoppingCart.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

~~~ user ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | MethodWontHandleOp

~~~ user.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| email

~~~ user.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| enabled

~~~ user.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| firstName

~~~ user.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| id

~~~ user.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| lastName

~~~ user.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| password

~~~ user.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| phone

~~~ user.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ user.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ user.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ user.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ user.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r3.shoppingCartRepository
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): after: Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: $r3
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.shoppingCartRepository, this.cartItemServiceImpl]
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r1 ~~~
MethodWontHandleOp

~~~ $r3.shoppingCartRepository ~~~
Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode

~~~ cartItemList ~~~
Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ shoppingCart.GrandTotal ~~~
UnknownNode

~~~ shoppingCart.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ shoppingCart.id ~~~
this.shoppingCart.id

~~~ shoppingCart.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

~~~ user ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | MethodWontHandleOp

~~~ user.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| email

~~~ user.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| enabled

~~~ user.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| firstName

~~~ user.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| id

~~~ user.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| lastName

~~~ user.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| password

~~~ user.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| phone

~~~ user.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ user.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ user.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ user.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ user.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = shoppingCart.GrandTotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): after: UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r1 ~~~
MethodWontHandleOp

~~~ $r3.shoppingCartRepository ~~~
Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode

~~~ cartItemList ~~~
Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ shoppingCart.GrandTotal ~~~
UnknownNode

~~~ shoppingCart.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ shoppingCart.id ~~~
this.shoppingCart.id

~~~ shoppingCart.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

~~~ user ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | MethodWontHandleOp

~~~ user.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| email

~~~ user.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| enabled

~~~ user.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| firstName

~~~ user.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| id

~~~ user.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| lastName

~~~ user.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| password

~~~ user.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| phone

~~~ user.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ user.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ user.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ user.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ user.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r3.shoppingCartRepository
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): after: Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r1 ~~~
MethodWontHandleOp

~~~ $r3.shoppingCartRepository ~~~
Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode

~~~ cartItemList ~~~
Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ shoppingCart.GrandTotal ~~~
UnknownNode

~~~ shoppingCart.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ shoppingCart.id ~~~
this.shoppingCart.id

~~~ shoppingCart.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

~~~ user ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | MethodWontHandleOp

~~~ user.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| email

~~~ user.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| enabled

~~~ user.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| firstName

~~~ user.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| id

~~~ user.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| lastName

~~~ user.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| password

~~~ user.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| phone

~~~ user.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ user.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ user.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ user.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ user.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = shoppingCart.GrandTotal
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): after: UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r1 ~~~
MethodWontHandleOp

~~~ $r3.shoppingCartRepository ~~~
Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode

~~~ cartItemList ~~~
Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ shoppingCart.GrandTotal ~~~
UnknownNode

~~~ shoppingCart.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ shoppingCart.id ~~~
this.shoppingCart.id

~~~ shoppingCart.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

~~~ user ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | MethodWontHandleOp

~~~ user.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| email

~~~ user.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| enabled

~~~ user.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| firstName

~~~ user.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| id

~~~ user.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| lastName

~~~ user.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| password

~~~ user.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| phone

~~~ user.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ user.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ user.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ user.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ user.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| MethodWontHandleOp


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r3.shoppingCartRepository
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode
DIRRegionAnalyzer.java: handleSideEffects(): after: Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode
DIRRegionAnalyzer.java: constructDIR(): curUnit = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl> = $r3
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): CASE: v.f = expr, f is non-primtive
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl>
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl>
DIRRegionAnalyzer.java: constructDIR(): accessPaths = [this.shoppingCartServiceImpl.shoppingCartRepository, this.shoppingCartServiceImpl.cartItemServiceImpl]
DIRRegionAnalyzer.java: constructDIR(): right val = $r3
DIRRegionAnalyzer.java: constructDIR(): Subcase: v1.f = v2
AccessPath.java: replaceBase(): input access path: this.shoppingCartServiceImpl.shoppingCartRepository
AccessPath.java: replaceBase(): replacement of base: $r3
DIRRegionAnalyzer.java: constructDIR(): Mapped: this.shoppingCartServiceImpl.shoppingCartRepository -> $r3.shoppingCartRepository
AccessPath.java: replaceBase(): input access path: this.shoppingCartServiceImpl.cartItemServiceImpl
AccessPath.java: replaceBase(): replacement of base: $r3
WARN: DIRRegionAnalyzer.java: constructDIR(): Invalid intermediate access path found
DIRRegionAnalyzer.java: constructDIR(): curUnit = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList)
DIRRegionAnalyzer.java: constructDIR(): Model Add Attribute Statement
Utils.java: getVarNode(): __modelattribute__cartItemList
Utils.java: getVarNode(): LinkedVariableBox(__modelattribute__cartItemList)
DIRRegionAnalyzer.java: constructDIR(): curUnit = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart)
DIRRegionAnalyzer.java: constructDIR(): Model Add Attribute Statement
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: __modelattribute__shoppingCart
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: shoppingCart
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [ShoppingCart.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
]
AccessPath.java: replaceBase(): input access path: __modelattribute__shoppingCart.id
AccessPath.java: replaceBase(): replacement of base: shoppingCart
AccessPath.java: replaceBase(): input access path: __modelattribute__shoppingCart.GrandTotal
AccessPath.java: replaceBase(): replacement of base: shoppingCart
AccessPath.java: replaceBase(): input access path: __modelattribute__shoppingCart.cartItemList
AccessPath.java: replaceBase(): replacement of base: shoppingCart
AccessPath.java: replaceBase(): input access path: __modelattribute__shoppingCart.user
AccessPath.java: replaceBase(): replacement of base: shoppingCart
DIRRegionAnalyzer.java: constructDIR(): curUnit = return "shoppingCart"
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r1 ~~~
MethodWontHandleOp

~~~ $r3.shoppingCartRepository ~~~
Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode

~~~ __modelattribute__cartItemList ~~~
Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ __modelattribute__shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ __modelattribute__shoppingCart.GrandTotal ~~~
UnknownNode

~~~ __modelattribute__shoppingCart.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ __modelattribute__shoppingCart.id ~~~
this.shoppingCart.id

~~~ __modelattribute__shoppingCart.user ~~~
this.shoppingCart.user

~~~ cartItemList ~~~
Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ return ~~~
"shoppingCart"

~~~ shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ shoppingCart.GrandTotal ~~~
UnknownNode

~~~ shoppingCart.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ shoppingCart.id ~~~
this.shoppingCart.id

~~~ shoppingCart.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

~~~ this.shoppingCartServiceImpl.shoppingCartRepository ~~~
Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode

~~~ user ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | MethodWontHandleOp

~~~ user.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| email

~~~ user.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| enabled

~~~ user.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| firstName

~~~ user.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| id

~~~ user.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| lastName

~~~ user.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| password

~~~ user.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| phone

~~~ user.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ user.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ user.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ user.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ user.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| MethodWontHandleOp


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r1 ~~~
MethodWontHandleOp

~~~ $r3.shoppingCartRepository ~~~
Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode

~~~ __modelattribute__cartItemList ~~~
Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ __modelattribute__shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ __modelattribute__shoppingCart.GrandTotal ~~~
UnknownNode

~~~ __modelattribute__shoppingCart.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ __modelattribute__shoppingCart.id ~~~
this.shoppingCart.id

~~~ __modelattribute__shoppingCart.user ~~~
this.shoppingCart.user

~~~ cartItemList ~~~
Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

~~~ return ~~~
"shoppingCart"

~~~ shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ shoppingCart.GrandTotal ~~~
UnknownNode

~~~ shoppingCart.cartItemList ~~~
this.shoppingCart.cartItemList

~~~ shoppingCart.id ~~~
this.shoppingCart.id

~~~ shoppingCart.user ~~~
this.shoppingCart.user

~~~ this ~~~
Self

~~~ this.shoppingCartServiceImpl.shoppingCartRepository ~~~
Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode

~~~ user ~~~
Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | MethodWontHandleOp

~~~ user.email ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| email

~~~ user.enabled ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| enabled

~~~ user.firstName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| firstName

~~~ user.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| id

~~~ user.lastName ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| lastName

~~~ user.password ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| password

~~~ user.phone ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| phone

~~~ user.shoppingCart ~~~
User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

~~~ user.userPaymentList ~~~
User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

~~~ user.userRoles ~~~
User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

~~~ user.userShippingList ~~~
User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

~~~ user.username ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| MethodWontHandleOp


DIR.java: updateRegion(): update region entry: shoppingCart.id=this.shoppingCart.id
DIR.java: updateRegion(): update region entry: cartItemList=Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
DIR.java: updateRegion(): update region entry: $r3.shoppingCartRepository=Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode
DIR.java: updateRegion(): update region entry: user.username=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| MethodWontHandleOp
DIR.java: updateRegion(): update region entry: shoppingCart.cartItemList=this.shoppingCart.cartItemList
DIR.java: updateRegion(): update region entry: user.phone=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| phone
DIR.java: updateRegion(): update region entry: user.shoppingCart=User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
DIR.java: updateRegion(): update region entry: user.userRoles=User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId
DIR.java: updateRegion(): update region entry: user.email=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| email
DIR.java: updateRegion(): update region entry: shoppingCart=User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
DIR.java: updateRegion(): update region entry: __modelattribute__shoppingCart=User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
DIR.java: updateRegion(): update region entry: $r1=MethodWontHandleOp
DIR.java: updateRegion(): update region entry: user.userPaymentList=User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
DIR.java: updateRegion(): update region entry: user.id=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| id
DIR.java: updateRegion(): update region entry: __modelattribute__shoppingCart.cartItemList=this.shoppingCart.cartItemList
DIR.java: updateRegion(): update region entry: __modelattribute__shoppingCart.id=this.shoppingCart.id
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: user.password=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| password
DIR.java: updateRegion(): update region entry: user.lastName=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| lastName
DIR.java: updateRegion(): update region entry: __modelattribute__cartItemList=Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp
DIR.java: updateRegion(): update region entry: this.shoppingCartServiceImpl.shoppingCartRepository=Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode
DIR.java: updateRegion(): update region entry: user.userShippingList=User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
DIR.java: updateRegion(): update region entry: __modelattribute__shoppingCart.GrandTotal=UnknownNode
DIR.java: updateRegion(): update region entry: user.enabled=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| enabled
DIR.java: updateRegion(): update region entry: user.firstName=Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| firstName
DIR.java: updateRegion(): update region entry: user=Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | MethodWontHandleOp
DIR.java: updateRegion(): update region entry: shoppingCart.GrandTotal=UnknownNode
DIR.java: updateRegion(): update region entry: shoppingCart.user=this.shoppingCart.user
DIR.java: updateRegion(): update region entry: return="shoppingCart"
DIR.java: updateRegion(): update region entry: __modelattribute__shoppingCart.user=this.shoppingCart.user
FuncStackAnalyzer.java: constructDIRForStack(): Printing veMap for method: com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)
FuncStackAnalyzer.java: constructDIRForStack(): VEMap Num Entries: 30
FuncStackAnalyzer.java: constructDIRForStack(): key set of ve map of root function: [shoppingCart.id, cartItemList, $r3.shoppingCartRepository, user.username, shoppingCart.cartItemList, user.phone, user.shoppingCart, user.userRoles, user.email, shoppingCart, __modelattribute__shoppingCart, $r1, user.userPaymentList, user.id, __modelattribute__shoppingCart.cartItemList, __modelattribute__shoppingCart.id, this, user.password, user.lastName, __modelattribute__cartItemList, this.shoppingCartServiceImpl.shoppingCartRepository, user.userShippingList, __modelattribute__shoppingCart.GrandTotal, user.enabled, user.firstName, user, shoppingCart.GrandTotal, shoppingCart.user, return, __modelattribute__shoppingCart.user]
SavePostProcess.java: SavePostProcess(): repo varnode: shoppingCart.id
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: cartItemList
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: $r3.shoppingCartRepository
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: handleCascading(): accesspathsofarg: [shoppingCart.id, shoppingCart.cartItemList, shoppingCart.GrandTotal, shoppingCart.user]
cosntruct/utils.java: mapDBFetchAccessGraph(): check relExpBaseAccp= User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
cosntruct/utils.java: mapDBFetchAccessGraph(): check = Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.domain.User)
| NullOp
cosntruct/utils.java: mapDBFetchAccessGraph(): check relExpBaseAccp= Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.domain.User)
| NullOp
cosntruct/utils.java: mapDBFetchAccessGraph(): check = Join
| Join
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | ClassRef(com.bookstore.domain.User)
| | NullOp
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userShippingList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userPaymentList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userRoles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set userRoles [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
SavePostProcess.java: handleCascading(): coll f: cartItemList
SavePostProcess.java: java.lang.ArrayIndexOutOfBoundsException: 0
transformSave(): saveNode = Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
	at dbridge.analysis.eqsql.expr.node.Node.getChild(Node.java:73)
	at com.iisc.pav.AlloyGenerator.generate(AlloyGenerator.java:484)
	at com.iisc.pav.AlloyGenerator.<init>(AlloyGenerator.java:153)
	at dbridge.analysis.eqsql.FuncStackAnalyzer.constructDIRsForStack(FuncStackAnalyzer.java:234)
	at dbridge.analysis.eqsql.FuncStackAnalyzer.findMainFuncRetNode(FuncStackAnalyzer.java:137)
	at dbridge.analysis.eqsql.FuncStackAnalyzer.run(FuncStackAnalyzer.java:111)
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
	at dbridge.analysis.eqsql.EqSQLDriver.getExpr(EqSQLDriver.java:122)
	at dbridge.analysis.eqsql.EqSQLDriver.doEqSQLRewrite(EqSQLDriver.java:233)
	at dbridge.analysis.eqsql.EqSQLDriverTest.inferSummary(EqSQLDriverTest.java:85)
	at dbridge.analysis.eqsql.EqSQLDriverTest.main(EqSQLDriverTest.java:69)
java.lang.NullPointerException
	at mytest.debug.dg(debug.java:66)
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
	at dbridge.analysis.eqsql.EqSQLDriver.doEqSQLRewrite(EqSQLDriver.java:235)
	at dbridge.analysis.eqsql.EqSQLDriverTest.inferSummary(EqSQLDriverTest.java:85)
| | | | Equals
| | | | | lhs
| | | | | rhs
	at dbridge.analysis.eqsql.EqSQLDriverTest.main(EqSQLDriverTest.java:69)
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
java.lang.RuntimeException: Phase jtp.ServiceAllocTransform already in pack
| | | UnknownNode
	at soot.Pack.add(Pack.java:60)
SavePostProcess.java: 	at dbridge.analysis.eqsql.EqSQLDriver.getExpr(EqSQLDriver.java:96)
	at dbridge.analysis.eqsql.EqSQLDriver.doEqSQLRewrite(EqSQLDriver.java:233)
transformSave(): columns: [FieldRef(com.bookstore.domain.ShoppingCart.id), FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)]
	at dbridge.analysis.eqsql.EqSQLDriverTest.testDoEqSQLRewrite(EqSQLDriverTest.java:119)
	at dbridge.analysis.eqsql.EqSQLDriverTest.main(EqSQLDriverTest.java:73)
SavePostProcess.java: transformSave(): idfieldname: id
SavePostProcess.java: transformSave(): idInd = 0
SavePostProcess.java: transformSave(): idField: this.shoppingCart.id
SavePostProcess.java: transformSave(): transformed save: ?
| Equals
| | Sel
| | | Cartesian
| | | | $r3.shoppingCartRepository
| | | Equals
| | | | FieldRef($r3.shoppingCartRepository.id)
| | | | this.shoppingCart.id
| | EmptySet
| UnionOp
| | $r3.shoppingCartRepository
| | List
| | | this.shoppingCart.id
| | | UnknownNode
| UnionOp
| | RelationalMinus
| | | Cartesian
| | | | $r3.shoppingCartRepository
| | | Sel
| | | | Cartesian
| | | | | $r3.shoppingCartRepository
| | | | Equals
| | | | | FieldRef($r3.shoppingCartRepository.id)
| | | | | this.shoppingCart.id
| | List
| | | this.shoppingCart.id
| | | UnknownNode
SavePostProcess.java: SavePostProcess(): repo varnode: user.username
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: shoppingCart.cartItemList
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: user.phone
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: user.shoppingCart
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: user.userRoles
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: user.email
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: shoppingCart
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__shoppingCart
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: $r1
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: user.userPaymentList
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: user.id
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__shoppingCart.cartItemList
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__shoppingCart.id
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: this
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: user.password
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: user.lastName
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__cartItemList
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: this.shoppingCartServiceImpl.shoppingCartRepository
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: handleCascading(): accesspathsofarg: [shoppingCart.id, shoppingCart.cartItemList, shoppingCart.GrandTotal, shoppingCart.user]
cosntruct/utils.java: mapDBFetchAccessGraph(): check relExpBaseAccp= User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal
cosntruct/utils.java: mapDBFetchAccessGraph(): check = Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.domain.User)
| NullOp
cosntruct/utils.java: mapDBFetchAccessGraph(): check relExpBaseAccp= Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.domain.User)
| NullOp
cosntruct/utils.java: mapDBFetchAccessGraph(): check = Join
| Join
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | ClassRef(com.bookstore.domain.User)
| | NullOp
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userShippingList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userPaymentList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userRoles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set userRoles [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
SavePostProcess.java: handleCascading(): coll f: cartItemList
SavePostProcess.java: transformSave(): saveNode = Save
| $r2
| Tuple
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | List
| | | this.shoppingCart.id
| | | UnknownNode
SavePostProcess.java: transformSave(): columns: [FieldRef(com.bookstore.domain.ShoppingCart.id), FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)]
SavePostProcess.java: transformSave(): idfieldname: id
SavePostProcess.java: transformSave(): idInd = 0
SavePostProcess.java: transformSave(): idField: this.shoppingCart.id
SavePostProcess.java: transformSave(): transformed save: ?
| Equals
| | Sel
| | | Cartesian
| | | | this.shoppingCartServiceImpl.shoppingCartRepository
| | | Equals
| | | | FieldRef(this.shoppingCartServiceImpl.shoppingCartRepository.id)
| | | | this.shoppingCart.id
| | EmptySet
| UnionOp
| | this.shoppingCartServiceImpl.shoppingCartRepository
| | List
| | | this.shoppingCart.id
| | | UnknownNode
| UnionOp
| | RelationalMinus
| | | Cartesian
| | | | this.shoppingCartServiceImpl.shoppingCartRepository
| | | Sel
| | | | Cartesian
| | | | | this.shoppingCartServiceImpl.shoppingCartRepository
| | | | Equals
| | | | | FieldRef(this.shoppingCartServiceImpl.shoppingCartRepository.id)
| | | | | this.shoppingCart.id
| | List
| | | this.shoppingCart.id
| | | UnknownNode
SavePostProcess.java: SavePostProcess(): repo varnode: user.userShippingList
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__shoppingCart.GrandTotal
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: user.enabled
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: user.firstName
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: user
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: shoppingCart.GrandTotal
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: shoppingCart.user
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: return
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__shoppingCart.user
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
key: cartItemListRepo
value: ?
| Equals
| | User.shoppingCart=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.bookstore.domain.User)
| | | | | Equals
| | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | MethodWontHandleOp
| | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | Equals
| | | | | lhs
| | | | | rhs
| | | List
| | | | id
| | | | GrandTotal
| | NullOp
| cartItemListRepo
| UnionOp
| | RelationalMinus
| | | cartItemListRepo
| | | Join
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Sel
| | | | | | | ClassRef(com.bookstore.domain.User)
| | | | | | | Equals
| | | | | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | | | | MethodWontHandleOp
| | | | | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | | | | Equals
| | | | | | | lhs
| | | | | | | rhs
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | NullOp
| | this.shoppingCart.cartItemList

key: shoppingCart.id
value: this.shoppingCart.id

key: cartItemList
value: Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

key: $r3.shoppingCartRepository
value: ?
| Equals
| | Sel
| | | Cartesian
| | | | $r3.shoppingCartRepository
| | | Equals
| | | | FieldRef($r3.shoppingCartRepository.id)
| | | | this.shoppingCart.id
| | EmptySet
| UnionOp
| | $r3.shoppingCartRepository
| | List
| | | this.shoppingCart.id
| | | UnknownNode
| UnionOp
| | RelationalMinus
| | | Cartesian
| | | | $r3.shoppingCartRepository
| | | Sel
| | | | Cartesian
| | | | | $r3.shoppingCartRepository
| | | | Equals
| | | | | FieldRef($r3.shoppingCartRepository.id)
| | | | | this.shoppingCart.id
| | List
| | | this.shoppingCart.id
| | | UnknownNode

key: user.username
value: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| MethodWontHandleOp

key: shoppingCart.cartItemList
value: this.shoppingCart.cartItemList

key: user.phone
value: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| phone

key: user.shoppingCart
value: User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

key: user.userRoles
value: User.userRoles=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.security.UserRole)
| | Equals
| | | User.id
| | | UserRole.user_id
| List
| | userRoleId

key: user.email
value: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| email

key: shoppingCart
value: User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

key: __modelattribute__shoppingCart
value: User.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | lhs
| | | rhs
| List
| | id
| | GrandTotal

key: $r1
value: MethodWontHandleOp

key: user.userPaymentList
value: User.userPaymentList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserPayment)
| | Equals
| | | User.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment

key: user.id
value: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| id

key: __modelattribute__shoppingCart.cartItemList
value: this.shoppingCart.cartItemList

key: __modelattribute__shoppingCart.id
value: this.shoppingCart.id

key: this
value: Self

key: user.password
value: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| password

key: user.lastName
value: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| lastName

key: __modelattribute__cartItemList
value: Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp

key: this.shoppingCartServiceImpl.shoppingCartRepository
value: ?
| Equals
| | Sel
| | | Cartesian
| | | | this.shoppingCartServiceImpl.shoppingCartRepository
| | | Equals
| | | | FieldRef(this.shoppingCartServiceImpl.shoppingCartRepository.id)
| | | | this.shoppingCart.id
| | EmptySet
| UnionOp
| | this.shoppingCartServiceImpl.shoppingCartRepository
| | List
| | | this.shoppingCart.id
| | | UnknownNode
| UnionOp
| | RelationalMinus
| | | Cartesian
| | | | this.shoppingCartServiceImpl.shoppingCartRepository
| | | Sel
| | | | Cartesian
| | | | | this.shoppingCartServiceImpl.shoppingCartRepository
| | | | Equals
| | | | | FieldRef(this.shoppingCartServiceImpl.shoppingCartRepository.id)
| | | | | this.shoppingCart.id
| | List
| | | this.shoppingCart.id
| | | UnknownNode

key: user.userShippingList
value: User.userShippingList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.User)
| | | Equals
| | | | FieldRef(com.bookstore.domain.User.Username)
| | | | MethodWontHandleOp
| | ClassRef(com.bookstore.domain.UserShipping)
| | Equals
| | | User.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault

key: __modelattribute__shoppingCart.GrandTotal
value: UnknownNode

key: user.enabled
value: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| enabled

key: user.firstName
value: Pi
| Sel
| | ClassRef(com.bookstore.domain.User)
| | Equals
| | | FieldRef(com.bookstore.domain.User.Username)
| | | MethodWontHandleOp
| firstName

key: user
value: Sel
| ClassRef(com.bookstore.domain.User)
| Equals
| | FieldRef(com.bookstore.domain.User.Username)
| | MethodWontHandleOp

key: shoppingCart.GrandTotal
value: UnknownNode

key: shoppingCart.user
value: this.shoppingCart.user

key: return
value: "shoppingCart"

key: __modelattribute__shoppingCart.user
value: this.shoppingCart.user





























1 Join
| User.shoppingCart=Pi
| | Join
| | | Sel
| | | | ClassRef(com.bookstore.domain.User)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.User.Username)
| | | | | MethodWontHandleOp
| | | ClassRef(com.bookstore.domain.ShoppingCart)
| | | Equals
| | | | lhs
| | | | rhs
| | List
| | | id
| | | GrandTotal
| ClassRef(com.bookstore.repository.CartItemRepository)
| NullOp


2 ClassRef(com.bookstore.repository.CartItemRepository)


EqSQLDriver.java: doEqSQLRewrite(): Before Transform:
FAILURE
starttime, test: 1653383962320
EqSQLDriver.java: doSetEntryPoints: inputPath is target/classes
FAILURE
