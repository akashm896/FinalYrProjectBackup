EqSQLDriverTest.java: main(): Got the bench-dir option value: target/classes
EqSQLDriverTest.java: main(): Got the controllersig option value: org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String)
github/Utils.java: getAbsBenchDir(): pwd: /home/akash/Study/3rd sem/Dbridge_NRA/DbridgeNRA
starttime, test: 1668146833140
EqSQLDriver.java: doSetEntryPoints: inputPath is target/classes
Warning: java.lang.Object is a phantom class!
Warning: org.springframework.validation.Validator is a phantom class!
Warning: org.springframework.web.bind.annotation.RequestMapping is a phantom class!
Warning: org.springframework.validation.BindingResult is a phantom class!
Warning: org.springframework.stereotype.Controller is a phantom class!
Warning: java.lang.Integer is a phantom class!
Warning: org.springframework.ui.ModelMap is a phantom class!
Warning: java.util.HashSet is a phantom class!
Warning: org.springframework.web.bind.annotation.ModelAttribute is a phantom class!
Warning: org.springframework.web.bind.annotation.GetMapping is a phantom class!
Warning: java.lang.String is a phantom class!
Warning: org.springframework.web.bind.annotation.PostMapping is a phantom class!
Warning: java.util.Iterator is a phantom class!
Warning: java.util.Collection is a phantom class!
Warning: java.util.List is a phantom class!
Warning: org.springframework.web.bind.WebDataBinder is a phantom class!
Warning: org.springframework.web.bind.annotation.InitBinder is a phantom class!
Warning: org.springframework.util.StringUtils is a phantom class!
Warning: org.springframework.format.annotation.DateTimeFormat is a phantom class!
Warning: java.util.ArrayList is a phantom class!
Warning: javax.persistence.Table is a phantom class!
Warning: org.springframework.beans.support.PropertyComparator is a phantom class!
Warning: java.util.LinkedHashSet is a phantom class!
Warning: javax.persistence.Entity is a phantom class!
Warning: org.springframework.beans.support.MutableSortDefinition is a phantom class!
Warning: javax.persistence.ManyToOne is a phantom class!
Warning: javax.persistence.JoinColumn is a phantom class!
Warning: java.util.Set is a phantom class!
Warning: org.springframework.beans.support.SortDefinition is a phantom class!
Warning: javax.persistence.Column is a phantom class!
Warning: javax.persistence.Transient is a phantom class!
Warning: java.time.LocalDate is a phantom class!
Warning: java.util.Collections is a phantom class!
Warning: org.springframework.format.Formatter is a phantom class!
Warning: org.springframework.beans.factory.annotation.Autowired is a phantom class!
Warning: org.springframework.stereotype.Component is a phantom class!
Warning: java.util.Locale is a phantom class!
Warning: java.lang.StringBuilder is a phantom class!
Warning: java.text.ParseException is a phantom class!
Warning: org.springframework.validation.Errors is a phantom class!
Warning: java.lang.Class is a phantom class!
Warning: org.springframework.data.repository.Repository is a phantom class!
Warning: org.springframework.data.jpa.repository.Query is a phantom class!
Warning: org.springframework.transaction.annotation.Transactional is a phantom class!
Warning: javax.validation.constraints.NotEmpty is a phantom class!
Warning: javax.validation.constraints.Digits is a phantom class!
Warning: javax.persistence.OneToMany is a phantom class!
Warning: org.springframework.core.style.ToStringCreator is a phantom class!
Warning: javax.persistence.MappedSuperclass is a phantom class!
Warning: java.io.Serializable is a phantom class!
Warning: javax.persistence.GeneratedValue is a phantom class!
Warning: javax.persistence.Id is a phantom class!
Warning: java.lang.Throwable is a phantom class!
Warning: java.lang.Void is a phantom class!
Warning: java.lang.Float is a phantom class!
Warning: java.lang.Double is a phantom class!
Warning: java.lang.AssertionError is a phantom class!
Warning: java.lang.NullPointerException is a phantom class!
Warning: java.lang.Character is a phantom class!
Warning: java.lang.Long is a phantom class!
Warning: java.lang.Short is a phantom class!
Warning: java.lang.StringBuffer is a phantom class!
Warning: java.lang.Boolean is a phantom class!
Warning: java.lang.Byte is a phantom class!
Warning: java.lang.NoClassDefFoundError is a phantom class!
Warning: java.lang.IndexOutOfBoundsException is a phantom class!
Warning: java.lang.StackOverflowError is a phantom class!
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
Warning: java.lang.Error is a phantom class!
Warning: java.lang.AbstractMethodError is a phantom class!
Warning: java.lang.ClassCastException is a phantom class!
Warning: java.lang.Runnable is a phantom class!
Warning: java.lang.VerifyError is a phantom class!
Warning: java.lang.NoSuchFieldError is a phantom class!
Warning: java.lang.IllegalMonitorStateException is a phantom class!
Warning: java.lang.Thread is a phantom class!
Warning: java.lang.UnknownError is a phantom class!
Warning: java.lang.InternalError is a phantom class!
Warning: java.lang.ArithmeticException is a phantom class!
Warning: java.lang.NegativeArraySizeException is a phantom class!
Warning: java.lang.ClassCircularityError is a phantom class!
Warning: java.lang.Cloneable is a phantom class!
Warning: java.lang.ref.Finalizer is a phantom class!
Warning: java.lang.LinkageError is a phantom class!
Warning: java.lang.IncompatibleClassChangeError is a phantom class!
Warning: java.lang.NoSuchMethodError is a phantom class!
Warning: java.lang.RuntimeException is a phantom class!
Warning: java.lang.ArrayIndexOutOfBoundsException is a phantom class!
Warning: java.lang.ThreadDeath is a phantom class!
Warning: java.lang.InstantiationError is a phantom class!
Warning: java.lang.IllegalAccessError is a phantom class!
Warning: java.lang.ClassNotFoundException is a phantom class!
Warning: java.lang.ClassFormatError is a phantom class!
Warning: java.lang.UnsatisfiedLinkError is a phantom class!
Warning: java.lang.ArrayStoreException is a phantom class!
Warning: java.lang.ExceptionInInitializerError is a phantom class!
Warning: java.lang.OutOfMemoryError is a phantom class!
patternMatch.java: getUserInputRules: i=0
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? (Neq (= <col1> <col2>) (0Node)) (union (repo) (list)) (repo))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (select <coll> (= <col1> <col2>))
Fold
| FuncExpr
| | Ternary
| | | NotEq
| | | | Eq
| | | | | Any
| | | | | Any
| | | | Any
| | | Union
| | | | Any
| | | | List
| | | Any
| Any
| Any
| Any


Select
| Id:13
| Eq
| | Id:5
| | Id:6

{<col1>=5, <col2>=6, <init_val>=12, <itr>=14, <coll>=13}
patternMatch.java: getUserInputRules: i=2
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? (= (? (= <col1> <col2>) (1Node) (0Node)) <col3>) (? (Neq (= <col4> <col5>) <col6>) (col7) (? (= (? (= <col8> <col9>) (1Node) (0Node)) <col10>) (? (Neq (= <col4> <col5>) <col6>) (col7) (col11)) (col11))) (col11))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (select <coll> (AND (OR (= <col1> <col2>) (Neq <col8> <col9>)) (= <col4> <col5>)))
Fold
| FuncExpr
| | Ternary
| | | Eq
| | | | Ternary
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | | Any
| | | | | Any
| | | | Any
| | | Ternary
| | | | NotEq
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | | Any
| | | | Any
| | | | Ternary
| | | | | Eq
| | | | | | Ternary
| | | | | | | Eq
| | | | | | | | Any
| | | | | | | | Any
| | | | | | | Any
| | | | | | | Any
| | | | | | Any
| | | | | Ternary
| | | | | | NotEq
| | | | | | | Eq
| | | | | | | | Any
| | | | | | | | Any
| | | | | | | Any
| | | | | | Any
| | | | | | Any
| | | | | Any
| | | Any
| Any
| Any
| Any


Select
| Id:53
| And
| | Or
| | | Eq
| | | | Id:21
| | | | Id:22
| | | NotEq
| | | | Id:37
| | | | Id:38
| | Eq
| | | Id:45
| | | Id:46

{<col9>=38, <col8>=37, <col5>=46, <col6>=47, <col3>=25, <col4>=45, <col1>=21, <col10>=41, <col2>=22, <init_val>=52, <itr>=54, <coll>=53}
patternMatch.java: getUserInputRules: i=4
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? <cond> (save <repo> <list1>) (save <repo> <list2>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (- <init_val> <coll>) (union (pi (select <coll> <cond>) <list1>) (pi (select <coll> (= <cond> 0)) <list2>)))
Fold
| FuncExpr
| | Ternary
| | | Any
| | | Save
| | | | Any
| | | | Any
| | | Save
| | | | Any
| | | | Any
| Any
| Any
| Any


Union
| RelMinus
| | Id:65
| | Id:66
| Union
| | Project
| | | Select
| | | | Id:66
| | | | Id:58
| | | Id:61
| | Project
| | | Select
| | | | Id:66
| | | | Eq
| | | | | Id:58
| | | | | Zero
| | | Id:64

{<col9>=38, <col8>=37, <col5>=46, <col6>=47, <col3>=25, <col4>=45, <col10>=41, <repo>=63, <cond>=58, <init_val>=65, <itr>=67, <col1>=21, <list2>=64, <col2>=22, <list1>=61, <coll>=66}
patternMatch.java: getUserInputRules: i=6
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? <cond> (add_all_fields <list>) <elseval>)) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (pi (select <coll> <cond>) <list>) <init_val>)
Fold
| FuncExpr
| | Ternary
| | | Any
| | | AddWithFieldExprs
| | | | Any
| | | Any
| Any
| Any
| Any


Union
| Project
| | Select
| | | Id:76
| | | Id:71
| | Id:73
| Id:75

{<col9>=38, <list>=73, <col8>=37, <col5>=46, <col6>=47, <col3>=25, <col4>=45, <col10>=41, <repo>=63, <cond>=71, <init_val>=75, <itr>=77, <elseval>=74, <col1>=21, <list2>=64, <col2>=22, <list1>=61, <coll>=76}
patternMatch.java: getUserInputRules: i=8
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (save <repo> (tuple (join next <join_right>) <list>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (- <repo> (select <repo> (in id (pi (join <coll> <join_right>) id)))) (pi <list> (join <coll> <join_right>)))
Fold
| FuncExpr
| | Save
| | | Any
| | | Tuple
| | | | Join
| | | | | Iterator
| | | | | Any
| | | | Any
| Any
| Any
| Any


Union
| RelMinus
| | Id:81
| | Select
| | | Id:81
| | | In
| | | | Id
| | | | Project
| | | | | Join
| | | | | | Id:88
| | | | | | Id:85
| | | | | Id
| Project
| | Id:86
| | Join
| | | Id:88
| | | Id:85

{<col9>=38, <list>=86, <col8>=37, <col5>=46, <col6>=47, <col3>=25, <col4>=45, <col10>=41, <repo>=81, <cond>=71, <init_val>=87, <join_right>=85, <itr>=89, <elseval>=74, <col1>=21, <list2>=64, <col2>=22, <list1>=61, <coll>=88}
patternMatch.java: getUserInputRules: i=10
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (add_all_fields <receiver> (tuple (select <rel> (= <clm> <itr>)) <list>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (pi <list> (select <rel> (in <clm> <coll>))) <init_val>)
Fold
| FuncExpr
| | AddWithFieldExprs
| | | Any
| | | Tuple
| | | | Select
| | | | | Any
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | Any
| Any
| Any
| Any


Union
| Project
| | Id:100
| | Select
| | | Id:96
| | | In
| | | | Id:98
| | | | Id:102
| Id:101

{<col9>=38, <list>=100, <col8>=37, <rel>=96, <col5>=46, <col6>=47, <col3>=25, <col4>=45, <col10>=41, <repo>=81, <cond>=71, <clm>=98, <init_val>=101, <join_right>=85, <itr>=103, <receiver>=93, <elseval>=74, <col1>=21, <list2>=64, <col2>=22, <list1>=61, <coll>=102}
patternMatch.java: getUserInputRules: i=12
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (+ <aggvar> (pi (select <rel> (= <clm> <itr>)) <clmagg>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (+ (agg_sum (select <rel> (in <clm> <coll>)) <clmagg>) <init_val>)
Fold
| FuncExpr
| | ArithAdd
| | | Any
| | | Project
| | | | Select
| | | | | Any
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | Any
| Any
| Any
| Any


ArithAdd
| AggSum
| | Select
| | | Id:110
| | | In
| | | | Id:112
| | | | Id:116
| | Id:114
| Id:115

{<col9>=38, <list>=100, <col8>=37, <rel>=110, <col5>=46, <col6>=47, <col3>=25, <col4>=45, <col10>=41, <repo>=81, <cond>=71, <clm>=112, <init_val>=115, <join_right>=85, <itr>=117, <clmagg>=114, <receiver>=93, <aggvar>=107, <elseval>=74, <col1>=21, <list2>=64, <col2>=22, <list1>=61, <coll>=116}
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/home/akash/Study/3rd%20sem/Dbridge_NRA/DbridgeNRA/lib/eqsql.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/home/akash/Study/3rd%20sem/Dbridge_NRA/DbridgeNRA/lib/soot-trunk-1.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [org.slf4j.impl.SimpleLoggerFactory]
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: loop10
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.util.HashSet loop10(java.lang.String)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        java.lang.String text, $r3;
        java.util.List findPetTypes;
        java.util.HashSet 'ret', $r1;
        java.util.Iterator l4;
        org.springframework.samples.petclinic.owner.PetType type;
        org.springframework.samples.petclinic.owner.PetRepository $r0;
        boolean $z0, $z1;
        java.lang.Object $r2;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        text := @parameter0: java.lang.String;

        $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

        findPetTypes = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        'ret' = $r1;

        l4 = interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        type = (org.springframework.samples.petclinic.owner.PetType) $r2;

        $r3 = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text);

        if $z1 == 0 goto label2;

        virtualinvoke 'ret'.<java.util.HashSet: boolean add(java.lang.Object)>(type);

     label2:
        goto label1;

     label3:
        return 'ret';
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder internalTransform called!
FuncStackInfoBuilder.java: internalTransformHelper(): FuncStackInfoBuilder.java: body: 
    public java.util.HashSet loop10(java.lang.String)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        java.lang.String text, $r3;
        java.util.List findPetTypes;
        java.util.HashSet 'ret', $r1;
        java.util.Iterator l4;
        org.springframework.samples.petclinic.owner.PetType type;
        org.springframework.samples.petclinic.owner.PetRepository $r0;
        boolean $z0, $z1;
        java.lang.Object $r2;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        text := @parameter0: java.lang.String;

        $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

        findPetTypes = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        'ret' = $r1;

        l4 = interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        type = (org.springframework.samples.petclinic.owner.PetType) $r2;

        $r3 = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text);

        if $z1 == 0 goto label2;

        virtualinvoke 'ret'.<java.util.HashSet: boolean add(java.lang.Object)>(type);

     label2:
        goto label1;

     label3:
        return 'ret';
    }

FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: text
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: text
FuncStackInfoBuilder.java: regionTreeForBody(): local: findPetTypes
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: findPetTypes
FuncStackInfoBuilder.java: regionTreeForBody(): local: ret
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: ret
FuncStackInfoBuilder.java: regionTreeForBody(): local: l4
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: l4
FuncStackInfoBuilder.java: regionTreeForBody(): local: type
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: type
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local: $z0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $z0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r3
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r3
FuncStackInfoBuilder.java: regionTreeForBody(): local: $z1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $z1
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: loop10 is Block 0:
[preds: ] [succs: 1 ]
this := @this: org.springframework.samples.petclinic.owner.PetController;
text := @parameter0: java.lang.String;
$r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;
findPetTypes = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>();
$r1 = new java.util.HashSet;
specialinvoke $r1.<java.util.HashSet: void <init>()>();
ret = $r1;
l4 = interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>();

Block 1:
[preds: 0 4 ] [succs: 2 5 ]
$z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto return ret;

Block 2:
[preds: 1 ] [succs: 3 4 ]
$r2 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();
type = (org.springframework.samples.petclinic.owner.PetType) $r2;
$r3 = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>();
$z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text);
if $z1 == 0 goto (branch);

Block 3:
[preds: 2 ] [succs: 4 ]
virtualinvoke ret.<java.util.HashSet: boolean add(java.lang.Object)>(type);

Block 4:
[preds: 2 3 ] [succs: 1 ]
goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()];

Block 5:
[preds: 1 ] [succs: ]
return ret;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
0 -> 1
1 -> 2
2 -> 3
3 -> 4
2 -> 4
1 -> 5
4 -> 1
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
dfsVisit: start = 1
dfsVisit: start = 2
dfsVisit: start = 3
dfsVisit: start = 4
dfsVisit: start = 5
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [4, 3, 2, 5, 1, 0]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 4
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = 4
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [4]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 4
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 4
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 4
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [4]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 4
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [4]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 3
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = 3
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [3]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 3
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 3
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 3
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [3]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 3
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [3]
StructuralAnalysis.java: structuralAnalysis(): break point!
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [2]

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_IfThen0
StructuralAnalysis.java: replace(): v: 2
StructuralAnalysis.java: replace(): v: 3
StructuralAnalyis.java: compact(): compact: vset = [2, 3]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, 2, 3, 4, 5, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 2
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [4, 3, 2, 5, 1, 0]
removeVertices: vset = [2, 3]
removeVertices: v = 2
removeVertex: adj = {1=[2, 5], 2=[3, 4], 3=[4], 4=[1], 5=[], 0=[1]}
removeVertex: incoming = {1=[0, 4], 2=[1], 3=[2], 4=[2, 3], 5=[1], 0=[]}
removeVertex: v = 2
removeVertex: v2 = 1
removeVertices: v = 3
removeVertex: adj = {1=[5], 3=[4], 4=[1], 5=[], 0=[1]}
removeVertex: incoming = {1=[0, 4], 3=[], 4=[3], 5=[1], 0=[]}
removeVertex: v = 3
StructuralAnalyis.java: compact(): compact: g.vertices after: [1, 4, 5, R_IfThen0, 0]
StructuralAnalyis.java: compact(): compact: postCtr after: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [4, R_IfThen0, 5, 1, 0]
StructuralAnalysis.java: reduce(): structType before: {}
StructuralAnalysis.java: reduce(): structType after: {R_IfThen0=IfThen}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_IfThen0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = R_IfThen0
StructuralAnalysis.java: acyclicRegionType(): currVer = 4
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [R_IfThen0, 4]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = Sequential

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_Sequential1
StructuralAnalysis.java: replace(): v: R_IfThen0
StructuralAnalysis.java: replace(): v: 4
StructuralAnalyis.java: compact(): compact: vset = [R_IfThen0, 4]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, 4, 5, R_IfThen0, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [4, R_IfThen0, 5, 1, 0]
removeVertices: vset = [R_IfThen0, 4]
removeVertices: v = R_IfThen0
removeVertex: adj = {1=[5, R_IfThen0], 4=[1], 5=[], R_IfThen0=[4], 0=[1]}
removeVertex: incoming = {1=[0, 4], 4=[R_IfThen0], 5=[1], R_IfThen0=[1], 0=[]}
removeVertex: v = R_IfThen0
removeVertex: v2 = 1
removeVertices: v = 4
removeVertex: adj = {1=[5], 4=[1], 5=[], 0=[1]}
removeVertex: incoming = {1=[0, 4], 4=[], 5=[1], 0=[]}
removeVertex: v = 4
StructuralAnalyis.java: compact(): compact: g.vertices after: [1, 5, R_Sequential1, 0]
StructuralAnalyis.java: compact(): compact: postCtr after: 0
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_Sequential1, 5, 1, 0]
StructuralAnalysis.java: reduce(): structType before: {R_IfThen0=IfThen}
StructuralAnalysis.java: reduce(): structType after: {R_Sequential1=Sequential, R_IfThen0=IfThen}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_Sequential1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = R_Sequential1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [R_Sequential1]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = R_Sequential1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = R_Sequential1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: R_Sequential1
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [R_Sequential1]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = R_Sequential1
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [R_Sequential1]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 5
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [5]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 5
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 5
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 5
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [5]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 5
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [5]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [1]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: [R_Sequential1]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 1
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [1, R_Sequential1]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 1
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [1, R_Sequential1]
dfsVisit: start = 1
dfsVisit: start = 5
dfsVisit: start = R_Sequential1
StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_WhileLoop2
StructuralAnalysis.java: replace(): v: 1
StructuralAnalysis.java: replace(): v: R_Sequential1
StructuralAnalyis.java: compact(): compact: vset = [1, R_Sequential1]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, 5, R_Sequential1, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 2
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [R_Sequential1, 5, 1, 0]
removeVertices: vset = [1, R_Sequential1]
removeVertices: v = 1
removeVertex: adj = {1=[5, R_Sequential1], 5=[], R_Sequential1=[1], 0=[1]}
removeVertex: incoming = {1=[0, R_Sequential1], 5=[1], R_Sequential1=[1], 0=[]}
removeVertex: v = 1
removeVertex: v2 = 0
removeVertex: v2 = R_Sequential1
removeVertices: v = R_Sequential1
removeVertex: adj = {5=[], R_Sequential1=[], 0=[]}
removeVertex: incoming = {5=[], R_Sequential1=[], 0=[]}
removeVertex: v = R_Sequential1
StructuralAnalyis.java: compact(): compact: g.vertices after: [5, R_WhileLoop2, 0]
StructuralAnalyis.java: compact(): compact: postCtr after: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [5, R_WhileLoop2, 0]
StructuralAnalysis.java: reduce(): structType before: {R_Sequential1=Sequential, R_IfThen0=IfThen}
StructuralAnalysis.java: reduce(): structType after: {R_Sequential1=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_WhileLoop2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = R_WhileLoop2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [0, R_WhileLoop2, 5]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = Sequential

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_Sequential3
StructuralAnalysis.java: replace(): v: 0
StructuralAnalysis.java: replace(): v: R_WhileLoop2
StructuralAnalysis.java: replace(): v: 5
StructuralAnalyis.java: compact(): compact: vset = [0, R_WhileLoop2, 5]
StructuralAnalyis.java: compact(): compact: g.vertices before: [5, R_WhileLoop2, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [5, R_WhileLoop2, 0]
removeVertices: vset = [0, R_WhileLoop2, 5]
removeVertices: v = 0
removeVertex: adj = {5=[], R_WhileLoop2=[5], 0=[R_WhileLoop2]}
removeVertex: incoming = {5=[R_WhileLoop2], R_WhileLoop2=[0], 0=[]}
removeVertex: v = 0
removeVertices: v = R_WhileLoop2
removeVertex: adj = {5=[], R_WhileLoop2=[5]}
removeVertex: incoming = {5=[R_WhileLoop2], R_WhileLoop2=[]}
removeVertex: v = R_WhileLoop2
removeVertices: v = 5
removeVertex: adj = {5=[]}
removeVertex: incoming = {5=[]}
removeVertex: v = 5
StructuralAnalyis.java: compact(): compact: g.vertices after: [R_Sequential3]
StructuralAnalyis.java: compact(): compact: postCtr after: 0
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_Sequential3]
StructuralAnalysis.java: reduce(): structType before: {R_Sequential1=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop}
StructuralAnalysis.java: reduce(): structType after: {R_Sequential1=Sequential, R_Sequential3=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop}
StructuralAnalysis.java: structuralAnalysis(): structType: {R_Sequential1=Sequential, R_Sequential3=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop}
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential1=[R_IfThen0, 4], R_Sequential3=[0, R_WhileLoop2, 5], R_IfThen0=[2, 3], R_WhileLoop2=[1, R_Sequential1]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_WhileLoop2, 2=R_IfThen0, 3=R_IfThen0, 4=R_Sequential1, 5=R_Sequential3, R_Sequential1=R_WhileLoop2, R_IfThen0=R_Sequential1, R_WhileLoop2=R_Sequential3, 0=R_Sequential3}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential3
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- R_Sequential3
|  +- 0
|  +- R_WhileLoop2
|  |  +- 1
|  |  +- R_Sequential1
|  |  |  +- R_IfThen0
|  |  |  |  +- 2
|  |  |  |  +- 3
|  |  |  +- 4
|  +- 5

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: 1 ]
this := @this: org.springframework.samples.petclinic.owner.PetController;
text := @parameter0: java.lang.String;
$r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;
findPetTypes = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>();
$r1 = new java.util.HashSet;
specialinvoke $r1.<java.util.HashSet: void <init>()>();
ret = $r1;
l4 = interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>();

Block 1:
[preds: 0 4 ] [succs: 2 5 ]
$z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();
if $z0 == 0 goto return ret;

Block 2:
[preds: 1 ] [succs: 3 4 ]
$r2 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();
type = (org.springframework.samples.petclinic.owner.PetType) $r2;
$r3 = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>();
$z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text);
if $z1 == 0 goto (branch);

Block 3:
[preds: 2 ] [succs: 4 ]
virtualinvoke ret.<java.util.HashSet: boolean add(java.lang.Object)>(type);

Block 4:
[preds: 2 3 ] [succs: 1 ]
goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()];

Block 5:
[preds: 1 ] [succs: ]
return ret;


StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential1=[R_IfThen0, 4], R_Sequential3=[0, R_WhileLoop2, 5], R_IfThen0=[2, 3], R_WhileLoop2=[1, R_Sequential1]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_WhileLoop2, 2=R_IfThen0, 3=R_IfThen0, 4=R_Sequential1, 5=R_Sequential3, R_Sequential1=R_WhileLoop2, R_IfThen0=R_Sequential1, R_WhileLoop2=R_Sequential3, 0=R_Sequential3}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential3
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential1=Sequential, R_Sequential3=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.PetController, text := @parameter0: java.lang.String, $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, findPetTypes = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>(), $r1 = new java.util.HashSet, specialinvoke $r1.<java.util.HashSet: void <init>()>(), ret = $r1, l4 = interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return ret, $r2 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), type = (org.springframework.samples.petclinic.owner.PetType) $r2, $r3 = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>(), $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text), if $z1 == 0 goto (branch), virtualinvoke ret.<java.util.HashSet: boolean add(java.lang.Object)>(type), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], return ret]
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential1=Sequential, R_Sequential3=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 1
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 1
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.PetController, text := @parameter0: java.lang.String, $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, findPetTypes = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>(), $r1 = new java.util.HashSet, specialinvoke $r1.<java.util.HashSet: void <init>()>(), ret = $r1, l4 = interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return ret, $r2 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), type = (org.springframework.samples.petclinic.owner.PetType) $r2, $r3 = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>(), $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text), if $z1 == 0 goto (branch), virtualinvoke ret.<java.util.HashSet: boolean add(java.lang.Object)>(type), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], return ret]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, R_Sequential1=Sequential, R_Sequential3=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 2
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 2
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 2
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.PetController, text := @parameter0: java.lang.String, $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, findPetTypes = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>(), $r1 = new java.util.HashSet, specialinvoke $r1.<java.util.HashSet: void <init>()>(), ret = $r1, l4 = interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return ret, $r2 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), type = (org.springframework.samples.petclinic.owner.PetType) $r2, $r3 = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>(), $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text), if $z1 == 0 goto (branch), virtualinvoke ret.<java.util.HashSet: boolean add(java.lang.Object)>(type), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], return ret]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, R_Sequential1=Sequential, R_Sequential3=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 3
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 3
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 3
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.PetController, text := @parameter0: java.lang.String, $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, findPetTypes = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>(), $r1 = new java.util.HashSet, specialinvoke $r1.<java.util.HashSet: void <init>()>(), ret = $r1, l4 = interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return ret, $r2 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), type = (org.springframework.samples.petclinic.owner.PetType) $r2, $r3 = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>(), $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text), if $z1 == 0 goto (branch), virtualinvoke ret.<java.util.HashSet: boolean add(java.lang.Object)>(type), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], return ret]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, R_Sequential1=Sequential, R_Sequential3=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_IfThen0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder: createARegionTree(): child0 is head
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, R_Sequential1=Sequential, R_Sequential3=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 4
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 4
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 4
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.PetController, text := @parameter0: java.lang.String, $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, findPetTypes = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>(), $r1 = new java.util.HashSet, specialinvoke $r1.<java.util.HashSet: void <init>()>(), ret = $r1, l4 = interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return ret, $r2 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), type = (org.springframework.samples.petclinic.owner.PetType) $r2, $r3 = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>(), $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text), if $z1 == 0 goto (branch), virtualinvoke ret.<java.util.HashSet: boolean add(java.lang.Object)>(type), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], return ret]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, 4=BasicBlock, R_Sequential1=Sequential, R_Sequential3=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_Sequential1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, 4=BasicBlock, R_Sequential1=Sequential, R_Sequential3=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_WhileLoop2
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
LoopRegion created
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, 4=BasicBlock, R_Sequential1=Sequential, R_Sequential3=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 5
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 5
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 5
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.owner.PetController, text := @parameter0: java.lang.String, $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, findPetTypes = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>(), $r1 = new java.util.HashSet, specialinvoke $r1.<java.util.HashSet: void <init>()>(), ret = $r1, l4 = interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return ret, $r2 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), type = (org.springframework.samples.petclinic.owner.PetType) $r2, $r3 = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>(), $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text), if $z1 == 0 goto (branch), virtualinvoke ret.<java.util.HashSet: boolean add(java.lang.Object)>(type), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], return ret]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, 4=BasicBlock, R_Sequential1=Sequential, 5=BasicBlock, R_Sequential3=Sequential, R_IfThen0=IfThen, R_WhileLoop2=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_Sequential3
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 3
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = R_Sequential3
FuncStackInfoBuilder.java: regionTreeForBody(): | Sequential
| | BasicBlock0
| | WhileLoop
| | | BasicBlock1
| | | Sequential
| | | | IfThen
| | | | | BasicBlock2
| | | | | BasicBlock3
| | | | BasicBlock4
| | BasicBlock5

FuncStackInfoBuilder.java: internalTransformHelper(): topr is not null
FuncStackInfoBuilder.java: internalTransformHelper(): topr = 
| Sequential
| | BasicBlock0
| | WhileLoop
| | | BasicBlock1
| | | Sequential
| | | | IfThen
| | | | | BasicBlock2
| | | | | BasicBlock3
| | | | BasicBlock4
| | BasicBlock5

FuncStackInfoBuilder.java: internalTransformHelper(): CGSTART: 
SPECIAL edge: specialinvoke $r1.<java.util.HashSet: void <init>()>() in <org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String)> ==> <java.util.HashSet: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>() in <org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String)> ==> <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()>
CGEND

FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = java.util.HashSet: void <init>()
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: getName
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.model.NamedEntity
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String getName()
    {
        org.springframework.samples.petclinic.model.NamedEntity this;
        java.lang.String $r0;

        this := @this: org.springframework.samples.petclinic.model.NamedEntity;

        $r0 = this.<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>;

        return $r0;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: getName is Block 0:
[preds: ] [succs: ]
this := @this: org.springframework.samples.petclinic.model.NamedEntity;
$r0 = this.<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>;
return $r0;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: org.springframework.samples.petclinic.model.NamedEntity;
$r0 = this.<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>;
return $r0;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: org.springframework.samples.petclinic.model.NamedEntity, $r0 = this.<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>, return $r0]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FuncStackInfoBuilder.java: functionstack: 
FuncStackInfoBuilder.java: internalTransformHelper():     org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String)
FuncStackInfoBuilder.java: internalTransformHelper():     org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
FuncStackInfoBuilder.java: internalTransformHelper(): {org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String)=    public java.util.HashSet loop10(java.lang.String)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        java.lang.String text, $r3;
        java.util.List findPetTypes;
        java.util.HashSet 'ret', $r1;
        java.util.Iterator l4;
        org.springframework.samples.petclinic.owner.PetType type;
        org.springframework.samples.petclinic.owner.PetRepository $r0;
        boolean $z0, $z1;
        java.lang.Object $r2;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        text := @parameter0: java.lang.String;

        $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

        findPetTypes = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        'ret' = $r1;

        l4 = interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        type = (org.springframework.samples.petclinic.owner.PetType) $r2;

        $r3 = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text);

        if $z1 == 0 goto label2;

        virtualinvoke 'ret'.<java.util.HashSet: boolean add(java.lang.Object)>(type);

     label2:
        goto label1;

     label3:
        return 'ret';
    }
, org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()=    public java.lang.String getName()
    {
        org.springframework.samples.petclinic.model.NamedEntity this;
        java.lang.String $r0;

        this := @this: org.springframework.samples.petclinic.model.NamedEntity;

        $r0 = this.<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>;

        return $r0;
    }
}

Decompiling org.springframework.samples.petclinic.owner.PetController... 
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: void <init>(org.springframework.samples.petclinic.owner.PetRepository,org.springframework.samples.petclinic.owner.OwnerRepository)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: <init>
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void <init>(org.springframework.samples.petclinic.owner.PetRepository, org.springframework.samples.petclinic.owner.OwnerRepository)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.samples.petclinic.owner.PetRepository pets;
        org.springframework.samples.petclinic.owner.OwnerRepository owners;
        org.springframework.samples.petclinic.owner.PetTypeFormatter $r0;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        pets := @parameter0: org.springframework.samples.petclinic.owner.PetRepository;

        owners := @parameter1: org.springframework.samples.petclinic.owner.OwnerRepository;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets> = pets;

        this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.OwnerRepository owners> = owners;

        $r0 = new org.springframework.samples.petclinic.owner.PetTypeFormatter;

        specialinvoke $r0.<org.springframework.samples.petclinic.owner.PetTypeFormatter: void <init>(org.springframework.samples.petclinic.owner.PetRepository)>(pets);

        this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetTypeFormatter petTypeFormatter> = $r0;

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: java.util.Collection populatePetTypes()>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: populatePetTypes
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.util.Collection populatePetTypes()
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.samples.petclinic.owner.PetRepository $r0;
        java.util.List $r1;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

        $r1 = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>();

        return $r1;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.Owner findOwner(int)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: findOwner
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public org.springframework.samples.petclinic.owner.Owner findOwner(int)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        int ownerId;
        org.springframework.samples.petclinic.owner.OwnerRepository $r0;
        java.lang.Integer $r1;
        org.springframework.samples.petclinic.owner.Owner $r2;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        ownerId := @parameter0: int;

        $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.OwnerRepository owners>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(ownerId);

        $r2 = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.OwnerRepository: org.springframework.samples.petclinic.owner.Owner findById(java.lang.Integer)>($r1);

        return $r2;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: void initOwnerBinder(org.springframework.web.bind.WebDataBinder)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: initOwnerBinder
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void initOwnerBinder(org.springframework.web.bind.WebDataBinder)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.web.bind.WebDataBinder dataBinder;
        java.lang.String[] $r0;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        dataBinder := @parameter0: org.springframework.web.bind.WebDataBinder;

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "id";

        virtualinvoke dataBinder.<org.springframework.web.bind.WebDataBinder: void setDisallowedFields(java.lang.String[])>($r0);

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: void initPetBinder(org.springframework.web.bind.WebDataBinder)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: initPetBinder
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void initPetBinder(org.springframework.web.bind.WebDataBinder)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.web.bind.WebDataBinder dataBinder;
        org.springframework.samples.petclinic.owner.PetValidator $r0;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        dataBinder := @parameter0: org.springframework.web.bind.WebDataBinder;

        $r0 = new org.springframework.samples.petclinic.owner.PetValidator;

        specialinvoke $r0.<org.springframework.samples.petclinic.owner.PetValidator: void <init>()>();

        virtualinvoke dataBinder.<org.springframework.web.bind.WebDataBinder: void setValidator(org.springframework.validation.Validator)>($r0);

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: java.lang.String initCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: initCreationForm
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String initCreationForm(org.springframework.samples.petclinic.owner.Owner, org.springframework.ui.ModelMap)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.samples.petclinic.owner.Owner owner;
        org.springframework.ui.ModelMap model;
        org.springframework.samples.petclinic.owner.Pet pet, $r0;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        owner := @parameter0: org.springframework.samples.petclinic.owner.Owner;

        model := @parameter1: org.springframework.ui.ModelMap;

        $r0 = new org.springframework.samples.petclinic.owner.Pet;

        specialinvoke $r0.<org.springframework.samples.petclinic.owner.Pet: void <init>()>();

        pet = $r0;

        virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>($r0);

        virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", $r0);

        return "pets/createOrUpdatePetForm";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner,org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.ui.ModelMap)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: processCreationForm
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String processCreationForm(org.springframework.samples.petclinic.owner.Owner, org.springframework.samples.petclinic.owner.Pet, org.springframework.validation.BindingResult, org.springframework.ui.ModelMap)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.samples.petclinic.owner.Owner owner;
        org.springframework.samples.petclinic.owner.Pet pet, $r4;
        org.springframework.validation.BindingResult result;
        org.springframework.ui.ModelMap model;
        java.lang.String $r0, $r3;
        boolean $z0, $z1, $z2;
        org.springframework.samples.petclinic.owner.PetRepository $r1;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        owner := @parameter0: org.springframework.samples.petclinic.owner.Owner;

        pet := @parameter1: org.springframework.samples.petclinic.owner.Pet;

        result := @parameter2: org.springframework.validation.BindingResult;

        model := @parameter3: org.springframework.ui.ModelMap;

        $r0 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>();

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r0);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: boolean isNew()>();

        if $z1 == 0 goto label1;

        $r3 = virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: java.lang.String getName()>();

        $r4 = virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: org.springframework.samples.petclinic.owner.Pet getPetUpdated(java.lang.String,boolean)>($r3, 1);

        if $r4 == null goto label1;

        interfaceinvoke result.<org.springframework.validation.BindingResult: void rejectValue(java.lang.String,java.lang.String,java.lang.String)>("name", "duplicate", "already exists");

     label1:
        virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet);

        $z2 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>();

        if $z2 == 0 goto label2;

        virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet);

        return "pets/createOrUpdatePetForm";

     label2:
        $r1 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

        interfaceinvoke $r1.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet);

        return "redirect:/owners/{ownerId}";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: java.lang.String initUpdateForm(int,org.springframework.ui.ModelMap)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: initUpdateForm
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String initUpdateForm(int, org.springframework.ui.ModelMap)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        int petId;
        org.springframework.ui.ModelMap model;
        org.springframework.samples.petclinic.owner.Pet pet;
        org.springframework.samples.petclinic.owner.PetRepository $r0;
        java.lang.Integer $r1;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        petId := @parameter0: int;

        model := @parameter1: org.springframework.ui.ModelMap;

        $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(petId);

        pet = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: org.springframework.samples.petclinic.owner.Pet findById(java.lang.Integer)>($r1);

        virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet);

        return "pets/createOrUpdatePetForm";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet,org.springframework.validation.BindingResult,org.springframework.samples.petclinic.owner.Owner,org.springframework.ui.ModelMap)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: processUpdateForm
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String processUpdateForm(org.springframework.samples.petclinic.owner.Pet, org.springframework.validation.BindingResult, org.springframework.samples.petclinic.owner.Owner, org.springframework.ui.ModelMap)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        org.springframework.samples.petclinic.owner.Pet pet;
        org.springframework.validation.BindingResult result;
        org.springframework.samples.petclinic.owner.Owner owner;
        org.springframework.ui.ModelMap model;
        boolean $z0;
        org.springframework.samples.petclinic.owner.PetRepository $r0;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        pet := @parameter0: org.springframework.samples.petclinic.owner.Pet;

        result := @parameter1: org.springframework.validation.BindingResult;

        owner := @parameter2: org.springframework.samples.petclinic.owner.Owner;

        model := @parameter3: org.springframework.ui.ModelMap;

        $z0 = interfaceinvoke result.<org.springframework.validation.BindingResult: boolean hasErrors()>();

        if $z0 == 0 goto label1;

        virtualinvoke pet.<org.springframework.samples.petclinic.owner.Pet: void setOwner(org.springframework.samples.petclinic.owner.Owner)>(owner);

        virtualinvoke model.<org.springframework.ui.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pet", pet);

        return "pets/createOrUpdatePetForm";

     label1:
        virtualinvoke owner.<org.springframework.samples.petclinic.owner.Owner: void addPet(org.springframework.samples.petclinic.owner.Pet)>(pet);

        $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

        interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: void save(org.springframework.samples.petclinic.owner.Pet)>(pet);

        return "redirect:/owners/{ownerId}";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: loop10
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: org.springframework.samples.petclinic.owner.PetController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: org.springframework
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.util.HashSet loop10(java.lang.String)
    {
        org.springframework.samples.petclinic.owner.PetController this;
        java.lang.String text, $r3;
        java.util.List findPetTypes;
        java.util.HashSet 'ret', $r1;
        java.util.Iterator l4;
        org.springframework.samples.petclinic.owner.PetType type;
        org.springframework.samples.petclinic.owner.PetRepository $r0;
        boolean $z0, $z1;
        java.lang.Object $r2;

        this := @this: org.springframework.samples.petclinic.owner.PetController;

        text := @parameter0: java.lang.String;

        $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>;

        findPetTypes = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        'ret' = $r1;

        l4 = interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>();

        type = (org.springframework.samples.petclinic.owner.PetType) $r2;

        $r3 = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text);

        if $z1 == 0 goto label2;

        virtualinvoke $r1.<java.util.HashSet: boolean add(java.lang.Object)>(type);

     label2:
        goto label1;

     label3:
        return $r1;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackAnalyzer.java: constructDIRForStack(): FSA: constructDIRsForStack: Stack = [org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String), org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()]
FuncStackAnalyzer.java: constructDIRForStack(): top function sig: org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String)
FuncStackAnalyzer.java: constructDIRForStack(): body rootmethod before analysis: [this := @this: org.springframework.samples.petclinic.owner.PetController, text := @parameter0: java.lang.String, $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, findPetTypes = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>(), $r1 = new java.util.HashSet, specialinvoke $r1.<java.util.HashSet: void <init>()>(), ret = $r1, l4 = interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return $r1, $r2 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), type = (org.springframework.samples.petclinic.owner.PetType) $r2, $r3 = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>(), $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text), if $z1 == 0 goto (branch), virtualinvoke $r1.<java.util.HashSet: boolean add(java.lang.Object)>(type), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], return $r1]
FuncStackAnalyzer.java: constructDIRForStack(): Top level func i.e. org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String)has typemap: {}
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregions: [| BasicBlock0, | WhileLoop
| | BasicBlock1
| | Sequential
| | | IfThen
| | | | BasicBlock2
| | | | BasicBlock3
| | | BasicBlock4
, | BasicBlock5]
DIRSequentialRegionAnalyzerN.java: constructDIR(): Break point!
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: loop10
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.PetController, text := @parameter0: java.lang.String, $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, findPetTypes = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>(), $r1 = new java.util.HashSet, specialinvoke $r1.<java.util.HashSet: void <init>()>(), ret = $r1, l4 = interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return $r1, $r2 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), type = (org.springframework.samples.petclinic.owner.PetType) $r2, $r3 = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>(), $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text), if $z1 == 0 goto (branch), virtualinvoke $r1.<java.util.HashSet: boolean add(java.lang.Object)>(type), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], return $r1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: org.springframework.samples.petclinic.owner.PetController
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = text := @parameter0: java.lang.String
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r0 -> this.pets
DIRRegionAnalyzer.java: constructDIR(): curUnit = findPetTypes = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = findPetTypes
construct/Utils.java: parseInvokeExpr(): methodSignature = org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>
construct/Utils.java: parseObjectInvoke(): methodName = findPetTypes
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
Utils.java: getVarNode(): findPetTypes
Utils.java: getVarNode(): LinkedVariableBox(findPetTypes)
JAssignStmtCons.java: construct(): interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>()
construct/Utils.java: parseInvokeExpr(): methodName = findPetTypes
construct/Utils.java: parseInvokeExpr(): methodSignature = org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>
construct/Utils.java: parseObjectInvoke(): methodName = findPetTypes
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = new java.util.HashSet
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
DIRRegionAnalyzer.java: constructDIR(): curUnit = specialinvoke $r1.<java.util.HashSet: void <init>()>()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = specialinvoke $r1.<java.util.HashSet: void <init>()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: <init>
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = java.util.HashSet: void <init>()

WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): curUnit = ret = $r1
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2, type(v1, v2) = ptr
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: ret
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r1
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: []
DIRRegionAnalyzer.java: constructDIR(): curUnit = l4 = interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = iterator
construct/Utils.java: parseInvokeExpr(): methodSignature = java.util.Collection: java.util.Iterator iterator()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.util.Collection: java.util.Iterator iterator()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.util.Collection: java.util.Iterator iterator()>
construct/Utils.java: parseObjectInvoke(): methodName = iterator
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.util.Collection: java.util.Iterator iterator()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
Utils.java: getVarNode(): l4
Utils.java: getVarNode(): LinkedVariableBox(l4)
JAssignStmtCons.java: construct(): interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>()
construct/Utils.java: parseInvokeExpr(): methodName = iterator
construct/Utils.java: parseInvokeExpr(): methodSignature = java.util.Collection: java.util.Iterator iterator()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.util.Collection: java.util.Iterator iterator()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.util.Collection: java.util.Iterator iterator()>
construct/Utils.java: parseObjectInvoke(): methodName = iterator
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.util.Collection: java.util.Iterator iterator()
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
BottomNode

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
InvokeMethod
| Cartesian
| | ClassRef(PetType)
| Iterator()

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
BottomNode

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
InvokeMethod
| Cartesian
| | ClassRef(PetType)
| Iterator()

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r0=this.pets
DIR.java: updateRegion(): update region entry: $r1=BottomNode
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: l4=InvokeMethod
| Cartesian
| | ClassRef(PetType)
| Iterator()
DIR.java: updateRegion(): update region entry: findPetTypes=Cartesian
| ClassRef(PetType)
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | BasicBlock0
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
BottomNode

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
InvokeMethod
| Cartesian
| | ClassRef(PetType)
| Iterator()

~~~ this ~~~
Self


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: 
analysis/Utils.java: resolveTree(): in: this.pets
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: BottomNode
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: Self
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: InvokeMethod
| Cartesian
| | ClassRef(PetType)
| Iterator()
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: InvokeMethod
| Cartesian
| | ClassRef(PetType)
| Iterator()
analysis/Utils.java: resolveTree(): i = 0 child of top:Cartesian
| ClassRef(PetType)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Iterator()
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:FuncParams
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FuncParams
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Iterator()
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Cartesian
| ClassRef(PetType)
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(PetType)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(PetType)
analysis/Utils.java: resolveTree(): out: InvokeMethod
| Cartesian
| | ClassRef(PetType)
| Iterator()
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: Cartesian
| ClassRef(PetType)
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Cartesian
| ClassRef(PetType)
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(PetType)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(PetType)
analysis/Utils.java: resolveTree(): out: Cartesian
| ClassRef(PetType)
analysis/Utils.java: resolveTree(): return
~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
BottomNode

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
InvokeMethod
| Cartesian
| | ClassRef(PetType)
| Iterator()

~~~ this ~~~
Self


DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.LoopRegion
DIRLoopRegionAnalyzer.java: constructDIR(): Analyzing loop head
ARegion.java: analyze(): set cur method of analyzer to: loop10
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 1
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.PetController, text := @parameter0: java.lang.String, $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, findPetTypes = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>(), $r1 = new java.util.HashSet, specialinvoke $r1.<java.util.HashSet: void <init>()>(), ret = $r1, l4 = interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return $r1, $r2 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), type = (org.springframework.samples.petclinic.owner.PetType) $r2, $r3 = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>(), $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text), if $z1 == 0 goto (branch), virtualinvoke $r1.<java.util.HashSet: boolean add(java.lang.Object)>(type), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], return $r1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = hasNext
construct/Utils.java: parseInvokeExpr(): methodSignature = java.util.Iterator: boolean hasNext()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.util.Iterator: boolean hasNext()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.util.Iterator: boolean hasNext()>
construct/Utils.java: parseObjectInvoke(): methodName = hasNext
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.util.Iterator: boolean hasNext()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
Utils.java: getVarNode(): $z0
Utils.java: getVarNode(): LinkedVariableBox($z0)
JAssignStmtCons.java: construct(): interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()
construct/Utils.java: parseInvokeExpr(): methodName = hasNext
construct/Utils.java: parseInvokeExpr(): methodSignature = java.util.Iterator: boolean hasNext()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.util.Iterator: boolean hasNext()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.util.Iterator: boolean hasNext()>
construct/Utils.java: parseObjectInvoke(): methodName = hasNext
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.util.Iterator: boolean hasNext()
DIRRegionAnalyzer.java: constructDIR(): curUnit = if $z0 == 0 goto return $r1
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()$z0 == 0
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $z0 ~~~
InvokeMethod
| l4
| HasNext()

~~~ condition ~~~
Equals
| InvokeMethod
| | l4
| | HasNext()
| 0


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $z0 ~~~
InvokeMethod
| l4
| HasNext()

~~~ condition ~~~
Equals
| InvokeMethod
| | l4
| | HasNext()
| 0


DIR.java: updateRegion(): update region entry: condition=Equals
| InvokeMethod
| | l4
| | HasNext()
| 0
DIR.java: updateRegion(): update region entry: $z0=InvokeMethod
| l4
| HasNext()
DIRLoopRegionAnalyzer.java: constructDIR(): Analyzing loop body
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregions: [| IfThen
| | BasicBlock2
| | BasicBlock3
, | BasicBlock4]
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.IfThenRegion
DIRIfThenRegionAnalyzer.java: constructDIR(): headRegion: | BasicBlock2
DIRIfThenRegionAnalyzer.java: constructDIR(): trueRegion: | BasicBlock3
ARegion.java: analyze(): set cur method of analyzer to: loop10
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 2
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.PetController, text := @parameter0: java.lang.String, $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, findPetTypes = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>(), $r1 = new java.util.HashSet, specialinvoke $r1.<java.util.HashSet: void <init>()>(), ret = $r1, l4 = interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return $r1, $r2 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), type = (org.springframework.samples.petclinic.owner.PetType) $r2, $r3 = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>(), $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text), if $z1 == 0 goto (branch), virtualinvoke $r1.<java.util.HashSet: boolean add(java.lang.Object)>(type), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], return $r1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r2 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = next
construct/Utils.java: parseInvokeExpr(): methodSignature = java.util.Iterator: java.lang.Object next()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.util.Iterator: java.lang.Object next()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.util.Iterator: java.lang.Object next()>
construct/Utils.java: parseObjectInvoke(): methodName = next
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.util.Iterator: java.lang.Object next()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
Utils.java: getVarNode(): $r2
Utils.java: getVarNode(): LinkedVariableBox($r2)
JAssignStmtCons.java: construct(): interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>()
construct/Utils.java: parseInvokeExpr(): methodName = next
construct/Utils.java: parseInvokeExpr(): methodSignature = java.util.Iterator: java.lang.Object next()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.util.Iterator: java.lang.Object next()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.util.Iterator: java.lang.Object next()>
construct/Utils.java: parseObjectInvoke(): methodName = next
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.util.Iterator: java.lang.Object next()
DIRRegionAnalyzer.java: constructDIR(): curUnit = type = (org.springframework.samples.petclinic.owner.PetType) $r2
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JCastExpr
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = (type1) v2
DIRRegionAnalyzer.java: constructDIR(): type1: org.springframework.samples.petclinic.owner.PetType
DIRRegionAnalyzer.java: constructDIR(): castExpr: (org.springframework.samples.petclinic.owner.PetType) $r2
DIRRegionAnalyzer.java: constructDIR(): v2: $r2
DIRRegionAnalyzer.java: constructDIR(): cur dir: {$r2=NextOp}
DIRRegionAnalyzer.java: constructDIR(): rightVar in dir: true
DIRRegionAnalyzer.java: constructDIR(): CASE: actual_iterator = (type1) it
DIRRegionAnalyzer.java: constructDIR(): rightVar's value in dir: NextOp
DIRRegionAnalyzer.java: constructDIR(): flattenedIterator = [type.name, type.id]
DIRRegionAnalyzer.java: constructDIR(): dir: {type.name=FieldRef(org.springframework.samples.petclinic.owner.PetType.name), $r2=NextOp, type.id=FieldRef(org.springframework.samples.petclinic.owner.PetType.id)}
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r3 = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = getName
construct/Utils.java: parseInvokeExpr(): methodSignature = org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
construct/Utils.java: parseObjectInvoke(): virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>
construct/Utils.java: parseObjectInvoke(): methodName = getName
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String), org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: getName
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.model.NamedEntity, $r0 = this.<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>, return $r0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: org.springframework.samples.petclinic.model.NamedEntity
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<org.springframework.samples.petclinic.model.NamedEntity: java.lang.String name>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r0 -> this.name
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $r0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.name

~~~ return ~~~
this.name

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.name

~~~ return ~~~
this.name

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r0=this.name
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: return=this.name
construct/Utils.java: parseObjectInvoke(): Put DIR of callee = org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName() in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = java.lang.String
DIRRegionAnalyzer.java: constructDIR(): leftType : java.lang.String
DIRRegionAnalyzer.java: constructDIR(): case : caseCallToMethodWBodyRetPrim()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), v1 is primitive, foo is not a library method
DIRRegionAnalyzer.java: constructDIR(): v1: $r3
DIRRegionAnalyzer.java: constructDIR(): foo: <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()>
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: getName
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [type]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: org.springframework.samples.petclinic.model.NamedEntity
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: type
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.name, this.id]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.name
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = getName, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: type
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.name, this.id]
DIRRegionAnalyzer.java: constructDIR(): methodSig: org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
DIRRegionAnalyzer.java: constructDIR(): FuncStackAnalyzer.funcDIRMap: {org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()=~~~ $r0 ~~~
this.name

~~~ return ~~~
this.name

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): dir callee: ~~~ $r0 ~~~
this.name

~~~ return ~~~
this.name

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): retCalleeCloned: this.name
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.name
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String), org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [type]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.name, this.id]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.name
DIRRegionAnalyzer.java: constructDIR(): after dag formals to actuals: type.name
DIRRegionAnalyzer.java: constructDIR(): curUnit = $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = equals
construct/Utils.java: parseInvokeExpr(): methodSignature = java.lang.String: boolean equals(java.lang.Object)
construct/Utils.java: parseObjectInvoke(): virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.lang.String: boolean equals(java.lang.Object)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.lang.String: boolean equals(java.lang.Object)>
construct/Utils.java: parseObjectInvoke(): methodName = equals
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text)
construct/Utils.java: parseObjectInvoke(): methodSignature = java.lang.String: boolean equals(java.lang.Object)
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
Utils.java: getVarNode(): $z1
Utils.java: getVarNode(): LinkedVariableBox($z1)
JAssignStmtCons.java: construct(): virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text)
construct/Utils.java: parseInvokeExpr(): methodName = equals
construct/Utils.java: parseInvokeExpr(): methodSignature = java.lang.String: boolean equals(java.lang.Object)
construct/Utils.java: parseObjectInvoke(): virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.lang.String: boolean equals(java.lang.Object)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.lang.String: boolean equals(java.lang.Object)>
construct/Utils.java: parseObjectInvoke(): methodName = equals
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text)
construct/Utils.java: parseObjectInvoke(): methodSignature = java.lang.String: boolean equals(java.lang.Object)
DIRRegionAnalyzer.java: constructDIR(): curUnit = if $z1 == 0 goto (branch)
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()$z1 == 0
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r2 ~~~
NextOp

~~~ $r3 ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ $z1 ~~~
Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text

~~~ condition ~~~
Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0

~~~ type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r2 ~~~
NextOp

~~~ $r3 ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ $z1 ~~~
Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text

~~~ condition ~~~
Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0

~~~ type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)


DIR.java: updateRegion(): update region entry: type.name=FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
DIR.java: updateRegion(): update region entry: condition=Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0
DIR.java: updateRegion(): update region entry: $r2=NextOp
DIR.java: updateRegion(): update region entry: $r3=FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
DIR.java: updateRegion(): update region entry: type.id=FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
DIR.java: updateRegion(): update region entry: $z1=Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text
ARegion.java: analyze(): set cur method of analyzer to: loop10
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock3
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 3
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.PetController, text := @parameter0: java.lang.String, $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, findPetTypes = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>(), $r1 = new java.util.HashSet, specialinvoke $r1.<java.util.HashSet: void <init>()>(), ret = $r1, l4 = interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return $r1, $r2 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), type = (org.springframework.samples.petclinic.owner.PetType) $r2, $r3 = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>(), $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text), if $z1 == 0 goto (branch), virtualinvoke $r1.<java.util.HashSet: boolean add(java.lang.Object)>(type), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], return $r1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = virtualinvoke $r1.<java.util.HashSet: boolean add(java.lang.Object)>(type)
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock3
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r1 ~~~
UnionOp
| $r1
| List
| | type.name
| | type.id


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r1 ~~~
UnionOp
| $r1
| List
| | type.name
| | type.id


DIR.java: updateRegion(): update region entry: $r1=UnionOp
| $r1
| List
| | type.name
| | type.id
DIRIfThenRegionAnalyzer.java: constructDIR(): headDIR: ~~~ $r2 ~~~
NextOp

~~~ $r3 ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ $z1 ~~~
Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text

~~~ condition ~~~
Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0

~~~ type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)


DIRIfThenRegionAnalyzer.java: constructDIR(): trueDIR: ~~~ $r1 ~~~
UnionOp
| $r1
| List
| | type.name
| | type.id


analysis/Utils.java: extractCondition(): condVar: condition
analysis/Utils.java: extractCondition(): input dir (of headRegion): ~~~ $r2 ~~~
NextOp

~~~ $r3 ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ $z1 ~~~
Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text

~~~ condition ~~~
Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0

~~~ type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)


DIRIfThenRegionAnalyzer.java: constructDIR(): condition: Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0
DIRIfThenRegionAnalyzer.java: constructDIR(): condition after inversion: NotEq
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0
DIRIfThenRegionAnalyzer.java: constructDIR(): merging head with cond
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | $r1
| | List
| | | type.name
| | | type.id
| $r1
analysis/Utils.java: resolveTree(): dir: ~~~ $r2 ~~~
NextOp

~~~ $r3 ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ $z1 ~~~
Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text

~~~ condition ~~~
Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0

~~~ type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | $r1
| | List
| | | type.name
| | | type.id
| $r1
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:UnionOp
| $r1
| List
| | type.name
| | type.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: UnionOp
| $r1
| List
| | type.name
| | type.id
analysis/Utils.java: resolveTree(): i = 0 child of top:$r1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:List
| type.name
| type.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: List
| type.name
| type.id
analysis/Utils.java: resolveTree(): i = 0 child of top:type.name
analysis/Utils.java: resolveTree(): top: List
| type.name
| type.id
analysis/Utils.java: resolveTree(): resolvedValChild: FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
analysis/Utils.java: resolveTree(): new top: List
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| type.id
analysis/Utils.java: resolveTree(): i = 1 child of top:type.id
analysis/Utils.java: resolveTree(): top: List
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| type.id
analysis/Utils.java: resolveTree(): resolvedValChild: FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
analysis/Utils.java: resolveTree(): new top: List
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
analysis/Utils.java: resolveTree(): newChildValueList.size(): 2
analysis/Utils.java: resolveTree(): newChildValueList: [0=FieldRef(org.springframework.samples.petclinic.owner.PetType.name), 1=FieldRef(org.springframework.samples.petclinic.owner.PetType.id)]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:text
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: text
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | $r1
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| $r1
analysis/Utils.java: resolveTree(): return
DIRIfThenRegionAnalyzer.java: constructDIR(): IfThenRegion: | IfThen
| | BasicBlock2
| | BasicBlock3

DIRIfThenRegionAnalyzer.java: constructDIR(): IfThenRegionDIR: ~~~ $r1 ~~~
?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | $r1
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| $r1

~~~ $r2 ~~~
NextOp

~~~ $r3 ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ $z1 ~~~
Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text

~~~ condition ~~~
Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0

~~~ type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r1 ~~~
?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | $r1
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| $r1

~~~ $r2 ~~~
NextOp

~~~ $r3 ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ $z1 ~~~
Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text

~~~ condition ~~~
Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0

~~~ type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)


DIR.java: updateRegion(): update region entry: type.name=FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
DIR.java: updateRegion(): update region entry: condition=Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0
DIR.java: updateRegion(): update region entry: $r1=?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | $r1
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| $r1
DIR.java: updateRegion(): update region entry: $r2=NextOp
DIR.java: updateRegion(): update region entry: $r3=FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
DIR.java: updateRegion(): update region entry: type.id=FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
DIR.java: updateRegion(): update region entry: $z1=Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | IfThen
| | BasicBlock2
| | BasicBlock3

DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ $r1 ~~~
?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | $r1
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| $r1

~~~ $r2 ~~~
NextOp

~~~ $r3 ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ $z1 ~~~
Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text

~~~ condition ~~~
Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0

~~~ type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
BottomNode

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
InvokeMethod
| Cartesian
| | ClassRef(PetType)
| Iterator()

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
BottomNode

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
InvokeMethod
| Cartesian
| | ClassRef(PetType)
| Iterator()

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
BottomNode

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
InvokeMethod
| Cartesian
| | ClassRef(PetType)
| Iterator()

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:text
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: text
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
analysis/Utils.java: resolveTree(): out: Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | $r1
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| $r1
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
BottomNode

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
InvokeMethod
| Cartesian
| | ClassRef(PetType)
| Iterator()

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | $r1
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| $r1
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:UnionOp
| $r1
| List
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | $r1
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| $r1
analysis/Utils.java: resolveTree(): resolvedValChild: BottomNode
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | $r1
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| BottomNode
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [2=BottomNode]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: UnionOp
| $r1
| List
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
analysis/Utils.java: resolveTree(): i = 0 child of top:$r1
analysis/Utils.java: resolveTree(): top: UnionOp
| $r1
| List
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
analysis/Utils.java: resolveTree(): resolvedValChild: BottomNode
analysis/Utils.java: resolveTree(): new top: UnionOp
| BottomNode
| List
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
analysis/Utils.java: resolveTree(): i = 1 child of top:List
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [0=BottomNode]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: List
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:text
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: text
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | BottomNode
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| BottomNode
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: NextOp
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
BottomNode

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
InvokeMethod
| Cartesian
| | ClassRef(PetType)
| Iterator()

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
BottomNode

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
InvokeMethod
| Cartesian
| | ClassRef(PetType)
| Iterator()

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
BottomNode

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
InvokeMethod
| Cartesian
| | ClassRef(PetType)
| Iterator()

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
BottomNode

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
InvokeMethod
| Cartesian
| | ClassRef(PetType)
| Iterator()

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:text
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: text
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
analysis/Utils.java: resolveTree(): out: Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text
analysis/Utils.java: resolveTree(): return
~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | BottomNode
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| BottomNode

~~~ $r2 ~~~
NextOp

~~~ $r3 ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ $z1 ~~~
Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text

~~~ condition ~~~
Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
InvokeMethod
| Cartesian
| | ClassRef(PetType)
| Iterator()

~~~ this ~~~
Self

~~~ type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)


DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: loop10
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock4
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 4
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.PetController, text := @parameter0: java.lang.String, $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, findPetTypes = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>(), $r1 = new java.util.HashSet, specialinvoke $r1.<java.util.HashSet: void <init>()>(), ret = $r1, l4 = interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return $r1, $r2 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), type = (org.springframework.samples.petclinic.owner.PetType) $r2, $r3 = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>(), $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text), if $z1 == 0 goto (branch), virtualinvoke $r1.<java.util.HashSet: boolean add(java.lang.Object)>(type), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], return $r1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()]
DIRRegionAnalyzer.java: constructDIR(): GOTO stmt in seq region
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock4
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: 
AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: 
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | BasicBlock4
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: 
DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | BottomNode
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| BottomNode

~~~ $r2 ~~~
NextOp

~~~ $r3 ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ $z1 ~~~
Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text

~~~ condition ~~~
Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
InvokeMethod
| Cartesian
| | ClassRef(PetType)
| Iterator()

~~~ this ~~~
Self

~~~ type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)


~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | BottomNode
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| BottomNode

~~~ $r2 ~~~
NextOp

~~~ $r3 ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ $z1 ~~~
Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text

~~~ condition ~~~
Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
InvokeMethod
| Cartesian
| | ClassRef(PetType)
| Iterator()

~~~ this ~~~
Self

~~~ type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | BottomNode
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| BottomNode

~~~ $r2 ~~~
NextOp

~~~ $r3 ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)

~~~ $z1 ~~~
Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text

~~~ condition ~~~
Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
InvokeMethod
| Cartesian
| | ClassRef(PetType)
| Iterator()

~~~ this ~~~
Self

~~~ type.id ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.id)

~~~ type.name ~~~
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)


DIR.java: updateRegion(): update region entry: type.name=FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
DIR.java: updateRegion(): update region entry: $r0=this.pets
DIR.java: updateRegion(): update region entry: condition=Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0
DIR.java: updateRegion(): update region entry: $r1=?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | BottomNode
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| BottomNode
DIR.java: updateRegion(): update region entry: $r2=NextOp
DIR.java: updateRegion(): update region entry: $r3=FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: l4=InvokeMethod
| Cartesian
| | ClassRef(PetType)
| Iterator()
DIR.java: updateRegion(): update region entry: type.id=FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
DIR.java: updateRegion(): update region entry: $z1=Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text
DIR.java: updateRegion(): update region entry: findPetTypes=Cartesian
| ClassRef(PetType)
DIRLoopRegionAnalyzer.java: constructDIR(): Done with analyzing loop body
DIRLoopRegionAnalyzer.java: constructDIR(): bodyVEMap: {type.name=FieldRef(org.springframework.samples.petclinic.owner.PetType.name), $r0=this.pets, condition=Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0, $r1=?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | BottomNode
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| BottomNode, $r2=NextOp, $r3=FieldRef(org.springframework.samples.petclinic.owner.PetType.name), this=Self, l4=InvokeMethod
| Cartesian
| | ClassRef(PetType)
| Iterator(), type.id=FieldRef(org.springframework.samples.petclinic.owner.PetType.id), $z1=Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text, findPetTypes=Cartesian
| ClassRef(PetType)}
DIRLoopRegionAnalyzer.java: constructDIR(): headVEMap: {condition=Equals
| InvokeMethod
| | l4
| | HasNext()
| 0, $z0=InvokeMethod
| l4
| HasNext()}
DIRLoopRegionAnalyzer.java: constructDIR(): headR: | BasicBlock1
DIRLoopRegionAnalyzer.java: getLoopingCol(): headDIR: ~~~ $z0 ~~~
InvokeMethod
| l4
| HasNext()

~~~ condition ~~~
Equals
| InvokeMethod
| | l4
| | HasNext()
| 0


DIRLoopRegionAnalyzer.java: constructDIR(): loopingVar: l4
DIRLoopRegionAnalyzer.java: constructDIR(): foldVars: [type.name, $r0, condition, $r1, $r2, $r3, l4, this, type.id, $z1, findPetTypes]
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: type.name
Body_Expr:
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r0
Body_Expr:
this.pets
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: condition
Body_Expr:
Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r1
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r2
Body_Expr:
NextOp
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r3
Body_Expr:
FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: l4
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: this
Body_Expr:
Self
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: type.id
Body_Expr:
id(org.springframework.samples.petclinic.owner.PetType.id)
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $z1
Body_Expr:
Equals
| name(org.springframework.samples.petclinic.owner.PetType.name)
| text
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: findPetTypes
Body_Expr:
Cartesian
| ClassRef(PetType)
DIRLoopRegionAnalyzer.java: constructDIR(): loopDIR: {type.name=UnknownNode, $r0=UnknownNode, condition=UnknownNode, $r1=Sel
| l4
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text, $r2=UnknownNode, $r3=UnknownNode, this=UnknownNode, type.id=UnknownNode, $z1=UnknownNode, findPetTypes=UnknownNode}
AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
UnknownNode

~~~ $r1 ~~~
Sel
| l4
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text

~~~ $r2 ~~~
UnknownNode

~~~ $r3 ~~~
UnknownNode

~~~ $z1 ~~~
UnknownNode

~~~ condition ~~~
UnknownNode

~~~ findPetTypes ~~~
UnknownNode

~~~ this ~~~
UnknownNode

~~~ type.id ~~~
UnknownNode

~~~ type.name ~~~
UnknownNode


DIR.java: updateRegion(): update region entry: type.name=UnknownNode
DIR.java: updateRegion(): update region entry: $r0=UnknownNode
DIR.java: updateRegion(): update region entry: condition=UnknownNode
DIR.java: updateRegion(): update region entry: $r1=Sel
| l4
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
DIR.java: updateRegion(): update region entry: $r2=UnknownNode
DIR.java: updateRegion(): update region entry: $r3=UnknownNode
DIR.java: updateRegion(): update region entry: this=UnknownNode
DIR.java: updateRegion(): update region entry: type.id=UnknownNode
DIR.java: updateRegion(): update region entry: $z1=UnknownNode
DIR.java: updateRegion(): update region entry: findPetTypes=UnknownNode
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | WhileLoop
| | BasicBlock1
| | Sequential
| | | IfThen
| | | | BasicBlock2
| | | | BasicBlock3
| | | BasicBlock4

DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ $r0 ~~~
UnknownNode

~~~ $r1 ~~~
Sel
| l4
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text

~~~ $r2 ~~~
UnknownNode

~~~ $r3 ~~~
UnknownNode

~~~ $z1 ~~~
UnknownNode

~~~ condition ~~~
UnknownNode

~~~ findPetTypes ~~~
UnknownNode

~~~ this ~~~
UnknownNode

~~~ type.id ~~~
UnknownNode

~~~ type.name ~~~
UnknownNode


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | BottomNode
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| BottomNode

~~~ $r2 ~~~
NextOp

~~~ $r3 ~~~
name(org.springframework.samples.petclinic.owner.PetType.name)

~~~ $z1 ~~~
Equals
| name(org.springframework.samples.petclinic.owner.PetType.name)
| text

~~~ condition ~~~
Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
Cartesian
| ClassRef(PetType)

~~~ this ~~~
Self

~~~ type.id ~~~
id(org.springframework.samples.petclinic.owner.PetType.id)

~~~ type.name ~~~
name(org.springframework.samples.petclinic.owner.PetType.name)


analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | BottomNode
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| BottomNode

~~~ $r2 ~~~
NextOp

~~~ $r3 ~~~
name(org.springframework.samples.petclinic.owner.PetType.name)

~~~ $z1 ~~~
Equals
| name(org.springframework.samples.petclinic.owner.PetType.name)
| text

~~~ condition ~~~
Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
Cartesian
| ClassRef(PetType)

~~~ this ~~~
Self

~~~ type.id ~~~
id(org.springframework.samples.petclinic.owner.PetType.id)

~~~ type.name ~~~
name(org.springframework.samples.petclinic.owner.PetType.name)


analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | BottomNode
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| BottomNode

~~~ $r2 ~~~
NextOp

~~~ $r3 ~~~
name(org.springframework.samples.petclinic.owner.PetType.name)

~~~ $z1 ~~~
Equals
| name(org.springframework.samples.petclinic.owner.PetType.name)
| text

~~~ condition ~~~
Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
Cartesian
| ClassRef(PetType)

~~~ this ~~~
Self

~~~ type.id ~~~
id(org.springframework.samples.petclinic.owner.PetType.id)

~~~ type.name ~~~
name(org.springframework.samples.petclinic.owner.PetType.name)


analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | BottomNode
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| BottomNode

~~~ $r2 ~~~
NextOp

~~~ $r3 ~~~
name(org.springframework.samples.petclinic.owner.PetType.name)

~~~ $z1 ~~~
Equals
| name(org.springframework.samples.petclinic.owner.PetType.name)
| text

~~~ condition ~~~
Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
Cartesian
| ClassRef(PetType)

~~~ this ~~~
Self

~~~ type.id ~~~
id(org.springframework.samples.petclinic.owner.PetType.id)

~~~ type.name ~~~
name(org.springframework.samples.petclinic.owner.PetType.name)


analysis/Utils.java: resolveTree(): in: Sel
| l4
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | BottomNode
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| BottomNode

~~~ $r2 ~~~
NextOp

~~~ $r3 ~~~
name(org.springframework.samples.petclinic.owner.PetType.name)

~~~ $z1 ~~~
Equals
| name(org.springframework.samples.petclinic.owner.PetType.name)
| text

~~~ condition ~~~
Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
Cartesian
| ClassRef(PetType)

~~~ this ~~~
Self

~~~ type.id ~~~
id(org.springframework.samples.petclinic.owner.PetType.id)

~~~ type.name ~~~
name(org.springframework.samples.petclinic.owner.PetType.name)


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| l4
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
analysis/Utils.java: resolveTree(): i = 0 child of top:l4
analysis/Utils.java: resolveTree(): top: Sel
| l4
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
analysis/Utils.java: resolveTree(): resolvedValChild: Cartesian
| ClassRef(PetType)
analysis/Utils.java: resolveTree(): new top: Sel
| Cartesian
| | ClassRef(PetType)
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [0=Cartesian
| ClassRef(PetType)]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| text
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:text
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: text
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
analysis/Utils.java: resolveTree(): out: Sel
| Cartesian
| | ClassRef(PetType)
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | BottomNode
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| BottomNode

~~~ $r2 ~~~
NextOp

~~~ $r3 ~~~
name(org.springframework.samples.petclinic.owner.PetType.name)

~~~ $z1 ~~~
Equals
| name(org.springframework.samples.petclinic.owner.PetType.name)
| text

~~~ condition ~~~
Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
Cartesian
| ClassRef(PetType)

~~~ this ~~~
Self

~~~ type.id ~~~
id(org.springframework.samples.petclinic.owner.PetType.id)

~~~ type.name ~~~
name(org.springframework.samples.petclinic.owner.PetType.name)


analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | BottomNode
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| BottomNode

~~~ $r2 ~~~
NextOp

~~~ $r3 ~~~
name(org.springframework.samples.petclinic.owner.PetType.name)

~~~ $z1 ~~~
Equals
| name(org.springframework.samples.petclinic.owner.PetType.name)
| text

~~~ condition ~~~
Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
Cartesian
| ClassRef(PetType)

~~~ this ~~~
Self

~~~ type.id ~~~
id(org.springframework.samples.petclinic.owner.PetType.id)

~~~ type.name ~~~
name(org.springframework.samples.petclinic.owner.PetType.name)


analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | BottomNode
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| BottomNode

~~~ $r2 ~~~
NextOp

~~~ $r3 ~~~
name(org.springframework.samples.petclinic.owner.PetType.name)

~~~ $z1 ~~~
Equals
| name(org.springframework.samples.petclinic.owner.PetType.name)
| text

~~~ condition ~~~
Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
Cartesian
| ClassRef(PetType)

~~~ this ~~~
Self

~~~ type.id ~~~
id(org.springframework.samples.petclinic.owner.PetType.id)

~~~ type.name ~~~
name(org.springframework.samples.petclinic.owner.PetType.name)


analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | BottomNode
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| BottomNode

~~~ $r2 ~~~
NextOp

~~~ $r3 ~~~
name(org.springframework.samples.petclinic.owner.PetType.name)

~~~ $z1 ~~~
Equals
| name(org.springframework.samples.petclinic.owner.PetType.name)
| text

~~~ condition ~~~
Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
Cartesian
| ClassRef(PetType)

~~~ this ~~~
Self

~~~ type.id ~~~
id(org.springframework.samples.petclinic.owner.PetType.id)

~~~ type.name ~~~
name(org.springframework.samples.petclinic.owner.PetType.name)


analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | BottomNode
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| BottomNode

~~~ $r2 ~~~
NextOp

~~~ $r3 ~~~
name(org.springframework.samples.petclinic.owner.PetType.name)

~~~ $z1 ~~~
Equals
| name(org.springframework.samples.petclinic.owner.PetType.name)
| text

~~~ condition ~~~
Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
Cartesian
| ClassRef(PetType)

~~~ this ~~~
Self

~~~ type.id ~~~
id(org.springframework.samples.petclinic.owner.PetType.id)

~~~ type.name ~~~
name(org.springframework.samples.petclinic.owner.PetType.name)


analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
this.pets

~~~ $r1 ~~~
?
| NotEq
| | Equals
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | text
| | 0
| UnionOp
| | BottomNode
| | List
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | | FieldRef(org.springframework.samples.petclinic.owner.PetType.id)
| BottomNode

~~~ $r2 ~~~
NextOp

~~~ $r3 ~~~
name(org.springframework.samples.petclinic.owner.PetType.name)

~~~ $z1 ~~~
Equals
| name(org.springframework.samples.petclinic.owner.PetType.name)
| text

~~~ condition ~~~
Equals
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
| 0

~~~ findPetTypes ~~~
Cartesian
| ClassRef(PetType)

~~~ l4 ~~~
Cartesian
| ClassRef(PetType)

~~~ this ~~~
Self

~~~ type.id ~~~
id(org.springframework.samples.petclinic.owner.PetType.id)

~~~ type.name ~~~
name(org.springframework.samples.petclinic.owner.PetType.name)


~~~ $r0 ~~~
UnknownNode

~~~ $r1 ~~~
Sel
| Cartesian
| | ClassRef(PetType)
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text

~~~ $r2 ~~~
UnknownNode

~~~ $r3 ~~~
UnknownNode

~~~ $z1 ~~~
UnknownNode

~~~ condition ~~~
UnknownNode

~~~ findPetTypes ~~~
UnknownNode

~~~ l4 ~~~
Cartesian
| ClassRef(PetType)

~~~ this ~~~
UnknownNode

~~~ type.id ~~~
UnknownNode

~~~ type.name ~~~
UnknownNode


DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: loop10
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock5
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 5
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: org.springframework.samples.petclinic.owner.PetController, text := @parameter0: java.lang.String, $r0 = this.<org.springframework.samples.petclinic.owner.PetController: org.springframework.samples.petclinic.owner.PetRepository pets>, findPetTypes = interfaceinvoke $r0.<org.springframework.samples.petclinic.owner.PetRepository: java.util.List findPetTypes()>(), $r1 = new java.util.HashSet, specialinvoke $r1.<java.util.HashSet: void <init>()>(), ret = $r1, l4 = interfaceinvoke findPetTypes.<java.util.Collection: java.util.Iterator iterator()>(), $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>(), if $z0 == 0 goto return $r1, $r2 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), type = (org.springframework.samples.petclinic.owner.PetType) $r2, $r3 = virtualinvoke type.<org.springframework.samples.petclinic.owner.PetType: java.lang.String getName()>(), $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(text), if $z1 == 0 goto (branch), virtualinvoke $r1.<java.util.HashSet: boolean add(java.lang.Object)>(type), goto [?= $z0 = interfaceinvoke l4.<java.util.Iterator: boolean hasNext()>()], return $r1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $r1
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: return
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r1
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: []
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock5
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ return ~~~
$r1


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ return ~~~
$r1


DIR.java: updateRegion(): update region entry: return=$r1
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | BasicBlock5
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ return ~~~
$r1


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $r0 ~~~
UnknownNode

~~~ $r1 ~~~
Sel
| Cartesian
| | ClassRef(PetType)
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text

~~~ $r2 ~~~
UnknownNode

~~~ $r3 ~~~
UnknownNode

~~~ $z1 ~~~
UnknownNode

~~~ condition ~~~
UnknownNode

~~~ findPetTypes ~~~
UnknownNode

~~~ l4 ~~~
Cartesian
| ClassRef(PetType)

~~~ this ~~~
UnknownNode

~~~ type.id ~~~
UnknownNode

~~~ type.name ~~~
UnknownNode


analysis/Utils.java: resolveTree(): in: $r1
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
UnknownNode

~~~ $r1 ~~~
Sel
| Cartesian
| | ClassRef(PetType)
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text

~~~ $r2 ~~~
UnknownNode

~~~ $r3 ~~~
UnknownNode

~~~ $z1 ~~~
UnknownNode

~~~ condition ~~~
UnknownNode

~~~ findPetTypes ~~~
UnknownNode

~~~ l4 ~~~
Cartesian
| ClassRef(PetType)

~~~ this ~~~
UnknownNode

~~~ type.id ~~~
UnknownNode

~~~ type.name ~~~
UnknownNode


analysis/Utils.java: resolveTree(): out: Sel
| Cartesian
| | ClassRef(PetType)
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
analysis/Utils.java: resolveTree(): return
~~~ $r0 ~~~
UnknownNode

~~~ $r1 ~~~
Sel
| Cartesian
| | ClassRef(PetType)
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text

~~~ $r2 ~~~
UnknownNode

~~~ $r3 ~~~
UnknownNode

~~~ $z1 ~~~
UnknownNode

~~~ condition ~~~
UnknownNode

~~~ findPetTypes ~~~
UnknownNode

~~~ l4 ~~~
Cartesian
| ClassRef(PetType)

~~~ return ~~~
Sel
| Cartesian
| | ClassRef(PetType)
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text

~~~ this ~~~
UnknownNode

~~~ type.id ~~~
UnknownNode

~~~ type.name ~~~
UnknownNode


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
UnknownNode

~~~ $r1 ~~~
Sel
| Cartesian
| | ClassRef(PetType)
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text

~~~ $r2 ~~~
UnknownNode

~~~ $r3 ~~~
UnknownNode

~~~ $z1 ~~~
UnknownNode

~~~ condition ~~~
UnknownNode

~~~ findPetTypes ~~~
UnknownNode

~~~ l4 ~~~
Cartesian
| ClassRef(PetType)

~~~ return ~~~
Sel
| Cartesian
| | ClassRef(PetType)
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text

~~~ this ~~~
UnknownNode

~~~ type.id ~~~
UnknownNode

~~~ type.name ~~~
UnknownNode


DIR.java: updateRegion(): update region entry: type.name=UnknownNode
DIR.java: updateRegion(): update region entry: $r0=UnknownNode
DIR.java: updateRegion(): update region entry: condition=UnknownNode
DIR.java: updateRegion(): update region entry: $r1=Sel
| Cartesian
| | ClassRef(PetType)
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
DIR.java: updateRegion(): update region entry: $r2=UnknownNode
DIR.java: updateRegion(): update region entry: $r3=UnknownNode
DIR.java: updateRegion(): update region entry: this=UnknownNode
DIR.java: updateRegion(): update region entry: l4=Cartesian
| ClassRef(PetType)
DIR.java: updateRegion(): update region entry: type.id=UnknownNode
DIR.java: updateRegion(): update region entry: $z1=UnknownNode
DIR.java: updateRegion(): update region entry: findPetTypes=UnknownNode
DIR.java: updateRegion(): update region entry: return=Sel
| Cartesian
| | ClassRef(PetType)
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
Resultant dag : ~~~ $r0 ~~~
UnknownNode

~~~ $r1 ~~~
Sel
| Cartesian
| | ClassRef(PetType)
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text

~~~ $r2 ~~~
UnknownNode

~~~ $r3 ~~~
UnknownNode

~~~ $z1 ~~~
UnknownNode

~~~ condition ~~~
UnknownNode

~~~ findPetTypes ~~~
UnknownNode

~~~ l4 ~~~
Cartesian
| ClassRef(PetType)

~~~ return ~~~
Sel
| Cartesian
| | ClassRef(PetType)
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text

~~~ this ~~~
UnknownNode

~~~ type.id ~~~
UnknownNode

~~~ type.name ~~~
UnknownNode


final FuncStackAnalyzer3 = 
{org.springframework.samples.petclinic.model.NamedEntity: java.lang.String getName()=~~~ $r0 ~~~
this.name

~~~ return ~~~
this.name

~~~ this ~~~
Self

}
FuncStackAnalyzer.java: constructDIRForStack(): Printing veMap for method: org.springframework.samples.petclinic.owner.PetController: java.util.HashSet loop10(java.lang.String)
FuncStackAnalyzer.java: constructDIRForStack(): VEMap Num Entries: 12
FuncStackAnalyzer.java: constructDIRForStack(): key set of ve map of root function: [type.name, $r0, condition, $r1, $r2, $r3, this, l4, type.id, $z1, findPetTypes, return]
Final veMap of type.name = 
UnknownNode
SavePostProcess.java: SavePostProcess(): repo varnode: type.name
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r0 = 
UnknownNode
SavePostProcess.java: SavePostProcess(): repo varnode: $r0
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of condition = 
UnknownNode
SavePostProcess.java: SavePostProcess(): repo varnode: condition
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r1 = 
Sel
| Cartesian
| | ClassRef(PetType)
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
SavePostProcess.java: SavePostProcess(): repo varnode: $r1
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r2 = 
UnknownNode
SavePostProcess.java: SavePostProcess(): repo varnode: $r2
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r3 = 
UnknownNode
SavePostProcess.java: SavePostProcess(): repo varnode: $r3
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of this = 
UnknownNode
SavePostProcess.java: SavePostProcess(): repo varnode: this
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of l4 = 
Cartesian
| ClassRef(PetType)
SavePostProcess.java: SavePostProcess(): repo varnode: l4
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of type.id = 
UnknownNode
SavePostProcess.java: SavePostProcess(): repo varnode: type.id
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $z1 = 
UnknownNode
SavePostProcess.java: SavePostProcess(): repo varnode: $z1
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of findPetTypes = 
UnknownNode
SavePostProcess.java: SavePostProcess(): repo varnode: findPetTypes
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of return = 
Sel
| Cartesian
| | ClassRef(PetType)
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text
SavePostProcess.java: SavePostProcess(): repo varnode: return
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
key: type.name
value: UnknownNode

key: $r0
value: UnknownNode

key: condition
value: UnknownNode

key: $r1
value: Sel
| Cartesian
| | ClassRef(PetType)
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text

key: $r2
value: UnknownNode

key: $r3
value: UnknownNode

key: this
value: UnknownNode

key: l4
value: Cartesian
| ClassRef(PetType)

key: type.id
value: UnknownNode

key: $z1
value: UnknownNode

key: findPetTypes
value: UnknownNode

key: return
value: Sel
| Cartesian
| | ClassRef(PetType)
| Equals
| | FieldRef(org.springframework.samples.petclinic.owner.PetType.name)
| | text





























Time elapsed: 0.716 seconds
