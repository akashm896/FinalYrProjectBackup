EqSQLDriverTest.java: main(): Got the bench-dir option value: target/classes
EqSQLDriverTest.java: main(): Got the controllersig option value: com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)
github/Utils.java: getAbsBenchDir(): pwd: /home/akash/Study/3rd sem/Dbridge_NRA/DbridgeNRA
starttime, test: 1674572946306
EqSQLDriver.java: doSetEntryPoints: inputPath is target/classes
Warning: java.lang.Object is a phantom class!
Warning: org.springframework.beans.factory.annotation.Autowired is a phantom class!
Warning: org.springframework.web.bind.annotation.RequestMapping is a phantom class!
Warning: org.springframework.validation.BindingResult is a phantom class!
Warning: org.springframework.stereotype.Controller is a phantom class!
Warning: org.springframework.ui.Model is a phantom class!
Warning: java.security.Principal is a phantom class!
Warning: java.lang.Long is a phantom class!
Warning: java.util.Optional is a phantom class!
Warning: java.lang.StringBuilder is a phantom class!
Warning: java.lang.String is a phantom class!
Warning: javax.persistence.Entity is a phantom class!
Warning: javax.persistence.ManyToOne is a phantom class!
Warning: org.hibernate.annotations.CreationTimestamp is a phantom class!
Warning: java.util.Date is a phantom class!
Warning: javax.persistence.JoinColumn is a phantom class!
Warning: java.util.Collection is a phantom class!
Warning: javax.persistence.OneToMany is a phantom class!
Warning: javax.validation.constraints.NotNull is a phantom class!
Warning: javax.persistence.Column is a phantom class!
Warning: javax.persistence.Table is a phantom class!
Warning: javax.persistence.GeneratedValue is a phantom class!
Warning: javax.persistence.Temporal is a phantom class!
Warning: org.hibernate.validator.constraints.NotEmpty is a phantom class!
Warning: javax.persistence.Id is a phantom class!
Warning: org.hibernate.validator.constraints.Length is a phantom class!
Warning: javax.persistence.JoinTable is a phantom class!
Warning: org.hibernate.validator.constraints.Email is a phantom class!
Warning: com.fasterxml.jackson.annotation.JsonIgnore is a phantom class!
Warning: javax.persistence.ManyToMany is a phantom class!
Warning: org.springframework.data.domain.Page is a phantom class!
Warning: java.lang.Throwable is a phantom class!
Warning: java.lang.Void is a phantom class!
Warning: java.lang.Float is a phantom class!
Warning: java.lang.Double is a phantom class!
Warning: java.lang.AssertionError is a phantom class!
Warning: java.lang.Integer is a phantom class!
Warning: java.lang.NullPointerException is a phantom class!
Warning: java.lang.Character is a phantom class!
Warning: java.lang.Short is a phantom class!
Warning: java.lang.StringBuffer is a phantom class!
Warning: java.lang.Boolean is a phantom class!
Warning: java.lang.Class is a phantom class!
Warning: java.lang.Byte is a phantom class!
Warning: java.lang.NoClassDefFoundError is a phantom class!
Warning: java.lang.IndexOutOfBoundsException is a phantom class!
Warning: java.lang.StackOverflowError is a phantom class!
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
Warning: java.lang.Error is a phantom class!
Warning: java.lang.AbstractMethodError is a phantom class!
Warning: java.lang.ClassCastException is a phantom class!
Warning: java.lang.Runnable is a phantom class!
Warning: java.lang.VerifyError is a phantom class!
Warning: java.lang.NoSuchFieldError is a phantom class!
Warning: java.lang.IllegalMonitorStateException is a phantom class!
Warning: java.lang.Thread is a phantom class!
Warning: java.lang.UnknownError is a phantom class!
Warning: java.lang.InternalError is a phantom class!
Warning: java.lang.ArithmeticException is a phantom class!
Warning: java.lang.NegativeArraySizeException is a phantom class!
Warning: java.lang.ClassCircularityError is a phantom class!
Warning: java.lang.Cloneable is a phantom class!
Warning: java.lang.ref.Finalizer is a phantom class!
Warning: java.lang.LinkageError is a phantom class!
Warning: java.lang.IncompatibleClassChangeError is a phantom class!
Warning: java.lang.NoSuchMethodError is a phantom class!
Warning: java.lang.RuntimeException is a phantom class!
Warning: java.lang.ArrayIndexOutOfBoundsException is a phantom class!
Warning: java.lang.ThreadDeath is a phantom class!
Warning: java.io.Serializable is a phantom class!
Warning: java.lang.InstantiationError is a phantom class!
Warning: java.lang.IllegalAccessError is a phantom class!
Warning: java.lang.ClassNotFoundException is a phantom class!
Warning: java.lang.ClassFormatError is a phantom class!
Warning: java.lang.UnsatisfiedLinkError is a phantom class!
Warning: java.lang.ArrayStoreException is a phantom class!
Warning: java.lang.ExceptionInInitializerError is a phantom class!
Warning: java.lang.OutOfMemoryError is a phantom class!
patternMatch.java: getUserInputRules: i=0
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? (Neq (= <col1> <col2>) (0Node)) (union (repo) (list)) (repo))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (select <coll> (= <col1> <col2>))
Fold
| FuncExpr
| | Ternary
| | | NotEq
| | | | Eq
| | | | | Any
| | | | | Any
| | | | Any
| | | Union
| | | | Any
| | | | List
| | | Any
| Any
| Any
| Any


Select
| Id:13
| Eq
| | Id:5
| | Id:6

{<col1>=5, <col2>=6, <init_val>=12, <itr>=14, <coll>=13}
patternMatch.java: getUserInputRules: i=2
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? (= (? (= <col1> <col2>) (1Node) (0Node)) <col3>) (? (Neq (= <col4> <col5>) <col6>) (col7) (? (= (? (= <col8> <col9>) (1Node) (0Node)) <col10>) (? (Neq (= <col4> <col5>) <col6>) (col7) (col11)) (col11))) (col11))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (select <coll> (AND (OR (= <col1> <col2>) (Neq <col8> <col9>)) (= <col4> <col5>)))
Fold
| FuncExpr
| | Ternary
| | | Eq
| | | | Ternary
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | | Any
| | | | | Any
| | | | Any
| | | Ternary
| | | | NotEq
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | | Any
| | | | Any
| | | | Ternary
| | | | | Eq
| | | | | | Ternary
| | | | | | | Eq
| | | | | | | | Any
| | | | | | | | Any
| | | | | | | Any
| | | | | | | Any
| | | | | | Any
| | | | | Ternary
| | | | | | NotEq
| | | | | | | Eq
| | | | | | | | Any
| | | | | | | | Any
| | | | | | | Any
| | | | | | Any
| | | | | | Any
| | | | | Any
| | | Any
| Any
| Any
| Any


Select
| Id:53
| And
| | Or
| | | Eq
| | | | Id:21
| | | | Id:22
| | | NotEq
| | | | Id:37
| | | | Id:38
| | Eq
| | | Id:45
| | | Id:46

{<col9>=38, <col8>=37, <col5>=46, <col6>=47, <col3>=25, <col4>=45, <col1>=21, <col10>=41, <col2>=22, <init_val>=52, <itr>=54, <coll>=53}
patternMatch.java: getUserInputRules: i=4
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? <cond> (save <repo> <list1>) (save <repo> <list2>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (- <init_val> <coll>) (union (pi (select <coll> <cond>) <list1>) (pi (select <coll> (= <cond> 0)) <list2>)))
Fold
| FuncExpr
| | Ternary
| | | Any
| | | Save
| | | | Any
| | | | Any
| | | Save
| | | | Any
| | | | Any
| Any
| Any
| Any


Union
| RelMinus
| | Id:65
| | Id:66
| Union
| | Project
| | | Select
| | | | Id:66
| | | | Id:58
| | | Id:61
| | Project
| | | Select
| | | | Id:66
| | | | Eq
| | | | | Id:58
| | | | | Zero
| | | Id:64

{<col9>=38, <col8>=37, <col5>=46, <col6>=47, <col3>=25, <col4>=45, <col10>=41, <repo>=63, <cond>=58, <init_val>=65, <itr>=67, <col1>=21, <list2>=64, <col2>=22, <list1>=61, <coll>=66}
patternMatch.java: getUserInputRules: i=6
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? <cond> (add_all_fields <list>) <elseval>)) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (pi (select <coll> <cond>) <list>) <init_val>)
Fold
| FuncExpr
| | Ternary
| | | Any
| | | AddWithFieldExprs
| | | | Any
| | | Any
| Any
| Any
| Any


Union
| Project
| | Select
| | | Id:76
| | | Id:71
| | Id:73
| Id:75

{<col9>=38, <list>=73, <col8>=37, <col5>=46, <col6>=47, <col3>=25, <col4>=45, <col10>=41, <repo>=63, <cond>=71, <init_val>=75, <itr>=77, <elseval>=74, <col1>=21, <list2>=64, <col2>=22, <list1>=61, <coll>=76}
patternMatch.java: getUserInputRules: i=8
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (save <repo> (tuple (join next <join_right>) <list>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (- <repo> (select <repo> (in id (pi (join <coll> <join_right>) id)))) (pi <list> (join <coll> <join_right>)))
Fold
| FuncExpr
| | Save
| | | Any
| | | Tuple
| | | | Join
| | | | | Iterator
| | | | | Any
| | | | Any
| Any
| Any
| Any


Union
| RelMinus
| | Id:81
| | Select
| | | Id:81
| | | In
| | | | Id
| | | | Project
| | | | | Join
| | | | | | Id:88
| | | | | | Id:85
| | | | | Id
| Project
| | Id:86
| | Join
| | | Id:88
| | | Id:85

{<col9>=38, <list>=86, <col8>=37, <col5>=46, <col6>=47, <col3>=25, <col4>=45, <col10>=41, <repo>=81, <cond>=71, <init_val>=87, <join_right>=85, <itr>=89, <elseval>=74, <col1>=21, <list2>=64, <col2>=22, <list1>=61, <coll>=88}
patternMatch.java: getUserInputRules: i=10
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (add_all_fields <receiver> (tuple (select <rel> (= <clm> <itr>)) <list>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (pi <list> (select <rel> (in <clm> <coll>))) <init_val>)
Fold
| FuncExpr
| | AddWithFieldExprs
| | | Any
| | | Tuple
| | | | Select
| | | | | Any
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | Any
| Any
| Any
| Any


Union
| Project
| | Id:100
| | Select
| | | Id:96
| | | In
| | | | Id:98
| | | | Id:102
| Id:101

{<col9>=38, <list>=100, <col8>=37, <rel>=96, <col5>=46, <col6>=47, <col3>=25, <col4>=45, <col10>=41, <repo>=81, <cond>=71, <clm>=98, <init_val>=101, <join_right>=85, <itr>=103, <receiver>=93, <elseval>=74, <col1>=21, <list2>=64, <col2>=22, <list1>=61, <coll>=102}
patternMatch.java: getUserInputRules: i=12
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (+ <aggvar> (pi (select <rel> (= <clm> <itr>)) <clmagg>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (+ (agg_sum (select <rel> (in <clm> <coll>)) <clmagg>) <init_val>)
Fold
| FuncExpr
| | ArithAdd
| | | Any
| | | Project
| | | | Select
| | | | | Any
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | Any
| Any
| Any
| Any


ArithAdd
| AggSum
| | Select
| | | Id:110
| | | In
| | | | Id:112
| | | | Id:116
| | Id:114
| Id:115

{<col9>=38, <list>=100, <col8>=37, <rel>=110, <col5>=46, <col6>=47, <col3>=25, <col4>=45, <col10>=41, <repo>=81, <cond>=71, <clm>=112, <init_val>=115, <join_right>=85, <itr>=117, <clmagg>=114, <receiver>=93, <aggvar>=107, <elseval>=74, <col1>=21, <list2>=64, <col2>=22, <list1>=61, <coll>=116}
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/home/akash/Study/3rd%20sem/Dbridge_NRA/DbridgeNRA/lib/eqsql.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/home/akash/Study/3rd%20sem/Dbridge_NRA/DbridgeNRA/lib/soot-trunk-1.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [org.slf4j.impl.SimpleLoggerFactory]
ServiceAllocTransform.java: internalTransform(): methodsig: <com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: editPostWithId
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.reljicd.controller.PostController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.reljicd
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String editPostWithId(java.lang.Long, java.security.Principal, org.springframework.ui.Model)
    {
        com.reljicd.controller.PostController this;
        java.lang.Long id;
        java.security.Principal principal;
        org.springframework.ui.Model model;
        java.util.Optional optionalPost;
        com.reljicd.model.Post post;
        com.reljicd.service.PostService $r0;
        boolean $z0, $z1;
        java.lang.Object $r1;

        this := @this: com.reljicd.controller.PostController;

        id := @parameter0: java.lang.Long;

        principal := @parameter1: java.security.Principal;

        model := @parameter2: org.springframework.ui.Model;

        $r0 = this.<com.reljicd.controller.PostController: com.reljicd.service.PostService postService>;

        optionalPost = interfaceinvoke $r0.<com.reljicd.service.PostService: java.util.Optional findForId(java.lang.Long)>(id);

        $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>();

        post = (com.reljicd.model.Post) $r1;

        $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post);

        if $z1 == 0 goto label1;

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post);

        return "/postForm";

     label1:
        return "/403";

     label2:
        return "/error";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.reljicd.controller.PostController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.BlogController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.BlogErrorController
Warning: org.springframework.boot.autoconfigure.web.ErrorController is a phantom class!
Warning: org.springframework.web.servlet.ModelAndView is a phantom class!
Warning: org.springframework.web.bind.annotation.GetMapping is a phantom class!
Warning: org.springframework.web.bind.annotation.RestController is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.autoconfigure.web.ErrorController
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.PostController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.CommentController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.RegistrationController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.LoginController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.util.Pager
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.BlogDemoApplication
Warning: org.springframework.boot.SpringApplication is a phantom class!
Warning: org.springframework.boot.autoconfigure.SpringBootApplication is a phantom class!
Warning: org.springframework.context.ConfigurableApplicationContext is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.Comment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.User
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.Post
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.config.MyAccessDeniedHandler
Warning: org.springframework.security.web.access.AccessDeniedHandler is a phantom class!
Warning: org.slf4j.Logger is a phantom class!
Warning: javax.servlet.http.HttpServletResponse is a phantom class!
Warning: org.slf4j.LoggerFactory is a phantom class!
Warning: java.io.IOException is a phantom class!
Warning: org.springframework.security.access.AccessDeniedException is a phantom class!
Warning: org.springframework.stereotype.Component is a phantom class!
Warning: javax.servlet.http.HttpServletRequest is a phantom class!
Warning: org.springframework.security.core.context.SecurityContext is a phantom class!
Warning: org.springframework.security.core.context.SecurityContextHolder is a phantom class!
Warning: org.springframework.security.core.Authentication is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.web.access.AccessDeniedHandler
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.config.SpringSecurityConfig
Warning: org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter is a phantom class!
Warning: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder is a phantom class!
Warning: org.springframework.security.config.annotation.authentication.configurers.provisioning.InMemoryUserDetailsManagerConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.web.builders.HttpSecurity is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer is a phantom class!
Warning: org.springframework.beans.factory.annotation.Value is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.CsrfConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.authentication.configurers.provisioning.JdbcUserDetailsManagerConfigurer is a phantom class!
Warning: javax.sql.DataSource is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.LogoutConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.authentication.configurers.provisioning.UserDetailsManagerConfigurer$UserDetailsBuilder is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.HeadersConfigurer$FrameOptionsConfig is a phantom class!
Warning: java.lang.Exception is a phantom class!
Warning: org.springframework.context.annotation.Configuration is a phantom class!
Warning: org.springframework.security.config.annotation.SecurityBuilder is a phantom class!
Warning: org.springframework.security.crypto.password.PasswordEncoder is a phantom class!
Warning: org.springframework.security.config.annotation.web.HttpSecurityBuilder is a phantom class!
Warning: org.springframework.context.annotation.Bean is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.AbstractAuthenticationFilterConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$AuthorizedUrl is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.config.GlobalExceptionHandler
Warning: org.springframework.web.bind.annotation.ControllerAdvice is a phantom class!
Warning: org.springframework.web.bind.annotation.ExceptionHandler is a phantom class!
Warning: org.springframework.web.bind.annotation.ResponseStatus is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.RoleRepository
Warning: org.springframework.data.jpa.repository.JpaRepository is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.PostRepository
Warning: org.springframework.data.domain.Pageable is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.CommentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.impl.PostServiceImp
Warning: org.springframework.data.domain.PageRequest is a phantom class!
Warning: org.springframework.stereotype.Service is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): $r0 = new com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.impl.CommentServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.reljicd.service.CommentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.impl.UserServiceImp
Warning: java.lang.CharSequence is a phantom class!
Warning: java.util.List is a phantom class!
Warning: java.util.Collections is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.CommentService
ServiceAllocTransform.java: instrumentServiceImplementations(): service list = [$r0=com.reljicd.service.impl.PostServiceImp]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.reljicd.controller.PostController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = id := @parameter0: java.lang.Long
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = principal := @parameter1: java.security.Principal
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = model := @parameter2: org.springframework.ui.Model
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = optionalPost = interfaceinvoke $r0.<com.reljicd.service.PostService: java.util.Optional findForId(java.lang.Long)>(id)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.reljicd.controller.PostController: com.reljicd.service.PostService postService>, <com.reljicd.controller.PostController: com.reljicd.service.UserService userService>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = if $z0 == 0 goto return "/error"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIfStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = post = (com.reljicd.model.Post) $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = if $z1 == 0 goto return "/403"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIfStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "/postForm"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "/403"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "/error"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String editPostWithId(java.lang.Long, java.security.Principal, org.springframework.ui.Model)
    {
        com.reljicd.controller.PostController this;
        java.lang.Long id;
        java.security.Principal principal;
        org.springframework.ui.Model model;
        java.util.Optional optionalPost;
        com.reljicd.model.Post post;
        com.reljicd.service.PostService $r0;
        boolean $z0, $z1;
        java.lang.Object $r1;

        this := @this: com.reljicd.controller.PostController;

        id := @parameter0: java.lang.Long;

        principal := @parameter1: java.security.Principal;

        model := @parameter2: org.springframework.ui.Model;

        $r0 = new com.reljicd.service.impl.PostServiceImp;

        optionalPost = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id);

        this.<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r0;

        $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>();

        post = (com.reljicd.model.Post) $r1;

        $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post);

        if $z1 == 0 goto label1;

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post);

        return "/postForm";

     label1:
        return "/403";

     label2:
        return "/error";
    }

FuncStackInfoBuilder internalTransform called!
FuncStackInfoBuilder.java: internalTransformHelper(): FuncStackInfoBuilder.java: body: 
    public java.lang.String editPostWithId(java.lang.Long, java.security.Principal, org.springframework.ui.Model)
    {
        com.reljicd.controller.PostController this;
        java.lang.Long id;
        java.security.Principal principal;
        org.springframework.ui.Model model;
        java.util.Optional optionalPost;
        com.reljicd.model.Post post;
        com.reljicd.service.PostService $r0;
        boolean $z0, $z1;
        java.lang.Object $r1;

        this := @this: com.reljicd.controller.PostController;

        id := @parameter0: java.lang.Long;

        principal := @parameter1: java.security.Principal;

        model := @parameter2: org.springframework.ui.Model;

        $r0 = new com.reljicd.service.impl.PostServiceImp;

        optionalPost = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id);

        this.<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r0;

        $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>();

        post = (com.reljicd.model.Post) $r1;

        $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post);

        if $z1 == 0 goto label1;

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post);

        return "/postForm";

     label1:
        return "/403";

     label2:
        return "/error";
    }

FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: id
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: id
FuncStackInfoBuilder.java: regionTreeForBody(): local: principal
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: principal
FuncStackInfoBuilder.java: regionTreeForBody(): local: model
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: model
FuncStackInfoBuilder.java: regionTreeForBody(): local: optionalPost
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: optionalPost
FuncStackInfoBuilder.java: regionTreeForBody(): local: post
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: post
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $z0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $z0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local: $z1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $z1
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: editPostWithId is Block 0:
[preds: ] [succs: 1 4 ]
this := @this: com.reljicd.controller.PostController;
id := @parameter0: java.lang.Long;
principal := @parameter1: java.security.Principal;
model := @parameter2: org.springframework.ui.Model;
$r0 = new com.reljicd.service.impl.PostServiceImp;
optionalPost = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id);
this.<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r0;
$z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>();
if $z0 == 0 goto return "/error";

Block 1:
[preds: 0 ] [succs: 2 3 ]
$r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>();
post = (com.reljicd.model.Post) $r1;
$z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post);
if $z1 == 0 goto return "/403";

Block 2:
[preds: 1 ] [succs: ]
interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post);
return "/postForm";

Block 3:
[preds: 1 ] [succs: ]
return "/403";

Block 4:
[preds: 0 ] [succs: ]
return "/error";


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
0 -> 1
1 -> 2
1 -> 3
0 -> 4
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
dfsVisit: start = 1
dfsVisit: start = 2
dfsVisit: start = 3
dfsVisit: start = 4
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [2, 3, 1, 4, 0]
StructuralAnalysis.java: structuralAnalysis(): break point!
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [2]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [2]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 2
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [2]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 3
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [3]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 3
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 3
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 3
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [3]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 3
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [3]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [1]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = IfThenElse

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_IfThenElse0
StructuralAnalysis.java: replace(): v: 1
StructuralAnalysis.java: replace(): v: 2
StructuralAnalysis.java: replace(): v: 3
StructuralAnalyis.java: compact(): compact: vset = [1, 2, 3]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, 2, 3, 4, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 2
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [2, 3, 1, 4, 0]
removeVertices: vset = [1, 2, 3]
removeVertices: v = 1
removeVertex: adj = {1=[2, 3], 2=[], 3=[], 4=[], 0=[1, 4]}
removeVertex: incoming = {1=[0], 2=[1], 3=[1], 4=[0], 0=[]}
removeVertex: v = 1
removeVertex: v2 = 0
removeVertices: v = 2
removeVertex: adj = {2=[], 3=[], 4=[], 0=[4]}
removeVertex: incoming = {2=[], 3=[], 4=[0], 0=[]}
removeVertex: v = 2
removeVertices: v = 3
removeVertex: adj = {3=[], 4=[], 0=[4]}
removeVertex: incoming = {3=[], 4=[0], 0=[]}
removeVertex: v = 3
StructuralAnalyis.java: compact(): compact: g.vertices after: [4, R_IfThenElse0, 0]
StructuralAnalyis.java: compact(): compact: postCtr after: 0
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_IfThenElse0, 4, 0]
StructuralAnalysis.java: reduce(): structType before: {}
StructuralAnalysis.java: reduce(): structType after: {R_IfThenElse0=IfThenElse}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_IfThenElse0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [R_IfThenElse0]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = R_IfThenElse0
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = R_IfThenElse0
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: R_IfThenElse0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [R_IfThenElse0]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = R_IfThenElse0
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [R_IfThenElse0]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 4
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [4]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 4
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 4
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 4
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [4]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 4
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [4]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [0]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = IfThenElse

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_IfThenElse1
StructuralAnalysis.java: replace(): v: 0
StructuralAnalysis.java: replace(): v: 4
StructuralAnalysis.java: replace(): v: R_IfThenElse0
StructuralAnalyis.java: compact(): compact: vset = [0, 4, R_IfThenElse0]
StructuralAnalyis.java: compact(): compact: g.vertices before: [4, R_IfThenElse0, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 2
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [R_IfThenElse0, 4, 0]
removeVertices: vset = [0, 4, R_IfThenElse0]
removeVertices: v = 0
removeVertex: adj = {4=[], R_IfThenElse0=[], 0=[4, R_IfThenElse0]}
removeVertex: incoming = {4=[0], R_IfThenElse0=[0], 0=[]}
removeVertex: v = 0
removeVertices: v = 4
removeVertex: adj = {4=[], R_IfThenElse0=[]}
removeVertex: incoming = {4=[], R_IfThenElse0=[]}
removeVertex: v = 4
removeVertices: v = R_IfThenElse0
removeVertex: adj = {R_IfThenElse0=[]}
removeVertex: incoming = {R_IfThenElse0=[]}
removeVertex: v = R_IfThenElse0
StructuralAnalyis.java: compact(): compact: g.vertices after: [R_IfThenElse1]
StructuralAnalyis.java: compact(): compact: postCtr after: 0
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_IfThenElse1]
StructuralAnalysis.java: reduce(): structType before: {R_IfThenElse0=IfThenElse}
StructuralAnalysis.java: reduce(): structType after: {R_IfThenElse1=IfThenElse, R_IfThenElse0=IfThenElse}
StructuralAnalysis.java: structuralAnalysis(): structType: {R_IfThenElse1=IfThenElse, R_IfThenElse0=IfThenElse}
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {R_IfThenElse1=[0, 4, R_IfThenElse0], R_IfThenElse0=[1, 2, 3]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThenElse0, 2=R_IfThenElse0, 3=R_IfThenElse0, 4=R_IfThenElse1, R_IfThenElse0=R_IfThenElse1, 0=R_IfThenElse1}
StructuralAnalysis.java: controlTreeRoot(): found root = R_IfThenElse1
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- R_IfThenElse1
|  +- 0
|  +- 4
|  +- R_IfThenElse0
|  |  +- 1
|  |  +- 2
|  |  +- 3

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: 1 4 ]
this := @this: com.reljicd.controller.PostController;
id := @parameter0: java.lang.Long;
principal := @parameter1: java.security.Principal;
model := @parameter2: org.springframework.ui.Model;
$r0 = new com.reljicd.service.impl.PostServiceImp;
optionalPost = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id);
this.<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r0;
$z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>();
if $z0 == 0 goto return "/error";

Block 1:
[preds: 0 ] [succs: 2 3 ]
$r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>();
post = (com.reljicd.model.Post) $r1;
$z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post);
if $z1 == 0 goto return "/403";

Block 2:
[preds: 1 ] [succs: ]
interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post);
return "/postForm";

Block 3:
[preds: 1 ] [succs: ]
return "/403";

Block 4:
[preds: 0 ] [succs: ]
return "/error";


StructuralAnalysis.java: controlTreeRoot(): control tree = {R_IfThenElse1=[0, 4, R_IfThenElse0], R_IfThenElse0=[1, 2, 3]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThenElse0, 2=R_IfThenElse0, 3=R_IfThenElse0, 4=R_IfThenElse1, R_IfThenElse0=R_IfThenElse1, 0=R_IfThenElse1}
StructuralAnalysis.java: controlTreeRoot(): found root = R_IfThenElse1
FuncStackInfoBuilder: createARegionTree(): structType = {R_IfThenElse1=IfThenElse, R_IfThenElse0=IfThenElse}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.reljicd.controller.PostController, id := @parameter0: java.lang.Long, principal := @parameter1: java.security.Principal, model := @parameter2: org.springframework.ui.Model, $r0 = new com.reljicd.service.impl.PostServiceImp, optionalPost = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id), this.<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r0, $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>(), if $z0 == 0 goto return "/error", $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>(), post = (com.reljicd.model.Post) $r1, $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post), if $z1 == 0 goto return "/403", interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post), return "/postForm", return "/403", return "/error"]
FuncStackInfoBuilder: createARegionTree(): structType = {R_IfThenElse1=IfThenElse, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 4
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 4
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 4
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.reljicd.controller.PostController, id := @parameter0: java.lang.Long, principal := @parameter1: java.security.Principal, model := @parameter2: org.springframework.ui.Model, $r0 = new com.reljicd.service.impl.PostServiceImp, optionalPost = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id), this.<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r0, $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>(), if $z0 == 0 goto return "/error", $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>(), post = (com.reljicd.model.Post) $r1, $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post), if $z1 == 0 goto return "/403", interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post), return "/postForm", return "/403", return "/error"]
FuncStackInfoBuilder: createARegionTree(): structType = {4=BasicBlock, R_IfThenElse1=IfThenElse, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 1
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 1
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.reljicd.controller.PostController, id := @parameter0: java.lang.Long, principal := @parameter1: java.security.Principal, model := @parameter2: org.springframework.ui.Model, $r0 = new com.reljicd.service.impl.PostServiceImp, optionalPost = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id), this.<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r0, $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>(), if $z0 == 0 goto return "/error", $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>(), post = (com.reljicd.model.Post) $r1, $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post), if $z1 == 0 goto return "/403", interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post), return "/postForm", return "/403", return "/error"]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 4=BasicBlock, R_IfThenElse1=IfThenElse, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 2
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 2
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 2
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.reljicd.controller.PostController, id := @parameter0: java.lang.Long, principal := @parameter1: java.security.Principal, model := @parameter2: org.springframework.ui.Model, $r0 = new com.reljicd.service.impl.PostServiceImp, optionalPost = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id), this.<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r0, $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>(), if $z0 == 0 goto return "/error", $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>(), post = (com.reljicd.model.Post) $r1, $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post), if $z1 == 0 goto return "/403", interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post), return "/postForm", return "/403", return "/error"]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 4=BasicBlock, R_IfThenElse1=IfThenElse, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 3
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 3
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 3
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.reljicd.controller.PostController, id := @parameter0: java.lang.Long, principal := @parameter1: java.security.Principal, model := @parameter2: org.springframework.ui.Model, $r0 = new com.reljicd.service.impl.PostServiceImp, optionalPost = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id), this.<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r0, $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>(), if $z0 == 0 goto return "/error", $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>(), post = (com.reljicd.model.Post) $r1, $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post), if $z1 == 0 goto return "/403", interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post), return "/postForm", return "/403", return "/error"]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, 4=BasicBlock, R_IfThenElse1=IfThenElse, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_IfThenElse0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 3
FuncStackInfoBuilder: createARegionTree(): ifte childregions =[| BasicBlock1, | BasicBlock2, | BasicBlock3]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, 4=BasicBlock, R_IfThenElse1=IfThenElse, R_IfThenElse0=IfThenElse, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_IfThenElse1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 3
FuncStackInfoBuilder: createARegionTree(): ifte childregions =[| BasicBlock0, | BasicBlock4, | IfThenElse
| | BasicBlock1
| | BasicBlock2
| | BasicBlock3
]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = R_IfThenElse1
FuncStackInfoBuilder.java: regionTreeForBody(): | IfThenElse
| | BasicBlock0
| | BasicBlock4
| | IfThenElse
| | | BasicBlock1
| | | BasicBlock2
| | | BasicBlock3

FuncStackInfoBuilder.java: internalTransformHelper(): topr is not null
FuncStackInfoBuilder.java: internalTransformHelper(): topr = 
| IfThenElse
| | BasicBlock0
| | BasicBlock4
| | IfThenElse
| | | BasicBlock1
| | | BasicBlock2
| | | BasicBlock3

FuncStackInfoBuilder.java: internalTransformHelper(): CGSTART: 
VIRTUAL edge: optionalPost = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id) in <com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)> ==> <com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>
SPECIAL edge: $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post) in <com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)> ==> <com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>
VIRTUAL edge: $r1 = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>() in <com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)> ==> <com.reljicd.model.Post: com.reljicd.model.User getUser()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.reljicd.model.User: java.lang.String getUsername()>() in <com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)> ==> <com.reljicd.model.User: java.lang.String getUsername()>
CGEND

FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: findForId
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.reljicd
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.util.Optional findForId(java.lang.Long)
    {
        com.reljicd.service.impl.PostServiceImp this;
        java.lang.Long id;
        com.reljicd.repository.PostRepository $r0;
        java.util.Optional $r1;

        this := @this: com.reljicd.service.impl.PostServiceImp;

        id := @parameter0: java.lang.Long;

        $r0 = this.<com.reljicd.service.impl.PostServiceImp: com.reljicd.repository.PostRepository postRepository>;

        $r1 = interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id);

        return $r1;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: id
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: id
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: findForId is Block 0:
[preds: ] [succs: ]
this := @this: com.reljicd.service.impl.PostServiceImp;
id := @parameter0: java.lang.Long;
$r0 = this.<com.reljicd.service.impl.PostServiceImp: com.reljicd.repository.PostRepository postRepository>;
$r1 = interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id);
return $r1;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.reljicd.service.impl.PostServiceImp;
id := @parameter0: java.lang.Long;
$r0 = this.<com.reljicd.service.impl.PostServiceImp: com.reljicd.repository.PostRepository postRepository>;
$r1 = interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id);
return $r1;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.reljicd.service.impl.PostServiceImp, id := @parameter0: java.lang.Long, $r0 = this.<com.reljicd.service.impl.PostServiceImp: com.reljicd.repository.PostRepository postRepository>, $r1 = interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id), return $r1]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: isPrincipalOwnerOfPost
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.reljicd.controller.PostController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.reljicd
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    private boolean isPrincipalOwnerOfPost(java.security.Principal, com.reljicd.model.Post)
    {
        com.reljicd.controller.PostController this;
        java.security.Principal principal;
        com.reljicd.model.Post post;
        java.lang.String $r0, $r2;
        com.reljicd.model.User $r1;
        boolean $z0, $z1;

        this := @this: com.reljicd.controller.PostController;

        principal := @parameter0: java.security.Principal;

        post := @parameter1: com.reljicd.model.Post;

        if principal == null goto label1;

        $r0 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        $r1 = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>();

        $r2 = virtualinvoke $r1.<com.reljicd.model.User: java.lang.String getUsername()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: principal
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: principal
FuncStackInfoBuilder.java: regionTreeForBody(): local: post
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: post
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): local: $z0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $z0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $z1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $z1
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: isPrincipalOwnerOfPost is Block 0:
[preds: ] [succs: 1 3 ]
this := @this: com.reljicd.controller.PostController;
principal := @parameter0: java.security.Principal;
post := @parameter1: com.reljicd.model.Post;
if principal == null goto $z1 = 0;

Block 1:
[preds: 0 ] [succs: 2 3 ]
$r0 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();
$r1 = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>();
$r2 = virtualinvoke $r1.<com.reljicd.model.User: java.lang.String getUsername()>();
$z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);
if $z0 == 0 goto $z1 = 0;

Block 2:
[preds: 1 ] [succs: 4 ]
$z1 = 1;
goto [?= return $z1];

Block 3:
[preds: 0 1 ] [succs: 4 ]
$z1 = 0;

Block 4:
[preds: 2 3 ] [succs: ]
return $z1;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
0 -> 1
1 -> 2
3 -> 4
1 -> 3
2 -> 4
0 -> 3
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
dfsVisit: start = 1
dfsVisit: start = 2
dfsVisit: start = 4
dfsVisit: start = 3
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [4, 2, 3, 1, 0]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 4
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [4]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 4
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 4
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 4
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [4]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 4
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [4]
StructuralAnalysis.java: structuralAnalysis(): break point!
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = 2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [2]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [2]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 2
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [2]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 3
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = 3
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [3]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 3
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 3
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 3
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [3]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 3
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [3]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [1]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 1
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [1]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 1
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [1]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [0]

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_IfThen0
StructuralAnalysis.java: replace(): v: 0
StructuralAnalysis.java: replace(): v: 1
StructuralAnalyis.java: compact(): compact: vset = [0, 1]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, 2, 3, 4, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 4
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [4, 2, 3, 1, 0]
removeVertices: vset = [0, 1]
removeVertices: v = 0
removeVertex: adj = {1=[2, 3], 2=[4], 3=[4], 4=[], 0=[1, 3]}
removeVertex: incoming = {1=[0], 2=[1], 3=[0, 1], 4=[2, 3], 0=[]}
removeVertex: v = 0
removeVertices: v = 1
removeVertex: adj = {1=[2, 3], 2=[4], 3=[4], 4=[]}
removeVertex: incoming = {1=[], 2=[1], 3=[1], 4=[2, 3]}
removeVertex: v = 1
StructuralAnalyis.java: compact(): compact: g.vertices after: [2, 3, 4, R_IfThen0]
StructuralAnalyis.java: compact(): compact: postCtr after: 3
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [4, 2, 3, R_IfThen0]
StructuralAnalysis.java: reduce(): structType before: {}
StructuralAnalysis.java: reduce(): structType after: {R_IfThen0=IfThen}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_IfThen0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [R_IfThen0]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = IfThenElse

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_IfThenElse1
StructuralAnalysis.java: replace(): v: R_IfThen0
StructuralAnalysis.java: replace(): v: 2
StructuralAnalysis.java: replace(): v: 3
StructuralAnalyis.java: compact(): compact: vset = [R_IfThen0, 2, 3]
StructuralAnalyis.java: compact(): compact: g.vertices before: [2, 3, 4, R_IfThen0]
StructuralAnalyis.java: compact(): compact: postCtr before: 3
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [4, 2, 3, R_IfThen0]
removeVertices: vset = [R_IfThen0, 2, 3]
removeVertices: v = R_IfThen0
removeVertex: adj = {2=[4], 3=[4], 4=[], R_IfThen0=[2, 3]}
removeVertex: incoming = {2=[R_IfThen0], 3=[R_IfThen0], 4=[2, 3], R_IfThen0=[]}
removeVertex: v = R_IfThen0
removeVertices: v = 2
removeVertex: adj = {2=[4], 3=[4], 4=[]}
removeVertex: incoming = {2=[], 3=[], 4=[2, 3]}
removeVertex: v = 2
removeVertices: v = 3
removeVertex: adj = {3=[4], 4=[]}
removeVertex: incoming = {3=[], 4=[3]}
removeVertex: v = 3
StructuralAnalyis.java: compact(): compact: g.vertices after: [4, R_IfThenElse1]
StructuralAnalyis.java: compact(): compact: postCtr after: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [4, R_IfThenElse1]
StructuralAnalysis.java: reduce(): structType before: {R_IfThen0=IfThen}
StructuralAnalysis.java: reduce(): structType after: {R_IfThenElse1=IfThenElse, R_IfThen0=IfThen}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_IfThenElse1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = R_IfThenElse1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [R_IfThenElse1, 4]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = Sequential

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_Sequential2
StructuralAnalysis.java: replace(): v: R_IfThenElse1
StructuralAnalysis.java: replace(): v: 4
StructuralAnalyis.java: compact(): compact: vset = [R_IfThenElse1, 4]
StructuralAnalyis.java: compact(): compact: g.vertices before: [4, R_IfThenElse1]
StructuralAnalyis.java: compact(): compact: postCtr before: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [4, R_IfThenElse1]
removeVertices: vset = [R_IfThenElse1, 4]
removeVertices: v = R_IfThenElse1
removeVertex: adj = {4=[], R_IfThenElse1=[4]}
removeVertex: incoming = {4=[R_IfThenElse1], R_IfThenElse1=[]}
removeVertex: v = R_IfThenElse1
removeVertices: v = 4
removeVertex: adj = {4=[]}
removeVertex: incoming = {4=[]}
removeVertex: v = 4
StructuralAnalyis.java: compact(): compact: g.vertices after: [R_Sequential2]
StructuralAnalyis.java: compact(): compact: postCtr after: 0
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_Sequential2]
StructuralAnalysis.java: reduce(): structType before: {R_IfThenElse1=IfThenElse, R_IfThen0=IfThen}
StructuralAnalysis.java: reduce(): structType after: {R_Sequential2=Sequential, R_IfThenElse1=IfThenElse, R_IfThen0=IfThen}
StructuralAnalysis.java: structuralAnalysis(): structType: {R_Sequential2=Sequential, R_IfThenElse1=IfThenElse, R_IfThen0=IfThen}
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential2=[R_IfThenElse1, 4], R_IfThenElse1=[R_IfThen0, 2, 3], R_IfThen0=[0, 1]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThen0, 2=R_IfThenElse1, 3=R_IfThenElse1, 4=R_Sequential2, R_IfThenElse1=R_Sequential2, R_IfThen0=R_IfThenElse1, 0=R_IfThen0}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential2
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- R_Sequential2
|  +- R_IfThenElse1
|  |  +- R_IfThen0
|  |  |  +- 0
|  |  |  +- 1
|  |  +- 2
|  |  +- 3
|  +- 4

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: 1 3 ]
this := @this: com.reljicd.controller.PostController;
principal := @parameter0: java.security.Principal;
post := @parameter1: com.reljicd.model.Post;
if principal == null goto $z1 = 0;

Block 1:
[preds: 0 ] [succs: 2 3 ]
$r0 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();
$r1 = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>();
$r2 = virtualinvoke $r1.<com.reljicd.model.User: java.lang.String getUsername()>();
$z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);
if $z0 == 0 goto $z1 = 0;

Block 2:
[preds: 1 ] [succs: 4 ]
$z1 = 1;
goto [?= return $z1];

Block 3:
[preds: 0 1 ] [succs: 4 ]
$z1 = 0;

Block 4:
[preds: 2 3 ] [succs: ]
return $z1;


StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential2=[R_IfThenElse1, 4], R_IfThenElse1=[R_IfThen0, 2, 3], R_IfThen0=[0, 1]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_IfThen0, 2=R_IfThenElse1, 3=R_IfThenElse1, 4=R_Sequential2, R_IfThenElse1=R_Sequential2, R_IfThen0=R_IfThenElse1, 0=R_IfThen0}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential2
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential2=Sequential, R_IfThenElse1=IfThenElse, R_IfThen0=IfThen}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.reljicd.controller.PostController, principal := @parameter0: java.security.Principal, post := @parameter1: com.reljicd.model.Post, if principal == null goto $z1 = 0, $r0 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>(), $r1 = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>(), $r2 = virtualinvoke $r1.<com.reljicd.model.User: java.lang.String getUsername()>(), $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2), if $z0 == 0 goto $z1 = 0, $z1 = 1, goto [?= return $z1], $z1 = 0, return $z1]
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential2=Sequential, R_IfThenElse1=IfThenElse, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 1
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 1
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.reljicd.controller.PostController, principal := @parameter0: java.security.Principal, post := @parameter1: com.reljicd.model.Post, if principal == null goto $z1 = 0, $r0 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>(), $r1 = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>(), $r2 = virtualinvoke $r1.<com.reljicd.model.User: java.lang.String getUsername()>(), $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2), if $z0 == 0 goto $z1 = 0, $z1 = 1, goto [?= return $z1], $z1 = 0, return $z1]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, R_Sequential2=Sequential, R_IfThenElse1=IfThenElse, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_IfThen0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder: createARegionTree(): child0 is head
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, R_Sequential2=Sequential, R_IfThenElse1=IfThenElse, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 2
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 2
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 2
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.reljicd.controller.PostController, principal := @parameter0: java.security.Principal, post := @parameter1: com.reljicd.model.Post, if principal == null goto $z1 = 0, $r0 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>(), $r1 = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>(), $r2 = virtualinvoke $r1.<com.reljicd.model.User: java.lang.String getUsername()>(), $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2), if $z0 == 0 goto $z1 = 0, $z1 = 1, goto [?= return $z1], $z1 = 0, return $z1]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, R_Sequential2=Sequential, R_IfThenElse1=IfThenElse, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 3
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 3
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 3
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.reljicd.controller.PostController, principal := @parameter0: java.security.Principal, post := @parameter1: com.reljicd.model.Post, if principal == null goto $z1 = 0, $r0 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>(), $r1 = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>(), $r2 = virtualinvoke $r1.<com.reljicd.model.User: java.lang.String getUsername()>(), $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2), if $z0 == 0 goto $z1 = 0, $z1 = 1, goto [?= return $z1], $z1 = 0, return $z1]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, R_Sequential2=Sequential, R_IfThenElse1=IfThenElse, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_IfThenElse1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 3
FuncStackInfoBuilder: createARegionTree(): ifte childregions =[| IfThen
| | BasicBlock0
| | BasicBlock1
, | BasicBlock2, | BasicBlock3]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, R_Sequential2=Sequential, R_IfThenElse1=IfThenElse, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 4
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 4
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 4
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.reljicd.controller.PostController, principal := @parameter0: java.security.Principal, post := @parameter1: com.reljicd.model.Post, if principal == null goto $z1 = 0, $r0 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>(), $r1 = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>(), $r2 = virtualinvoke $r1.<com.reljicd.model.User: java.lang.String getUsername()>(), $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2), if $z0 == 0 goto $z1 = 0, $z1 = 1, goto [?= return $z1], $z1 = 0, return $z1]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, 4=BasicBlock, R_Sequential2=Sequential, R_IfThenElse1=IfThenElse, R_IfThen0=IfThen, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_Sequential2
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = R_Sequential2
FuncStackInfoBuilder.java: regionTreeForBody(): | Sequential
| | IfThenElse
| | | IfThen
| | | | BasicBlock0
| | | | BasicBlock1
| | | BasicBlock2
| | | BasicBlock3
| | BasicBlock4

FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.reljicd.model.Post: com.reljicd.model.User getUser()
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: getUser
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.reljicd.model.Post
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.reljicd
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public com.reljicd.model.User getUser()
    {
        com.reljicd.model.Post this;
        com.reljicd.model.User $r0;

        this := @this: com.reljicd.model.Post;

        $r0 = this.<com.reljicd.model.Post: com.reljicd.model.User user>;

        return $r0;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: getUser is Block 0:
[preds: ] [succs: ]
this := @this: com.reljicd.model.Post;
$r0 = this.<com.reljicd.model.Post: com.reljicd.model.User user>;
return $r0;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.reljicd.model.Post;
$r0 = this.<com.reljicd.model.Post: com.reljicd.model.User user>;
return $r0;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.reljicd.model.Post, $r0 = this.<com.reljicd.model.Post: com.reljicd.model.User user>, return $r0]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.reljicd.model.User: java.lang.String getUsername()
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: getUsername
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.reljicd.model.User
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.reljicd
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String getUsername()
    {
        com.reljicd.model.User this;
        java.lang.String $r0;

        this := @this: com.reljicd.model.User;

        $r0 = this.<com.reljicd.model.User: java.lang.String username>;

        return $r0;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: getUsername is Block 0:
[preds: ] [succs: ]
this := @this: com.reljicd.model.User;
$r0 = this.<com.reljicd.model.User: java.lang.String username>;
return $r0;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.reljicd.model.User;
$r0 = this.<com.reljicd.model.User: java.lang.String username>;
return $r0;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.reljicd.model.User, $r0 = this.<com.reljicd.model.User: java.lang.String username>, return $r0]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FuncStackInfoBuilder.java: functionstack: 
FuncStackInfoBuilder.java: internalTransformHelper():     com.reljicd.model.Post: com.reljicd.model.User getUser()
FuncStackInfoBuilder.java: internalTransformHelper():     com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)
FuncStackInfoBuilder.java: internalTransformHelper():     com.reljicd.model.User: java.lang.String getUsername()
FuncStackInfoBuilder.java: internalTransformHelper():     com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)
FuncStackInfoBuilder.java: internalTransformHelper():     com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)
FuncStackInfoBuilder.java: internalTransformHelper(): {com.reljicd.model.Post: com.reljicd.model.User getUser()=    public com.reljicd.model.User getUser()
    {
        com.reljicd.model.Post this;
        com.reljicd.model.User $r0;

        this := @this: com.reljicd.model.Post;

        $r0 = this.<com.reljicd.model.Post: com.reljicd.model.User user>;

        return $r0;
    }
, com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)=    private boolean isPrincipalOwnerOfPost(java.security.Principal, com.reljicd.model.Post)
    {
        com.reljicd.controller.PostController this;
        java.security.Principal principal;
        com.reljicd.model.Post post;
        java.lang.String $r0, $r2;
        com.reljicd.model.User $r1;
        boolean $z0, $z1;

        this := @this: com.reljicd.controller.PostController;

        principal := @parameter0: java.security.Principal;

        post := @parameter1: com.reljicd.model.Post;

        if principal == null goto label1;

        $r0 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        $r1 = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>();

        $r2 = virtualinvoke $r1.<com.reljicd.model.User: java.lang.String getUsername()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }
, com.reljicd.model.User: java.lang.String getUsername()=    public java.lang.String getUsername()
    {
        com.reljicd.model.User this;
        java.lang.String $r0;

        this := @this: com.reljicd.model.User;

        $r0 = this.<com.reljicd.model.User: java.lang.String username>;

        return $r0;
    }
, com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)=    public java.util.Optional findForId(java.lang.Long)
    {
        com.reljicd.service.impl.PostServiceImp this;
        java.lang.Long id;
        com.reljicd.repository.PostRepository $r0;
        java.util.Optional $r1;

        this := @this: com.reljicd.service.impl.PostServiceImp;

        id := @parameter0: java.lang.Long;

        $r0 = this.<com.reljicd.service.impl.PostServiceImp: com.reljicd.repository.PostRepository postRepository>;

        $r1 = interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id);

        return $r1;
    }
, com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)=    public java.lang.String editPostWithId(java.lang.Long, java.security.Principal, org.springframework.ui.Model)
    {
        com.reljicd.controller.PostController this;
        java.lang.Long id;
        java.security.Principal principal;
        org.springframework.ui.Model model;
        java.util.Optional optionalPost;
        com.reljicd.model.Post post;
        com.reljicd.service.PostService $r0;
        boolean $z0, $z1;
        java.lang.Object $r1;

        this := @this: com.reljicd.controller.PostController;

        id := @parameter0: java.lang.Long;

        principal := @parameter1: java.security.Principal;

        model := @parameter2: org.springframework.ui.Model;

        $r0 = new com.reljicd.service.impl.PostServiceImp;

        optionalPost = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id);

        this.<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r0;

        $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>();

        post = (com.reljicd.model.Post) $r1;

        $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post);

        if $z1 == 0 goto label1;

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post);

        return "/postForm";

     label1:
        return "/403";

     label2:
        return "/error";
    }
}

Decompiling com.reljicd.controller.PostController... 
ServiceAllocTransform.java: internalTransform(): methodsig: <com.reljicd.controller.PostController: void <init>(com.reljicd.service.PostService,com.reljicd.service.UserService)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: <init>
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.reljicd.controller.PostController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.reljicd
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void <init>(com.reljicd.service.PostService, com.reljicd.service.UserService)
    {
        com.reljicd.controller.PostController this;
        com.reljicd.service.PostService postService;
        com.reljicd.service.UserService userService;

        this := @this: com.reljicd.controller.PostController;

        postService := @parameter0: com.reljicd.service.PostService;

        userService := @parameter1: com.reljicd.service.UserService;

        specialinvoke this.<java.lang.Object: void <init>()>();

        this.<com.reljicd.controller.PostController: com.reljicd.service.PostService postService> = postService;

        this.<com.reljicd.controller.PostController: com.reljicd.service.UserService userService> = userService;

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <com.reljicd.controller.PostController: java.lang.String newPost(java.security.Principal,org.springframework.ui.Model)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: newPost
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.reljicd.controller.PostController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.reljicd
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String newPost(java.security.Principal, org.springframework.ui.Model)
    {
        com.reljicd.controller.PostController this;
        java.security.Principal principal;
        org.springframework.ui.Model model;
        java.util.Optional user;
        com.reljicd.model.Post post, $r2;
        com.reljicd.service.UserService $r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.Object $r3;
        com.reljicd.model.User $r4;

        this := @this: com.reljicd.controller.PostController;

        principal := @parameter0: java.security.Principal;

        model := @parameter1: org.springframework.ui.Model;

        $r0 = this.<com.reljicd.controller.PostController: com.reljicd.service.UserService userService>;

        $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        user = interfaceinvoke $r0.<com.reljicd.service.UserService: java.util.Optional findByUsername(java.lang.String)>($r1);

        $z0 = virtualinvoke user.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label1;

        $r2 = new com.reljicd.model.Post;

        specialinvoke $r2.<com.reljicd.model.Post: void <init>()>();

        post = $r2;

        $r3 = virtualinvoke user.<java.util.Optional: java.lang.Object get()>();

        $r4 = (com.reljicd.model.User) $r3;

        virtualinvoke $r2.<com.reljicd.model.Post: void setUser(com.reljicd.model.User)>($r4);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", $r2);

        return "/postForm";

     label1:
        return "/error";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.reljicd.controller.PostController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.BlogController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.BlogErrorController
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.autoconfigure.web.ErrorController
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.PostController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.CommentController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.RegistrationController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.LoginController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.util.Pager
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.BlogDemoApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.Comment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.User
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.Post
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.config.MyAccessDeniedHandler
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.web.access.AccessDeniedHandler
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.config.SpringSecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.config.GlobalExceptionHandler
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.PostRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.CommentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.impl.CommentServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.reljicd.service.CommentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.impl.UserServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.reljicd.service.impl.UserServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): $r0 = new com.reljicd.service.impl.UserServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.CommentService
ServiceAllocTransform.java: instrumentServiceImplementations(): service list = [$r0=com.reljicd.service.impl.UserServiceImp]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.reljicd.service.impl.UserServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.reljicd.controller.PostController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = principal := @parameter0: java.security.Principal
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = model := @parameter1: org.springframework.ui.Model
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.reljicd.service.impl.UserServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = principal
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = user = interfaceinvoke $r0.<com.reljicd.service.UserService: java.util.Optional findByUsername(java.lang.String)>($r1)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.reljicd.controller.PostController: com.reljicd.service.UserService userService>, <com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $z0 = virtualinvoke user.<java.util.Optional: boolean isPresent()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = if $z0 == 0 goto return "/error"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIfStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r2 = new com.reljicd.model.Post
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = specialinvoke $r2.<com.reljicd.model.Post: void <init>()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = post = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r3 = virtualinvoke user.<java.util.Optional: java.lang.Object get()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r4 = (com.reljicd.model.User) $r3
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = virtualinvoke $r2.<com.reljicd.model.Post: void setUser(com.reljicd.model.User)>($r4)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", $r2)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", $r2)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "/postForm"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "/error"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String newPost(java.security.Principal, org.springframework.ui.Model)
    {
        com.reljicd.controller.PostController this;
        java.security.Principal principal;
        org.springframework.ui.Model model;
        java.util.Optional user;
        com.reljicd.model.Post post, $r2;
        com.reljicd.service.UserService $r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.Object $r3;
        com.reljicd.model.User $r4;

        this := @this: com.reljicd.controller.PostController;

        principal := @parameter0: java.security.Principal;

        model := @parameter1: org.springframework.ui.Model;

        $r0 = new com.reljicd.service.impl.UserServiceImp;

        $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        user = virtualinvoke $r0.<com.reljicd.service.impl.UserServiceImp: java.util.Optional findByUsername(java.lang.String)>($r1);

        this.<com.reljicd.controller.PostController: com.reljicd.service.impl.UserServiceImp userServiceImpl> = $r0;

        $z0 = virtualinvoke user.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label1;

        $r2 = new com.reljicd.model.Post;

        specialinvoke $r2.<com.reljicd.model.Post: void <init>()>();

        post = $r2;

        $r3 = virtualinvoke user.<java.util.Optional: java.lang.Object get()>();

        $r4 = (com.reljicd.model.User) $r3;

        virtualinvoke $r2.<com.reljicd.model.Post: void setUser(com.reljicd.model.User)>($r4);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", $r2);

        return "/postForm";

     label1:
        return "/error";
    }

ServiceAllocTransform.java: internalTransform(): methodsig: <com.reljicd.controller.PostController: java.lang.String createNewPost(com.reljicd.model.Post,org.springframework.validation.BindingResult)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: createNewPost
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.reljicd.controller.PostController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.reljicd
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String createNewPost(com.reljicd.model.Post, org.springframework.validation.BindingResult)
    {
        com.reljicd.controller.PostController this;
        com.reljicd.model.Post post;
        org.springframework.validation.BindingResult bindingResult;
        boolean $z0;
        com.reljicd.service.PostService $r0;
        java.lang.StringBuilder $r2, $r3, $r6;
        com.reljicd.model.User $r4;
        java.lang.String $r5, $r7;

        this := @this: com.reljicd.controller.PostController;

        post := @parameter0: com.reljicd.model.Post;

        bindingResult := @parameter1: org.springframework.validation.BindingResult;

        $z0 = interfaceinvoke bindingResult.<org.springframework.validation.BindingResult: boolean hasErrors()>();

        if $z0 == 0 goto label1;

        return "/postForm";

     label1:
        $r0 = this.<com.reljicd.controller.PostController: com.reljicd.service.PostService postService>;

        interfaceinvoke $r0.<com.reljicd.service.PostService: com.reljicd.model.Post save(com.reljicd.model.Post)>(post);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("redirect:/blog/");

        $r4 = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>();

        $r5 = virtualinvoke $r4.<com.reljicd.model.User: java.lang.String getUsername()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.reljicd.controller.PostController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.BlogController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.BlogErrorController
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.autoconfigure.web.ErrorController
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.PostController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.CommentController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.RegistrationController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.LoginController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.util.Pager
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.BlogDemoApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.Comment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.User
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.Post
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.config.MyAccessDeniedHandler
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.web.access.AccessDeniedHandler
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.config.SpringSecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.config.GlobalExceptionHandler
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.PostRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.CommentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): $r0 = new com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.impl.CommentServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.reljicd.service.CommentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.impl.UserServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.CommentService
ServiceAllocTransform.java: instrumentServiceImplementations(): service list = [$r0=com.reljicd.service.impl.PostServiceImp]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.reljicd.controller.PostController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = post := @parameter0: com.reljicd.model.Post
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = bindingResult := @parameter1: org.springframework.validation.BindingResult
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $z0 = interfaceinvoke bindingResult.<org.springframework.validation.BindingResult: boolean hasErrors()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = bindingResult
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = if $z0 == 0 goto $r0 = new com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIfStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "/postForm"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r0.<com.reljicd.service.PostService: com.reljicd.model.Post save(com.reljicd.model.Post)>(post)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r0.<com.reljicd.service.PostService: com.reljicd.model.Post save(com.reljicd.model.Post)>(post)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl>, <com.reljicd.controller.PostController: com.reljicd.service.impl.UserServiceImp userServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r2 = new java.lang.StringBuilder
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("redirect:/blog/")
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r4 = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r5 = virtualinvoke $r4.<com.reljicd.model.User: java.lang.String getUsername()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return $r7
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String createNewPost(com.reljicd.model.Post, org.springframework.validation.BindingResult)
    {
        com.reljicd.controller.PostController this;
        com.reljicd.model.Post post;
        org.springframework.validation.BindingResult bindingResult;
        boolean $z0;
        com.reljicd.service.PostService $r0;
        java.lang.StringBuilder $r2, $r3, $r6;
        com.reljicd.model.User $r4;
        java.lang.String $r5, $r7;

        this := @this: com.reljicd.controller.PostController;

        post := @parameter0: com.reljicd.model.Post;

        bindingResult := @parameter1: org.springframework.validation.BindingResult;

        $z0 = interfaceinvoke bindingResult.<org.springframework.validation.BindingResult: boolean hasErrors()>();

        if $z0 == 0 goto label1;

        return "/postForm";

     label1:
        $r0 = new com.reljicd.service.impl.PostServiceImp;

        virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: com.reljicd.model.Post save(com.reljicd.model.Post)>(post);

        this.<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r0;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("redirect:/blog/");

        $r4 = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>();

        $r5 = virtualinvoke $r4.<com.reljicd.model.User: java.lang.String getUsername()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

ServiceAllocTransform.java: internalTransform(): methodsig: <com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: editPostWithId
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.reljicd.controller.PostController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.reljicd
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String editPostWithId(java.lang.Long, java.security.Principal, org.springframework.ui.Model)
    {
        com.reljicd.controller.PostController this;
        java.lang.Long id;
        java.security.Principal principal;
        org.springframework.ui.Model model;
        java.util.Optional optionalPost;
        com.reljicd.model.Post post;
        com.reljicd.service.PostService $r0;
        boolean $z0, $z1;
        java.lang.Object $r1;

        this := @this: com.reljicd.controller.PostController;

        id := @parameter0: java.lang.Long;

        principal := @parameter1: java.security.Principal;

        model := @parameter2: org.springframework.ui.Model;

        $r0 = new com.reljicd.service.impl.PostServiceImp;

        optionalPost = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id);

        this.<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r0;

        $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>();

        post = (com.reljicd.model.Post) $r1;

        $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post);

        if $z1 == 0 goto label1;

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post);

        return "/postForm";

     label1:
        return "/403";

     label2:
        return "/error";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <com.reljicd.controller.PostController: java.lang.String getPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: getPostWithId
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.reljicd.controller.PostController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.reljicd
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String getPostWithId(java.lang.Long, java.security.Principal, org.springframework.ui.Model)
    {
        com.reljicd.controller.PostController this;
        java.lang.Long id;
        java.security.Principal principal;
        org.springframework.ui.Model model;
        java.util.Optional optionalPost;
        com.reljicd.model.Post post;
        com.reljicd.service.PostService $r0;
        boolean $z0, $z1;
        java.lang.Object $r1;
        java.lang.String $r3;

        this := @this: com.reljicd.controller.PostController;

        id := @parameter0: java.lang.Long;

        principal := @parameter1: java.security.Principal;

        model := @parameter2: org.springframework.ui.Model;

        $r0 = this.<com.reljicd.controller.PostController: com.reljicd.service.PostService postService>;

        optionalPost = interfaceinvoke $r0.<com.reljicd.service.PostService: java.util.Optional findForId(java.lang.Long)>(id);

        $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>();

        post = (com.reljicd.model.Post) $r1;

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post);

        $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post);

        if $z1 == 0 goto label1;

        $r3 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("username", $r3);

     label1:
        return "/post";

     label2:
        return "/error";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.reljicd.controller.PostController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.BlogController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.BlogErrorController
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.autoconfigure.web.ErrorController
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.PostController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.CommentController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.RegistrationController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.LoginController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.util.Pager
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.BlogDemoApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.Comment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.User
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.Post
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.config.MyAccessDeniedHandler
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.web.access.AccessDeniedHandler
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.config.SpringSecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.config.GlobalExceptionHandler
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.PostRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.CommentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): $r0 = new com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.impl.CommentServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.reljicd.service.CommentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.impl.UserServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.CommentService
ServiceAllocTransform.java: instrumentServiceImplementations(): service list = [$r0=com.reljicd.service.impl.PostServiceImp]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.reljicd.controller.PostController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = id := @parameter0: java.lang.Long
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = principal := @parameter1: java.security.Principal
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = model := @parameter2: org.springframework.ui.Model
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = optionalPost = interfaceinvoke $r0.<com.reljicd.service.PostService: java.util.Optional findForId(java.lang.Long)>(id)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl>, <com.reljicd.controller.PostController: com.reljicd.service.impl.UserServiceImp userServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = if $z0 == 0 goto return "/error"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIfStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = post = (com.reljicd.model.Post) $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = if $z1 == 0 goto return "/post"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIfStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r3 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = principal
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("username", $r3)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("username", $r3)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "/post"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "/error"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String getPostWithId(java.lang.Long, java.security.Principal, org.springframework.ui.Model)
    {
        com.reljicd.controller.PostController this;
        java.lang.Long id;
        java.security.Principal principal;
        org.springframework.ui.Model model;
        java.util.Optional optionalPost;
        com.reljicd.model.Post post;
        com.reljicd.service.PostService $r0;
        boolean $z0, $z1;
        java.lang.Object $r1;
        java.lang.String $r3;

        this := @this: com.reljicd.controller.PostController;

        id := @parameter0: java.lang.Long;

        principal := @parameter1: java.security.Principal;

        model := @parameter2: org.springframework.ui.Model;

        $r0 = new com.reljicd.service.impl.PostServiceImp;

        optionalPost = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id);

        this.<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r0;

        $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>();

        post = (com.reljicd.model.Post) $r1;

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post);

        $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post);

        if $z1 == 0 goto label1;

        $r3 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("username", $r3);

     label1:
        return "/post";

     label2:
        return "/error";
    }

ServiceAllocTransform.java: internalTransform(): methodsig: <com.reljicd.controller.PostController: java.lang.String deletePostWithId(java.lang.Long,java.security.Principal)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: deletePostWithId
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.reljicd.controller.PostController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.reljicd
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String deletePostWithId(java.lang.Long, java.security.Principal)
    {
        com.reljicd.controller.PostController this;
        java.lang.Long id;
        java.security.Principal principal;
        java.util.Optional optionalPost;
        com.reljicd.model.Post post;
        com.reljicd.service.PostService $r0, $r2;
        boolean $z0, $z1;
        java.lang.Object $r1;

        this := @this: com.reljicd.controller.PostController;

        id := @parameter0: java.lang.Long;

        principal := @parameter1: java.security.Principal;

        $r0 = this.<com.reljicd.controller.PostController: com.reljicd.service.PostService postService>;

        optionalPost = interfaceinvoke $r0.<com.reljicd.service.PostService: java.util.Optional findForId(java.lang.Long)>(id);

        $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>();

        post = (com.reljicd.model.Post) $r1;

        $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post);

        if $z1 == 0 goto label1;

        $r2 = this.<com.reljicd.controller.PostController: com.reljicd.service.PostService postService>;

        interfaceinvoke $r2.<com.reljicd.service.PostService: void delete(com.reljicd.model.Post)>(post);

        return "redirect:/home";

     label1:
        return "/403";

     label2:
        return "/error";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.reljicd.controller.PostController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.BlogController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.BlogErrorController
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.autoconfigure.web.ErrorController
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.PostController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.CommentController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.RegistrationController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.LoginController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.util.Pager
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.BlogDemoApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.Comment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.User
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.Post
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.config.MyAccessDeniedHandler
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.web.access.AccessDeniedHandler
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.config.SpringSecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.config.GlobalExceptionHandler
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.PostRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.CommentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): $r0 = new com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.impl.CommentServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.reljicd.service.CommentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.impl.UserServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.CommentService
ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.reljicd.controller.PostController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.BlogController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.BlogErrorController
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.autoconfigure.web.ErrorController
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.PostController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.CommentController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.RegistrationController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.controller.LoginController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.util.Pager
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.BlogDemoApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.Comment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.User
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.Post
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.model.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.config.MyAccessDeniedHandler
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.web.access.AccessDeniedHandler
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.config.SpringSecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.config.GlobalExceptionHandler
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.PostRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.CommentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): $r2 = new com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.impl.CommentServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.reljicd.service.CommentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.impl.UserServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.reljicd.service.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.reljicd.service.CommentService
ServiceAllocTransform.java: instrumentServiceImplementations(): service list = [$r0=com.reljicd.service.impl.PostServiceImp, $r2=com.reljicd.service.impl.PostServiceImp]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.reljicd.controller.PostController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = id := @parameter0: java.lang.Long
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = principal := @parameter1: java.security.Principal
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = optionalPost = interfaceinvoke $r0.<com.reljicd.service.PostService: java.util.Optional findForId(java.lang.Long)>(id)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl>, <com.reljicd.controller.PostController: com.reljicd.service.impl.UserServiceImp userServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = if $z0 == 0 goto return "/error"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIfStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = post = (com.reljicd.model.Post) $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = if $z1 == 0 goto return "/403"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIfStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r2 = new com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r2.<com.reljicd.service.PostService: void delete(com.reljicd.model.Post)>(post)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r2.<com.reljicd.service.PostService: void delete(com.reljicd.model.Post)>(post)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "redirect:/home"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "/403"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "/error"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String deletePostWithId(java.lang.Long, java.security.Principal)
    {
        com.reljicd.controller.PostController this;
        java.lang.Long id;
        java.security.Principal principal;
        java.util.Optional optionalPost;
        com.reljicd.model.Post post;
        com.reljicd.service.PostService $r0, $r2;
        boolean $z0, $z1;
        java.lang.Object $r1;

        this := @this: com.reljicd.controller.PostController;

        id := @parameter0: java.lang.Long;

        principal := @parameter1: java.security.Principal;

        $r0 = new com.reljicd.service.impl.PostServiceImp;

        optionalPost = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id);

        this.<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r0;

        $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>();

        post = (com.reljicd.model.Post) $r1;

        $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post);

        if $z1 == 0 goto label1;

        $r2 = new com.reljicd.service.impl.PostServiceImp;

        interfaceinvoke $r2.<com.reljicd.service.PostService: void delete(com.reljicd.model.Post)>(post);

        return "redirect:/home";

     label1:
        return "/403";

     label2:
        return "/error";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.reljicd.controller.PostController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = id := @parameter0: java.lang.Long
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = principal := @parameter1: java.security.Principal
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = optionalPost = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this.<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = if $z0 == 0 goto return "/error"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIfStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = post = (com.reljicd.model.Post) $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = if $z1 == 0 goto return "/403"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIfStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r2 = new com.reljicd.service.impl.PostServiceImp
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r2.<com.reljicd.service.PostService: void delete(com.reljicd.model.Post)>(post)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r2.<com.reljicd.service.PostService: void delete(com.reljicd.model.Post)>(post)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): Break
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl>, <com.reljicd.controller.PostController: com.reljicd.service.impl.UserServiceImp userServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.reljicd.service.PostService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "redirect:/home"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "/403"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "/error"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String deletePostWithId(java.lang.Long, java.security.Principal)
    {
        com.reljicd.controller.PostController this;
        java.lang.Long id;
        java.security.Principal principal;
        java.util.Optional optionalPost;
        com.reljicd.model.Post post;
        com.reljicd.service.PostService $r0, $r2;
        boolean $z0, $z1;
        java.lang.Object $r1;

        this := @this: com.reljicd.controller.PostController;

        id := @parameter0: java.lang.Long;

        principal := @parameter1: java.security.Principal;

        $r0 = new com.reljicd.service.impl.PostServiceImp;

        optionalPost = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id);

        this.<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r0;

        $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>();

        post = (com.reljicd.model.Post) $r1;

        $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post);

        if $z1 == 0 goto label1;

        $r2 = new com.reljicd.service.impl.PostServiceImp;

        virtualinvoke $r2.<com.reljicd.service.impl.PostServiceImp: void delete(com.reljicd.model.Post)>(post);

        this.<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r2;

        return "redirect:/home";

     label1:
        return "/403";

     label2:
        return "/error";
    }

ServiceAllocTransform.java: internalTransform(): methodsig: <com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: isPrincipalOwnerOfPost
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.reljicd.controller.PostController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.reljicd
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    private boolean isPrincipalOwnerOfPost(java.security.Principal, com.reljicd.model.Post)
    {
        com.reljicd.controller.PostController this;
        java.security.Principal principal;
        com.reljicd.model.Post post;
        java.lang.String $r0, $r2;
        com.reljicd.model.User $r1;
        boolean $z0, $z1;

        this := @this: com.reljicd.controller.PostController;

        principal := @parameter0: java.security.Principal;

        post := @parameter1: com.reljicd.model.Post;

        if principal == null goto label1;

        $r0 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        $r1 = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>();

        $r2 = virtualinvoke $r1.<com.reljicd.model.User: java.lang.String getUsername()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackAnalyzer.java: constructDIRForStack(): FSA: constructDIRsForStack: Stack = [com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.model.User: java.lang.String getUsername()]
FuncStackAnalyzer.java: constructDIRForStack(): top function sig: com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)
FuncStackAnalyzer.java: constructDIRForStack(): body rootmethod before analysis: [this := @this: com.reljicd.controller.PostController, id := @parameter0: java.lang.Long, principal := @parameter1: java.security.Principal, model := @parameter2: org.springframework.ui.Model, $r0 = new com.reljicd.service.impl.PostServiceImp, optionalPost = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id), this.<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r0, $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>(), if $z0 == 0 goto return "/error", $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>(), post = (com.reljicd.model.Post) $r1, $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post), if $z1 == 0 goto return "/403", interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post), return "/postForm", return "/403", return "/error"]
FuncStackAnalyzer.java: constructDIRForStack(): Top level func i.e. com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)has typemap: {optionalPost=com.reljicd.model.Post}
DIRIfThenElseRegionAnalyzer.java: constructDIR(): region tree: | IfThenElse
| | BasicBlock0
| | BasicBlock4
| | IfThenElse
| | | BasicBlock1
| | | BasicBlock2
| | | BasicBlock3

DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock0
DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock4
DIRIfThenElseRegionAnalyzer.java: constructDIR(): | IfThenElse
| | BasicBlock1
| | BasicBlock2
| | BasicBlock3

DIRIfThenElseRegionAnalyzer.java: constructDIR(): Break point!
ARegion.java: analyze(): set cur method of analyzer to: editPostWithId
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.reljicd.controller.PostController, id := @parameter0: java.lang.Long, principal := @parameter1: java.security.Principal, model := @parameter2: org.springframework.ui.Model, $r0 = new com.reljicd.service.impl.PostServiceImp, optionalPost = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id), this.<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r0, $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>(), if $z0 == 0 goto return "/error", $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>(), post = (com.reljicd.model.Post) $r1, $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post), if $z1 == 0 goto return "/403", interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post), return "/postForm", return "/403", return "/error"]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.reljicd.controller.PostController
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = id := @parameter0: java.lang.Long
DIRRegionAnalyzer.java: constructDIR(): curUnit = principal := @parameter1: java.security.Principal
DIRRegionAnalyzer.java: constructDIR(): curUnit = model := @parameter2: org.springframework.ui.Model
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = new com.reljicd.service.impl.PostServiceImp
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
DIRRegionAnalyzer.java: constructDIR(): curUnit = optionalPost = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = findForId
construct/Utils.java: parseInvokeExpr(): methodSignature = com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)
construct/Utils.java: parseObjectInvoke(): virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>
construct/Utils.java: parseObjectInvoke(): methodName = findForId
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
construct/Utils.java: parseObjectInvoke(): methodSignature = com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: findForId
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.reljicd.service.impl.PostServiceImp, id := @parameter0: java.lang.Long, $r0 = this.<com.reljicd.service.impl.PostServiceImp: com.reljicd.repository.PostRepository postRepository>, $r1 = interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id), return $r1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.reljicd.service.impl.PostServiceImp
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = id := @parameter0: java.lang.Long
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<com.reljicd.service.impl.PostServiceImp: com.reljicd.repository.PostRepository postRepository>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r0 -> this.postRepository
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = findById
construct/Utils.java: parseInvokeExpr(): methodSignature = com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)
construct/Utils.java: parseObjectInvoke(): interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>
construct/Utils.java: parseObjectInvoke(): methodName = findById
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
construct/Utils.java: parseObjectInvoke(): methodSignature = com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)
construct/Utils.java: parseObjectInvoke(): Case : findBy
Utils.java: getRelExpForMethod(): getRelExpForMethod: interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
Utils.java: getRelExpForMethod(): actualargs = [id]
Utils.java: getRelExpForMethod(): methodInvoked = <com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>
Utils.java: getRelExpForMethod(): taglist: 
[Signature: (Ljava/lang/Long;)Ljava/util/Optional<Lcom/reljicd/model/Post;>;]
construct/Utils.java: parseObjectInvoke(): relExpFor method : interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
construct/Utils.java: parseObjectInvoke(): expr : null
DIRRegionAnalyzer.java: valIsRepository(): fpar val: $r0
DIRRegionAnalyzer.java: valIsRepository(): refType: com.reljicd.repository.PostRepository
DIRRegionAnalyzer.java: valIsRepository(): valClass: com.reljicd.repository.PostRepository
DIRRegionAnalyzer.java: valIsRepository(): ret: true
construct/Utils.java: parseObjectInvoke(): Return is optional-typed for function: com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)
construct/Utils.java: parseObjectInvoke(): typeTable after analyzeBCEL: {return_com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)=com.reljicd.model.Post, return=com.reljicd.model.Post}
construct/Utils.java: parseObjectInvoke(): retTypeStr: com.reljicd.model.Post
construct/Utils.java: parseObjectInvoke(): retType = com.reljicd.model.Post
construct/Utils.java: parseObjectInvoke(): entityClass = com.reljicd.model.Post
construct/Utils.java: parseObjectInvoke(): tableName = com.reljicd.model.Post
construct/Utils.java: parseObjectInvoke(): check = Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
construct/Utils.java: parseObjectInvoke(): attributes = [id, title, body, createDate]
construct/Utils.java: parseObjectInvoke(): retAccp: return
construct/Utils.java: parseObjectInvoke(): check 2
cosntruct/utils.java: mapDBFetchAccessGraph(): check relExpBaseAccp= Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
cosntruct/utils.java: mapDBFetchAccessGraph(): prim fields = [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>]
cosntruct/utils.java: mapDBFetchAccessGraph(): oneToOne fields= []
cosntruct/utils.java: mapDBFetchAccessGraph(): manyToOne fields = [<com.reljicd.model.Post: com.reljicd.model.User user>]
cosntruct/utils.java: mapDBFetchAccessGraph(): check relExpBaseAccp= Join
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| ClassRef(com.reljicd.model.User)
| NullOp
cosntruct/utils.java: mapDBFetchAccessGraph(): prim fields = [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>]
cosntruct/utils.java: mapDBFetchAccessGraph(): oneToOne fields= []
cosntruct/utils.java: mapDBFetchAccessGraph(): manyToOne fields = []
cosntruct/utils.java: mapDBFetchAccessGraph(): collection fields = [<com.reljicd.model.User: java.util.Collection posts>]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= posts
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection posts [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
cosntruct/utils.java: mapDBFetchAccessGraph(): manyTomany fields = [<com.reljicd.model.User: java.util.Collection roles>]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= roles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/JoinTable;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
cosntruct/utils.java: mapDBFetchAccessGraph(): collection fields = [<com.reljicd.model.Post: java.util.Collection comments>]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= comments
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection comments [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
cosntruct/utils.java: mapDBFetchAccessGraph(): manyTomany fields = []
construct/Utils.java: parseObjectInvoke(): dir after mapDBFetchAccessGraph: {return.user.active=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.active), return.user.id=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.id), return.user.posts=Join
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| ClassRef(com.reljicd.model.Post)
| NullOp, return.user.username=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.username), return.body=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body, return.user.lastName=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.lastName), return.title=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title, return.user.password=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.password), return.user.name=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.name), return.id=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id, return.user.email=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.email), return.createDate=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate, return.user.roles=Join
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| ClassRef(com.reljicd.model.Role)
| NullOp, return.comments=Join
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| ClassRef(com.reljicd.model.Comment)
| NullOp, return=Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id, return.user=Join
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| ClassRef(com.reljicd.model.User)
| NullOp}
construct/Utils.java: parseObjectInvoke(): @Query not present, relnode = Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): leftType : java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: $r1
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: constructDIR(): left type = java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): v1 type is optional
DIRRegionAnalyzer.java: constructDIR(): method sig = com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)=~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ return.comments ~~~
Join
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| ClassRef(com.reljicd.model.Comment)
| NullOp

~~~ return.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ return.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ return.user ~~~
Join
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| ClassRef(com.reljicd.model.User)
| NullOp

~~~ return.user.active ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.active)

~~~ return.user.email ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.email)

~~~ return.user.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.id)

~~~ return.user.lastName ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.lastName)

~~~ return.user.name ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.name)

~~~ return.user.password ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.password)

~~~ return.user.posts ~~~
Join
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| ClassRef(com.reljicd.model.Post)
| NullOp

~~~ return.user.roles ~~~
Join
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| ClassRef(com.reljicd.model.Role)
| NullOp

~~~ return.user.username ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.username)

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ return.comments ~~~
Join
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| ClassRef(com.reljicd.model.Comment)
| NullOp

~~~ return.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ return.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ return.user ~~~
Join
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| ClassRef(com.reljicd.model.User)
| NullOp

~~~ return.user.active ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.active)

~~~ return.user.email ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.email)

~~~ return.user.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.id)

~~~ return.user.lastName ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.lastName)

~~~ return.user.name ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.name)

~~~ return.user.password ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.password)

~~~ return.user.posts ~~~
Join
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| ClassRef(com.reljicd.model.Post)
| NullOp

~~~ return.user.roles ~~~
Join
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| ClassRef(com.reljicd.model.Role)
| NullOp

~~~ return.user.username ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.username)


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [Post.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
Annotation: type: Ljavax/persistence/Table; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post

]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: constructDIR(): leftType = com.reljicd.model.Post
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: findById
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)

WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
NRA.java: processTableandFields: com.reljicd.model.Post fields = [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Post: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Collection comments>  type=Comment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = $r1, com.reljicd.model.Post
DIRRegionAnalyzer.java: constructDIR(): accesspaths = [$r1.id, $r1.title, $r1.body, $r1.createDate, $r1.user, $r1.comments]
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)]
DIRRegionAnalyzer.java: constructDIR(): callee = com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
Flatten.java: getNestedFields(): LVAL TYPE: com.reljicd.model.Post
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.Post: java.lang.Long id> = java.lang.Long
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post_id

]
Flatten.java: getNestedFields(): Id fields=id
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.Post: java.lang.String title> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: title
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your title must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide title

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.Post: java.lang.String body> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.Post: java.util.Date createDate> = java.util.Date
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.Post: com.reljicd.model.User user> = com.reljicd.model.User
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
Flatten.java: getNestedFields(): check *ToOne sf: user , type = com.reljicd.model.User
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.Post: java.util.Collection comments> = java.util.Collection
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
Flatten.java: getNestedFields(): check *ToMany sf: comments , type = java.util.Collection
Flatten.java: getNestedFields(): returning: [<com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
DIRRegionAnalyzer.java: constructDIR(): check nestedFields=[<com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.user
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=Post
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.reljicd.model.User
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.reljicd.model.User
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Join
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| ClassRef(com.reljicd.model.User)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: constructDIR(): key= return.user
 value= Join
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| ClassRef(com.reljicd.model.User)
| NullOp
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| ClassRef(com.reljicd.model.User)
| NullOp
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nested field name= user
NRA.java: genExprNra(): nested Entity = com.reljicd.model.User
NRA.java: processTableandFields: com.reljicd.model.User fields = [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: int active>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection roles>  type=Role
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection posts>  type=Post
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.User
NRA.java: genExprNra(): com.reljicd.model.User fields= [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: genExprNra(): fields count= 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: unique value: 1
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Email; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide a valid Email

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide an email

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String password>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: password
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your password must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your password

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String username>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: username
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: unique value: 1

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your username must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String name>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: last_name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your last name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: int active>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: active
Annotation Element: kind: Z name: nullable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection roles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=roles
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= roles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/JoinTable;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Role
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Role
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.role_id
| Role.user_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Role
NRA.java: genExprNra(): nested field name= roles
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Role
NRA.java: processTableandFields: com.reljicd.model.Role fields = [<com.reljicd.model.Role: java.lang.Long id>, <com.reljicd.model.Role: java.lang.String role>, <com.reljicd.model.Role: java.util.Collection users>]
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.lang.String role>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.User
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.util.Collection users>  type=User
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.User
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: getCondFromManyToMany(): mappedBy= roles
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Role
NRA.java: genExprNra(): com.reljicd.model.Role fields= [<com.reljicd.model.Role: java.lang.Long id>, <com.reljicd.model.Role: java.lang.String role>, <com.reljicd.model.Role: java.util.Collection users>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.lang.String role>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: role
Annotation Element: kind: Z name: unique value: 1

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.util.Collection users>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=users
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Role
 fieldName= users
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String role [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection users [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = Role
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: getCondFromManyToMany(): mappedBy= roles
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.user_id
| User.role_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nested field name= users
NRA.java: genExprNra(): nested Entity = com.reljicd.model.User
NRA.java: processTableandFields: com.reljicd.model.User fields = [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: int active>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection roles>  type=Role
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection posts>  type=Post
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.User
NRA.java: genExprNra(): com.reljicd.model.User fields= [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: genExprNra(): fields count= 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: unique value: 1
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Email; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide a valid Email

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide an email

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String password>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: password
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your password must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your password

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String username>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: username
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: unique value: 1

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your username must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String name>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: last_name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your last name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: int active>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: active
Annotation Element: kind: Z name: nullable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection roles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=roles
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= roles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/JoinTable;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Role
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Role
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.role_id
| Role.user_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Role
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection posts>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=posts
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= posts
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection posts [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Post
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Post
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Post.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.User.id), FieldRef(com.reljicd.model.User.email), FieldRef(com.reljicd.model.User.password), FieldRef(com.reljicd.model.User.username), FieldRef(com.reljicd.model.User.name), FieldRef(com.reljicd.model.User.lastName), FieldRef(com.reljicd.model.User.active), FieldRef(com.reljicd.model.User.roles), FieldRef(com.reljicd.model.User.posts)]
NRA.java: genExprNra(): projectNode name: Role.users=Pi
NRA.java: genExprNra(): nestexpr= Role.users=Pi
| Join
| | Alpha
| | ClassRef(User)
| | Equals
| | | Alpha.user_id
| | | User.role_id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Role.id), FieldRef(com.reljicd.model.Role.role), FieldRef(com.reljicd.model.Role.users)]
NRA.java: genExprNra(): projectNode name: User.roles=Pi
NRA.java: genExprNra(): nestexpr= User.roles=Pi
| Join
| | Alpha
| | ClassRef(Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection posts>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=posts
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= posts
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection posts [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Post
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Post
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Post.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nested field name= posts
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Post
NRA.java: processTableandFields: com.reljicd.model.Post fields = [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Post: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Collection comments>  type=Comment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Post
NRA.java: genExprNra(): com.reljicd.model.Post fields= [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: genExprNra(): fields count= 6
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String title>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: title
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your title must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide title

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String body>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Date createDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: com.reljicd.model.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = Post
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nested field name= user
NRA.java: genExprNra(): nested Entity = com.reljicd.model.User
NRA.java: processTableandFields: com.reljicd.model.User fields = [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: int active>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection roles>  type=Role
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection posts>  type=Post
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.User
NRA.java: genExprNra(): com.reljicd.model.User fields= [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: genExprNra(): fields count= 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: unique value: 1
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Email; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide a valid Email

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide an email

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String password>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: password
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your password must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your password

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String username>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: username
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: unique value: 1

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your username must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String name>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: last_name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your last name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: int active>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: active
Annotation Element: kind: Z name: nullable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection roles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=roles
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= roles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/JoinTable;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Role
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Role
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.role_id
| Role.user_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Role
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection posts>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=posts
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= posts
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection posts [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Post
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Post
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Post.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.User.id), FieldRef(com.reljicd.model.User.email), FieldRef(com.reljicd.model.User.password), FieldRef(com.reljicd.model.User.username), FieldRef(com.reljicd.model.User.name), FieldRef(com.reljicd.model.User.lastName), FieldRef(com.reljicd.model.User.active), FieldRef(com.reljicd.model.User.roles), FieldRef(com.reljicd.model.User.posts)]
NRA.java: genExprNra(): projectNode name: Post.user=Pi
NRA.java: genExprNra(): nestexpr= Post.user=Pi
| Join
| | Alpha
| | ClassRef(User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Collection comments>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=comments
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= comments
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection comments [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Comment
NRA.java: genExprNra(): baseclass = Post
NRA.java: genExprNra(): fieldclass = Comment
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Comment.post_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Comment
NRA.java: genExprNra(): nested field name= comments
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Comment
NRA.java: processTableandFields: com.reljicd.model.Comment fields = [<com.reljicd.model.Comment: java.lang.Long id>, <com.reljicd.model.Comment: java.lang.String body>, <com.reljicd.model.Comment: java.util.Date createDate>, <com.reljicd.model.Comment: com.reljicd.model.Post post>, <com.reljicd.model.Comment: com.reljicd.model.User user>]
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: com.reljicd.model.Post post>  type=Post
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: post_id, Annotation Element: kind: s name: referencedColumnName value: post_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Comment
NRA.java: genExprNra(): com.reljicd.model.Comment fields= [<com.reljicd.model.Comment: java.lang.Long id>, <com.reljicd.model.Comment: java.lang.String body>, <com.reljicd.model.Comment: java.util.Date createDate>, <com.reljicd.model.Comment: com.reljicd.model.Post post>, <com.reljicd.model.Comment: com.reljicd.model.User user>]
NRA.java: genExprNra(): fields count= 5
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: comment_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: java.lang.String body>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please write something

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: java.util.Date createDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: com.reljicd.model.Post post>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: post_id
Annotation Element: kind: s name: referencedColumnName value: post_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=post
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Comment
 fieldName= post
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.Post post [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= post
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Post
NRA.java: genExprNra(): baseclass = Comment
NRA.java: genExprNra(): fieldclass = Post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: post_id, Annotation Element: kind: s name: referencedColumnName value: post_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.post_id
| Post.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: com.reljicd.model.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Comment
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.Post post [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = Comment
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Comment.id), FieldRef(com.reljicd.model.Comment.body), FieldRef(com.reljicd.model.Comment.createDate), FieldRef(com.reljicd.model.Comment.post), FieldRef(com.reljicd.model.Comment.user)]
NRA.java: genExprNra(): projectNode name: Post.comments=Pi
NRA.java: genExprNra(): nestexpr= Post.comments=Pi
| Join
| | Alpha
| | ClassRef(Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Post.id), FieldRef(com.reljicd.model.Post.title), FieldRef(com.reljicd.model.Post.body), FieldRef(com.reljicd.model.Post.createDate), FieldRef(com.reljicd.model.Post.user), FieldRef(com.reljicd.model.Post.comments)]
NRA.java: genExprNra(): projectNode name: User.posts=Pi
NRA.java: genExprNra(): nestexpr= User.posts=Pi
| Join
| | Alpha
| | ClassRef(Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | NullOp
| | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.User.id), FieldRef(com.reljicd.model.User.email), FieldRef(com.reljicd.model.User.password), FieldRef(com.reljicd.model.User.username), FieldRef(com.reljicd.model.User.name), FieldRef(com.reljicd.model.User.lastName), FieldRef(com.reljicd.model.User.active), FieldRef(com.reljicd.model.User.roles), FieldRef(com.reljicd.model.User.posts)]
NRA.java: genExprNra(): projectNode name: Post.user=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): key : return.user
 value : 
 Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.comments
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=Post
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= comments
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection comments [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.reljicd.model.Comment
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.reljicd.model.Comment
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Join
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| ClassRef(com.reljicd.model.Comment)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: constructDIR(): key= return.comments
 value= Join
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| ClassRef(com.reljicd.model.Comment)
| NullOp
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Comment.post_id
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| ClassRef(com.reljicd.model.Comment)
| NullOp
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Comment
NRA.java: genExprNra(): nested field name= comments
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Comment
NRA.java: processTableandFields: com.reljicd.model.Comment fields = [<com.reljicd.model.Comment: java.lang.Long id>, <com.reljicd.model.Comment: java.lang.String body>, <com.reljicd.model.Comment: java.util.Date createDate>, <com.reljicd.model.Comment: com.reljicd.model.Post post>, <com.reljicd.model.Comment: com.reljicd.model.User user>]
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: com.reljicd.model.Post post>  type=Post
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: post_id, Annotation Element: kind: s name: referencedColumnName value: post_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Comment
NRA.java: genExprNra(): com.reljicd.model.Comment fields= [<com.reljicd.model.Comment: java.lang.Long id>, <com.reljicd.model.Comment: java.lang.String body>, <com.reljicd.model.Comment: java.util.Date createDate>, <com.reljicd.model.Comment: com.reljicd.model.Post post>, <com.reljicd.model.Comment: com.reljicd.model.User user>]
NRA.java: genExprNra(): fields count= 5
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: comment_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: java.lang.String body>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please write something

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: java.util.Date createDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: com.reljicd.model.Post post>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: post_id
Annotation Element: kind: s name: referencedColumnName value: post_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=post
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Comment
 fieldName= post
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.Post post [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= post
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Post
NRA.java: genExprNra(): baseclass = Comment
NRA.java: genExprNra(): fieldclass = Post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: post_id, Annotation Element: kind: s name: referencedColumnName value: post_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.post_id
| Post.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nested field name= post
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Post
NRA.java: processTableandFields: com.reljicd.model.Post fields = [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Post: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Collection comments>  type=Comment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Post
NRA.java: genExprNra(): com.reljicd.model.Post fields= [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: genExprNra(): fields count= 6
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String title>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: title
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your title must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide title

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String body>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Date createDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: com.reljicd.model.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = Post
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nested field name= user
NRA.java: genExprNra(): nested Entity = com.reljicd.model.User
NRA.java: processTableandFields: com.reljicd.model.User fields = [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: int active>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection roles>  type=Role
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection posts>  type=Post
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.User
NRA.java: genExprNra(): com.reljicd.model.User fields= [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: genExprNra(): fields count= 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: unique value: 1
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Email; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide a valid Email

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide an email

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String password>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: password
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your password must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your password

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String username>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: username
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: unique value: 1

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your username must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String name>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: last_name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your last name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: int active>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: active
Annotation Element: kind: Z name: nullable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection roles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=roles
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= roles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/JoinTable;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Role
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Role
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.role_id
| Role.user_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Role
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection posts>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=posts
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= posts
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection posts [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Post
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Post
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Post.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.User.id), FieldRef(com.reljicd.model.User.email), FieldRef(com.reljicd.model.User.password), FieldRef(com.reljicd.model.User.username), FieldRef(com.reljicd.model.User.name), FieldRef(com.reljicd.model.User.lastName), FieldRef(com.reljicd.model.User.active), FieldRef(com.reljicd.model.User.roles), FieldRef(com.reljicd.model.User.posts)]
NRA.java: genExprNra(): projectNode name: Post.user=Pi
NRA.java: genExprNra(): nestexpr= Post.user=Pi
| Join
| | Alpha
| | ClassRef(User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Collection comments>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=comments
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= comments
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection comments [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Comment
NRA.java: genExprNra(): baseclass = Post
NRA.java: genExprNra(): fieldclass = Comment
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Comment.post_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Comment
NRA.java: genExprNra(): nested field name= comments
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Comment
NRA.java: processTableandFields: com.reljicd.model.Comment fields = [<com.reljicd.model.Comment: java.lang.Long id>, <com.reljicd.model.Comment: java.lang.String body>, <com.reljicd.model.Comment: java.util.Date createDate>, <com.reljicd.model.Comment: com.reljicd.model.Post post>, <com.reljicd.model.Comment: com.reljicd.model.User user>]
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: com.reljicd.model.Post post>  type=Post
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: post_id, Annotation Element: kind: s name: referencedColumnName value: post_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Comment
NRA.java: genExprNra(): com.reljicd.model.Comment fields= [<com.reljicd.model.Comment: java.lang.Long id>, <com.reljicd.model.Comment: java.lang.String body>, <com.reljicd.model.Comment: java.util.Date createDate>, <com.reljicd.model.Comment: com.reljicd.model.Post post>, <com.reljicd.model.Comment: com.reljicd.model.User user>]
NRA.java: genExprNra(): fields count= 5
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: comment_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: java.lang.String body>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please write something

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: java.util.Date createDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: com.reljicd.model.Post post>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: post_id
Annotation Element: kind: s name: referencedColumnName value: post_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=post
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Comment
 fieldName= post
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.Post post [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= post
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Post
NRA.java: genExprNra(): baseclass = Comment
NRA.java: genExprNra(): fieldclass = Post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: post_id, Annotation Element: kind: s name: referencedColumnName value: post_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.post_id
| Post.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: com.reljicd.model.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Comment
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.Post post [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = Comment
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Comment.id), FieldRef(com.reljicd.model.Comment.body), FieldRef(com.reljicd.model.Comment.createDate), FieldRef(com.reljicd.model.Comment.post), FieldRef(com.reljicd.model.Comment.user)]
NRA.java: genExprNra(): projectNode name: Post.comments=Pi
NRA.java: genExprNra(): nestexpr= Post.comments=Pi
| Join
| | Alpha
| | ClassRef(Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Post.id), FieldRef(com.reljicd.model.Post.title), FieldRef(com.reljicd.model.Post.body), FieldRef(com.reljicd.model.Post.createDate), FieldRef(com.reljicd.model.Post.user), FieldRef(com.reljicd.model.Post.comments)]
NRA.java: genExprNra(): projectNode name: Comment.post=Pi
NRA.java: genExprNra(): nestexpr= Comment.post=Pi
| Join
| | Alpha
| | ClassRef(Post)
| | Equals
| | | Alpha.post_id
| | | Post.id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | NullOp
| | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: com.reljicd.model.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Comment
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.Post post [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = Comment
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nested field name= user
NRA.java: genExprNra(): nested Entity = com.reljicd.model.User
NRA.java: processTableandFields: com.reljicd.model.User fields = [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: int active>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection roles>  type=Role
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection posts>  type=Post
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.User
NRA.java: genExprNra(): com.reljicd.model.User fields= [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: genExprNra(): fields count= 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: unique value: 1
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Email; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide a valid Email

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide an email

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String password>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: password
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your password must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your password

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String username>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: username
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: unique value: 1

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your username must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String name>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: last_name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your last name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: int active>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: active
Annotation Element: kind: Z name: nullable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection roles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=roles
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= roles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/JoinTable;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Role
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Role
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.role_id
| Role.user_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Role
NRA.java: genExprNra(): nested field name= roles
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Role
NRA.java: processTableandFields: com.reljicd.model.Role fields = [<com.reljicd.model.Role: java.lang.Long id>, <com.reljicd.model.Role: java.lang.String role>, <com.reljicd.model.Role: java.util.Collection users>]
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.lang.String role>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.User
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.util.Collection users>  type=User
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.User
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: getCondFromManyToMany(): mappedBy= roles
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Role
NRA.java: genExprNra(): com.reljicd.model.Role fields= [<com.reljicd.model.Role: java.lang.Long id>, <com.reljicd.model.Role: java.lang.String role>, <com.reljicd.model.Role: java.util.Collection users>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.lang.String role>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: role
Annotation Element: kind: Z name: unique value: 1

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.util.Collection users>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=users
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Role
 fieldName= users
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String role [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection users [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = Role
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: getCondFromManyToMany(): mappedBy= roles
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.user_id
| User.role_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Role.id), FieldRef(com.reljicd.model.Role.role), FieldRef(com.reljicd.model.Role.users)]
NRA.java: genExprNra(): projectNode name: User.roles=Pi
NRA.java: genExprNra(): nestexpr= User.roles=Pi
| Join
| | Alpha
| | ClassRef(Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection posts>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=posts
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= posts
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection posts [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Post
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Post
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Post.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nested field name= posts
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Post
NRA.java: processTableandFields: com.reljicd.model.Post fields = [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Post: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Collection comments>  type=Comment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Post
NRA.java: genExprNra(): com.reljicd.model.Post fields= [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: genExprNra(): fields count= 6
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String title>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: title
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your title must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide title

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String body>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Date createDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: com.reljicd.model.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = Post
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Collection comments>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=comments
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= comments
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection comments [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Comment
NRA.java: genExprNra(): baseclass = Post
NRA.java: genExprNra(): fieldclass = Comment
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Comment.post_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Comment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Post.id), FieldRef(com.reljicd.model.Post.title), FieldRef(com.reljicd.model.Post.body), FieldRef(com.reljicd.model.Post.createDate), FieldRef(com.reljicd.model.Post.user), FieldRef(com.reljicd.model.Post.comments)]
NRA.java: genExprNra(): projectNode name: User.posts=Pi
NRA.java: genExprNra(): nestexpr= User.posts=Pi
| Join
| | Alpha
| | ClassRef(Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.User.id), FieldRef(com.reljicd.model.User.email), FieldRef(com.reljicd.model.User.password), FieldRef(com.reljicd.model.User.username), FieldRef(com.reljicd.model.User.name), FieldRef(com.reljicd.model.User.lastName), FieldRef(com.reljicd.model.User.active), FieldRef(com.reljicd.model.User.roles), FieldRef(com.reljicd.model.User.posts)]
NRA.java: genExprNra(): projectNode name: Comment.user=Pi
NRA.java: genExprNra(): nestexpr= Comment.user=Pi
| Join
| | Alpha
| | ClassRef(User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Comment.id), FieldRef(com.reljicd.model.Comment.body), FieldRef(com.reljicd.model.Comment.createDate), FieldRef(com.reljicd.model.Comment.post), FieldRef(com.reljicd.model.Comment.user)]
NRA.java: genExprNra(): projectNode name: Post.comments=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): key : return.comments
 value : 
 Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)
DIRRegionAnalyzer.java: constructDIR(): key = return.user.active
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.active)
DIRRegionAnalyzer.java: constructDIR(): key = return.user.id
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.id)
DIRRegionAnalyzer.java: constructDIR(): key = return.user.posts
DIRRegionAnalyzer.java: constructDIR(): val = Join
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| ClassRef(com.reljicd.model.Post)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return.user.username
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.username)
DIRRegionAnalyzer.java: constructDIR(): key = return.body
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body
DIRRegionAnalyzer.java: constructDIR(): key = return.user.lastName
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.lastName)
DIRRegionAnalyzer.java: constructDIR(): key = return.title
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title
DIRRegionAnalyzer.java: constructDIR(): key = return.user.password
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.password)
DIRRegionAnalyzer.java: constructDIR(): key = return.user.name
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.name)
DIRRegionAnalyzer.java: constructDIR(): key = return.id
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id
DIRRegionAnalyzer.java: constructDIR(): key = return.user.email
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.email)
DIRRegionAnalyzer.java: constructDIR(): key = optionalret
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
DIRRegionAnalyzer.java: constructDIR(): key = return.createDate
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate
DIRRegionAnalyzer.java: constructDIR(): key = return.user.roles
DIRRegionAnalyzer.java: constructDIR(): val = Join
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| ClassRef(com.reljicd.model.Role)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return.comments
DIRRegionAnalyzer.java: constructDIR(): val = Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
DIRRegionAnalyzer.java: constructDIR(): key = return.user
DIRRegionAnalyzer.java: constructDIR(): val = Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long) END
DIRRegionAnalyzer.java: constructDIR(): v1 access paths: [$r1.id, $r1.title, $r1.body, $r1.createDate, $r1.user, $r1.comments]
DIRRegionAnalyzer.java: constructDIR(): key = $r1.id
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id
DIRRegionAnalyzer.java: constructDIR(): key = $r1.title
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.title
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title
DIRRegionAnalyzer.java: constructDIR(): key = $r1.body
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.body
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body
DIRRegionAnalyzer.java: constructDIR(): key = $r1.createDate
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.createDate
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate
DIRRegionAnalyzer.java: constructDIR(): key = $r1.user
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.user
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r1.comments
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.comments
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $r1
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
OptinalTypeInfo.java: getKnownOptionalsActualType(): Current method's typeTable (which is global): {return_com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)=com.reljicd.model.Post, return=com.reljicd.model.Post}
OptinalTypeInfo.java: getKnownOptionalsActualType(): actualType = com.reljicd.model.Post
WARN: DIRRegionAnalyzer.java: processPointerAssignment(): v1 and v2 have diff types
WARN: DIRRegionAnalyzer.java: processPointerAssignment(): type(v1) = com.reljicd.model.Post
WARN: DIRRegionAnalyzer.java: processPointerAssignment(): type(v2) = java.util.Optional
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: return
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r1
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [Post.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
Annotation: type: Ljavax/persistence/Table; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post

]
AccessPath.java: replaceBase(): input access path: return.id
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: return.title
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: return.body
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: return.createDate
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: return.user
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: return.comments
AccessPath.java: replaceBase(): replacement of base: $r1
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.postRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ $r1.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ $r1.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ $r1.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ $r1.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ return.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ return.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ return.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.postRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ $r1.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ $r1.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ $r1.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ $r1.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ return.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ return.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ return.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r0=this.postRepository
DIR.java: updateRegion(): update region entry: $r1.createDate=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate
DIR.java: updateRegion(): update region entry: $r1=Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
DIR.java: updateRegion(): update region entry: $r1.title=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: $r1.body=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body
DIR.java: updateRegion(): update region entry: $r1.id=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id
DIR.java: updateRegion(): update region entry: return.body=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body
DIR.java: updateRegion(): update region entry: return.title=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title
DIR.java: updateRegion(): update region entry: $r1.comments=Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: optionalret=Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
DIR.java: updateRegion(): update region entry: return.id=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id
DIR.java: updateRegion(): update region entry: $r1.user=Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: return.createDate=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate
DIR.java: updateRegion(): update region entry: return.comments=Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: return=Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
DIR.java: updateRegion(): update region entry: return.user=Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: return=Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
construct/Utils.java: parseObjectInvoke(): Put DIR of callee = com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long) in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): leftType : java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: optionalPost
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
DIRRegionAnalyzer.java: constructDIR(): left type = java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): v1 type is optional
DIRRegionAnalyzer.java: constructDIR(): method sig = com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)=~~~ $r0 ~~~
this.postRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ $r1.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ $r1.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ $r1.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ $r1.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ return.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ return.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ return.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self

, com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)=~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ return.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ return.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ return.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.user.active ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.active)

~~~ return.user.email ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.email)

~~~ return.user.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.id)

~~~ return.user.lastName ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.lastName)

~~~ return.user.name ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.name)

~~~ return.user.password ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.password)

~~~ return.user.posts ~~~
Join
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| ClassRef(com.reljicd.model.Post)
| NullOp

~~~ return.user.roles ~~~
Join
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| ClassRef(com.reljicd.model.Role)
| NullOp

~~~ return.user.username ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.username)

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ $r0 ~~~
this.postRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ $r1.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ $r1.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ $r1.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ $r1.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ return.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ return.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ return.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [Post.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
Annotation: type: Ljavax/persistence/Table; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post

]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [id, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [id, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = id, actual = id
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.postRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
DIRRegionAnalyzer.java: constructDIR(): leftType = com.reljicd.model.Post
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: findForId
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [id, this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [id, $r0]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: id
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: java.lang.Long
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: id
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.reljicd.service.impl.PostServiceImp
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: $r0
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.postRepository]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.postRepository
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, $r1.createDate, $r1, $r1.title, this, $r1.body, $r1.id, return.body, return.title, $r1.comments, optionalret, return.id, $r1.user, return.createDate, return.comments, return, return.user, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = findForId, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: id
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: id
DIRRegionAnalyzer.java: handleSideEffects(): Case the formal param is a primitive
DIRRegionAnalyzer.java: handleSideEffects(): fml: id
DIRRegionAnalyzer.java: handleSideEffects(): actual arg (Soot Value): id
DIRRegionAnalyzer.java: handleSideEffects(): actualNode (Node constructed from value): id
DIRRegionAnalyzer.java: handleSideEffects(): formal = id, actual = id
DIRRegionAnalyzer.java: handleSideEffects(): resolvedActual: id
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: $r0
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.postRepository]
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
NRA.java: processTableandFields: com.reljicd.model.Post fields = [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Post: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Collection comments>  type=Comment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = optionalPost, com.reljicd.model.Post
DIRRegionAnalyzer.java: constructDIR(): accesspaths = [optionalPost.id, optionalPost.title, optionalPost.body, optionalPost.createDate, optionalPost.user, optionalPost.comments]
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)]
DIRRegionAnalyzer.java: constructDIR(): callee = com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
Flatten.java: getNestedFields(): LVAL TYPE: com.reljicd.model.Post
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.Post: java.lang.Long id> = java.lang.Long
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post_id

]
Flatten.java: getNestedFields(): Id fields=id
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.Post: java.lang.String title> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: title
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your title must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide title

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.Post: java.lang.String body> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.Post: java.util.Date createDate> = java.util.Date
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.Post: com.reljicd.model.User user> = com.reljicd.model.User
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
Flatten.java: getNestedFields(): check *ToOne sf: user , type = com.reljicd.model.User
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.Post: java.util.Collection comments> = java.util.Collection
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
Flatten.java: getNestedFields(): check *ToMany sf: comments , type = java.util.Collection
Flatten.java: getNestedFields(): returning: [<com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
DIRRegionAnalyzer.java: constructDIR(): check nestedFields=[<com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.user
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=Post
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.reljicd.model.User
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.reljicd.model.User
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [id, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [id, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = id, actual = id
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.postRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key= return.user
 value= Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| ClassRef(com.reljicd.model.User)
| Equals
| | Alpha.user_id
| | User.id
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nested field name= user
NRA.java: genExprNra(): nested Entity = com.reljicd.model.User
NRA.java: processTableandFields: com.reljicd.model.User fields = [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: int active>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection roles>  type=Role
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection posts>  type=Post
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.User
NRA.java: genExprNra(): com.reljicd.model.User fields= [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: genExprNra(): fields count= 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: unique value: 1
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Email; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide a valid Email

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide an email

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String password>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: password
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your password must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your password

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String username>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: username
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: unique value: 1

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your username must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String name>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: last_name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your last name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: int active>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: active
Annotation Element: kind: Z name: nullable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection roles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=roles
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= roles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/JoinTable;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Role
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Role
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.role_id
| Role.user_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Role
NRA.java: genExprNra(): nested field name= roles
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Role
NRA.java: processTableandFields: com.reljicd.model.Role fields = [<com.reljicd.model.Role: java.lang.Long id>, <com.reljicd.model.Role: java.lang.String role>, <com.reljicd.model.Role: java.util.Collection users>]
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.lang.String role>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.User
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.util.Collection users>  type=User
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.User
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: getCondFromManyToMany(): mappedBy= roles
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Role
NRA.java: genExprNra(): com.reljicd.model.Role fields= [<com.reljicd.model.Role: java.lang.Long id>, <com.reljicd.model.Role: java.lang.String role>, <com.reljicd.model.Role: java.util.Collection users>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.lang.String role>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: role
Annotation Element: kind: Z name: unique value: 1

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.util.Collection users>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=users
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Role
 fieldName= users
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String role [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection users [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = Role
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: getCondFromManyToMany(): mappedBy= roles
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.user_id
| User.role_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nested field name= users
NRA.java: genExprNra(): nested Entity = com.reljicd.model.User
NRA.java: processTableandFields: com.reljicd.model.User fields = [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: int active>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection roles>  type=Role
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection posts>  type=Post
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.User
NRA.java: genExprNra(): com.reljicd.model.User fields= [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: genExprNra(): fields count= 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: unique value: 1
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Email; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide a valid Email

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide an email

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String password>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: password
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your password must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your password

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String username>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: username
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: unique value: 1

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your username must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String name>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: last_name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your last name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: int active>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: active
Annotation Element: kind: Z name: nullable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection roles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=roles
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= roles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/JoinTable;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Role
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Role
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.role_id
| Role.user_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Role
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection posts>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=posts
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= posts
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection posts [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Post
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Post
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Post.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.User.id), FieldRef(com.reljicd.model.User.email), FieldRef(com.reljicd.model.User.password), FieldRef(com.reljicd.model.User.username), FieldRef(com.reljicd.model.User.name), FieldRef(com.reljicd.model.User.lastName), FieldRef(com.reljicd.model.User.active), FieldRef(com.reljicd.model.User.roles), FieldRef(com.reljicd.model.User.posts)]
NRA.java: genExprNra(): projectNode name: Role.users=Pi
NRA.java: genExprNra(): nestexpr= Role.users=Pi
| Join
| | Alpha
| | ClassRef(User)
| | Equals
| | | Alpha.user_id
| | | User.role_id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Role.id), FieldRef(com.reljicd.model.Role.role), FieldRef(com.reljicd.model.Role.users)]
NRA.java: genExprNra(): projectNode name: User.roles=Pi
NRA.java: genExprNra(): nestexpr= User.roles=Pi
| Join
| | Alpha
| | ClassRef(Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | Role.users=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.role_id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection posts>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=posts
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= posts
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection posts [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Post
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Post
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Post.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nested field name= posts
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Post
NRA.java: processTableandFields: com.reljicd.model.Post fields = [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Post: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Collection comments>  type=Comment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Post
NRA.java: genExprNra(): com.reljicd.model.Post fields= [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: genExprNra(): fields count= 6
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String title>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: title
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your title must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide title

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String body>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Date createDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: com.reljicd.model.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = Post
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nested field name= user
NRA.java: genExprNra(): nested Entity = com.reljicd.model.User
NRA.java: processTableandFields: com.reljicd.model.User fields = [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: int active>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection roles>  type=Role
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection posts>  type=Post
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.User
NRA.java: genExprNra(): com.reljicd.model.User fields= [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: genExprNra(): fields count= 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: unique value: 1
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Email; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide a valid Email

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide an email

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String password>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: password
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your password must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your password

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String username>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: username
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: unique value: 1

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your username must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String name>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: last_name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your last name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: int active>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: active
Annotation Element: kind: Z name: nullable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection roles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=roles
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= roles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/JoinTable;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Role
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Role
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.role_id
| Role.user_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Role
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection posts>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=posts
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= posts
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection posts [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Post
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Post
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Post.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.User.id), FieldRef(com.reljicd.model.User.email), FieldRef(com.reljicd.model.User.password), FieldRef(com.reljicd.model.User.username), FieldRef(com.reljicd.model.User.name), FieldRef(com.reljicd.model.User.lastName), FieldRef(com.reljicd.model.User.active), FieldRef(com.reljicd.model.User.roles), FieldRef(com.reljicd.model.User.posts)]
NRA.java: genExprNra(): projectNode name: Post.user=Pi
NRA.java: genExprNra(): nestexpr= Post.user=Pi
| Join
| | Alpha
| | ClassRef(User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Collection comments>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=comments
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= comments
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection comments [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Comment
NRA.java: genExprNra(): baseclass = Post
NRA.java: genExprNra(): fieldclass = Comment
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Comment.post_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Comment
NRA.java: genExprNra(): nested field name= comments
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Comment
NRA.java: processTableandFields: com.reljicd.model.Comment fields = [<com.reljicd.model.Comment: java.lang.Long id>, <com.reljicd.model.Comment: java.lang.String body>, <com.reljicd.model.Comment: java.util.Date createDate>, <com.reljicd.model.Comment: com.reljicd.model.Post post>, <com.reljicd.model.Comment: com.reljicd.model.User user>]
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: com.reljicd.model.Post post>  type=Post
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: post_id, Annotation Element: kind: s name: referencedColumnName value: post_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Comment
NRA.java: genExprNra(): com.reljicd.model.Comment fields= [<com.reljicd.model.Comment: java.lang.Long id>, <com.reljicd.model.Comment: java.lang.String body>, <com.reljicd.model.Comment: java.util.Date createDate>, <com.reljicd.model.Comment: com.reljicd.model.Post post>, <com.reljicd.model.Comment: com.reljicd.model.User user>]
NRA.java: genExprNra(): fields count= 5
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: comment_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: java.lang.String body>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please write something

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: java.util.Date createDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: com.reljicd.model.Post post>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: post_id
Annotation Element: kind: s name: referencedColumnName value: post_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=post
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Comment
 fieldName= post
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.Post post [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= post
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Post
NRA.java: genExprNra(): baseclass = Comment
NRA.java: genExprNra(): fieldclass = Post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: post_id, Annotation Element: kind: s name: referencedColumnName value: post_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.post_id
| Post.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: com.reljicd.model.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Comment
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.Post post [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = Comment
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Comment.id), FieldRef(com.reljicd.model.Comment.body), FieldRef(com.reljicd.model.Comment.createDate), FieldRef(com.reljicd.model.Comment.post), FieldRef(com.reljicd.model.Comment.user)]
NRA.java: genExprNra(): projectNode name: Post.comments=Pi
NRA.java: genExprNra(): nestexpr= Post.comments=Pi
| Join
| | Alpha
| | ClassRef(Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Post.id), FieldRef(com.reljicd.model.Post.title), FieldRef(com.reljicd.model.Post.body), FieldRef(com.reljicd.model.Post.createDate), FieldRef(com.reljicd.model.Post.user), FieldRef(com.reljicd.model.Post.comments)]
NRA.java: genExprNra(): projectNode name: User.posts=Pi
NRA.java: genExprNra(): nestexpr= User.posts=Pi
| Join
| | Alpha
| | ClassRef(Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | NullOp
| | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.User.id), FieldRef(com.reljicd.model.User.email), FieldRef(com.reljicd.model.User.password), FieldRef(com.reljicd.model.User.username), FieldRef(com.reljicd.model.User.name), FieldRef(com.reljicd.model.User.lastName), FieldRef(com.reljicd.model.User.active), FieldRef(com.reljicd.model.User.roles), FieldRef(com.reljicd.model.User.posts)]
NRA.java: genExprNra(): projectNode name: Post.user=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): repeat node
DIRRegionAnalyzer.java: constructDIR(): key : return.user
 value : 
 Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.comments
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=Post
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= comments
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection comments [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.reljicd.model.Comment
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.reljicd.model.Comment
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [id, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [id, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = id, actual = id
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.postRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key= return.comments
 value= Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Comment.post_id
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| ClassRef(com.reljicd.model.Comment)
| Equals
| | Alpha.id
| | Comment.post_id
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Comment
NRA.java: genExprNra(): nested field name= comments
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Comment
NRA.java: processTableandFields: com.reljicd.model.Comment fields = [<com.reljicd.model.Comment: java.lang.Long id>, <com.reljicd.model.Comment: java.lang.String body>, <com.reljicd.model.Comment: java.util.Date createDate>, <com.reljicd.model.Comment: com.reljicd.model.Post post>, <com.reljicd.model.Comment: com.reljicd.model.User user>]
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: com.reljicd.model.Post post>  type=Post
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: post_id, Annotation Element: kind: s name: referencedColumnName value: post_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Comment
NRA.java: genExprNra(): com.reljicd.model.Comment fields= [<com.reljicd.model.Comment: java.lang.Long id>, <com.reljicd.model.Comment: java.lang.String body>, <com.reljicd.model.Comment: java.util.Date createDate>, <com.reljicd.model.Comment: com.reljicd.model.Post post>, <com.reljicd.model.Comment: com.reljicd.model.User user>]
NRA.java: genExprNra(): fields count= 5
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: comment_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: java.lang.String body>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please write something

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: java.util.Date createDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: com.reljicd.model.Post post>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: post_id
Annotation Element: kind: s name: referencedColumnName value: post_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=post
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Comment
 fieldName= post
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.Post post [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= post
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Post
NRA.java: genExprNra(): baseclass = Comment
NRA.java: genExprNra(): fieldclass = Post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: post_id, Annotation Element: kind: s name: referencedColumnName value: post_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.post_id
| Post.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nested field name= post
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Post
NRA.java: processTableandFields: com.reljicd.model.Post fields = [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Post: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Collection comments>  type=Comment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Post
NRA.java: genExprNra(): com.reljicd.model.Post fields= [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: genExprNra(): fields count= 6
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String title>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: title
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your title must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide title

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String body>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Date createDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: com.reljicd.model.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = Post
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nested field name= user
NRA.java: genExprNra(): nested Entity = com.reljicd.model.User
NRA.java: processTableandFields: com.reljicd.model.User fields = [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: int active>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection roles>  type=Role
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection posts>  type=Post
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.User
NRA.java: genExprNra(): com.reljicd.model.User fields= [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: genExprNra(): fields count= 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: unique value: 1
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Email; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide a valid Email

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide an email

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String password>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: password
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your password must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your password

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String username>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: username
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: unique value: 1

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your username must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String name>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: last_name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your last name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: int active>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: active
Annotation Element: kind: Z name: nullable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection roles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=roles
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= roles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/JoinTable;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Role
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Role
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.role_id
| Role.user_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Role
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection posts>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=posts
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= posts
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection posts [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Post
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Post
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Post.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.User.id), FieldRef(com.reljicd.model.User.email), FieldRef(com.reljicd.model.User.password), FieldRef(com.reljicd.model.User.username), FieldRef(com.reljicd.model.User.name), FieldRef(com.reljicd.model.User.lastName), FieldRef(com.reljicd.model.User.active), FieldRef(com.reljicd.model.User.roles), FieldRef(com.reljicd.model.User.posts)]
NRA.java: genExprNra(): projectNode name: Post.user=Pi
NRA.java: genExprNra(): nestexpr= Post.user=Pi
| Join
| | Alpha
| | ClassRef(User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Collection comments>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=comments
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= comments
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection comments [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Comment
NRA.java: genExprNra(): baseclass = Post
NRA.java: genExprNra(): fieldclass = Comment
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Comment.post_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Comment
NRA.java: genExprNra(): nested field name= comments
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Comment
NRA.java: processTableandFields: com.reljicd.model.Comment fields = [<com.reljicd.model.Comment: java.lang.Long id>, <com.reljicd.model.Comment: java.lang.String body>, <com.reljicd.model.Comment: java.util.Date createDate>, <com.reljicd.model.Comment: com.reljicd.model.Post post>, <com.reljicd.model.Comment: com.reljicd.model.User user>]
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: com.reljicd.model.Post post>  type=Post
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: post_id, Annotation Element: kind: s name: referencedColumnName value: post_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: processTableandFields: sf <com.reljicd.model.Comment: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Comment
NRA.java: genExprNra(): com.reljicd.model.Comment fields= [<com.reljicd.model.Comment: java.lang.Long id>, <com.reljicd.model.Comment: java.lang.String body>, <com.reljicd.model.Comment: java.util.Date createDate>, <com.reljicd.model.Comment: com.reljicd.model.Post post>, <com.reljicd.model.Comment: com.reljicd.model.User user>]
NRA.java: genExprNra(): fields count= 5
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: comment_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: java.lang.String body>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please write something

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: java.util.Date createDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: com.reljicd.model.Post post>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: post_id
Annotation Element: kind: s name: referencedColumnName value: post_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=post
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Comment
 fieldName= post
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.Post post [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= post
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Post
NRA.java: genExprNra(): baseclass = Comment
NRA.java: genExprNra(): fieldclass = Post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: post_id, Annotation Element: kind: s name: referencedColumnName value: post_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.post_id
| Post.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: com.reljicd.model.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Comment
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.Post post [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = Comment
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Comment.id), FieldRef(com.reljicd.model.Comment.body), FieldRef(com.reljicd.model.Comment.createDate), FieldRef(com.reljicd.model.Comment.post), FieldRef(com.reljicd.model.Comment.user)]
NRA.java: genExprNra(): projectNode name: Post.comments=Pi
NRA.java: genExprNra(): nestexpr= Post.comments=Pi
| Join
| | Alpha
| | ClassRef(Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Post.id), FieldRef(com.reljicd.model.Post.title), FieldRef(com.reljicd.model.Post.body), FieldRef(com.reljicd.model.Post.createDate), FieldRef(com.reljicd.model.Post.user), FieldRef(com.reljicd.model.Post.comments)]
NRA.java: genExprNra(): projectNode name: Comment.post=Pi
NRA.java: genExprNra(): nestexpr= Comment.post=Pi
| Join
| | Alpha
| | ClassRef(Post)
| | Equals
| | | Alpha.post_id
| | | Post.id
| List
| | id
| | title
| | body
| | createDate
| | Post.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | NullOp
| | | | NullOp
| | Post.comments=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Comment: com.reljicd.model.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Comment
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.Post post [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = Comment
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nested field name= user
NRA.java: genExprNra(): nested Entity = com.reljicd.model.User
NRA.java: processTableandFields: com.reljicd.model.User fields = [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: int active>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection roles>  type=Role
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection posts>  type=Post
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.User
NRA.java: genExprNra(): com.reljicd.model.User fields= [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: genExprNra(): fields count= 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: unique value: 1
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Email; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide a valid Email

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide an email

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String password>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: password
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your password must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your password

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String username>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: username
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: unique value: 1

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your username must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String name>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: last_name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your last name

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: int active>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: active
Annotation Element: kind: Z name: nullable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection roles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=roles
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= roles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/JoinTable;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Role
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Role
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.role_id
| Role.user_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Role
NRA.java: genExprNra(): nested field name= roles
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Role
NRA.java: processTableandFields: com.reljicd.model.Role fields = [<com.reljicd.model.Role: java.lang.Long id>, <com.reljicd.model.Role: java.lang.String role>, <com.reljicd.model.Role: java.util.Collection users>]
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.lang.String role>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.User
NRA.java: processTableandFields: sf <com.reljicd.model.Role: java.util.Collection users>  type=User
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.User
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: getCondFromManyToMany(): mappedBy= roles
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Role
NRA.java: genExprNra(): com.reljicd.model.Role fields= [<com.reljicd.model.Role: java.lang.Long id>, <com.reljicd.model.Role: java.lang.String role>, <com.reljicd.model.Role: java.util.Collection users>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.lang.String role>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: role
Annotation Element: kind: Z name: unique value: 1

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Role: java.util.Collection users>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=users
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Role
 fieldName= users
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String role [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection users [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = Role
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/User;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: roles

]
NRA.java: getCondFromManyToMany(): mappedBy= roles
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.user_id
| User.role_id
NRA.java: genExprNra(): ManyToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Role.id), FieldRef(com.reljicd.model.Role.role), FieldRef(com.reljicd.model.Role.users)]
NRA.java: genExprNra(): projectNode name: User.roles=Pi
NRA.java: genExprNra(): nestexpr= User.roles=Pi
| Join
| | Alpha
| | ClassRef(Role)
| | Equals
| | | Alpha.role_id
| | | Role.user_id
| List
| | id
| | role
| | NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.User: java.util.Collection posts>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=posts
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= posts
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection posts [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Post
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Post
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Post.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Post
NRA.java: genExprNra(): nested field name= posts
NRA.java: genExprNra(): nested Entity = com.reljicd.model.Post
NRA.java: processTableandFields: com.reljicd.model.Post fields = [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Post: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Collection comments>  type=Comment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: genExprNra(): From soot typeclass= com.reljicd.model.Post
NRA.java: genExprNra(): com.reljicd.model.Post fields= [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: genExprNra(): fields count= 6
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String title>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: title
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your title must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide title

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.lang.String body>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Date createDate>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: com.reljicd.model.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.reljicd.model.User
NRA.java: genExprNra(): baseclass = Post
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.reljicd.model.Post~user, com.reljicd.model.Post~comments]
NRA.java: genExprNra(): field =<com.reljicd.model.Post: java.util.Collection comments>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=comments
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= comments
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection comments [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
NRA.java: genExprNra(): sfEntity=com.reljicd.model.Comment
NRA.java: genExprNra(): baseclass = Post
NRA.java: genExprNra(): fieldclass = Comment
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Comment.post_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.reljicd.model.Comment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Post.id), FieldRef(com.reljicd.model.Post.title), FieldRef(com.reljicd.model.Post.body), FieldRef(com.reljicd.model.Post.createDate), FieldRef(com.reljicd.model.Post.user), FieldRef(com.reljicd.model.Post.comments)]
NRA.java: genExprNra(): projectNode name: User.posts=Pi
NRA.java: genExprNra(): nestexpr= User.posts=Pi
| Join
| | Alpha
| | ClassRef(Post)
| | Equals
| | | Alpha.id
| | | Post.user_id
| List
| | id
| | title
| | body
| | createDate
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.User.id), FieldRef(com.reljicd.model.User.email), FieldRef(com.reljicd.model.User.password), FieldRef(com.reljicd.model.User.username), FieldRef(com.reljicd.model.User.name), FieldRef(com.reljicd.model.User.lastName), FieldRef(com.reljicd.model.User.active), FieldRef(com.reljicd.model.User.roles), FieldRef(com.reljicd.model.User.posts)]
NRA.java: genExprNra(): projectNode name: Comment.user=Pi
NRA.java: genExprNra(): nestexpr= Comment.user=Pi
| Join
| | Alpha
| | ClassRef(User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.reljicd.model.Comment.id), FieldRef(com.reljicd.model.Comment.body), FieldRef(com.reljicd.model.Comment.createDate), FieldRef(com.reljicd.model.Comment.post), FieldRef(com.reljicd.model.Comment.user)]
NRA.java: genExprNra(): projectNode name: Post.comments=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): repeat node
DIRRegionAnalyzer.java: constructDIR(): key : return.comments
 value : 
 Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)
DIRRegionAnalyzer.java: constructDIR(): key = $r0
DIRRegionAnalyzer.java: constructDIR(): val = this.postRepository
DIRRegionAnalyzer.java: constructDIR(): key = $r1.createDate
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate
DIRRegionAnalyzer.java: constructDIR(): key = $r1
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
DIRRegionAnalyzer.java: constructDIR(): key = $r1.title
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title
DIRRegionAnalyzer.java: constructDIR(): key = this
DIRRegionAnalyzer.java: constructDIR(): val = Self
DIRRegionAnalyzer.java: constructDIR(): key = $r1.body
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body
DIRRegionAnalyzer.java: constructDIR(): key = $r1.id
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id
DIRRegionAnalyzer.java: constructDIR(): key = return.body
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body
DIRRegionAnalyzer.java: constructDIR(): key = return.title
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title
DIRRegionAnalyzer.java: constructDIR(): key = $r1.comments
DIRRegionAnalyzer.java: constructDIR(): val = Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = optionalret
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
DIRRegionAnalyzer.java: constructDIR(): key = return.id
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id
DIRRegionAnalyzer.java: constructDIR(): key = $r1.user
DIRRegionAnalyzer.java: constructDIR(): val = Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return.createDate
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate
DIRRegionAnalyzer.java: constructDIR(): key = return.comments
DIRRegionAnalyzer.java: constructDIR(): val = Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
DIRRegionAnalyzer.java: constructDIR(): key = return.user
DIRRegionAnalyzer.java: constructDIR(): val = Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long) END
DIRRegionAnalyzer.java: constructDIR(): v1 access paths: [optionalPost.id, optionalPost.title, optionalPost.body, optionalPost.createDate, optionalPost.user, optionalPost.comments]
DIRRegionAnalyzer.java: constructDIR(): key = optionalPost.id
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [id, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [id, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = id, actual = id
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.postRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id
DIRRegionAnalyzer.java: constructDIR(): key = optionalPost.title
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.title
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [id, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [id, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = id, actual = id
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.postRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title
DIRRegionAnalyzer.java: constructDIR(): key = optionalPost.body
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.body
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [id, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [id, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = id, actual = id
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.postRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body
DIRRegionAnalyzer.java: constructDIR(): key = optionalPost.createDate
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.createDate
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [id, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [id, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = id, actual = id
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.postRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate
DIRRegionAnalyzer.java: constructDIR(): key = optionalPost.user
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.user
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [id, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [id, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = id, actual = id
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.postRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): callersDag = Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = optionalPost.comments
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.comments
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [id, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [id, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = id, actual = id
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.postRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): callersDag = Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [id, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [id, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = id, actual = id
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.postRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
DIRRegionAnalyzer.java: constructDIR(): curUnit = this.<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): CASE: v.f = expr, f is non-primtive
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl>
DIRRegionAnalyzer.java: constructDIR(): accessPaths = [this.postServiceImpl.postRepository]
DIRRegionAnalyzer.java: constructDIR(): right val = $r0
DIRRegionAnalyzer.java: constructDIR(): Subcase: v1.f = v2
AccessPath.java: replaceBase(): input access path: this.postServiceImpl.postRepository
AccessPath.java: replaceBase(): replacement of base: $r0
WARN: DIRRegionAnalyzer.java: constructDIR(): Invalid intermediate access path found
DIRRegionAnalyzer.java: constructDIR(): curUnit = $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = isPresent
construct/Utils.java: parseInvokeExpr(): methodSignature = java.util.Optional: boolean isPresent()
construct/Utils.java: parseObjectInvoke(): virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.util.Optional: boolean isPresent()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.util.Optional: boolean isPresent()>
construct/Utils.java: parseObjectInvoke(): methodName = isPresent
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.util.Optional: boolean isPresent()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
Utils.java: getVarNode(): $z0
Utils.java: getVarNode(): LinkedVariableBox($z0)
JAssignStmtCons.java: construct(): virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>()
construct/Utils.java: parseInvokeExpr(): methodName = isPresent
construct/Utils.java: parseInvokeExpr(): methodSignature = java.util.Optional: boolean isPresent()
construct/Utils.java: parseObjectInvoke(): virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.util.Optional: boolean isPresent()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.util.Optional: boolean isPresent()>
construct/Utils.java: parseObjectInvoke(): methodName = isPresent
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.util.Optional: boolean isPresent()
DIRRegionAnalyzer.java: constructDIR(): curUnit = if $z0 == 0 goto return "/error"
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()$z0 == 0
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: optionalPost.comments=Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: optionalPost.title=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title
DIR.java: updateRegion(): update region entry: condition=Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
DIR.java: updateRegion(): update region entry: optionalPost.createDate=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: $z0=NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
DIR.java: updateRegion(): update region entry: optionalPost=Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
DIR.java: updateRegion(): update region entry: optionalPost.id=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id
DIR.java: updateRegion(): update region entry: optionalPost.body=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body
DIR.java: updateRegion(): update region entry: optionalPost.user=Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIRIfThenElseRegionAnalyzer.java: constructDIR(): region tree: | IfThenElse
| | BasicBlock1
| | BasicBlock2
| | BasicBlock3

DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock1
DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock2
DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock3
ARegion.java: analyze(): set cur method of analyzer to: editPostWithId
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 1
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.reljicd.controller.PostController, id := @parameter0: java.lang.Long, principal := @parameter1: java.security.Principal, model := @parameter2: org.springframework.ui.Model, $r0 = new com.reljicd.service.impl.PostServiceImp, optionalPost = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id), this.<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r0, $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>(), if $z0 == 0 goto return "/error", $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>(), post = (com.reljicd.model.Post) $r1, $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post), if $z1 == 0 goto return "/403", interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post), return "/postForm", return "/403", return "/error"]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = get
construct/Utils.java: parseInvokeExpr(): methodSignature = java.util.Optional: java.lang.Object get()
construct/Utils.java: parseObjectInvoke(): virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.util.Optional: java.lang.Object get()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.util.Optional: java.lang.Object get()>
construct/Utils.java: parseObjectInvoke(): methodName = get
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.util.Optional: java.lang.Object get()
OptinalTypeInfo.java: getKnownOptionalsActualType(): Current method's typeTable (which is global): {optionalPost=com.reljicd.model.Post}
OptinalTypeInfo.java: getKnownOptionalsActualType(): actualType = com.reljicd.model.Post
construct/Utils.java: parseObjectInvoke(): base (arg0 to Flatten.flatten): optionalPost
construct/Utils.java: parseObjectInvoke(): type (arg1 to Flatten.flatten): com.reljicd.model.Post
construct/Utils.java: parseObjectInvoke(): get(): paths = [optionalPost.id, optionalPost.title, optionalPost.body, optionalPost.createDate, optionalPost.user, optionalPost.comments]
construct/Utils.java: parseObjectInvoke(): methodDIR: ~~~ optionalret ~~~
optionalPost

~~~ return ~~~
optionalPost


construct/Utils.java: parseObjectInvoke(): get(): keyStr = return.id
construct/Utils.java: parseObjectInvoke(): get(): val = optionalPost.id
construct/Utils.java: parseObjectInvoke(): get(): keyStr = return.title
construct/Utils.java: parseObjectInvoke(): get(): val = optionalPost.title
construct/Utils.java: parseObjectInvoke(): get(): keyStr = return.body
construct/Utils.java: parseObjectInvoke(): get(): val = optionalPost.body
construct/Utils.java: parseObjectInvoke(): get(): keyStr = return.createDate
construct/Utils.java: parseObjectInvoke(): get(): val = optionalPost.createDate
construct/Utils.java: parseObjectInvoke(): get(): keyStr = return.user
construct/Utils.java: parseObjectInvoke(): get(): val = optionalPost.user
construct/Utils.java: parseObjectInvoke(): get(): keyStr = return.comments
construct/Utils.java: parseObjectInvoke(): get(): val = optionalPost.comments
construct/Utils.java: parseObjectInvoke(): get done
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = java.lang.Object
OptinalTypeInfo.java: getKnownOptionalsActualType(): Current method's typeTable (which is global): {optionalPost=com.reljicd.model.Post}
OptinalTypeInfo.java: getKnownOptionalsActualType(): actualType = com.reljicd.model.Post
DIRRegionAnalyzer.java: constructDIR(): leftType : com.reljicd.model.Post
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: $r1
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: constructDIR(): left type = java.lang.Object
DIRRegionAnalyzer.java: constructDIR(): java.lang.Object
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: java.lang.Object
DIRRegionAnalyzer.java: constructDIR(): method sig = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: constructDIR(): get invoked
DIRRegionAnalyzer.java: constructDIR(): base = optionalPost
DIRRegionAnalyzer.java: constructDIR(): typemap = {optionalPost=com.reljicd.model.Post}
DIRRegionAnalyzer.java: constructDIR(): leftType = com.reljicd.model.Post
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{java.util.Optional: java.lang.Object get()=~~~ optionalret ~~~
optionalPost

~~~ return ~~~
optionalPost

~~~ return.body ~~~
optionalPost.body

~~~ return.comments ~~~
optionalPost.comments

~~~ return.createDate ~~~
optionalPost.createDate

~~~ return.id ~~~
optionalPost.id

~~~ return.title ~~~
optionalPost.title

~~~ return.user ~~~
optionalPost.user

, com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)=~~~ $r0 ~~~
this.postRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ $r1.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ $r1.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ $r1.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ $r1.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ return.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ return.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ return.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self

, com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)=~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ return.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ return.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ return.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.user.active ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.active)

~~~ return.user.email ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.email)

~~~ return.user.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.id)

~~~ return.user.lastName ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.lastName)

~~~ return.user.name ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.name)

~~~ return.user.password ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.password)

~~~ return.user.posts ~~~
Join
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| ClassRef(com.reljicd.model.Post)
| NullOp

~~~ return.user.roles ~~~
Join
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| ClassRef(com.reljicd.model.Role)
| NullOp

~~~ return.user.username ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.username)

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ optionalret ~~~
optionalPost

~~~ return ~~~
optionalPost

~~~ return.body ~~~
optionalPost.body

~~~ return.comments ~~~
optionalPost.comments

~~~ return.createDate ~~~
optionalPost.createDate

~~~ return.id ~~~
optionalPost.id

~~~ return.title ~~~
optionalPost.title

~~~ return.user ~~~
optionalPost.user


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [Post.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
Annotation: type: Ljavax/persistence/Table; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post

]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: optionalPost
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: constructDIR(): leftType = com.reljicd.model.Post
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: get
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = java.util.Optional: java.lang.Object get()

WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
NRA.java: processTableandFields: com.reljicd.model.Post fields = [<com.reljicd.model.Post: java.lang.Long id>, <com.reljicd.model.Post: java.lang.String title>, <com.reljicd.model.Post: java.lang.String body>, <com.reljicd.model.Post: java.util.Date createDate>, <com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.lang.String body>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Date createDate>  type=Date
NRA.java: processTableandFields: sf <com.reljicd.model.Post: com.reljicd.model.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: processTableandFields: sf <com.reljicd.model.Post: java.util.Collection comments>  type=Comment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Comment
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = $r1, com.reljicd.model.Post
DIRRegionAnalyzer.java: constructDIR(): accesspaths = [$r1.id, $r1.title, $r1.body, $r1.createDate, $r1.user, $r1.comments]
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [java.util.Optional: java.lang.Object get(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)]
DIRRegionAnalyzer.java: constructDIR(): callee = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
Flatten.java: getNestedFields(): LVAL TYPE: com.reljicd.model.Post
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.Post: java.lang.Long id> = java.lang.Long
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post_id

]
Flatten.java: getNestedFields(): Id fields=id
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.Post: java.lang.String title> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: title
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your title must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide title

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.Post: java.lang.String body> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: body
Annotation Element: kind: s name: columnDefinition value: TEXT

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.Post: java.util.Date createDate> = java.util.Date
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Temporal; num elems: 1 elems: 
Annotation Element: kind: e name: value type name: Ljavax/persistence/TemporalType; constant name: TIMESTAMP

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: create_date
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

Annotation type: Lorg/hibernate/annotations/CreationTimestamp; without elements
]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.Post: com.reljicd.model.User user> = com.reljicd.model.User
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_id
Annotation Element: kind: s name: referencedColumnName value: user_id
Annotation Element: kind: Z name: nullable value: 0

Annotation type: Ljavax/validation/constraints/NotNull; without elements
]
Flatten.java: getNestedFields(): check *ToOne sf: user , type = com.reljicd.model.User
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.Post: java.util.Collection comments> = java.util.Collection
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: post
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: REMOVE]

]
Flatten.java: getNestedFields(): check *ToMany sf: comments , type = java.util.Collection
Flatten.java: getNestedFields(): returning: [<com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
DIRRegionAnalyzer.java: constructDIR(): check nestedFields=[<com.reljicd.model.Post: com.reljicd.model.User user>, <com.reljicd.model.Post: java.util.Collection comments>]
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.user
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=Post
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.reljicd.model.User
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.reljicd.model.User
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: optionalPost.user
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: constructDIR(): key= return.user
 value= optionalPost.user
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id, Annotation Element: kind: s name: referencedColumnName value: user_id, Annotation Element: kind: Z name: nullable value: 0]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.comments
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=Post
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.Post
 fieldName= comments
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String body [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date createDate [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.reljicd.model.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection comments [Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Comment;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.reljicd.model.Comment
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.reljicd.model.Comment
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: optionalPost.comments
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: constructDIR(): key= return.comments
 value= optionalPost.comments
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= post
NRA.java: getJoinedColumn(): joined Column value=  post_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Comment.post_id
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: constructDIR(): key = return.title
DIRRegionAnalyzer.java: constructDIR(): val = optionalPost.title
DIRRegionAnalyzer.java: constructDIR(): key = optionalret
DIRRegionAnalyzer.java: constructDIR(): val = optionalPost
DIRRegionAnalyzer.java: constructDIR(): key = return.id
DIRRegionAnalyzer.java: constructDIR(): val = optionalPost.id
DIRRegionAnalyzer.java: constructDIR(): key = return.createDate
DIRRegionAnalyzer.java: constructDIR(): val = optionalPost.createDate
DIRRegionAnalyzer.java: constructDIR(): key = return.comments
DIRRegionAnalyzer.java: constructDIR(): val = optionalPost.comments
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = optionalPost
DIRRegionAnalyzer.java: constructDIR(): key = return.body
DIRRegionAnalyzer.java: constructDIR(): val = optionalPost.body
DIRRegionAnalyzer.java: constructDIR(): key = return.user
DIRRegionAnalyzer.java: constructDIR(): val = optionalPost.user
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = java.util.Optional: java.lang.Object get() END
DIRRegionAnalyzer.java: constructDIR(): v1 access paths: [$r1.id, $r1.title, $r1.body, $r1.createDate, $r1.user, $r1.comments]
DIRRegionAnalyzer.java: constructDIR(): key = $r1.id
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: optionalPost.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = optionalPost.id
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = optionalPost.id
DIRRegionAnalyzer.java: constructDIR(): key = $r1.title
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.title
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: optionalPost.title
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = optionalPost.title
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = optionalPost.title
DIRRegionAnalyzer.java: constructDIR(): key = $r1.body
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.body
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: optionalPost.body
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = optionalPost.body
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = optionalPost.body
DIRRegionAnalyzer.java: constructDIR(): key = $r1.createDate
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.createDate
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: optionalPost.createDate
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = optionalPost.createDate
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = optionalPost.createDate
DIRRegionAnalyzer.java: constructDIR(): key = $r1.user
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.user
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: optionalPost.user
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = optionalPost.user
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = optionalPost.user
DIRRegionAnalyzer.java: constructDIR(): key = $r1.comments
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.comments
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: optionalPost.comments
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.util.Optional: java.lang.Object get()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = optionalPost.comments
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = optionalPost.comments
DIRRegionAnalyzer.java: constructDIR(): curUnit = post = (com.reljicd.model.Post) $r1
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JCastExpr
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = (type1) v2
DIRRegionAnalyzer.java: constructDIR(): type1: com.reljicd.model.Post
DIRRegionAnalyzer.java: constructDIR(): castExpr: (com.reljicd.model.Post) $r1
DIRRegionAnalyzer.java: constructDIR(): v2: $r1
DIRRegionAnalyzer.java: constructDIR(): cur dir: {$r1.createDate=optionalPost.createDate, $r1=optionalPost, $r1.title=optionalPost.title, $r1.body=optionalPost.body, $r1.comments=optionalPost.comments, $r1.user=optionalPost.user, $r1.id=optionalPost.id}
DIRRegionAnalyzer.java: constructDIR(): rightVar in dir: true
WARN: DIRRegionAnalyzer.java: processPointerAssignment(): v1 and v2 have diff types
WARN: DIRRegionAnalyzer.java: processPointerAssignment(): type(v1) = com.reljicd.model.Post
WARN: DIRRegionAnalyzer.java: processPointerAssignment(): type(v2) = java.lang.Object
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: post
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r1
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [Post.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
Annotation: type: Ljavax/persistence/Table; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post

]
AccessPath.java: replaceBase(): input access path: post.id
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: post.title
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: post.body
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: post.createDate
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: post.user
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: post.comments
AccessPath.java: replaceBase(): replacement of base: $r1
DIRRegionAnalyzer.java: constructDIR(): curUnit = $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JSpecialInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = isPrincipalOwnerOfPost
construct/Utils.java: parseInvokeExpr(): methodSignature = com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)
construct/Utils.java: parseObjectInvoke(): specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>
construct/Utils.java: parseObjectInvoke(): methodName = isPrincipalOwnerOfPost
construct/Utils.java: parseObjectInvoke(): invokeExpr = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post)
construct/Utils.java: parseObjectInvoke(): methodSignature = com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.SequentialRegionN
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregions: [| IfThenElse
| | IfThen
| | | BasicBlock0
| | | BasicBlock1
| | BasicBlock2
| | BasicBlock3
, | BasicBlock4]
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.IfThenElseRegion
DIRIfThenElseRegionAnalyzer.java: constructDIR(): region tree: | IfThenElse
| | IfThen
| | | BasicBlock0
| | | BasicBlock1
| | BasicBlock2
| | BasicBlock3

DIRIfThenElseRegionAnalyzer.java: constructDIR(): | IfThen
| | BasicBlock0
| | BasicBlock1

DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock2
DIRIfThenElseRegionAnalyzer.java: constructDIR(): | BasicBlock3
DIRIfThenRegionAnalyzer.java: constructDIR(): headRegion: | BasicBlock0
DIRIfThenRegionAnalyzer.java: constructDIR(): trueRegion: | BasicBlock1
ARegion.java: analyze(): set cur method of analyzer to: isPrincipalOwnerOfPost
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.reljicd.controller.PostController, principal := @parameter0: java.security.Principal, post := @parameter1: com.reljicd.model.Post, if principal == null goto $z1 = 0, $r0 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>(), $r1 = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>(), $r2 = virtualinvoke $r1.<com.reljicd.model.User: java.lang.String getUsername()>(), $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2), if $z0 == 0 goto $z1 = 0, $z1 = 1, goto [?= return $z1], $z1 = 0, return $z1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.reljicd.controller.PostController
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = principal := @parameter0: java.security.Principal
DIRRegionAnalyzer.java: constructDIR(): curUnit = post := @parameter1: com.reljicd.model.Post
DIRRegionAnalyzer.java: constructDIR(): curUnit = if principal == null goto $z1 = 0
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()principal == null
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ condition ~~~
Equals
| principal
| NullOp

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ condition ~~~
Equals
| principal
| NullOp

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: condition=Equals
| principal
| NullOp
DIR.java: updateRegion(): update region entry: this=Self
ARegion.java: analyze(): set cur method of analyzer to: isPrincipalOwnerOfPost
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 1
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.reljicd.controller.PostController, principal := @parameter0: java.security.Principal, post := @parameter1: com.reljicd.model.Post, if principal == null goto $z1 = 0, $r0 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>(), $r1 = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>(), $r2 = virtualinvoke $r1.<com.reljicd.model.User: java.lang.String getUsername()>(), $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2), if $z0 == 0 goto $z1 = 0, $z1 = 1, goto [?= return $z1], $z1 = 0, return $z1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = getName
construct/Utils.java: parseInvokeExpr(): methodSignature = java.security.Principal: java.lang.String getName()
construct/Utils.java: parseObjectInvoke(): interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.security.Principal: java.lang.String getName()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.security.Principal: java.lang.String getName()>
construct/Utils.java: parseObjectInvoke(): methodName = getName
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = java.security.Principal: java.lang.String getName()
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
construct/Utils.java: parseObjectInvoke(): method wont handle 4
DIRRegionAnalyzer.java: constructDIR(): Wont handle this method
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = getUser
construct/Utils.java: parseInvokeExpr(): methodSignature = com.reljicd.model.Post: com.reljicd.model.User getUser()
construct/Utils.java: parseObjectInvoke(): virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.reljicd.model.Post: com.reljicd.model.User getUser()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.reljicd.model.Post: com.reljicd.model.User getUser()>
construct/Utils.java: parseObjectInvoke(): methodName = getUser
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = com.reljicd.model.Post: com.reljicd.model.User getUser()
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: getUser
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.reljicd.model.Post, $r0 = this.<com.reljicd.model.Post: com.reljicd.model.User user>, return $r0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.reljicd.model.Post
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<com.reljicd.model.Post: com.reljicd.model.User user>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: valIsRepository(): fpar val: this.<com.reljicd.model.Post: com.reljicd.model.User user>
DIRRegionAnalyzer.java: valIsRepository(): refType: com.reljicd.model.User
DIRRegionAnalyzer.java: valIsRepository(): valClass: com.reljicd.model.User
DIRRegionAnalyzer.java: valIsRepository(): ret: false
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is not primitive
DIRRegionAnalyzer.java: constructDIR(): destPaths: [$r0.id, $r0.email, $r0.password, $r0.username, $r0.name, $r0.lastName, $r0.active, $r0.roles, $r0.posts]
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.id
AccessPath.java: replaceBase(): input access path: $r0.id
AccessPath.java: replaceBase(): replacement of base: this.user
DIRRegionAnalyzer.java: constructDIR(): source accp: this.user.id
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.user

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.user.id
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.id -> this.user.id
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.email
AccessPath.java: replaceBase(): input access path: $r0.email
AccessPath.java: replaceBase(): replacement of base: this.user
DIRRegionAnalyzer.java: constructDIR(): source accp: this.user.email
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.user

~~~ $r0.id ~~~
this.user.id

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.user.email
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.email -> this.user.email
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.password
AccessPath.java: replaceBase(): input access path: $r0.password
AccessPath.java: replaceBase(): replacement of base: this.user
DIRRegionAnalyzer.java: constructDIR(): source accp: this.user.password
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.user

~~~ $r0.email ~~~
this.user.email

~~~ $r0.id ~~~
this.user.id

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.user.password
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.password -> this.user.password
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.username
AccessPath.java: replaceBase(): input access path: $r0.username
AccessPath.java: replaceBase(): replacement of base: this.user
DIRRegionAnalyzer.java: constructDIR(): source accp: this.user.username
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.user

~~~ $r0.email ~~~
this.user.email

~~~ $r0.id ~~~
this.user.id

~~~ $r0.password ~~~
this.user.password

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.user.username
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.username -> this.user.username
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.name
AccessPath.java: replaceBase(): input access path: $r0.name
AccessPath.java: replaceBase(): replacement of base: this.user
DIRRegionAnalyzer.java: constructDIR(): source accp: this.user.name
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.user

~~~ $r0.email ~~~
this.user.email

~~~ $r0.id ~~~
this.user.id

~~~ $r0.password ~~~
this.user.password

~~~ $r0.username ~~~
this.user.username

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.user.name
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.name -> this.user.name
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.lastName
AccessPath.java: replaceBase(): input access path: $r0.lastName
AccessPath.java: replaceBase(): replacement of base: this.user
DIRRegionAnalyzer.java: constructDIR(): source accp: this.user.lastName
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.user

~~~ $r0.email ~~~
this.user.email

~~~ $r0.id ~~~
this.user.id

~~~ $r0.name ~~~
this.user.name

~~~ $r0.password ~~~
this.user.password

~~~ $r0.username ~~~
this.user.username

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.user.lastName
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.lastName -> this.user.lastName
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.active
AccessPath.java: replaceBase(): input access path: $r0.active
AccessPath.java: replaceBase(): replacement of base: this.user
DIRRegionAnalyzer.java: constructDIR(): source accp: this.user.active
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.user

~~~ $r0.email ~~~
this.user.email

~~~ $r0.id ~~~
this.user.id

~~~ $r0.lastName ~~~
this.user.lastName

~~~ $r0.name ~~~
this.user.name

~~~ $r0.password ~~~
this.user.password

~~~ $r0.username ~~~
this.user.username

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.user.active
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.active -> this.user.active
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.roles
AccessPath.java: replaceBase(): input access path: $r0.roles
AccessPath.java: replaceBase(): replacement of base: this.user
DIRRegionAnalyzer.java: constructDIR(): source accp: this.user.roles
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.user

~~~ $r0.active ~~~
this.user.active

~~~ $r0.email ~~~
this.user.email

~~~ $r0.id ~~~
this.user.id

~~~ $r0.lastName ~~~
this.user.lastName

~~~ $r0.name ~~~
this.user.name

~~~ $r0.password ~~~
this.user.password

~~~ $r0.username ~~~
this.user.username

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.user.roles
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.roles -> this.user.roles
DIRRegionAnalyzer.java: constructDIR(): destination accp: $r0.posts
AccessPath.java: replaceBase(): input access path: $r0.posts
AccessPath.java: replaceBase(): replacement of base: this.user
DIRRegionAnalyzer.java: constructDIR(): source accp: this.user.posts
DIRRegionAnalyzer.java: constructDIR(): dir before resolving rhsVN (case v1 = v2.f, f not primitive)
DIRRegionAnalyzer.java: constructDIR(): ~~~ $r0 ~~~
this.user

~~~ $r0.active ~~~
this.user.active

~~~ $r0.email ~~~
this.user.email

~~~ $r0.id ~~~
this.user.id

~~~ $r0.lastName ~~~
this.user.lastName

~~~ $r0.name ~~~
this.user.name

~~~ $r0.password ~~~
this.user.password

~~~ $r0.roles ~~~
this.user.roles

~~~ $r0.username ~~~
this.user.username

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): resolvedAccp after resolution (case v1 = v2.f, f not primitive): this.user.posts
DIRRegionAnalyzer.java: constructDIR(): mapping $r0.posts -> this.user.posts
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $r0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: return
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r0
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [User.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
Annotation: type: Ljavax/persistence/Table; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user

]
AccessPath.java: replaceBase(): input access path: return.id
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.email
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.password
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.username
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.name
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.lastName
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.active
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.roles
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: return.posts
AccessPath.java: replaceBase(): replacement of base: $r0
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.user

~~~ $r0.active ~~~
this.user.active

~~~ $r0.email ~~~
this.user.email

~~~ $r0.id ~~~
this.user.id

~~~ $r0.lastName ~~~
this.user.lastName

~~~ $r0.name ~~~
this.user.name

~~~ $r0.password ~~~
this.user.password

~~~ $r0.posts ~~~
this.user.posts

~~~ $r0.roles ~~~
this.user.roles

~~~ $r0.username ~~~
this.user.username

~~~ return ~~~
this.user

~~~ return ~~~
this.user

~~~ return.active ~~~
this.user.active

~~~ return.email ~~~
this.user.email

~~~ return.id ~~~
this.user.id

~~~ return.lastName ~~~
this.user.lastName

~~~ return.name ~~~
this.user.name

~~~ return.password ~~~
this.user.password

~~~ return.posts ~~~
this.user.posts

~~~ return.roles ~~~
this.user.roles

~~~ return.username ~~~
this.user.username

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.user

~~~ $r0.active ~~~
this.user.active

~~~ $r0.email ~~~
this.user.email

~~~ $r0.id ~~~
this.user.id

~~~ $r0.lastName ~~~
this.user.lastName

~~~ $r0.name ~~~
this.user.name

~~~ $r0.password ~~~
this.user.password

~~~ $r0.posts ~~~
this.user.posts

~~~ $r0.roles ~~~
this.user.roles

~~~ $r0.username ~~~
this.user.username

~~~ return ~~~
this.user

~~~ return ~~~
this.user

~~~ return.active ~~~
this.user.active

~~~ return.email ~~~
this.user.email

~~~ return.id ~~~
this.user.id

~~~ return.lastName ~~~
this.user.lastName

~~~ return.name ~~~
this.user.name

~~~ return.password ~~~
this.user.password

~~~ return.posts ~~~
this.user.posts

~~~ return.roles ~~~
this.user.roles

~~~ return.username ~~~
this.user.username

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: return.posts=this.user.posts
DIR.java: updateRegion(): update region entry: $r0.email=this.user.email
DIR.java: updateRegion(): update region entry: $r0.active=this.user.active
DIR.java: updateRegion(): update region entry: $r0=this.user
DIR.java: updateRegion(): update region entry: $r0.name=this.user.name
DIR.java: updateRegion(): update region entry: return.email=this.user.email
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: return.lastName=this.user.lastName
DIR.java: updateRegion(): update region entry: $r0.lastName=this.user.lastName
DIR.java: updateRegion(): update region entry: $r0.posts=this.user.posts
DIR.java: updateRegion(): update region entry: $r0.password=this.user.password
DIR.java: updateRegion(): update region entry: $r0.id=this.user.id
DIR.java: updateRegion(): update region entry: return.active=this.user.active
DIR.java: updateRegion(): update region entry: return.roles=this.user.roles
DIR.java: updateRegion(): update region entry: $r0.username=this.user.username
DIR.java: updateRegion(): update region entry: return.username=this.user.username
DIR.java: updateRegion(): update region entry: return.password=this.user.password
DIR.java: updateRegion(): update region entry: return.id=this.user.id
DIR.java: updateRegion(): update region entry: $r0.roles=this.user.roles
DIR.java: updateRegion(): update region entry: return.name=this.user.name
DIR.java: updateRegion(): update region entry: return=this.user
DIR.java: updateRegion(): update region entry: return=this.user
construct/Utils.java: parseObjectInvoke(): Put DIR of callee = com.reljicd.model.Post: com.reljicd.model.User getUser() in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = com.reljicd.model.User
DIRRegionAnalyzer.java: constructDIR(): leftType : com.reljicd.model.User
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: $r1
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: constructDIR(): left type = com.reljicd.model.User
DIRRegionAnalyzer.java: constructDIR(): com.reljicd.model.User
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: com.reljicd.model.User
DIRRegionAnalyzer.java: constructDIR(): method sig = com.reljicd.model.Post: com.reljicd.model.User getUser()
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{com.reljicd.model.Post: com.reljicd.model.User getUser()=~~~ $r0 ~~~
this.user

~~~ $r0.active ~~~
this.user.active

~~~ $r0.email ~~~
this.user.email

~~~ $r0.id ~~~
this.user.id

~~~ $r0.lastName ~~~
this.user.lastName

~~~ $r0.name ~~~
this.user.name

~~~ $r0.password ~~~
this.user.password

~~~ $r0.posts ~~~
this.user.posts

~~~ $r0.roles ~~~
this.user.roles

~~~ $r0.username ~~~
this.user.username

~~~ return ~~~
this.user

~~~ return ~~~
this.user

~~~ return.active ~~~
this.user.active

~~~ return.email ~~~
this.user.email

~~~ return.id ~~~
this.user.id

~~~ return.lastName ~~~
this.user.lastName

~~~ return.name ~~~
this.user.name

~~~ return.password ~~~
this.user.password

~~~ return.posts ~~~
this.user.posts

~~~ return.roles ~~~
this.user.roles

~~~ return.username ~~~
this.user.username

~~~ this ~~~
Self

, java.util.Optional: java.lang.Object get()=~~~ optionalret ~~~
optionalPost

~~~ return ~~~
optionalPost

~~~ return.body ~~~
optionalPost.body

~~~ return.comments ~~~
optionalPost.comments

~~~ return.createDate ~~~
optionalPost.createDate

~~~ return.id ~~~
optionalPost.id

~~~ return.title ~~~
optionalPost.title

~~~ return.user ~~~
optionalPost.user

, com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)=~~~ $r0 ~~~
this.postRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ $r1.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ $r1.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ $r1.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ $r1.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ return.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ return.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ return.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self

, com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)=~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ return.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ return.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ return.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.user.active ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.active)

~~~ return.user.email ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.email)

~~~ return.user.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.id)

~~~ return.user.lastName ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.lastName)

~~~ return.user.name ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.name)

~~~ return.user.password ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.password)

~~~ return.user.posts ~~~
Join
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| ClassRef(com.reljicd.model.Post)
| NullOp

~~~ return.user.roles ~~~
Join
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| ClassRef(com.reljicd.model.Role)
| NullOp

~~~ return.user.username ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.username)

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ $r0 ~~~
this.user

~~~ $r0.active ~~~
this.user.active

~~~ $r0.email ~~~
this.user.email

~~~ $r0.id ~~~
this.user.id

~~~ $r0.lastName ~~~
this.user.lastName

~~~ $r0.name ~~~
this.user.name

~~~ $r0.password ~~~
this.user.password

~~~ $r0.posts ~~~
this.user.posts

~~~ $r0.roles ~~~
this.user.roles

~~~ $r0.username ~~~
this.user.username

~~~ return ~~~
this.user

~~~ return ~~~
this.user

~~~ return.active ~~~
this.user.active

~~~ return.email ~~~
this.user.email

~~~ return.id ~~~
this.user.id

~~~ return.lastName ~~~
this.user.lastName

~~~ return.name ~~~
this.user.name

~~~ return.password ~~~
this.user.password

~~~ return.posts ~~~
this.user.posts

~~~ return.roles ~~~
this.user.roles

~~~ return.username ~~~
this.user.username

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [User.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
Annotation: type: Ljavax/persistence/Table; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user

]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.user
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.model.Post: com.reljicd.model.User getUser()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.model.Post: com.reljicd.model.User getUser()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [post]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.title, this.body, this.createDate, this.user, this.comments]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.user
DIRRegionAnalyzer.java: constructDIR(): leftType = com.reljicd.model.User
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: getUser
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.reljicd.model.Post: com.reljicd.model.User getUser()
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.reljicd.model.Post: com.reljicd.model.User getUser()>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [post]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.reljicd.model.Post
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: post
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.id, this.title, this.body, this.createDate, this.user, this.comments]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [return.posts, $r0.email, $r0.active, $r0, $r0.name, return.email, this, return.lastName, $r0.lastName, $r0.posts, $r0.password, $r0.id, return.active, return.roles, $r0.username, return.username, return.password, return.id, $r0.roles, return.name, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.title
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [return.posts, $r0.email, $r0.active, $r0, $r0.name, return.email, this, return.lastName, $r0.lastName, $r0.posts, $r0.password, $r0.id, return.active, return.roles, $r0.username, return.username, return.password, return.id, $r0.roles, return.name, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.body
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [return.posts, $r0.email, $r0.active, $r0, $r0.name, return.email, this, return.lastName, $r0.lastName, $r0.posts, $r0.password, $r0.id, return.active, return.roles, $r0.username, return.username, return.password, return.id, $r0.roles, return.name, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.createDate
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [return.posts, $r0.email, $r0.active, $r0, $r0.name, return.email, this, return.lastName, $r0.lastName, $r0.posts, $r0.password, $r0.id, return.active, return.roles, $r0.username, return.username, return.password, return.id, $r0.roles, return.name, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.user
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [return.posts, $r0.email, $r0.active, $r0, $r0.name, return.email, this, return.lastName, $r0.lastName, $r0.posts, $r0.password, $r0.id, return.active, return.roles, $r0.username, return.username, return.password, return.id, $r0.roles, return.name, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.comments
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [return.posts, $r0.email, $r0.active, $r0, $r0.name, return.email, this, return.lastName, $r0.lastName, $r0.posts, $r0.password, $r0.id, return.active, return.roles, $r0.username, return.username, return.password, return.id, $r0.roles, return.name, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = getUser, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: post
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.id, this.title, this.body, this.createDate, this.user, this.comments]
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
NRA.java: processTableandFields: com.reljicd.model.User fields = [<com.reljicd.model.User: java.lang.Long id>, <com.reljicd.model.User: java.lang.String email>, <com.reljicd.model.User: java.lang.String password>, <com.reljicd.model.User: java.lang.String username>, <com.reljicd.model.User: java.lang.String name>, <com.reljicd.model.User: java.lang.String lastName>, <com.reljicd.model.User: int active>, <com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String name>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.reljicd.model.User: int active>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection roles>  type=Role
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Role
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: processTableandFields: sf <com.reljicd.model.User: java.util.Collection posts>  type=Post
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.reljicd.model.Post
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = $r1, com.reljicd.model.User
DIRRegionAnalyzer.java: constructDIR(): accesspaths = [$r1.id, $r1.email, $r1.password, $r1.username, $r1.name, $r1.lastName, $r1.active, $r1.roles, $r1.posts]
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [com.reljicd.model.Post: com.reljicd.model.User getUser(), java.util.Optional: java.lang.Object get(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)]
DIRRegionAnalyzer.java: constructDIR(): callee = com.reljicd.model.Post: com.reljicd.model.User getUser()
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
Flatten.java: getNestedFields(): LVAL TYPE: com.reljicd.model.User
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.lang.Long id> = java.lang.Long
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
Flatten.java: getNestedFields(): Id fields=id
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.lang.String email> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: unique value: 1
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Email; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide a valid Email

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide an email

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.lang.String password> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: password
Annotation Element: kind: Z name: nullable value: 0

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your password must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your password

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.lang.String username> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: username
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: unique value: 1

Annotation: type: Lorg/hibernate/validator/constraints/Length; num elems: 2 elems: 
Annotation Element: kind: I name: min value: 5
Annotation Element: kind: s name: message value: *Your username must have at least 5 characters

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.lang.String name> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your name

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.lang.String lastName> = java.lang.String
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: name value: last_name

Annotation: type: Lorg/hibernate/validator/constraints/NotEmpty; num elems: 1 elems: 
Annotation Element: kind: s name: message value: *Please provide your last name

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: int active> = int
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 2 elems: 
Annotation Element: kind: s name: name value: active
Annotation Element: kind: Z name: nullable value: 0

]
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.util.Collection roles> = java.util.Collection
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
Flatten.java: getNestedFields(): check *ToMany sf: roles , type = java.util.Collection
Flatten.java: getNestedFields(): Type of sf: <com.reljicd.model.User: java.util.Collection posts> = java.util.Collection
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: user

]
Flatten.java: getNestedFields(): check *ToMany sf: posts , type = java.util.Collection
Flatten.java: getNestedFields(): returning: [<com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
DIRRegionAnalyzer.java: constructDIR(): check nestedFields=[<com.reljicd.model.User: java.util.Collection roles>, <com.reljicd.model.User: java.util.Collection posts>]
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.roles
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=User
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= roles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/JoinTable;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.reljicd.model.Role
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.reljicd.model.Role
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.user.roles
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.model.Post: com.reljicd.model.User getUser()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.model.Post: com.reljicd.model.User getUser()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [post]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.title, this.body, this.createDate, this.user, this.comments]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.user.roles
DIRRegionAnalyzer.java: constructDIR(): key= return.roles
 value= this.user.roles
NRA.java: getJoinCondFromField(): ManyToMany Field
NRA.java: getCondFromManyToMany(): tags = [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToMany; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinTable; num elems: 3 elems: 
Annotation Element: kind: s name: name value: user_role
Annotation Element: kind: [ name: joinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id
]
Annotation Element: kind: [ name: inverseJoinColumns values: [Annotation Element: kind: @ name: nullvalue: Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id
]

]
NRA.java: getCondFromManyToMany(): user_id
NRA.java: getCondFromManyToMany(): role_id
NRA.java: getCondFromManyToMany(): join condition = Equals
| Alpha.role_id
| Role.user_id
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.posts
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=User
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.reljicd.model.User
 fieldName= posts
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String name [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int active [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection roles [Signature: Ljava/util/Collection<Lcom/reljicd/model/Role;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Collection posts [Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Collection<Lcom/reljicd/model/Post;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.reljicd.model.Post
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.reljicd.model.Post
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.user.posts
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.model.Post: com.reljicd.model.User getUser()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.model.Post: com.reljicd.model.User getUser()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [post]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.title, this.body, this.createDate, this.user, this.comments]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.user.posts
DIRRegionAnalyzer.java: constructDIR(): key= return.posts
 value= this.user.posts
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Post.user_id
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.reljicd.model.Post: com.reljicd.model.User getUser()
DIRRegionAnalyzer.java: constructDIR(): key = return.posts
DIRRegionAnalyzer.java: constructDIR(): val = this.user.posts
DIRRegionAnalyzer.java: constructDIR(): key = $r0.email
DIRRegionAnalyzer.java: constructDIR(): val = this.user.email
DIRRegionAnalyzer.java: constructDIR(): key = $r0.active
DIRRegionAnalyzer.java: constructDIR(): val = this.user.active
DIRRegionAnalyzer.java: constructDIR(): key = $r0
DIRRegionAnalyzer.java: constructDIR(): val = this.user
DIRRegionAnalyzer.java: constructDIR(): key = $r0.name
DIRRegionAnalyzer.java: constructDIR(): val = this.user.name
DIRRegionAnalyzer.java: constructDIR(): key = return.email
DIRRegionAnalyzer.java: constructDIR(): val = this.user.email
DIRRegionAnalyzer.java: constructDIR(): key = this
DIRRegionAnalyzer.java: constructDIR(): val = Self
DIRRegionAnalyzer.java: constructDIR(): key = return.lastName
DIRRegionAnalyzer.java: constructDIR(): val = this.user.lastName
DIRRegionAnalyzer.java: constructDIR(): key = $r0.lastName
DIRRegionAnalyzer.java: constructDIR(): val = this.user.lastName
DIRRegionAnalyzer.java: constructDIR(): key = $r0.posts
DIRRegionAnalyzer.java: constructDIR(): val = this.user.posts
DIRRegionAnalyzer.java: constructDIR(): key = $r0.password
DIRRegionAnalyzer.java: constructDIR(): val = this.user.password
DIRRegionAnalyzer.java: constructDIR(): key = $r0.id
DIRRegionAnalyzer.java: constructDIR(): val = this.user.id
DIRRegionAnalyzer.java: constructDIR(): key = return.active
DIRRegionAnalyzer.java: constructDIR(): val = this.user.active
DIRRegionAnalyzer.java: constructDIR(): key = return.roles
DIRRegionAnalyzer.java: constructDIR(): val = this.user.roles
DIRRegionAnalyzer.java: constructDIR(): key = $r0.username
DIRRegionAnalyzer.java: constructDIR(): val = this.user.username
DIRRegionAnalyzer.java: constructDIR(): key = return.username
DIRRegionAnalyzer.java: constructDIR(): val = this.user.username
DIRRegionAnalyzer.java: constructDIR(): key = return.password
DIRRegionAnalyzer.java: constructDIR(): val = this.user.password
DIRRegionAnalyzer.java: constructDIR(): key = return.id
DIRRegionAnalyzer.java: constructDIR(): val = this.user.id
DIRRegionAnalyzer.java: constructDIR(): key = $r0.roles
DIRRegionAnalyzer.java: constructDIR(): val = this.user.roles
DIRRegionAnalyzer.java: constructDIR(): key = return.name
DIRRegionAnalyzer.java: constructDIR(): val = this.user.name
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = this.user
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = this.user
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.reljicd.model.Post: com.reljicd.model.User getUser() END
DIRRegionAnalyzer.java: constructDIR(): v1 access paths: [$r1.id, $r1.email, $r1.password, $r1.username, $r1.name, $r1.lastName, $r1.active, $r1.roles, $r1.posts]
DIRRegionAnalyzer.java: constructDIR(): key = $r1.id
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.user.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.model.Post: com.reljicd.model.User getUser()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.model.Post: com.reljicd.model.User getUser()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [post]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.title, this.body, this.createDate, this.user, this.comments]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.user.id
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.user.id
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.user.id
DIRRegionAnalyzer.java: constructDIR(): key = $r1.email
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.email
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.user.email
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.model.Post: com.reljicd.model.User getUser()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.model.Post: com.reljicd.model.User getUser()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [post]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.title, this.body, this.createDate, this.user, this.comments]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.user.email
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.user.email
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.user.email
DIRRegionAnalyzer.java: constructDIR(): key = $r1.password
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.password
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.user.password
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.model.Post: com.reljicd.model.User getUser()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.model.Post: com.reljicd.model.User getUser()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [post]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.title, this.body, this.createDate, this.user, this.comments]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.user.password
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.user.password
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.user.password
DIRRegionAnalyzer.java: constructDIR(): key = $r1.username
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.username
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.user.username
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.model.Post: com.reljicd.model.User getUser()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.model.Post: com.reljicd.model.User getUser()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [post]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.title, this.body, this.createDate, this.user, this.comments]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.user.username
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.user.username
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.user.username
DIRRegionAnalyzer.java: constructDIR(): key = $r1.name
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.name
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.user.name
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.model.Post: com.reljicd.model.User getUser()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.model.Post: com.reljicd.model.User getUser()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [post]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.title, this.body, this.createDate, this.user, this.comments]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.user.name
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.user.name
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.user.name
DIRRegionAnalyzer.java: constructDIR(): key = $r1.lastName
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.lastName
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.user.lastName
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.model.Post: com.reljicd.model.User getUser()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.model.Post: com.reljicd.model.User getUser()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [post]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.title, this.body, this.createDate, this.user, this.comments]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.user.lastName
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.user.lastName
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.user.lastName
DIRRegionAnalyzer.java: constructDIR(): key = $r1.active
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.active
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.user.active
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.model.Post: com.reljicd.model.User getUser()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.model.Post: com.reljicd.model.User getUser()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [post]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.title, this.body, this.createDate, this.user, this.comments]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.user.active
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.user.active
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.user.active
DIRRegionAnalyzer.java: constructDIR(): key = $r1.roles
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.roles
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.user.roles
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.model.Post: com.reljicd.model.User getUser()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.model.Post: com.reljicd.model.User getUser()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [post]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.title, this.body, this.createDate, this.user, this.comments]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.user.roles
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.user.roles
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.user.roles
DIRRegionAnalyzer.java: constructDIR(): key = $r1.posts
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.posts
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.user.posts
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.model.Post: com.reljicd.model.User getUser()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.model.Post: com.reljicd.model.User getUser()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [post]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.title, this.body, this.createDate, this.user, this.comments]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.user.posts
DIRRegionAnalyzer.java: constructDIR(): callersDag = this.user.posts
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = this.user.posts
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r2 = virtualinvoke $r1.<com.reljicd.model.User: java.lang.String getUsername()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = getUsername
construct/Utils.java: parseInvokeExpr(): methodSignature = com.reljicd.model.User: java.lang.String getUsername()
construct/Utils.java: parseObjectInvoke(): virtualinvoke $r1.<com.reljicd.model.User: java.lang.String getUsername()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.reljicd.model.User: java.lang.String getUsername()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.reljicd.model.User: java.lang.String getUsername()>
construct/Utils.java: parseObjectInvoke(): methodName = getUsername
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke $r1.<com.reljicd.model.User: java.lang.String getUsername()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = com.reljicd.model.User: java.lang.String getUsername()
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: getUsername
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.reljicd.model.User, $r0 = this.<com.reljicd.model.User: java.lang.String username>, return $r0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.reljicd.model.User
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<com.reljicd.model.User: java.lang.String username>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r0 -> this.username
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $r0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.username

~~~ return ~~~
this.username

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.username

~~~ return ~~~
this.username

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r0=this.username
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: return=this.username
construct/Utils.java: parseObjectInvoke(): Put DIR of callee = com.reljicd.model.User: java.lang.String getUsername() in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = java.lang.String
DIRRegionAnalyzer.java: constructDIR(): leftType : java.lang.String
DIRRegionAnalyzer.java: constructDIR(): case : caseCallToMethodWBodyRetPrim()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), v1 is primitive, foo is not a library method
DIRRegionAnalyzer.java: constructDIR(): v1: $r2
DIRRegionAnalyzer.java: constructDIR(): foo: <com.reljicd.model.User: java.lang.String getUsername()>
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke $r1.<com.reljicd.model.User: java.lang.String getUsername()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: getUsername
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.reljicd.model.User: java.lang.String getUsername()
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.reljicd.model.User: java.lang.String getUsername()>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [$r1]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.reljicd.model.User
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: $r1
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.id, this.email, this.password, this.username, this.name, this.lastName, this.active, this.roles, this.posts]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.email
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.password
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.username
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.name
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.active
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.roles
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.posts
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = getUsername, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: $r1
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.id, this.email, this.password, this.username, this.name, this.lastName, this.active, this.roles, this.posts]
DIRRegionAnalyzer.java: constructDIR(): methodSig: com.reljicd.model.User: java.lang.String getUsername()
DIRRegionAnalyzer.java: constructDIR(): FuncStackAnalyzer.funcDIRMap: {com.reljicd.model.Post: com.reljicd.model.User getUser()=~~~ $r0 ~~~
this.user

~~~ $r0.active ~~~
this.user.active

~~~ $r0.email ~~~
this.user.email

~~~ $r0.id ~~~
this.user.id

~~~ $r0.lastName ~~~
this.user.lastName

~~~ $r0.name ~~~
this.user.name

~~~ $r0.password ~~~
this.user.password

~~~ $r0.posts ~~~
this.user.posts

~~~ $r0.roles ~~~
this.user.roles

~~~ $r0.username ~~~
this.user.username

~~~ return ~~~
this.user

~~~ return ~~~
this.user

~~~ return.active ~~~
this.user.active

~~~ return.email ~~~
this.user.email

~~~ return.id ~~~
this.user.id

~~~ return.lastName ~~~
this.user.lastName

~~~ return.name ~~~
this.user.name

~~~ return.password ~~~
this.user.password

~~~ return.posts ~~~
this.user.posts

~~~ return.roles ~~~
this.user.roles

~~~ return.username ~~~
this.user.username

~~~ this ~~~
Self

, java.util.Optional: java.lang.Object get()=~~~ optionalret ~~~
optionalPost

~~~ return ~~~
optionalPost

~~~ return.body ~~~
optionalPost.body

~~~ return.comments ~~~
optionalPost.comments

~~~ return.createDate ~~~
optionalPost.createDate

~~~ return.id ~~~
optionalPost.id

~~~ return.title ~~~
optionalPost.title

~~~ return.user ~~~
optionalPost.user

, com.reljicd.model.User: java.lang.String getUsername()=~~~ $r0 ~~~
this.username

~~~ return ~~~
this.username

~~~ this ~~~
Self

, com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)=~~~ $r0 ~~~
this.postRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ $r1.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ $r1.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ $r1.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ $r1.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ return.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ return.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ return.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self

, com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)=~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ return.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ return.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ return.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.user.active ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.active)

~~~ return.user.email ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.email)

~~~ return.user.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.id)

~~~ return.user.lastName ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.lastName)

~~~ return.user.name ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.name)

~~~ return.user.password ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.password)

~~~ return.user.posts ~~~
Join
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| ClassRef(com.reljicd.model.Post)
| NullOp

~~~ return.user.roles ~~~
Join
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| ClassRef(com.reljicd.model.Role)
| NullOp

~~~ return.user.username ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.username)

}
DIRRegionAnalyzer.java: constructDIR(): dir callee: ~~~ $r0 ~~~
this.username

~~~ return ~~~
this.username

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): retCalleeCloned: this.username
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.username
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r1.<com.reljicd.model.User: java.lang.String getUsername()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r1.<com.reljicd.model.User: java.lang.String getUsername()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.model.User: java.lang.String getUsername()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.model.User: java.lang.String getUsername()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [$r1]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.id, this.email, this.password, this.username, this.name, this.lastName, this.active, this.roles, this.posts]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.username
DIRRegionAnalyzer.java: constructDIR(): after dag formals to actuals: $r1.username
DIRRegionAnalyzer.java: constructDIR(): curUnit = $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = equals
construct/Utils.java: parseInvokeExpr(): methodSignature = java.lang.String: boolean equals(java.lang.Object)
construct/Utils.java: parseObjectInvoke(): virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.lang.String: boolean equals(java.lang.Object)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.lang.String: boolean equals(java.lang.Object)>
construct/Utils.java: parseObjectInvoke(): methodName = equals
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2)
construct/Utils.java: parseObjectInvoke(): methodSignature = java.lang.String: boolean equals(java.lang.Object)
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
Utils.java: getVarNode(): $z0
Utils.java: getVarNode(): LinkedVariableBox($z0)
JAssignStmtCons.java: construct(): virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2)
construct/Utils.java: parseInvokeExpr(): methodName = equals
construct/Utils.java: parseInvokeExpr(): methodSignature = java.lang.String: boolean equals(java.lang.Object)
construct/Utils.java: parseObjectInvoke(): virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.lang.String: boolean equals(java.lang.Object)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.lang.String: boolean equals(java.lang.Object)>
construct/Utils.java: parseObjectInvoke(): methodName = equals
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2)
construct/Utils.java: parseObjectInvoke(): methodSignature = java.lang.String: boolean equals(java.lang.Object)
DIRRegionAnalyzer.java: constructDIR(): curUnit = if $z0 == 0 goto $z1 = 0
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()$z0 == 0
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
MethodWontHandleOp

~~~ $r1 ~~~
post.user

~~~ $r1.active ~~~
this.user.active

~~~ $r1.email ~~~
this.user.email

~~~ $r1.id ~~~
this.user.id

~~~ $r1.lastName ~~~
this.user.lastName

~~~ $r1.name ~~~
this.user.name

~~~ $r1.password ~~~
this.user.password

~~~ $r1.posts ~~~
this.user.posts

~~~ $r1.roles ~~~
this.user.roles

~~~ $r1.username ~~~
this.user.username

~~~ $r2 ~~~
this.user.username

~~~ $z0 ~~~
Equals
| MethodWontHandleOp
| this.user.username

~~~ condition ~~~
Equals
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
MethodWontHandleOp

~~~ $r1 ~~~
post.user

~~~ $r1.active ~~~
this.user.active

~~~ $r1.email ~~~
this.user.email

~~~ $r1.id ~~~
this.user.id

~~~ $r1.lastName ~~~
this.user.lastName

~~~ $r1.name ~~~
this.user.name

~~~ $r1.password ~~~
this.user.password

~~~ $r1.posts ~~~
this.user.posts

~~~ $r1.roles ~~~
this.user.roles

~~~ $r1.username ~~~
this.user.username

~~~ $r2 ~~~
this.user.username

~~~ $z0 ~~~
Equals
| MethodWontHandleOp
| this.user.username

~~~ condition ~~~
Equals
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0


DIR.java: updateRegion(): update region entry: $r1.lastName=this.user.lastName
DIR.java: updateRegion(): update region entry: $r0=MethodWontHandleOp
DIR.java: updateRegion(): update region entry: $r1.roles=this.user.roles
DIR.java: updateRegion(): update region entry: $r1=post.user
DIR.java: updateRegion(): update region entry: $r1.active=this.user.active
DIR.java: updateRegion(): update region entry: $r2=this.user.username
DIR.java: updateRegion(): update region entry: $r1.email=this.user.email
DIR.java: updateRegion(): update region entry: $r1.id=this.user.id
DIR.java: updateRegion(): update region entry: $r1.password=this.user.password
DIR.java: updateRegion(): update region entry: condition=Equals
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
DIR.java: updateRegion(): update region entry: $r1.username=this.user.username
DIR.java: updateRegion(): update region entry: $z0=Equals
| MethodWontHandleOp
| this.user.username
DIR.java: updateRegion(): update region entry: $r1.posts=this.user.posts
DIR.java: updateRegion(): update region entry: $r1.name=this.user.name
DIRIfThenRegionAnalyzer.java: constructDIR(): headDIR: ~~~ condition ~~~
Equals
| principal
| NullOp

~~~ this ~~~
Self


DIRIfThenRegionAnalyzer.java: constructDIR(): trueDIR: ~~~ $r0 ~~~
MethodWontHandleOp

~~~ $r1 ~~~
post.user

~~~ $r1.active ~~~
this.user.active

~~~ $r1.email ~~~
this.user.email

~~~ $r1.id ~~~
this.user.id

~~~ $r1.lastName ~~~
this.user.lastName

~~~ $r1.name ~~~
this.user.name

~~~ $r1.password ~~~
this.user.password

~~~ $r1.posts ~~~
this.user.posts

~~~ $r1.roles ~~~
this.user.roles

~~~ $r1.username ~~~
this.user.username

~~~ $r2 ~~~
this.user.username

~~~ $z0 ~~~
Equals
| MethodWontHandleOp
| this.user.username

~~~ condition ~~~
Equals
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0


analysis/Utils.java: extractCondition(): condVar: condition
analysis/Utils.java: extractCondition(): input dir (of headRegion): ~~~ condition ~~~
Equals
| principal
| NullOp

~~~ this ~~~
Self


DIRIfThenRegionAnalyzer.java: constructDIR(): condition: Equals
| principal
| NullOp
DIRIfThenRegionAnalyzer.java: constructDIR(): condition after inversion: NotEq
| principal
| NullOp
DIRIfThenRegionAnalyzer.java: constructDIR(): merging head with cond
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName
analysis/Utils.java: resolveTree(): dir: ~~~ condition ~~~
Equals
| principal
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.lastName
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.lastName
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.lastName
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.lastName
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0
analysis/Utils.java: resolveTree(): dir: ~~~ condition ~~~
Equals
| principal
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles
analysis/Utils.java: resolveTree(): dir: ~~~ condition ~~~
Equals
| principal
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.roles
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.roles
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.roles
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.roles
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| post.user
| $r1
analysis/Utils.java: resolveTree(): dir: ~~~ condition ~~~
Equals
| principal
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| post.user
| $r1
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:post.user
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: post.user
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| post.user
| $r1
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active
analysis/Utils.java: resolveTree(): dir: ~~~ condition ~~~
Equals
| principal
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.active
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.active
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.active
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.active
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2
analysis/Utils.java: resolveTree(): dir: ~~~ condition ~~~
Equals
| principal
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r2
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r2
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email
analysis/Utils.java: resolveTree(): dir: ~~~ condition ~~~
Equals
| principal
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.email
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.email
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.email
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.email
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id
analysis/Utils.java: resolveTree(): dir: ~~~ condition ~~~
Equals
| principal
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password
analysis/Utils.java: resolveTree(): dir: ~~~ condition ~~~
Equals
| principal
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.password
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.password
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.password
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.password
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| Equals
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| condition
analysis/Utils.java: resolveTree(): dir: ~~~ condition ~~~
Equals
| principal
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| Equals
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| condition
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:condition
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | principal
| | NullOp
| Equals
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| condition
analysis/Utils.java: resolveTree(): resolvedValChild: Equals
| principal
| NullOp
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | principal
| | NullOp
| Equals
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| Equals
| | principal
| | NullOp
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [2=Equals
| principal
| NullOp]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| Equals
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| Equals
| | principal
| | NullOp
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username
analysis/Utils.java: resolveTree(): dir: ~~~ condition ~~~
Equals
| principal
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0
analysis/Utils.java: resolveTree(): dir: ~~~ condition ~~~
Equals
| principal
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$z0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $z0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts
analysis/Utils.java: resolveTree(): dir: ~~~ condition ~~~
Equals
| principal
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.posts
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.posts
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.posts
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.posts
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name
analysis/Utils.java: resolveTree(): dir: ~~~ condition ~~~
Equals
| principal
| NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.name
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.name
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.name
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.name
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name
analysis/Utils.java: resolveTree(): return
DIRIfThenRegionAnalyzer.java: constructDIR(): IfThenRegion: | IfThen
| | BasicBlock0
| | BasicBlock1

DIRIfThenRegionAnalyzer.java: constructDIR(): IfThenRegionDIR: ~~~ $r0 ~~~
?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0

~~~ $r1 ~~~
?
| NotEq
| | principal
| | NullOp
| post.user
| $r1

~~~ $r1.active ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active

~~~ $r1.email ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email

~~~ $r1.id ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id

~~~ $r1.lastName ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName

~~~ $r1.name ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name

~~~ $r1.password ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password

~~~ $r1.posts ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts

~~~ $r1.roles ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles

~~~ $r1.username ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username

~~~ $r2 ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2

~~~ $z0 ~~~
?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0

~~~ condition ~~~
?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0

~~~ $r1 ~~~
?
| NotEq
| | principal
| | NullOp
| post.user
| $r1

~~~ $r1.active ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active

~~~ $r1.email ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email

~~~ $r1.id ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id

~~~ $r1.lastName ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName

~~~ $r1.name ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name

~~~ $r1.password ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password

~~~ $r1.posts ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts

~~~ $r1.roles ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles

~~~ $r1.username ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username

~~~ $r2 ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2

~~~ $z0 ~~~
?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0

~~~ condition ~~~
?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r1.lastName=?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName
DIR.java: updateRegion(): update region entry: $r0=?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0
DIR.java: updateRegion(): update region entry: $r1.roles=?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles
DIR.java: updateRegion(): update region entry: $r1=?
| NotEq
| | principal
| | NullOp
| post.user
| $r1
DIR.java: updateRegion(): update region entry: $r1.active=?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active
DIR.java: updateRegion(): update region entry: $r2=?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: $r1.email=?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email
DIR.java: updateRegion(): update region entry: $r1.id=?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id
DIR.java: updateRegion(): update region entry: $r1.password=?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password
DIR.java: updateRegion(): update region entry: condition=?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
DIR.java: updateRegion(): update region entry: $r1.username=?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username
DIR.java: updateRegion(): update region entry: $z0=?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0
DIR.java: updateRegion(): update region entry: $r1.posts=?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts
DIR.java: updateRegion(): update region entry: $r1.name=?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name
ARegion.java: analyze(): set cur method of analyzer to: isPrincipalOwnerOfPost
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 2
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.reljicd.controller.PostController, principal := @parameter0: java.security.Principal, post := @parameter1: com.reljicd.model.Post, if principal == null goto $z1 = 0, $r0 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>(), $r1 = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>(), $r2 = virtualinvoke $r1.<com.reljicd.model.User: java.lang.String getUsername()>(), $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2), if $z0 == 0 goto $z1 = 0, $z1 = 1, goto [?= return $z1], $z1 = 0, return $z1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $z1 = 1
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.IntConstant
Utils.java: getVarNode(): $z1
Utils.java: getVarNode(): LinkedVariableBox($z1)
DIRRegionAnalyzer.java: constructDIR(): curUnit = goto [?= return $z1]
DIRRegionAnalyzer.java: constructDIR(): GOTO stmt in seq region
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $z1 ~~~
1


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $z1 ~~~
1


DIR.java: updateRegion(): update region entry: $z1=1
ARegion.java: analyze(): set cur method of analyzer to: isPrincipalOwnerOfPost
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock3
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 3
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.reljicd.controller.PostController, principal := @parameter0: java.security.Principal, post := @parameter1: com.reljicd.model.Post, if principal == null goto $z1 = 0, $r0 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>(), $r1 = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>(), $r2 = virtualinvoke $r1.<com.reljicd.model.User: java.lang.String getUsername()>(), $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2), if $z0 == 0 goto $z1 = 0, $z1 = 1, goto [?= return $z1], $z1 = 0, return $z1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $z1 = 0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.IntConstant
Utils.java: getVarNode(): $z1
Utils.java: getVarNode(): LinkedVariableBox($z1)
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock3
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $z1 ~~~
0


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $z1 ~~~
0


DIR.java: updateRegion(): update region entry: $z1=0
analysis/Utils.java: extractCondition(): condVar: condition
analysis/Utils.java: extractCondition(): input dir (of headRegion): ~~~ $r0 ~~~
?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0

~~~ $r1 ~~~
?
| NotEq
| | principal
| | NullOp
| post.user
| $r1

~~~ $r1.active ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active

~~~ $r1.email ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email

~~~ $r1.id ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id

~~~ $r1.lastName ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName

~~~ $r1.name ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name

~~~ $r1.password ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password

~~~ $r1.posts ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts

~~~ $r1.roles ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles

~~~ $r1.username ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username

~~~ $r2 ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2

~~~ $z0 ~~~
?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0

~~~ condition ~~~
?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0

~~~ this ~~~
Self


DIRIfThenElseRegionAnalyzer.java: constructDIR(): condition: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
DIRIfThenElseRegionAnalyzer.java: constructDIR(): condition after inversion: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
DIRIfThenElseRegionAnalyzer.java: constructDIR(): headDIR: ~~~ $r0 ~~~
?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0

~~~ $r1 ~~~
?
| NotEq
| | principal
| | NullOp
| post.user
| $r1

~~~ $r1.active ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active

~~~ $r1.email ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email

~~~ $r1.id ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id

~~~ $r1.lastName ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName

~~~ $r1.name ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name

~~~ $r1.password ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password

~~~ $r1.posts ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts

~~~ $r1.roles ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles

~~~ $r1.username ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username

~~~ $r2 ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2

~~~ $z0 ~~~
?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0

~~~ condition ~~~
?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0

~~~ this ~~~
Self


DIRIfThenElseRegionAnalyzer.java: constructDIR(): condRegDIR: ~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0


DIRIfThenElseRegionAnalyzer.java: constructDIR(): merging head with cond
analysis/Utils.java: resolveTree(): in: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0

~~~ $r1 ~~~
?
| NotEq
| | principal
| | NullOp
| post.user
| $r1

~~~ $r1.active ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active

~~~ $r1.email ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email

~~~ $r1.id ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id

~~~ $r1.lastName ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName

~~~ $r1.name ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name

~~~ $r1.password ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password

~~~ $r1.posts ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts

~~~ $r1.roles ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles

~~~ $r1.username ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username

~~~ $r2 ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2

~~~ $z0 ~~~
?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0

~~~ condition ~~~
?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): return
DIRIfThenElseRegionAnalyzer.java: constructDIR(): IfThenElseDIR: ~~~ $r0 ~~~
?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0

~~~ $r1 ~~~
?
| NotEq
| | principal
| | NullOp
| post.user
| $r1

~~~ $r1.active ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active

~~~ $r1.email ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email

~~~ $r1.id ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id

~~~ $r1.lastName ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName

~~~ $r1.name ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name

~~~ $r1.password ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password

~~~ $r1.posts ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts

~~~ $r1.roles ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles

~~~ $r1.username ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username

~~~ $r2 ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2

~~~ $z0 ~~~
?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ condition ~~~
?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0

~~~ $r1 ~~~
?
| NotEq
| | principal
| | NullOp
| post.user
| $r1

~~~ $r1.active ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active

~~~ $r1.email ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email

~~~ $r1.id ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id

~~~ $r1.lastName ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName

~~~ $r1.name ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name

~~~ $r1.password ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password

~~~ $r1.posts ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts

~~~ $r1.roles ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles

~~~ $r1.username ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username

~~~ $r2 ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2

~~~ $z0 ~~~
?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ condition ~~~
?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r1.lastName=?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName
DIR.java: updateRegion(): update region entry: $r0=?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0
DIR.java: updateRegion(): update region entry: $r1.roles=?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles
DIR.java: updateRegion(): update region entry: $r1=?
| NotEq
| | principal
| | NullOp
| post.user
| $r1
DIR.java: updateRegion(): update region entry: $r1.active=?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active
DIR.java: updateRegion(): update region entry: $r2=?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: $r1.email=?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email
DIR.java: updateRegion(): update region entry: $r1.id=?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id
DIR.java: updateRegion(): update region entry: $r1.password=?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password
DIR.java: updateRegion(): update region entry: condition=?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
DIR.java: updateRegion(): update region entry: $r1.username=?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username
DIR.java: updateRegion(): update region entry: $z0=?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0
DIR.java: updateRegion(): update region entry: $z1=?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
DIR.java: updateRegion(): update region entry: $r1.posts=?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts
DIR.java: updateRegion(): update region entry: $r1.name=?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | IfThenElse
| | IfThen
| | | BasicBlock0
| | | BasicBlock1
| | BasicBlock2
| | BasicBlock3

DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ $r0 ~~~
?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0

~~~ $r1 ~~~
?
| NotEq
| | principal
| | NullOp
| post.user
| $r1

~~~ $r1.active ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active

~~~ $r1.email ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email

~~~ $r1.id ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id

~~~ $r1.lastName ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName

~~~ $r1.name ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name

~~~ $r1.password ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password

~~~ $r1.posts ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts

~~~ $r1.roles ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles

~~~ $r1.username ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username

~~~ $r2 ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2

~~~ $z0 ~~~
?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ condition ~~~
?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0

~~~ this ~~~
Self


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: 
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.lastName
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.lastName
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.lastName
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.lastName
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.roles
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.roles
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.roles
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.roles
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| post.user
| $r1
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| post.user
| $r1
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:post.user
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: post.user
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| post.user
| $r1
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.active
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.active
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.active
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.active
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r2
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r2
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: Self
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.email
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.email
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.email
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.email
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.password
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.password
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.password
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.password
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$z0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $z0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.posts
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.posts
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.posts
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.posts
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.name
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.name
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.name
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.name
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name
analysis/Utils.java: resolveTree(): return
~~~ $r0 ~~~
?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0

~~~ $r1 ~~~
?
| NotEq
| | principal
| | NullOp
| post.user
| $r1

~~~ $r1.active ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active

~~~ $r1.email ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email

~~~ $r1.id ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id

~~~ $r1.lastName ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName

~~~ $r1.name ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name

~~~ $r1.password ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password

~~~ $r1.posts ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts

~~~ $r1.roles ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles

~~~ $r1.username ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username

~~~ $r2 ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2

~~~ $z0 ~~~
?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ condition ~~~
?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0

~~~ this ~~~
Self


DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: isPrincipalOwnerOfPost
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock4
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 4
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.reljicd.controller.PostController, principal := @parameter0: java.security.Principal, post := @parameter1: com.reljicd.model.Post, if principal == null goto $z1 = 0, $r0 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>(), $r1 = virtualinvoke post.<com.reljicd.model.Post: com.reljicd.model.User getUser()>(), $r2 = virtualinvoke $r1.<com.reljicd.model.User: java.lang.String getUsername()>(), $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2), if $z0 == 0 goto $z1 = 0, $z1 = 1, goto [?= return $z1], $z1 = 0, return $z1]
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $z1
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock4
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ return ~~~
$z1


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ return ~~~
$z1


DIR.java: updateRegion(): update region entry: return=$z1
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | BasicBlock4
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ return ~~~
$z1


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $r0 ~~~
?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0

~~~ $r1 ~~~
?
| NotEq
| | principal
| | NullOp
| post.user
| $r1

~~~ $r1.active ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active

~~~ $r1.email ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email

~~~ $r1.id ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id

~~~ $r1.lastName ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName

~~~ $r1.name ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name

~~~ $r1.password ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password

~~~ $r1.posts ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts

~~~ $r1.roles ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles

~~~ $r1.username ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username

~~~ $r2 ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2

~~~ $z0 ~~~
?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ condition ~~~
?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): in: $z1
analysis/Utils.java: resolveTree(): dir: ~~~ $r0 ~~~
?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0

~~~ $r1 ~~~
?
| NotEq
| | principal
| | NullOp
| post.user
| $r1

~~~ $r1.active ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active

~~~ $r1.email ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email

~~~ $r1.id ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id

~~~ $r1.lastName ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName

~~~ $r1.name ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name

~~~ $r1.password ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password

~~~ $r1.posts ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts

~~~ $r1.roles ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles

~~~ $r1.username ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username

~~~ $r2 ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2

~~~ $z0 ~~~
?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ condition ~~~
?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): out: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): return
~~~ $r0 ~~~
?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0

~~~ $r1 ~~~
?
| NotEq
| | principal
| | NullOp
| post.user
| $r1

~~~ $r1.active ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active

~~~ $r1.email ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email

~~~ $r1.id ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id

~~~ $r1.lastName ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName

~~~ $r1.name ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name

~~~ $r1.password ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password

~~~ $r1.posts ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts

~~~ $r1.roles ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles

~~~ $r1.username ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username

~~~ $r2 ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2

~~~ $z0 ~~~
?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ condition ~~~
?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0

~~~ return ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ this ~~~
Self


{$r0.email=this.user.email, $r1.lastName=this.user.lastName, $r0.name=this.user.name, return.email=this.user.email, $r1.body=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body, $r0.password=this.user.password, $r1.id=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id, return.body=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body, optionalPost.body=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body, optionalPost.comments=Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp, optionalPost.title=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title, $r1.username=this.user.username, return.password=this.user.password, $r1.comments=Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp, $z0=NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet, $z1=1, $r1.posts=this.user.posts, return.createDate=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate, optionalPost.user=Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp, $r0=this.postRepository, $r1=Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id, $r2=this.user.username, this=Self, $r1.email=this.user.email, $r0.id=this.user.id, $r0.username=this.user.username, return.title=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title, $r1.password=this.user.password, condition=Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0, optionalPost.createDate=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate, $r1.user=Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp, optionalPost=Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id, return.name=this.user.name, $r0.active=this.user.active, $r1.createDate=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate, $r1.roles=this.user.roles, $r1.title=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title, $r1.active=this.user.active, return.lastName=this.user.lastName, return.id=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id, optionalPost.id=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id, return.posts=this.user.posts, $r0.lastName=this.user.lastName, $r0.posts=this.user.posts, return.active=this.user.active, return.roles=this.user.roles, return.username=this.user.username, optionalret=Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id, $r0.roles=this.user.roles, return.comments=Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp, return=Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id, return.user=Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp, return=Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id, $r1.name=this.user.name}
AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0

~~~ $r1 ~~~
?
| NotEq
| | principal
| | NullOp
| post.user
| $r1

~~~ $r1.active ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active

~~~ $r1.email ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email

~~~ $r1.id ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id

~~~ $r1.lastName ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName

~~~ $r1.name ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name

~~~ $r1.password ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password

~~~ $r1.posts ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts

~~~ $r1.roles ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles

~~~ $r1.username ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username

~~~ $r2 ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2

~~~ $z0 ~~~
?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ condition ~~~
?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0

~~~ return ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r1.lastName=?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName
DIR.java: updateRegion(): update region entry: $r0=?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0
DIR.java: updateRegion(): update region entry: $r1.roles=?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles
DIR.java: updateRegion(): update region entry: $r1=?
| NotEq
| | principal
| | NullOp
| post.user
| $r1
DIR.java: updateRegion(): update region entry: $r1.active=?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active
DIR.java: updateRegion(): update region entry: $r2=?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: $r1.email=?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email
DIR.java: updateRegion(): update region entry: $r1.id=?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id
DIR.java: updateRegion(): update region entry: $r1.password=?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password
DIR.java: updateRegion(): update region entry: condition=?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
DIR.java: updateRegion(): update region entry: $r1.username=?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username
DIR.java: updateRegion(): update region entry: $z0=?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0
DIR.java: updateRegion(): update region entry: $z1=?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
DIR.java: updateRegion(): update region entry: $r1.posts=?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts
DIR.java: updateRegion(): update region entry: return=?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
DIR.java: updateRegion(): update region entry: $r1.name=?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name
construct/Utils.java: parseObjectInvoke(): Put DIR of callee = com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post) in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = boolean
DIRRegionAnalyzer.java: constructDIR(): leftType : boolean
DIRRegionAnalyzer.java: constructDIR(): case : caseCallToMethodWBodyRetPrim()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), v1 is primitive, foo is not a library method
DIRRegionAnalyzer.java: constructDIR(): v1: $z1
DIRRegionAnalyzer.java: constructDIR(): foo: <com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: isPrincipalOwnerOfPost
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [principal, post, this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [principal, post, this]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: principal
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: java.security.Principal
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: principal
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: principal
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = []
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: post
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.reljicd.model.Post
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: post
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: post
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [post.id, post.title, post.body, post.createDate, post.user, post.comments]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: post.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.lastName, $r0, $r1.roles, $r1, $r1.active, $r2, this, $r1.email, $r1.id, $r1.password, condition, $r1.username, $z0, $z1, $r1.posts, return, $r1.name]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: post.title
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.lastName, $r0, $r1.roles, $r1, $r1.active, $r2, this, $r1.email, $r1.id, $r1.password, condition, $r1.username, $z0, $z1, $r1.posts, return, $r1.name]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: post.body
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.lastName, $r0, $r1.roles, $r1, $r1.active, $r2, this, $r1.email, $r1.id, $r1.password, condition, $r1.username, $z0, $z1, $r1.posts, return, $r1.name]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: post.createDate
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.lastName, $r0, $r1.roles, $r1, $r1.active, $r2, this, $r1.email, $r1.id, $r1.password, condition, $r1.username, $z0, $z1, $r1.posts, return, $r1.name]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: post.user
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.lastName, $r0, $r1.roles, $r1, $r1.active, $r2, this, $r1.email, $r1.id, $r1.password, condition, $r1.username, $z0, $z1, $r1.posts, return, $r1.name]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: post.comments
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.lastName, $r0, $r1.roles, $r1, $r1.active, $r2, this, $r1.email, $r1.id, $r1.password, condition, $r1.username, $z0, $z1, $r1.posts, return, $r1.name]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.reljicd.controller.PostController
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: this
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.postServiceImpl, this.userServiceImpl]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.postServiceImpl
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.lastName, $r0, $r1.roles, $r1, $r1.active, $r2, this, $r1.email, $r1.id, $r1.password, condition, $r1.username, $z0, $z1, $r1.posts, return, $r1.name]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.userServiceImpl
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.lastName, $r0, $r1.roles, $r1, $r1.active, $r2, this, $r1.email, $r1.id, $r1.password, condition, $r1.username, $z0, $z1, $r1.posts, return, $r1.name]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = isPrincipalOwnerOfPost, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: principal
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: principal
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: post
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: post
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [post.id, post.title, post.body, post.createDate, post.user, post.comments]
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: this
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.postServiceImpl, this.userServiceImpl]
DIRRegionAnalyzer.java: constructDIR(): methodSig: com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)
DIRRegionAnalyzer.java: constructDIR(): FuncStackAnalyzer.funcDIRMap: {com.reljicd.model.Post: com.reljicd.model.User getUser()=~~~ $r0 ~~~
this.user

~~~ $r0.active ~~~
this.user.active

~~~ $r0.email ~~~
this.user.email

~~~ $r0.id ~~~
this.user.id

~~~ $r0.lastName ~~~
this.user.lastName

~~~ $r0.name ~~~
this.user.name

~~~ $r0.password ~~~
this.user.password

~~~ $r0.posts ~~~
this.user.posts

~~~ $r0.roles ~~~
this.user.roles

~~~ $r0.username ~~~
this.user.username

~~~ return ~~~
this.user

~~~ return ~~~
this.user

~~~ return.active ~~~
this.user.active

~~~ return.email ~~~
this.user.email

~~~ return.id ~~~
this.user.id

~~~ return.lastName ~~~
this.user.lastName

~~~ return.name ~~~
this.user.name

~~~ return.password ~~~
this.user.password

~~~ return.posts ~~~
this.user.posts

~~~ return.roles ~~~
this.user.roles

~~~ return.username ~~~
this.user.username

~~~ this ~~~
Self

, com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)=~~~ $r0 ~~~
?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0

~~~ $r1 ~~~
?
| NotEq
| | principal
| | NullOp
| post.user
| $r1

~~~ $r1.active ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active

~~~ $r1.email ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email

~~~ $r1.id ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id

~~~ $r1.lastName ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName

~~~ $r1.name ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name

~~~ $r1.password ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password

~~~ $r1.posts ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts

~~~ $r1.roles ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles

~~~ $r1.username ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username

~~~ $r2 ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2

~~~ $z0 ~~~
?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ condition ~~~
?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0

~~~ return ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ this ~~~
Self

, java.util.Optional: java.lang.Object get()=~~~ optionalret ~~~
optionalPost

~~~ return ~~~
optionalPost

~~~ return.body ~~~
optionalPost.body

~~~ return.comments ~~~
optionalPost.comments

~~~ return.createDate ~~~
optionalPost.createDate

~~~ return.id ~~~
optionalPost.id

~~~ return.title ~~~
optionalPost.title

~~~ return.user ~~~
optionalPost.user

, com.reljicd.model.User: java.lang.String getUsername()=~~~ $r0 ~~~
this.username

~~~ return ~~~
this.username

~~~ this ~~~
Self

, com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)=~~~ $r0 ~~~
this.postRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ $r1.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ $r1.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ $r1.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ $r1.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ return.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ return.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ return.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self

, com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)=~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ return.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ return.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ return.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.user.active ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.active)

~~~ return.user.email ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.email)

~~~ return.user.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.id)

~~~ return.user.lastName ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.lastName)

~~~ return.user.name ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.name)

~~~ return.user.password ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.password)

~~~ return.user.posts ~~~
Join
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| ClassRef(com.reljicd.model.Post)
| NullOp

~~~ return.user.roles ~~~
Join
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| ClassRef(com.reljicd.model.Role)
| NullOp

~~~ return.user.username ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.username)

}
DIRRegionAnalyzer.java: constructDIR(): dir callee: ~~~ $r0 ~~~
?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0

~~~ $r1 ~~~
?
| NotEq
| | principal
| | NullOp
| post.user
| $r1

~~~ $r1.active ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active

~~~ $r1.email ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email

~~~ $r1.id ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id

~~~ $r1.lastName ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName

~~~ $r1.name ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name

~~~ $r1.password ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password

~~~ $r1.posts ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts

~~~ $r1.roles ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles

~~~ $r1.username ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username

~~~ $r2 ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2

~~~ $z0 ~~~
?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ condition ~~~
?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0

~~~ return ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): retCalleeCloned: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.reljicd.model.Post: com.reljicd.model.User getUser(), com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post), com.reljicd.model.User: java.lang.String getUsername(), com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long), com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [principal, post, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [principal, post, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = []
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [post.id, post.title, post.body, post.createDate, post.user, post.comments]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.postServiceImpl, this.userServiceImpl]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
DIRRegionAnalyzer.java: constructDIR(): after dag formals to actuals: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
DIRRegionAnalyzer.java: constructDIR(): curUnit = if $z1 == 0 goto return "/403"
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()$z1 == 0
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r1 ~~~
optionalPost

~~~ $r1.body ~~~
optionalPost.body

~~~ $r1.comments ~~~
optionalPost.comments

~~~ $r1.createDate ~~~
optionalPost.createDate

~~~ $r1.id ~~~
optionalPost.id

~~~ $r1.title ~~~
optionalPost.title

~~~ $r1.user ~~~
optionalPost.user

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0

~~~ post ~~~
optionalPost

~~~ post.body ~~~
optionalPost.body

~~~ post.comments ~~~
optionalPost.comments

~~~ post.createDate ~~~
optionalPost.createDate

~~~ post.id ~~~
optionalPost.id

~~~ post.title ~~~
optionalPost.title

~~~ post.user ~~~
optionalPost.user


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r1 ~~~
optionalPost

~~~ $r1.body ~~~
optionalPost.body

~~~ $r1.comments ~~~
optionalPost.comments

~~~ $r1.createDate ~~~
optionalPost.createDate

~~~ $r1.id ~~~
optionalPost.id

~~~ $r1.title ~~~
optionalPost.title

~~~ $r1.user ~~~
optionalPost.user

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0

~~~ post ~~~
optionalPost

~~~ post.body ~~~
optionalPost.body

~~~ post.comments ~~~
optionalPost.comments

~~~ post.createDate ~~~
optionalPost.createDate

~~~ post.id ~~~
optionalPost.id

~~~ post.title ~~~
optionalPost.title

~~~ post.user ~~~
optionalPost.user


DIR.java: updateRegion(): update region entry: $r1.createDate=optionalPost.createDate
DIR.java: updateRegion(): update region entry: post.comments=optionalPost.comments
DIR.java: updateRegion(): update region entry: $r1=optionalPost
DIR.java: updateRegion(): update region entry: $r1.title=optionalPost.title
DIR.java: updateRegion(): update region entry: post.id=optionalPost.id
DIR.java: updateRegion(): update region entry: $r1.body=optionalPost.body
DIR.java: updateRegion(): update region entry: post.createDate=optionalPost.createDate
DIR.java: updateRegion(): update region entry: post.user=optionalPost.user
DIR.java: updateRegion(): update region entry: $r1.id=optionalPost.id
DIR.java: updateRegion(): update region entry: post.title=optionalPost.title
DIR.java: updateRegion(): update region entry: condition=Equals
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
DIR.java: updateRegion(): update region entry: post=optionalPost
DIR.java: updateRegion(): update region entry: post.body=optionalPost.body
DIR.java: updateRegion(): update region entry: $r1.comments=optionalPost.comments
DIR.java: updateRegion(): update region entry: $r1.user=optionalPost.user
DIR.java: updateRegion(): update region entry: $z1=?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
ARegion.java: analyze(): set cur method of analyzer to: editPostWithId
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 2
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.reljicd.controller.PostController, id := @parameter0: java.lang.Long, principal := @parameter1: java.security.Principal, model := @parameter2: org.springframework.ui.Model, $r0 = new com.reljicd.service.impl.PostServiceImp, optionalPost = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id), this.<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r0, $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>(), if $z0 == 0 goto return "/error", $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>(), post = (com.reljicd.model.Post) $r1, $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post), if $z1 == 0 goto return "/403", interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post), return "/postForm", return "/403", return "/error"]
DIRRegionAnalyzer.java: constructDIR(): curUnit = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post)
DIRRegionAnalyzer.java: constructDIR(): Model Add Attribute Statement
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: __modelattribute__post
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: post
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [Post.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
Annotation: type: Ljavax/persistence/Table; num elems: 1 elems: 
Annotation Element: kind: s name: name value: post

]
AccessPath.java: replaceBase(): input access path: __modelattribute__post.id
AccessPath.java: replaceBase(): replacement of base: post
AccessPath.java: replaceBase(): input access path: __modelattribute__post.title
AccessPath.java: replaceBase(): replacement of base: post
AccessPath.java: replaceBase(): input access path: __modelattribute__post.body
AccessPath.java: replaceBase(): replacement of base: post
AccessPath.java: replaceBase(): input access path: __modelattribute__post.createDate
AccessPath.java: replaceBase(): replacement of base: post
AccessPath.java: replaceBase(): input access path: __modelattribute__post.user
AccessPath.java: replaceBase(): replacement of base: post
AccessPath.java: replaceBase(): input access path: __modelattribute__post.comments
AccessPath.java: replaceBase(): replacement of base: post
DIRRegionAnalyzer.java: constructDIR(): curUnit = return "/postForm"
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ __modelattribute__post ~~~
post

~~~ __modelattribute__post.body ~~~
post.body

~~~ __modelattribute__post.comments ~~~
post.comments

~~~ __modelattribute__post.createDate ~~~
post.createDate

~~~ __modelattribute__post.id ~~~
post.id

~~~ __modelattribute__post.title ~~~
post.title

~~~ __modelattribute__post.user ~~~
post.user

~~~ return ~~~
"/postForm"


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ __modelattribute__post ~~~
post

~~~ __modelattribute__post.body ~~~
post.body

~~~ __modelattribute__post.comments ~~~
post.comments

~~~ __modelattribute__post.createDate ~~~
post.createDate

~~~ __modelattribute__post.id ~~~
post.id

~~~ __modelattribute__post.title ~~~
post.title

~~~ __modelattribute__post.user ~~~
post.user

~~~ return ~~~
"/postForm"


DIR.java: updateRegion(): update region entry: __modelattribute__post.createDate=post.createDate
DIR.java: updateRegion(): update region entry: __modelattribute__post.title=post.title
DIR.java: updateRegion(): update region entry: __modelattribute__post.id=post.id
DIR.java: updateRegion(): update region entry: __modelattribute__post.body=post.body
DIR.java: updateRegion(): update region entry: __modelattribute__post.user=post.user
DIR.java: updateRegion(): update region entry: __modelattribute__post=post
DIR.java: updateRegion(): update region entry: __modelattribute__post.comments=post.comments
DIR.java: updateRegion(): update region entry: return="/postForm"
ARegion.java: analyze(): set cur method of analyzer to: editPostWithId
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock3
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 3
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.reljicd.controller.PostController, id := @parameter0: java.lang.Long, principal := @parameter1: java.security.Principal, model := @parameter2: org.springframework.ui.Model, $r0 = new com.reljicd.service.impl.PostServiceImp, optionalPost = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id), this.<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r0, $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>(), if $z0 == 0 goto return "/error", $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>(), post = (com.reljicd.model.Post) $r1, $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post), if $z1 == 0 goto return "/403", interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post), return "/postForm", return "/403", return "/error"]
DIRRegionAnalyzer.java: constructDIR(): curUnit = return "/403"
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock3
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ return ~~~
"/403"


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ return ~~~
"/403"


DIR.java: updateRegion(): update region entry: return="/403"
analysis/Utils.java: extractCondition(): condVar: condition
analysis/Utils.java: extractCondition(): input dir (of headRegion): ~~~ $r1 ~~~
optionalPost

~~~ $r1.body ~~~
optionalPost.body

~~~ $r1.comments ~~~
optionalPost.comments

~~~ $r1.createDate ~~~
optionalPost.createDate

~~~ $r1.id ~~~
optionalPost.id

~~~ $r1.title ~~~
optionalPost.title

~~~ $r1.user ~~~
optionalPost.user

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0

~~~ post ~~~
optionalPost

~~~ post.body ~~~
optionalPost.body

~~~ post.comments ~~~
optionalPost.comments

~~~ post.createDate ~~~
optionalPost.createDate

~~~ post.id ~~~
optionalPost.id

~~~ post.title ~~~
optionalPost.title

~~~ post.user ~~~
optionalPost.user


DIRIfThenElseRegionAnalyzer.java: constructDIR(): condition: Equals
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
DIRIfThenElseRegionAnalyzer.java: constructDIR(): condition after inversion: NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
DIRIfThenElseRegionAnalyzer.java: constructDIR(): headDIR: ~~~ $r1 ~~~
optionalPost

~~~ $r1.body ~~~
optionalPost.body

~~~ $r1.comments ~~~
optionalPost.comments

~~~ $r1.createDate ~~~
optionalPost.createDate

~~~ $r1.id ~~~
optionalPost.id

~~~ $r1.title ~~~
optionalPost.title

~~~ $r1.user ~~~
optionalPost.user

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0

~~~ post ~~~
optionalPost

~~~ post.body ~~~
optionalPost.body

~~~ post.comments ~~~
optionalPost.comments

~~~ post.createDate ~~~
optionalPost.createDate

~~~ post.id ~~~
optionalPost.id

~~~ post.title ~~~
optionalPost.title

~~~ post.user ~~~
optionalPost.user


DIRIfThenElseRegionAnalyzer.java: constructDIR(): condRegDIR: ~~~ __modelattribute__post ~~~
?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post
| __modelattribute__post

~~~ __modelattribute__post.body ~~~
?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post.body
| __modelattribute__post.body

~~~ __modelattribute__post.comments ~~~
?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post.comments
| __modelattribute__post.comments

~~~ __modelattribute__post.createDate ~~~
?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post.createDate
| __modelattribute__post.createDate

~~~ __modelattribute__post.id ~~~
?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post.id
| __modelattribute__post.id

~~~ __modelattribute__post.title ~~~
?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post.title
| __modelattribute__post.title

~~~ __modelattribute__post.user ~~~
?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post.user
| __modelattribute__post.user

~~~ return ~~~
?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| "/postForm"
| "/403"


DIRIfThenElseRegionAnalyzer.java: constructDIR(): merging head with cond
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post.createDate
| __modelattribute__post.createDate
analysis/Utils.java: resolveTree(): dir: ~~~ $r1 ~~~
optionalPost

~~~ $r1.body ~~~
optionalPost.body

~~~ $r1.comments ~~~
optionalPost.comments

~~~ $r1.createDate ~~~
optionalPost.createDate

~~~ $r1.id ~~~
optionalPost.id

~~~ $r1.title ~~~
optionalPost.title

~~~ $r1.user ~~~
optionalPost.user

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0

~~~ post ~~~
optionalPost

~~~ post.body ~~~
optionalPost.body

~~~ post.comments ~~~
optionalPost.comments

~~~ post.createDate ~~~
optionalPost.createDate

~~~ post.id ~~~
optionalPost.id

~~~ post.title ~~~
optionalPost.title

~~~ post.user ~~~
optionalPost.user


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post.createDate
| __modelattribute__post.createDate
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:post.createDate
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post.createDate
| __modelattribute__post.createDate
analysis/Utils.java: resolveTree(): resolvedValChild: optionalPost.createDate
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.createDate
| __modelattribute__post.createDate
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__post.createDate
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=optionalPost.createDate]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__post.createDate
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.createDate
| __modelattribute__post.createDate
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post.title
| __modelattribute__post.title
analysis/Utils.java: resolveTree(): dir: ~~~ $r1 ~~~
optionalPost

~~~ $r1.body ~~~
optionalPost.body

~~~ $r1.comments ~~~
optionalPost.comments

~~~ $r1.createDate ~~~
optionalPost.createDate

~~~ $r1.id ~~~
optionalPost.id

~~~ $r1.title ~~~
optionalPost.title

~~~ $r1.user ~~~
optionalPost.user

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0

~~~ post ~~~
optionalPost

~~~ post.body ~~~
optionalPost.body

~~~ post.comments ~~~
optionalPost.comments

~~~ post.createDate ~~~
optionalPost.createDate

~~~ post.id ~~~
optionalPost.id

~~~ post.title ~~~
optionalPost.title

~~~ post.user ~~~
optionalPost.user


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post.title
| __modelattribute__post.title
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:post.title
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post.title
| __modelattribute__post.title
analysis/Utils.java: resolveTree(): resolvedValChild: optionalPost.title
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.title
| __modelattribute__post.title
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__post.title
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=optionalPost.title]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__post.title
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.title
| __modelattribute__post.title
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post.id
| __modelattribute__post.id
analysis/Utils.java: resolveTree(): dir: ~~~ $r1 ~~~
optionalPost

~~~ $r1.body ~~~
optionalPost.body

~~~ $r1.comments ~~~
optionalPost.comments

~~~ $r1.createDate ~~~
optionalPost.createDate

~~~ $r1.id ~~~
optionalPost.id

~~~ $r1.title ~~~
optionalPost.title

~~~ $r1.user ~~~
optionalPost.user

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0

~~~ post ~~~
optionalPost

~~~ post.body ~~~
optionalPost.body

~~~ post.comments ~~~
optionalPost.comments

~~~ post.createDate ~~~
optionalPost.createDate

~~~ post.id ~~~
optionalPost.id

~~~ post.title ~~~
optionalPost.title

~~~ post.user ~~~
optionalPost.user


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post.id
| __modelattribute__post.id
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:post.id
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post.id
| __modelattribute__post.id
analysis/Utils.java: resolveTree(): resolvedValChild: optionalPost.id
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.id
| __modelattribute__post.id
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__post.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=optionalPost.id]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__post.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.id
| __modelattribute__post.id
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post.body
| __modelattribute__post.body
analysis/Utils.java: resolveTree(): dir: ~~~ $r1 ~~~
optionalPost

~~~ $r1.body ~~~
optionalPost.body

~~~ $r1.comments ~~~
optionalPost.comments

~~~ $r1.createDate ~~~
optionalPost.createDate

~~~ $r1.id ~~~
optionalPost.id

~~~ $r1.title ~~~
optionalPost.title

~~~ $r1.user ~~~
optionalPost.user

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0

~~~ post ~~~
optionalPost

~~~ post.body ~~~
optionalPost.body

~~~ post.comments ~~~
optionalPost.comments

~~~ post.createDate ~~~
optionalPost.createDate

~~~ post.id ~~~
optionalPost.id

~~~ post.title ~~~
optionalPost.title

~~~ post.user ~~~
optionalPost.user


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post.body
| __modelattribute__post.body
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:post.body
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post.body
| __modelattribute__post.body
analysis/Utils.java: resolveTree(): resolvedValChild: optionalPost.body
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.body
| __modelattribute__post.body
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__post.body
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=optionalPost.body]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__post.body
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.body
| __modelattribute__post.body
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post.user
| __modelattribute__post.user
analysis/Utils.java: resolveTree(): dir: ~~~ $r1 ~~~
optionalPost

~~~ $r1.body ~~~
optionalPost.body

~~~ $r1.comments ~~~
optionalPost.comments

~~~ $r1.createDate ~~~
optionalPost.createDate

~~~ $r1.id ~~~
optionalPost.id

~~~ $r1.title ~~~
optionalPost.title

~~~ $r1.user ~~~
optionalPost.user

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0

~~~ post ~~~
optionalPost

~~~ post.body ~~~
optionalPost.body

~~~ post.comments ~~~
optionalPost.comments

~~~ post.createDate ~~~
optionalPost.createDate

~~~ post.id ~~~
optionalPost.id

~~~ post.title ~~~
optionalPost.title

~~~ post.user ~~~
optionalPost.user


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post.user
| __modelattribute__post.user
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:post.user
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post.user
| __modelattribute__post.user
analysis/Utils.java: resolveTree(): resolvedValChild: optionalPost.user
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.user
| __modelattribute__post.user
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__post.user
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=optionalPost.user]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__post.user
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.user
| __modelattribute__post.user
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post
| __modelattribute__post
analysis/Utils.java: resolveTree(): dir: ~~~ $r1 ~~~
optionalPost

~~~ $r1.body ~~~
optionalPost.body

~~~ $r1.comments ~~~
optionalPost.comments

~~~ $r1.createDate ~~~
optionalPost.createDate

~~~ $r1.id ~~~
optionalPost.id

~~~ $r1.title ~~~
optionalPost.title

~~~ $r1.user ~~~
optionalPost.user

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0

~~~ post ~~~
optionalPost

~~~ post.body ~~~
optionalPost.body

~~~ post.comments ~~~
optionalPost.comments

~~~ post.createDate ~~~
optionalPost.createDate

~~~ post.id ~~~
optionalPost.id

~~~ post.title ~~~
optionalPost.title

~~~ post.user ~~~
optionalPost.user


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post
| __modelattribute__post
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:post
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post
| __modelattribute__post
analysis/Utils.java: resolveTree(): resolvedValChild: optionalPost
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost
| __modelattribute__post
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__post
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=optionalPost]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__post
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost
| __modelattribute__post
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post.comments
| __modelattribute__post.comments
analysis/Utils.java: resolveTree(): dir: ~~~ $r1 ~~~
optionalPost

~~~ $r1.body ~~~
optionalPost.body

~~~ $r1.comments ~~~
optionalPost.comments

~~~ $r1.createDate ~~~
optionalPost.createDate

~~~ $r1.id ~~~
optionalPost.id

~~~ $r1.title ~~~
optionalPost.title

~~~ $r1.user ~~~
optionalPost.user

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0

~~~ post ~~~
optionalPost

~~~ post.body ~~~
optionalPost.body

~~~ post.comments ~~~
optionalPost.comments

~~~ post.createDate ~~~
optionalPost.createDate

~~~ post.id ~~~
optionalPost.id

~~~ post.title ~~~
optionalPost.title

~~~ post.user ~~~
optionalPost.user


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post.comments
| __modelattribute__post.comments
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:post.comments
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| post.comments
| __modelattribute__post.comments
analysis/Utils.java: resolveTree(): resolvedValChild: optionalPost.comments
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.comments
| __modelattribute__post.comments
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__post.comments
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=optionalPost.comments]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__post.comments
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.comments
| __modelattribute__post.comments
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| "/postForm"
| "/403"
analysis/Utils.java: resolveTree(): dir: ~~~ $r1 ~~~
optionalPost

~~~ $r1.body ~~~
optionalPost.body

~~~ $r1.comments ~~~
optionalPost.comments

~~~ $r1.createDate ~~~
optionalPost.createDate

~~~ $r1.id ~~~
optionalPost.id

~~~ $r1.title ~~~
optionalPost.title

~~~ $r1.user ~~~
optionalPost.user

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ condition ~~~
Equals
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0

~~~ post ~~~
optionalPost

~~~ post.body ~~~
optionalPost.body

~~~ post.comments ~~~
optionalPost.comments

~~~ post.createDate ~~~
optionalPost.createDate

~~~ post.id ~~~
optionalPost.id

~~~ post.title ~~~
optionalPost.title

~~~ post.user ~~~
optionalPost.user


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| "/postForm"
| "/403"
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:"/postForm"
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:"/403"
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: "/403"
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: "/postForm"
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| "/postForm"
| "/403"
analysis/Utils.java: resolveTree(): return
DIRIfThenElseRegionAnalyzer.java: constructDIR(): IfThenElseDIR: ~~~ $r1 ~~~
optionalPost

~~~ $r1.body ~~~
optionalPost.body

~~~ $r1.comments ~~~
optionalPost.comments

~~~ $r1.createDate ~~~
optionalPost.createDate

~~~ $r1.id ~~~
optionalPost.id

~~~ $r1.title ~~~
optionalPost.title

~~~ $r1.user ~~~
optionalPost.user

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ __modelattribute__post ~~~
?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost
| __modelattribute__post

~~~ __modelattribute__post.body ~~~
?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.body
| __modelattribute__post.body

~~~ __modelattribute__post.comments ~~~
?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.comments
| __modelattribute__post.comments

~~~ __modelattribute__post.createDate ~~~
?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.createDate
| __modelattribute__post.createDate

~~~ __modelattribute__post.id ~~~
?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.id
| __modelattribute__post.id

~~~ __modelattribute__post.title ~~~
?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.title
| __modelattribute__post.title

~~~ __modelattribute__post.user ~~~
?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.user
| __modelattribute__post.user

~~~ condition ~~~
Equals
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0

~~~ post ~~~
optionalPost

~~~ post.body ~~~
optionalPost.body

~~~ post.comments ~~~
optionalPost.comments

~~~ post.createDate ~~~
optionalPost.createDate

~~~ post.id ~~~
optionalPost.id

~~~ post.title ~~~
optionalPost.title

~~~ post.user ~~~
optionalPost.user

~~~ return ~~~
?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| "/postForm"
| "/403"


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r1 ~~~
optionalPost

~~~ $r1.body ~~~
optionalPost.body

~~~ $r1.comments ~~~
optionalPost.comments

~~~ $r1.createDate ~~~
optionalPost.createDate

~~~ $r1.id ~~~
optionalPost.id

~~~ $r1.title ~~~
optionalPost.title

~~~ $r1.user ~~~
optionalPost.user

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ __modelattribute__post ~~~
?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost
| __modelattribute__post

~~~ __modelattribute__post.body ~~~
?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.body
| __modelattribute__post.body

~~~ __modelattribute__post.comments ~~~
?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.comments
| __modelattribute__post.comments

~~~ __modelattribute__post.createDate ~~~
?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.createDate
| __modelattribute__post.createDate

~~~ __modelattribute__post.id ~~~
?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.id
| __modelattribute__post.id

~~~ __modelattribute__post.title ~~~
?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.title
| __modelattribute__post.title

~~~ __modelattribute__post.user ~~~
?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.user
| __modelattribute__post.user

~~~ condition ~~~
Equals
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0

~~~ post ~~~
optionalPost

~~~ post.body ~~~
optionalPost.body

~~~ post.comments ~~~
optionalPost.comments

~~~ post.createDate ~~~
optionalPost.createDate

~~~ post.id ~~~
optionalPost.id

~~~ post.title ~~~
optionalPost.title

~~~ post.user ~~~
optionalPost.user

~~~ return ~~~
?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| "/postForm"
| "/403"


DIR.java: updateRegion(): update region entry: $r1.createDate=optionalPost.createDate
DIR.java: updateRegion(): update region entry: post.comments=optionalPost.comments
DIR.java: updateRegion(): update region entry: $r1=optionalPost
DIR.java: updateRegion(): update region entry: $r1.title=optionalPost.title
DIR.java: updateRegion(): update region entry: post.id=optionalPost.id
DIR.java: updateRegion(): update region entry: __modelattribute__post.id=?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.id
| __modelattribute__post.id
DIR.java: updateRegion(): update region entry: __modelattribute__post.body=?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.body
| __modelattribute__post.body
DIR.java: updateRegion(): update region entry: $r1.body=optionalPost.body
DIR.java: updateRegion(): update region entry: post.createDate=optionalPost.createDate
DIR.java: updateRegion(): update region entry: post.user=optionalPost.user
DIR.java: updateRegion(): update region entry: $r1.id=optionalPost.id
DIR.java: updateRegion(): update region entry: post.title=optionalPost.title
DIR.java: updateRegion(): update region entry: __modelattribute__post.createDate=?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.createDate
| __modelattribute__post.createDate
DIR.java: updateRegion(): update region entry: condition=Equals
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
DIR.java: updateRegion(): update region entry: __modelattribute__post.title=?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.title
| __modelattribute__post.title
DIR.java: updateRegion(): update region entry: post=optionalPost
DIR.java: updateRegion(): update region entry: post.body=optionalPost.body
DIR.java: updateRegion(): update region entry: $r1.comments=optionalPost.comments
DIR.java: updateRegion(): update region entry: $r1.user=optionalPost.user
DIR.java: updateRegion(): update region entry: $z1=?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
DIR.java: updateRegion(): update region entry: __modelattribute__post.user=?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.user
| __modelattribute__post.user
DIR.java: updateRegion(): update region entry: __modelattribute__post=?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost
| __modelattribute__post
DIR.java: updateRegion(): update region entry: __modelattribute__post.comments=?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.comments
| __modelattribute__post.comments
DIR.java: updateRegion(): update region entry: return=?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| "/postForm"
| "/403"
ARegion.java: analyze(): set cur method of analyzer to: editPostWithId
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock4
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 4
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.reljicd.controller.PostController, id := @parameter0: java.lang.Long, principal := @parameter1: java.security.Principal, model := @parameter2: org.springframework.ui.Model, $r0 = new com.reljicd.service.impl.PostServiceImp, optionalPost = virtualinvoke $r0.<com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)>(id), this.<com.reljicd.controller.PostController: com.reljicd.service.impl.PostServiceImp postServiceImpl> = $r0, $z0 = virtualinvoke optionalPost.<java.util.Optional: boolean isPresent()>(), if $z0 == 0 goto return "/error", $r1 = virtualinvoke optionalPost.<java.util.Optional: java.lang.Object get()>(), post = (com.reljicd.model.Post) $r1, $z1 = specialinvoke this.<com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)>(principal, post), if $z1 == 0 goto return "/403", interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("post", post), return "/postForm", return "/403", return "/error"]
DIRRegionAnalyzer.java: constructDIR(): curUnit = return "/error"
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock4
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ return ~~~
"/error"


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ return ~~~
"/error"


DIR.java: updateRegion(): update region entry: return="/error"
analysis/Utils.java: extractCondition(): condVar: condition
analysis/Utils.java: extractCondition(): input dir (of headRegion): ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


DIRIfThenElseRegionAnalyzer.java: constructDIR(): condition: Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
DIRIfThenElseRegionAnalyzer.java: constructDIR(): condition after inversion: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
DIRIfThenElseRegionAnalyzer.java: constructDIR(): headDIR: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


DIRIfThenElseRegionAnalyzer.java: constructDIR(): condRegDIR: ~~~ $r1 ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost
| $r1

~~~ $r1.body ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.body
| $r1.body

~~~ $r1.comments ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.comments
| $r1.comments

~~~ $r1.createDate ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.createDate
| $r1.createDate

~~~ $r1.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.id
| $r1.id

~~~ $r1.title ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.title
| $r1.title

~~~ $r1.user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.user
| $r1.user

~~~ $z1 ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| $z1

~~~ __modelattribute__post ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | optionalPost
| | __modelattribute__post
| __modelattribute__post

~~~ __modelattribute__post.body ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | optionalPost.body
| | __modelattribute__post.body
| __modelattribute__post.body

~~~ __modelattribute__post.comments ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | optionalPost.comments
| | __modelattribute__post.comments
| __modelattribute__post.comments

~~~ __modelattribute__post.createDate ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | optionalPost.createDate
| | __modelattribute__post.createDate
| __modelattribute__post.createDate

~~~ __modelattribute__post.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | optionalPost.id
| | __modelattribute__post.id
| __modelattribute__post.id

~~~ __modelattribute__post.title ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | optionalPost.title
| | __modelattribute__post.title
| __modelattribute__post.title

~~~ __modelattribute__post.user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | optionalPost.user
| | __modelattribute__post.user
| __modelattribute__post.user

~~~ condition ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Equals
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| condition

~~~ post ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost
| post

~~~ post.body ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.body
| post.body

~~~ post.comments ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.comments
| post.comments

~~~ post.createDate ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.createDate
| post.createDate

~~~ post.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.id
| post.id

~~~ post.title ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.title
| post.title

~~~ post.user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.user
| post.user

~~~ return ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | "/postForm"
| | "/403"
| "/error"


DIRIfThenElseRegionAnalyzer.java: constructDIR(): merging head with cond
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.createDate
| $r1.createDate
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.createDate
| $r1.createDate
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalPost.createDate
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.createDate
| $r1.createDate
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | createDate
| $r1.createDate
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.createDate
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.createDate
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | createDate
| $r1.createDate
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.comments
| post.comments
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.comments
| post.comments
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalPost.comments
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.comments
| post.comments
analysis/Utils.java: resolveTree(): resolvedValChild: Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.comments=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.Comment)
| | | Equals
| | | | Alpha.id
| | | | Comment.post_id
| | List
| | | id
| | | body
| | | createDate
| | | Comment.post=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.post_id
| | | | | | Post.id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Comment.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| post.comments
analysis/Utils.java: resolveTree(): i = 2 child of top:post.comments
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: post.comments
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.comments=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.Comment)
| | | Equals
| | | | Alpha.id
| | | | Comment.post_id
| | List
| | | id
| | | body
| | | createDate
| | | Comment.post=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.post_id
| | | | | | Post.id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Comment.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| post.comments
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost
| $r1
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost
| $r1
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalPost
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost
| $r1
analysis/Utils.java: resolveTree(): resolvedValChild: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| $r1
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| $r1
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.title
| $r1.title
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.title
| $r1.title
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalPost.title
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.title
| $r1.title
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | title
| $r1.title
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.title
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.title
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | title
| $r1.title
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.id
| post.id
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.id
| post.id
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalPost.id
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.id
| post.id
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | id
| post.id
analysis/Utils.java: resolveTree(): i = 2 child of top:post.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: post.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | id
| post.id
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | optionalPost.id
| | __modelattribute__post.id
| __modelattribute__post.id
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | optionalPost.id
| | __modelattribute__post.id
| __modelattribute__post.id
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.id
| __modelattribute__post.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__post.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__post.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.id
| __modelattribute__post.id
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalPost.id
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.id
| __modelattribute__post.id
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | id
| __modelattribute__post.id
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__post.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__post.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | id
| | __modelattribute__post.id
| __modelattribute__post.id
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | optionalPost.body
| | __modelattribute__post.body
| __modelattribute__post.body
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | optionalPost.body
| | __modelattribute__post.body
| __modelattribute__post.body
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.body
| __modelattribute__post.body
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__post.body
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__post.body
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.body
| __modelattribute__post.body
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalPost.body
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.body
| __modelattribute__post.body
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | body
| __modelattribute__post.body
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__post.body
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__post.body
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | body
| | __modelattribute__post.body
| __modelattribute__post.body
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.body
| $r1.body
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.body
| $r1.body
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalPost.body
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.body
| $r1.body
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | body
| $r1.body
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.body
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.body
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | body
| $r1.body
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.createDate
| post.createDate
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.createDate
| post.createDate
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalPost.createDate
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.createDate
| post.createDate
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | createDate
| post.createDate
analysis/Utils.java: resolveTree(): i = 2 child of top:post.createDate
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: post.createDate
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | createDate
| post.createDate
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.user
| post.user
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.user
| post.user
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalPost.user
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.user
| post.user
analysis/Utils.java: resolveTree(): resolvedValChild: Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.user=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | Alpha.user_id
| | | | User.id
| | List
| | | id
| | | email
| | | password
| | | username
| | | name
| | | lastName
| | | active
| | | User.roles=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Role)
| | | | | Equals
| | | | | | Alpha.role_id
| | | | | | Role.user_id
| | | | List
| | | | | id
| | | | | role
| | | | | Role.users=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.role_id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | User.posts=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Post.user_id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| post.user
analysis/Utils.java: resolveTree(): i = 2 child of top:post.user
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: post.user
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.user=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | Alpha.user_id
| | | | User.id
| | List
| | | id
| | | email
| | | password
| | | username
| | | name
| | | lastName
| | | active
| | | User.roles=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Role)
| | | | | Equals
| | | | | | Alpha.role_id
| | | | | | Role.user_id
| | | | List
| | | | | id
| | | | | role
| | | | | Role.users=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.role_id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | User.posts=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Post.user_id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| post.user
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.id
| $r1.id
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.id
| $r1.id
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalPost.id
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.id
| $r1.id
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | id
| $r1.id
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | id
| $r1.id
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.title
| post.title
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.title
| post.title
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalPost.title
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.title
| post.title
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | title
| post.title
analysis/Utils.java: resolveTree(): i = 2 child of top:post.title
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: post.title
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | title
| post.title
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | optionalPost.createDate
| | __modelattribute__post.createDate
| __modelattribute__post.createDate
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | optionalPost.createDate
| | __modelattribute__post.createDate
| __modelattribute__post.createDate
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.createDate
| __modelattribute__post.createDate
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__post.createDate
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__post.createDate
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.createDate
| __modelattribute__post.createDate
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalPost.createDate
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.createDate
| __modelattribute__post.createDate
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | createDate
| __modelattribute__post.createDate
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__post.createDate
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__post.createDate
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | createDate
| | __modelattribute__post.createDate
| __modelattribute__post.createDate
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Equals
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| condition
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Equals
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| condition
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:condition
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Equals
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| condition
analysis/Utils.java: resolveTree(): resolvedValChild: Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Equals
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| Equals
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [2=Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Equals
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| Equals
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | optionalPost.title
| | __modelattribute__post.title
| __modelattribute__post.title
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | optionalPost.title
| | __modelattribute__post.title
| __modelattribute__post.title
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.title
| __modelattribute__post.title
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__post.title
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__post.title
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.title
| __modelattribute__post.title
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalPost.title
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.title
| __modelattribute__post.title
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | title
| __modelattribute__post.title
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__post.title
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__post.title
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | title
| | __modelattribute__post.title
| __modelattribute__post.title
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost
| post
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost
| post
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalPost
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost
| post
analysis/Utils.java: resolveTree(): resolvedValChild: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| post
analysis/Utils.java: resolveTree(): i = 2 child of top:post
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: post
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| post
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.body
| post.body
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.body
| post.body
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalPost.body
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.body
| post.body
analysis/Utils.java: resolveTree(): resolvedValChild: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | body
| post.body
analysis/Utils.java: resolveTree(): i = 2 child of top:post.body
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: post.body
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | body
| post.body
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.comments
| $r1.comments
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.comments
| $r1.comments
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalPost.comments
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.comments
| $r1.comments
analysis/Utils.java: resolveTree(): resolvedValChild: Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.comments=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.Comment)
| | | Equals
| | | | Alpha.id
| | | | Comment.post_id
| | List
| | | id
| | | body
| | | createDate
| | | Comment.post=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.post_id
| | | | | | Post.id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Comment.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.comments
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.comments
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.comments
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.comments=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.Comment)
| | | Equals
| | | | Alpha.id
| | | | Comment.post_id
| | List
| | | id
| | | body
| | | createDate
| | | Comment.post=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.post_id
| | | | | | Post.id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Comment.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.comments
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.user
| $r1.user
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.user
| $r1.user
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalPost.user
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| optionalPost.user
| $r1.user
analysis/Utils.java: resolveTree(): resolvedValChild: Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.user=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | Alpha.user_id
| | | | User.id
| | List
| | | id
| | | email
| | | password
| | | username
| | | name
| | | lastName
| | | active
| | | User.roles=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Role)
| | | | | Equals
| | | | | | Alpha.role_id
| | | | | | Role.user_id
| | | | List
| | | | | id
| | | | | role
| | | | | Role.users=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.role_id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | User.posts=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Post.user_id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.user
analysis/Utils.java: resolveTree(): i = 2 child of top:$r1.user
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1.user
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.user=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | Alpha.user_id
| | | | User.id
| | List
| | | id
| | | email
| | | password
| | | username
| | | name
| | | lastName
| | | active
| | | User.roles=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Role)
| | | | | Equals
| | | | | | Alpha.role_id
| | | | | | Role.user_id
| | | | List
| | | | | id
| | | | | role
| | | | | Role.users=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.role_id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | User.posts=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Post.user_id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.user
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| $z1
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| $z1
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:$z1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $z1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| $z1
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | optionalPost.user
| | __modelattribute__post.user
| __modelattribute__post.user
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | optionalPost.user
| | __modelattribute__post.user
| __modelattribute__post.user
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.user
| __modelattribute__post.user
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__post.user
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__post.user
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.user
| __modelattribute__post.user
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalPost.user
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.user
| __modelattribute__post.user
analysis/Utils.java: resolveTree(): resolvedValChild: Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| Post.user=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | Alpha.user_id
| | | | User.id
| | List
| | | id
| | | email
| | | password
| | | username
| | | name
| | | lastName
| | | active
| | | User.roles=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Role)
| | | | | Equals
| | | | | | Alpha.role_id
| | | | | | Role.user_id
| | | | List
| | | | | id
| | | | | role
| | | | | Role.users=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.role_id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | User.posts=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Post.user_id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| __modelattribute__post.user
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__post.user
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__post.user
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Post.user=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.reljicd.model.Post)
| | | | | Equals
| | | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | | id
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | Role.users=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | Alpha.user_id
| | | | | | | | | User.role_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | email
| | | | | | | | password
| | | | | | | | username
| | | | | | | | name
| | | | | | | | lastName
| | | | | | | | active
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | Post.user=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | Alpha.user_id
| | | | | | | | | User.id
| | | | | | | List
| | | | | | | | id
| | | | | | | | email
| | | | | | | | password
| | | | | | | | username
| | | | | | | | name
| | | | | | | | lastName
| | | | | | | | active
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | | | Post.comments=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Comment)
| | | | | | | | Equals
| | | | | | | | | Alpha.id
| | | | | | | | | Comment.post_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | body
| | | | | | | | createDate
| | | | | | | | NullOp
| | | | | | | | NullOp
| | __modelattribute__post.user
| __modelattribute__post.user
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | optionalPost
| | __modelattribute__post
| __modelattribute__post
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | optionalPost
| | __modelattribute__post
| __modelattribute__post
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost
| __modelattribute__post
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__post
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__post
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost
| __modelattribute__post
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalPost
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost
| __modelattribute__post
analysis/Utils.java: resolveTree(): resolvedValChild: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| __modelattribute__post
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__post
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__post
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | __modelattribute__post
| __modelattribute__post
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | optionalPost.comments
| | __modelattribute__post.comments
| __modelattribute__post.comments
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | optionalPost.comments
| | __modelattribute__post.comments
| __modelattribute__post.comments
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.comments
| __modelattribute__post.comments
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__post.comments
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__post.comments
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.comments
| __modelattribute__post.comments
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:optionalPost.comments
analysis/Utils.java: resolveTree(): top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| optionalPost.comments
| __modelattribute__post.comments
analysis/Utils.java: resolveTree(): resolvedValChild: Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
analysis/Utils.java: resolveTree(): new top: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| Post.comments=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.Comment)
| | | Equals
| | | | Alpha.id
| | | | Comment.post_id
| | List
| | | id
| | | body
| | | createDate
| | | Comment.post=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.post_id
| | | | | | Post.id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Comment.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| __modelattribute__post.comments
analysis/Utils.java: resolveTree(): i = 2 child of top:__modelattribute__post.comments
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: __modelattribute__post.comments
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Post.comments=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.reljicd.model.Post)
| | | | | Equals
| | | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | | id
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | Post.user=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | Alpha.user_id
| | | | | | | | | User.id
| | | | | | | List
| | | | | | | | id
| | | | | | | | email
| | | | | | | | password
| | | | | | | | username
| | | | | | | | name
| | | | | | | | lastName
| | | | | | | | active
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | | | Post.comments=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Comment)
| | | | | | | | Equals
| | | | | | | | | Alpha.id
| | | | | | | | | Comment.post_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | body
| | | | | | | | createDate
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | User.roles=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Role)
| | | | | | | | Equals
| | | | | | | | | Alpha.role_id
| | | | | | | | | Role.user_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | role
| | | | | | | | NullOp
| | | | | | User.posts=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Post)
| | | | | | | | Equals
| | | | | | | | | Alpha.id
| | | | | | | | | Post.user_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | title
| | | | | | | | body
| | | | | | | | createDate
| | | | | | | | NullOp
| | | | | | | | NullOp
| | __modelattribute__post.comments
| __modelattribute__post.comments
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | "/postForm"
| | "/403"
| "/error"
analysis/Utils.java: resolveTree(): dir: ~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ condition ~~~
Equals
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | "/postForm"
| | "/403"
| "/error"
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| "/postForm"
| "/403"
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:"/error"
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: "/error"
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| "/postForm"
| "/403"
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:"/postForm"
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:"/403"
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: "/403"
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: "/postForm"
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 1
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Equals
| | MethodWontHandleOp
| | this.user.username
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| MethodWontHandleOp
| this.user.username
analysis/Utils.java: resolveTree(): i = 0 child of top:MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:this.user.username
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: this.user.username
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: MethodWontHandleOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| principal
| NullOp
analysis/Utils.java: resolveTree(): i = 0 child of top:principal
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:NullOp
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NullOp
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: principal
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| NotEq
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | EmptySet
| 0
analysis/Utils.java: resolveTree(): i = 0 child of top:NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: 0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:EmptySet
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: EmptySet
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
analysis/Utils.java: resolveTree(): i = 0 child of top:ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| FieldRef(com.reljicd.model.Post.Id)
| id
analysis/Utils.java: resolveTree(): i = 0 child of top:FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: FieldRef(com.reljicd.model.Post.Id)
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ClassRef(com.reljicd.model.Post)
analysis/Utils.java: resolveTree(): out: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | "/postForm"
| | "/403"
| "/error"
analysis/Utils.java: resolveTree(): return
DIRIfThenElseRegionAnalyzer.java: constructDIR(): IfThenElseDIR: ~~~ $r1 ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| $r1

~~~ $r1.body ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | body
| $r1.body

~~~ $r1.comments ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.comments=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.Comment)
| | | Equals
| | | | Alpha.id
| | | | Comment.post_id
| | List
| | | id
| | | body
| | | createDate
| | | Comment.post=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.post_id
| | | | | | Post.id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Comment.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.comments

~~~ $r1.createDate ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | createDate
| $r1.createDate

~~~ $r1.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | id
| $r1.id

~~~ $r1.title ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | title
| $r1.title

~~~ $r1.user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.user=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | Alpha.user_id
| | | | User.id
| | List
| | | id
| | | email
| | | password
| | | username
| | | name
| | | lastName
| | | active
| | | User.roles=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Role)
| | | | | Equals
| | | | | | Alpha.role_id
| | | | | | Role.user_id
| | | | List
| | | | | id
| | | | | role
| | | | | Role.users=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.role_id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | User.posts=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Post.user_id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.user

~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ $z1 ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| $z1

~~~ __modelattribute__post ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | __modelattribute__post
| __modelattribute__post

~~~ __modelattribute__post.body ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | body
| | __modelattribute__post.body
| __modelattribute__post.body

~~~ __modelattribute__post.comments ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Post.comments=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.reljicd.model.Post)
| | | | | Equals
| | | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | | id
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | Post.user=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | Alpha.user_id
| | | | | | | | | User.id
| | | | | | | List
| | | | | | | | id
| | | | | | | | email
| | | | | | | | password
| | | | | | | | username
| | | | | | | | name
| | | | | | | | lastName
| | | | | | | | active
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | | | Post.comments=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Comment)
| | | | | | | | Equals
| | | | | | | | | Alpha.id
| | | | | | | | | Comment.post_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | body
| | | | | | | | createDate
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | User.roles=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Role)
| | | | | | | | Equals
| | | | | | | | | Alpha.role_id
| | | | | | | | | Role.user_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | role
| | | | | | | | NullOp
| | | | | | User.posts=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Post)
| | | | | | | | Equals
| | | | | | | | | Alpha.id
| | | | | | | | | Post.user_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | title
| | | | | | | | body
| | | | | | | | createDate
| | | | | | | | NullOp
| | | | | | | | NullOp
| | __modelattribute__post.comments
| __modelattribute__post.comments

~~~ __modelattribute__post.createDate ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | createDate
| | __modelattribute__post.createDate
| __modelattribute__post.createDate

~~~ __modelattribute__post.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | id
| | __modelattribute__post.id
| __modelattribute__post.id

~~~ __modelattribute__post.title ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | title
| | __modelattribute__post.title
| __modelattribute__post.title

~~~ __modelattribute__post.user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Post.user=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.reljicd.model.Post)
| | | | | Equals
| | | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | | id
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | Role.users=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | Alpha.user_id
| | | | | | | | | User.role_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | email
| | | | | | | | password
| | | | | | | | username
| | | | | | | | name
| | | | | | | | lastName
| | | | | | | | active
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | Post.user=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | Alpha.user_id
| | | | | | | | | User.id
| | | | | | | List
| | | | | | | | id
| | | | | | | | email
| | | | | | | | password
| | | | | | | | username
| | | | | | | | name
| | | | | | | | lastName
| | | | | | | | active
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | | | Post.comments=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Comment)
| | | | | | | | Equals
| | | | | | | | | Alpha.id
| | | | | | | | | Comment.post_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | body
| | | | | | | | createDate
| | | | | | | | NullOp
| | | | | | | | NullOp
| | __modelattribute__post.user
| __modelattribute__post.user

~~~ condition ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Equals
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| Equals
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ post ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| post

~~~ post.body ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | body
| post.body

~~~ post.comments ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.comments=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.Comment)
| | | Equals
| | | | Alpha.id
| | | | Comment.post_id
| | List
| | | id
| | | body
| | | createDate
| | | Comment.post=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.post_id
| | | | | | Post.id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Comment.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| post.comments

~~~ post.createDate ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | createDate
| post.createDate

~~~ post.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | id
| post.id

~~~ post.title ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | title
| post.title

~~~ post.user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.user=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | Alpha.user_id
| | | | User.id
| | List
| | | id
| | | email
| | | password
| | | username
| | | name
| | | lastName
| | | active
| | | User.roles=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Role)
| | | | | Equals
| | | | | | Alpha.role_id
| | | | | | Role.user_id
| | | | List
| | | | | id
| | | | | role
| | | | | Role.users=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.role_id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | User.posts=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Post.user_id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| post.user

~~~ return ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | "/postForm"
| | "/403"
| "/error"

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r1 ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| $r1

~~~ $r1.body ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | body
| $r1.body

~~~ $r1.comments ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.comments=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.Comment)
| | | Equals
| | | | Alpha.id
| | | | Comment.post_id
| | List
| | | id
| | | body
| | | createDate
| | | Comment.post=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.post_id
| | | | | | Post.id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Comment.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.comments

~~~ $r1.createDate ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | createDate
| $r1.createDate

~~~ $r1.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | id
| $r1.id

~~~ $r1.title ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | title
| $r1.title

~~~ $r1.user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.user=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | Alpha.user_id
| | | | User.id
| | List
| | | id
| | | email
| | | password
| | | username
| | | name
| | | lastName
| | | active
| | | User.roles=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Role)
| | | | | Equals
| | | | | | Alpha.role_id
| | | | | | Role.user_id
| | | | List
| | | | | id
| | | | | role
| | | | | Role.users=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.role_id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | User.posts=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Post.user_id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.user

~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ $z1 ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| $z1

~~~ __modelattribute__post ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | __modelattribute__post
| __modelattribute__post

~~~ __modelattribute__post.body ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | body
| | __modelattribute__post.body
| __modelattribute__post.body

~~~ __modelattribute__post.comments ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Post.comments=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.reljicd.model.Post)
| | | | | Equals
| | | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | | id
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | Post.user=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | Alpha.user_id
| | | | | | | | | User.id
| | | | | | | List
| | | | | | | | id
| | | | | | | | email
| | | | | | | | password
| | | | | | | | username
| | | | | | | | name
| | | | | | | | lastName
| | | | | | | | active
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | | | Post.comments=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Comment)
| | | | | | | | Equals
| | | | | | | | | Alpha.id
| | | | | | | | | Comment.post_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | body
| | | | | | | | createDate
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | User.roles=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Role)
| | | | | | | | Equals
| | | | | | | | | Alpha.role_id
| | | | | | | | | Role.user_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | role
| | | | | | | | NullOp
| | | | | | User.posts=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Post)
| | | | | | | | Equals
| | | | | | | | | Alpha.id
| | | | | | | | | Post.user_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | title
| | | | | | | | body
| | | | | | | | createDate
| | | | | | | | NullOp
| | | | | | | | NullOp
| | __modelattribute__post.comments
| __modelattribute__post.comments

~~~ __modelattribute__post.createDate ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | createDate
| | __modelattribute__post.createDate
| __modelattribute__post.createDate

~~~ __modelattribute__post.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | id
| | __modelattribute__post.id
| __modelattribute__post.id

~~~ __modelattribute__post.title ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | title
| | __modelattribute__post.title
| __modelattribute__post.title

~~~ __modelattribute__post.user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Post.user=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.reljicd.model.Post)
| | | | | Equals
| | | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | | id
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | Role.users=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | Alpha.user_id
| | | | | | | | | User.role_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | email
| | | | | | | | password
| | | | | | | | username
| | | | | | | | name
| | | | | | | | lastName
| | | | | | | | active
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | Post.user=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | Alpha.user_id
| | | | | | | | | User.id
| | | | | | | List
| | | | | | | | id
| | | | | | | | email
| | | | | | | | password
| | | | | | | | username
| | | | | | | | name
| | | | | | | | lastName
| | | | | | | | active
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | | | Post.comments=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Comment)
| | | | | | | | Equals
| | | | | | | | | Alpha.id
| | | | | | | | | Comment.post_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | body
| | | | | | | | createDate
| | | | | | | | NullOp
| | | | | | | | NullOp
| | __modelattribute__post.user
| __modelattribute__post.user

~~~ condition ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Equals
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| Equals
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ post ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| post

~~~ post.body ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | body
| post.body

~~~ post.comments ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.comments=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.Comment)
| | | Equals
| | | | Alpha.id
| | | | Comment.post_id
| | List
| | | id
| | | body
| | | createDate
| | | Comment.post=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.post_id
| | | | | | Post.id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Comment.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| post.comments

~~~ post.createDate ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | createDate
| post.createDate

~~~ post.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | id
| post.id

~~~ post.title ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | title
| post.title

~~~ post.user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.user=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | Alpha.user_id
| | | | User.id
| | List
| | | id
| | | email
| | | password
| | | username
| | | name
| | | lastName
| | | active
| | | User.roles=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Role)
| | | | | Equals
| | | | | | Alpha.role_id
| | | | | | Role.user_id
| | | | List
| | | | | id
| | | | | role
| | | | | Role.users=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.role_id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | User.posts=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Post.user_id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| post.user

~~~ return ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | "/postForm"
| | "/403"
| "/error"

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r1.createDate=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | createDate
| $r1.createDate
DIR.java: updateRegion(): update region entry: post.comments=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.comments=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.Comment)
| | | Equals
| | | | Alpha.id
| | | | Comment.post_id
| | List
| | | id
| | | body
| | | createDate
| | | Comment.post=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.post_id
| | | | | | Post.id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Comment.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| post.comments
DIR.java: updateRegion(): update region entry: $r1.title=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | title
| $r1.title
DIR.java: updateRegion(): update region entry: post.id=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | id
| post.id
DIR.java: updateRegion(): update region entry: __modelattribute__post.id=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | id
| | __modelattribute__post.id
| __modelattribute__post.id
DIR.java: updateRegion(): update region entry: $r1.body=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | body
| $r1.body
DIR.java: updateRegion(): update region entry: $r1.id=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | id
| $r1.id
DIR.java: updateRegion(): update region entry: optionalPost.body=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body
DIR.java: updateRegion(): update region entry: post.title=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | title
| post.title
DIR.java: updateRegion(): update region entry: optionalPost.comments=Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: optionalPost.title=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title
DIR.java: updateRegion(): update region entry: __modelattribute__post.title=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | title
| | __modelattribute__post.title
| __modelattribute__post.title
DIR.java: updateRegion(): update region entry: post=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| post
DIR.java: updateRegion(): update region entry: post.body=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | body
| post.body
DIR.java: updateRegion(): update region entry: $z0=NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
DIR.java: updateRegion(): update region entry: $r1.comments=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.comments=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.Comment)
| | | Equals
| | | | Alpha.id
| | | | Comment.post_id
| | List
| | | id
| | | body
| | | createDate
| | | Comment.post=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.post_id
| | | | | | Post.id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Comment.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.comments
DIR.java: updateRegion(): update region entry: optionalPost.id=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id
DIR.java: updateRegion(): update region entry: $z1=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| $z1
DIR.java: updateRegion(): update region entry: __modelattribute__post=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | __modelattribute__post
| __modelattribute__post
DIR.java: updateRegion(): update region entry: optionalPost.user=Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: $r1=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| $r1
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: __modelattribute__post.body=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | body
| | __modelattribute__post.body
| __modelattribute__post.body
DIR.java: updateRegion(): update region entry: post.createDate=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | createDate
| post.createDate
DIR.java: updateRegion(): update region entry: post.user=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.user=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | Alpha.user_id
| | | | User.id
| | List
| | | id
| | | email
| | | password
| | | username
| | | name
| | | lastName
| | | active
| | | User.roles=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Role)
| | | | | Equals
| | | | | | Alpha.role_id
| | | | | | Role.user_id
| | | | List
| | | | | id
| | | | | role
| | | | | Role.users=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.role_id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | User.posts=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Post.user_id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| post.user
DIR.java: updateRegion(): update region entry: __modelattribute__post.createDate=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | createDate
| | __modelattribute__post.createDate
| __modelattribute__post.createDate
DIR.java: updateRegion(): update region entry: condition=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Equals
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| Equals
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
DIR.java: updateRegion(): update region entry: optionalPost.createDate=Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate
DIR.java: updateRegion(): update region entry: optionalPost=Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
DIR.java: updateRegion(): update region entry: $r1.user=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.user=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | Alpha.user_id
| | | | User.id
| | List
| | | id
| | | email
| | | password
| | | username
| | | name
| | | lastName
| | | active
| | | User.roles=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Role)
| | | | | Equals
| | | | | | Alpha.role_id
| | | | | | Role.user_id
| | | | List
| | | | | id
| | | | | role
| | | | | Role.users=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.role_id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | User.posts=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Post.user_id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.user
DIR.java: updateRegion(): update region entry: __modelattribute__post.user=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Post.user=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.reljicd.model.Post)
| | | | | Equals
| | | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | | id
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | Role.users=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | Alpha.user_id
| | | | | | | | | User.role_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | email
| | | | | | | | password
| | | | | | | | username
| | | | | | | | name
| | | | | | | | lastName
| | | | | | | | active
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | Post.user=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | Alpha.user_id
| | | | | | | | | User.id
| | | | | | | List
| | | | | | | | id
| | | | | | | | email
| | | | | | | | password
| | | | | | | | username
| | | | | | | | name
| | | | | | | | lastName
| | | | | | | | active
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | | | Post.comments=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Comment)
| | | | | | | | Equals
| | | | | | | | | Alpha.id
| | | | | | | | | Comment.post_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | body
| | | | | | | | createDate
| | | | | | | | NullOp
| | | | | | | | NullOp
| | __modelattribute__post.user
| __modelattribute__post.user
DIR.java: updateRegion(): update region entry: __modelattribute__post.comments=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Post.comments=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.reljicd.model.Post)
| | | | | Equals
| | | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | | id
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | Post.user=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | Alpha.user_id
| | | | | | | | | User.id
| | | | | | | List
| | | | | | | | id
| | | | | | | | email
| | | | | | | | password
| | | | | | | | username
| | | | | | | | name
| | | | | | | | lastName
| | | | | | | | active
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | | | Post.comments=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Comment)
| | | | | | | | Equals
| | | | | | | | | Alpha.id
| | | | | | | | | Comment.post_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | body
| | | | | | | | createDate
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | User.roles=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Role)
| | | | | | | | Equals
| | | | | | | | | Alpha.role_id
| | | | | | | | | Role.user_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | role
| | | | | | | | NullOp
| | | | | | User.posts=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Post)
| | | | | | | | Equals
| | | | | | | | | Alpha.id
| | | | | | | | | Post.user_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | title
| | | | | | | | body
| | | | | | | | createDate
| | | | | | | | NullOp
| | | | | | | | NullOp
| | __modelattribute__post.comments
| __modelattribute__post.comments
DIR.java: updateRegion(): update region entry: return=?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | "/postForm"
| | "/403"
| "/error"
Resultant dag : ~~~ $r1 ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| $r1

~~~ $r1.body ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | body
| $r1.body

~~~ $r1.comments ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.comments=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.Comment)
| | | Equals
| | | | Alpha.id
| | | | Comment.post_id
| | List
| | | id
| | | body
| | | createDate
| | | Comment.post=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.post_id
| | | | | | Post.id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Comment.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.comments

~~~ $r1.createDate ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | createDate
| $r1.createDate

~~~ $r1.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | id
| $r1.id

~~~ $r1.title ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | title
| $r1.title

~~~ $r1.user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.user=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | Alpha.user_id
| | | | User.id
| | List
| | | id
| | | email
| | | password
| | | username
| | | name
| | | lastName
| | | active
| | | User.roles=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Role)
| | | | | Equals
| | | | | | Alpha.role_id
| | | | | | Role.user_id
| | | | List
| | | | | id
| | | | | role
| | | | | Role.users=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.role_id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | User.posts=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Post.user_id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.user

~~~ $z0 ~~~
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

~~~ $z1 ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| $z1

~~~ __modelattribute__post ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | __modelattribute__post
| __modelattribute__post

~~~ __modelattribute__post.body ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | body
| | __modelattribute__post.body
| __modelattribute__post.body

~~~ __modelattribute__post.comments ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Post.comments=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.reljicd.model.Post)
| | | | | Equals
| | | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | | id
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | Post.user=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | Alpha.user_id
| | | | | | | | | User.id
| | | | | | | List
| | | | | | | | id
| | | | | | | | email
| | | | | | | | password
| | | | | | | | username
| | | | | | | | name
| | | | | | | | lastName
| | | | | | | | active
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | | | Post.comments=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Comment)
| | | | | | | | Equals
| | | | | | | | | Alpha.id
| | | | | | | | | Comment.post_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | body
| | | | | | | | createDate
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | User.roles=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Role)
| | | | | | | | Equals
| | | | | | | | | Alpha.role_id
| | | | | | | | | Role.user_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | role
| | | | | | | | NullOp
| | | | | | User.posts=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Post)
| | | | | | | | Equals
| | | | | | | | | Alpha.id
| | | | | | | | | Post.user_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | title
| | | | | | | | body
| | | | | | | | createDate
| | | | | | | | NullOp
| | | | | | | | NullOp
| | __modelattribute__post.comments
| __modelattribute__post.comments

~~~ __modelattribute__post.createDate ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | createDate
| | __modelattribute__post.createDate
| __modelattribute__post.createDate

~~~ __modelattribute__post.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | id
| | __modelattribute__post.id
| __modelattribute__post.id

~~~ __modelattribute__post.title ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | title
| | __modelattribute__post.title
| __modelattribute__post.title

~~~ __modelattribute__post.user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Post.user=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.reljicd.model.Post)
| | | | | Equals
| | | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | | id
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | Role.users=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | Alpha.user_id
| | | | | | | | | User.role_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | email
| | | | | | | | password
| | | | | | | | username
| | | | | | | | name
| | | | | | | | lastName
| | | | | | | | active
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | Post.user=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | Alpha.user_id
| | | | | | | | | User.id
| | | | | | | List
| | | | | | | | id
| | | | | | | | email
| | | | | | | | password
| | | | | | | | username
| | | | | | | | name
| | | | | | | | lastName
| | | | | | | | active
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | | | Post.comments=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Comment)
| | | | | | | | Equals
| | | | | | | | | Alpha.id
| | | | | | | | | Comment.post_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | body
| | | | | | | | createDate
| | | | | | | | NullOp
| | | | | | | | NullOp
| | __modelattribute__post.user
| __modelattribute__post.user

~~~ condition ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Equals
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| Equals
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0

~~~ optionalPost ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ optionalPost.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ optionalPost.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalPost.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ optionalPost.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ optionalPost.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ optionalPost.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ post ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| post

~~~ post.body ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | body
| post.body

~~~ post.comments ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.comments=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.Comment)
| | | Equals
| | | | Alpha.id
| | | | Comment.post_id
| | List
| | | id
| | | body
| | | createDate
| | | Comment.post=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.post_id
| | | | | | Post.id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Comment.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| post.comments

~~~ post.createDate ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | createDate
| post.createDate

~~~ post.id ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | id
| post.id

~~~ post.title ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | title
| post.title

~~~ post.user ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.user=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | Alpha.user_id
| | | | User.id
| | List
| | | id
| | | email
| | | password
| | | username
| | | name
| | | lastName
| | | active
| | | User.roles=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Role)
| | | | | Equals
| | | | | | Alpha.role_id
| | | | | | Role.user_id
| | | | List
| | | | | id
| | | | | role
| | | | | Role.users=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.role_id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | User.posts=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Post.user_id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| post.user

~~~ return ~~~
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | "/postForm"
| | "/403"
| "/error"

~~~ this ~~~
Self


final FuncStackAnalyzer3 = 
{com.reljicd.model.Post: com.reljicd.model.User getUser()=~~~ $r0 ~~~
this.user

~~~ $r0.active ~~~
this.user.active

~~~ $r0.email ~~~
this.user.email

~~~ $r0.id ~~~
this.user.id

~~~ $r0.lastName ~~~
this.user.lastName

~~~ $r0.name ~~~
this.user.name

~~~ $r0.password ~~~
this.user.password

~~~ $r0.posts ~~~
this.user.posts

~~~ $r0.roles ~~~
this.user.roles

~~~ $r0.username ~~~
this.user.username

~~~ return ~~~
this.user

~~~ return ~~~
this.user

~~~ return.active ~~~
this.user.active

~~~ return.email ~~~
this.user.email

~~~ return.id ~~~
this.user.id

~~~ return.lastName ~~~
this.user.lastName

~~~ return.name ~~~
this.user.name

~~~ return.password ~~~
this.user.password

~~~ return.posts ~~~
this.user.posts

~~~ return.roles ~~~
this.user.roles

~~~ return.username ~~~
this.user.username

~~~ this ~~~
Self

, com.reljicd.controller.PostController: boolean isPrincipalOwnerOfPost(java.security.Principal,com.reljicd.model.Post)=~~~ $r0 ~~~
?
| NotEq
| | principal
| | NullOp
| MethodWontHandleOp
| $r0

~~~ $r1 ~~~
?
| NotEq
| | principal
| | NullOp
| post.user
| $r1

~~~ $r1.active ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.active
| $r1.active

~~~ $r1.email ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.email
| $r1.email

~~~ $r1.id ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.id
| $r1.id

~~~ $r1.lastName ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.lastName
| $r1.lastName

~~~ $r1.name ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.name
| $r1.name

~~~ $r1.password ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.password
| $r1.password

~~~ $r1.posts ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.posts
| $r1.posts

~~~ $r1.roles ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.roles
| $r1.roles

~~~ $r1.username ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r1.username

~~~ $r2 ~~~
?
| NotEq
| | principal
| | NullOp
| this.user.username
| $r2

~~~ $z0 ~~~
?
| NotEq
| | principal
| | NullOp
| Equals
| | MethodWontHandleOp
| | this.user.username
| $z0

~~~ $z1 ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ condition ~~~
?
| NotEq
| | principal
| | NullOp
| NotEq
| | Equals
| | | MethodWontHandleOp
| | | this.user.username
| | 0
| 0

~~~ return ~~~
?
| ?
| | NotEq
| | | principal
| | | NullOp
| | NotEq
| | | Equals
| | | | MethodWontHandleOp
| | | | this.user.username
| | | 0
| | 0
| 1
| 0

~~~ this ~~~
Self

, java.util.Optional: java.lang.Object get()=~~~ optionalret ~~~
optionalPost

~~~ return ~~~
optionalPost

~~~ return.body ~~~
optionalPost.body

~~~ return.comments ~~~
optionalPost.comments

~~~ return.createDate ~~~
optionalPost.createDate

~~~ return.id ~~~
optionalPost.id

~~~ return.title ~~~
optionalPost.title

~~~ return.user ~~~
optionalPost.user

, com.reljicd.model.User: java.lang.String getUsername()=~~~ $r0 ~~~
this.username

~~~ return ~~~
this.username

~~~ this ~~~
Self

, com.reljicd.service.impl.PostServiceImp: java.util.Optional findForId(java.lang.Long)=~~~ $r0 ~~~
this.postRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ $r1.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ $r1.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ $r1.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ $r1.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ return.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ return.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ return.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ this ~~~
Self

, com.reljicd.repository.PostRepository: java.util.Optional findById(java.lang.Long)=~~~ optionalret ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return ~~~
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

~~~ return.body ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

~~~ return.comments ~~~
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.createDate ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

~~~ return.title ~~~
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

~~~ return.user ~~~
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

~~~ return.user.active ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.active)

~~~ return.user.email ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.email)

~~~ return.user.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.id)

~~~ return.user.lastName ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.lastName)

~~~ return.user.name ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.name)

~~~ return.user.password ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.password)

~~~ return.user.posts ~~~
Join
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| ClassRef(com.reljicd.model.Post)
| NullOp

~~~ return.user.roles ~~~
Join
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| ClassRef(com.reljicd.model.Role)
| NullOp

~~~ return.user.username ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | NullOp
| FieldRef(com.reljicd.model.User.username)

}
FuncStackAnalyzer.java: constructDIRForStack(): Printing veMap for method: com.reljicd.controller.PostController: java.lang.String editPostWithId(java.lang.Long,java.security.Principal,org.springframework.ui.Model)
FuncStackAnalyzer.java: constructDIRForStack(): VEMap Num Entries: 33
FuncStackAnalyzer.java: constructDIRForStack(): key set of ve map of root function: [$r1.createDate, post.comments, $r1.title, post.id, __modelattribute__post.id, $r1.body, $r1.id, optionalPost.body, post.title, optionalPost.comments, optionalPost.title, __modelattribute__post.title, post, post.body, $z0, $r1.comments, optionalPost.id, $z1, __modelattribute__post, optionalPost.user, $r1, this, __modelattribute__post.body, post.createDate, post.user, __modelattribute__post.createDate, condition, optionalPost.createDate, optionalPost, $r1.user, __modelattribute__post.user, __modelattribute__post.comments, return]
Final veMap of $r1.createDate = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | createDate
| $r1.createDate
SavePostProcess.java: SavePostProcess(): repo varnode: $r1.createDate
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of post.comments = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.comments=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.Comment)
| | | Equals
| | | | Alpha.id
| | | | Comment.post_id
| | List
| | | id
| | | body
| | | createDate
| | | Comment.post=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.post_id
| | | | | | Post.id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Comment.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| post.comments
SavePostProcess.java: SavePostProcess(): repo varnode: post.comments
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r1.title = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | title
| $r1.title
SavePostProcess.java: SavePostProcess(): repo varnode: $r1.title
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of post.id = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | id
| post.id
SavePostProcess.java: SavePostProcess(): repo varnode: post.id
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__post.id = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | id
| | __modelattribute__post.id
| __modelattribute__post.id
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__post.id
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r1.body = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | body
| $r1.body
SavePostProcess.java: SavePostProcess(): repo varnode: $r1.body
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r1.id = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | id
| $r1.id
SavePostProcess.java: SavePostProcess(): repo varnode: $r1.id
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of optionalPost.body = 
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body
SavePostProcess.java: SavePostProcess(): repo varnode: optionalPost.body
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of post.title = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | title
| post.title
SavePostProcess.java: SavePostProcess(): repo varnode: post.title
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of optionalPost.comments = 
Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
SavePostProcess.java: SavePostProcess(): repo varnode: optionalPost.comments
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of optionalPost.title = 
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title
SavePostProcess.java: SavePostProcess(): repo varnode: optionalPost.title
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__post.title = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | title
| | __modelattribute__post.title
| __modelattribute__post.title
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__post.title
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of post = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| post
SavePostProcess.java: SavePostProcess(): repo varnode: post
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of post.body = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | body
| post.body
SavePostProcess.java: SavePostProcess(): repo varnode: post.body
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $z0 = 
NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet
SavePostProcess.java: SavePostProcess(): repo varnode: $z0
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r1.comments = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.comments=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.Comment)
| | | Equals
| | | | Alpha.id
| | | | Comment.post_id
| | List
| | | id
| | | body
| | | createDate
| | | Comment.post=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.post_id
| | | | | | Post.id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Comment.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.comments
SavePostProcess.java: SavePostProcess(): repo varnode: $r1.comments
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of optionalPost.id = 
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id
SavePostProcess.java: SavePostProcess(): repo varnode: optionalPost.id
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $z1 = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| $z1
SavePostProcess.java: SavePostProcess(): repo varnode: $z1
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__post = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | __modelattribute__post
| __modelattribute__post
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__post
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of optionalPost.user = 
Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
SavePostProcess.java: SavePostProcess(): repo varnode: optionalPost.user
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r1 = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| $r1
SavePostProcess.java: SavePostProcess(): repo varnode: $r1
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of this = 
Self
SavePostProcess.java: SavePostProcess(): repo varnode: this
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__post.body = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | body
| | __modelattribute__post.body
| __modelattribute__post.body
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__post.body
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of post.createDate = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | createDate
| post.createDate
SavePostProcess.java: SavePostProcess(): repo varnode: post.createDate
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of post.user = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.user=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | Alpha.user_id
| | | | User.id
| | List
| | | id
| | | email
| | | password
| | | username
| | | name
| | | lastName
| | | active
| | | User.roles=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Role)
| | | | | Equals
| | | | | | Alpha.role_id
| | | | | | Role.user_id
| | | | List
| | | | | id
| | | | | role
| | | | | Role.users=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.role_id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | User.posts=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Post.user_id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| post.user
SavePostProcess.java: SavePostProcess(): repo varnode: post.user
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__post.createDate = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | createDate
| | __modelattribute__post.createDate
| __modelattribute__post.createDate
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__post.createDate
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of condition = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Equals
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| Equals
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
SavePostProcess.java: SavePostProcess(): repo varnode: condition
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of optionalPost.createDate = 
Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate
SavePostProcess.java: SavePostProcess(): repo varnode: optionalPost.createDate
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of optionalPost = 
Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id
SavePostProcess.java: SavePostProcess(): repo varnode: optionalPost
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r1.user = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.user=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | Alpha.user_id
| | | | User.id
| | List
| | | id
| | | email
| | | password
| | | username
| | | name
| | | lastName
| | | active
| | | User.roles=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Role)
| | | | | Equals
| | | | | | Alpha.role_id
| | | | | | Role.user_id
| | | | List
| | | | | id
| | | | | role
| | | | | Role.users=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.role_id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | User.posts=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Post.user_id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.user
SavePostProcess.java: SavePostProcess(): repo varnode: $r1.user
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__post.user = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Post.user=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.reljicd.model.Post)
| | | | | Equals
| | | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | | id
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | Role.users=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | Alpha.user_id
| | | | | | | | | User.role_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | email
| | | | | | | | password
| | | | | | | | username
| | | | | | | | name
| | | | | | | | lastName
| | | | | | | | active
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | Post.user=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | Alpha.user_id
| | | | | | | | | User.id
| | | | | | | List
| | | | | | | | id
| | | | | | | | email
| | | | | | | | password
| | | | | | | | username
| | | | | | | | name
| | | | | | | | lastName
| | | | | | | | active
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | | | Post.comments=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Comment)
| | | | | | | | Equals
| | | | | | | | | Alpha.id
| | | | | | | | | Comment.post_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | body
| | | | | | | | createDate
| | | | | | | | NullOp
| | | | | | | | NullOp
| | __modelattribute__post.user
| __modelattribute__post.user
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__post.user
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of __modelattribute__post.comments = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Post.comments=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.reljicd.model.Post)
| | | | | Equals
| | | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | | id
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | Post.user=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | Alpha.user_id
| | | | | | | | | User.id
| | | | | | | List
| | | | | | | | id
| | | | | | | | email
| | | | | | | | password
| | | | | | | | username
| | | | | | | | name
| | | | | | | | lastName
| | | | | | | | active
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | | | Post.comments=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Comment)
| | | | | | | | Equals
| | | | | | | | | Alpha.id
| | | | | | | | | Comment.post_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | body
| | | | | | | | createDate
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | User.roles=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Role)
| | | | | | | | Equals
| | | | | | | | | Alpha.role_id
| | | | | | | | | Role.user_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | role
| | | | | | | | NullOp
| | | | | | User.posts=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Post)
| | | | | | | | Equals
| | | | | | | | | Alpha.id
| | | | | | | | | Post.user_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | title
| | | | | | | | body
| | | | | | | | createDate
| | | | | | | | NullOp
| | | | | | | | NullOp
| | __modelattribute__post.comments
| __modelattribute__post.comments
SavePostProcess.java: SavePostProcess(): repo varnode: __modelattribute__post.comments
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of return = 
?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | "/postForm"
| | "/403"
| "/error"
SavePostProcess.java: SavePostProcess(): repo varnode: return
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
key: $r1.createDate
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | createDate
| $r1.createDate

key: post.comments
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.comments=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.Comment)
| | | Equals
| | | | Alpha.id
| | | | Comment.post_id
| | List
| | | id
| | | body
| | | createDate
| | | Comment.post=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.post_id
| | | | | | Post.id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Comment.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| post.comments

key: $r1.title
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | title
| $r1.title

key: post.id
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | id
| post.id

key: __modelattribute__post.id
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | id
| | __modelattribute__post.id
| __modelattribute__post.id

key: $r1.body
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | body
| $r1.body

key: $r1.id
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | id
| $r1.id

key: optionalPost.body
value: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| body

key: post.title
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | title
| post.title

key: optionalPost.comments
value: Post.comments=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.Comment)
| | Equals
| | | Alpha.id
| | | Comment.post_id
| List
| | id
| | body
| | createDate
| | Comment.post=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.post_id
| | | | | Post.id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp
| | Comment.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

key: optionalPost.title
value: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| title

key: __modelattribute__post.title
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | title
| | __modelattribute__post.title
| __modelattribute__post.title

key: post
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| post

key: post.body
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | body
| post.body

key: $z0
value: NotEq
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| EmptySet

key: $r1.comments
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.comments=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.Comment)
| | | Equals
| | | | Alpha.id
| | | | Comment.post_id
| | List
| | | id
| | | body
| | | createDate
| | | Comment.post=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.post_id
| | | | | | Post.id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| | | Comment.user=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(User)
| | | | | Equals
| | | | | | Alpha.user_id
| | | | | | User.id
| | | | List
| | | | | id
| | | | | email
| | | | | password
| | | | | username
| | | | | name
| | | | | lastName
| | | | | active
| | | | | User.roles=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Role)
| | | | | | | Equals
| | | | | | | | Alpha.role_id
| | | | | | | | Role.user_id
| | | | | | List
| | | | | | | id
| | | | | | | role
| | | | | | | NullOp
| | | | | User.posts=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Post)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Post.user_id
| | | | | | List
| | | | | | | id
| | | | | | | title
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.comments

key: optionalPost.id
value: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| id

key: $z1
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | ?
| | | NotEq
| | | | principal
| | | | NullOp
| | | NotEq
| | | | Equals
| | | | | MethodWontHandleOp
| | | | | this.user.username
| | | | 0
| | | 0
| | 1
| | 0
| $z1

key: __modelattribute__post
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | __modelattribute__post
| __modelattribute__post

key: optionalPost.user
value: Post.user=Pi
| Join
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | ClassRef(com.reljicd.model.User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | email
| | password
| | username
| | name
| | lastName
| | active
| | User.roles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Role)
| | | | Equals
| | | | | Alpha.role_id
| | | | | Role.user_id
| | | List
| | | | id
| | | | role
| | | | Role.users=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.role_id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | User.posts=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Post)
| | | | Equals
| | | | | Alpha.id
| | | | | Post.user_id
| | | List
| | | | id
| | | | title
| | | | body
| | | | createDate
| | | | Post.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | NullOp
| | | | | | NullOp
| | | | Post.comments=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Comment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Comment.post_id
| | | | | List
| | | | | | id
| | | | | | body
| | | | | | createDate
| | | | | | NullOp
| | | | | | NullOp

key: $r1
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| $r1

key: this
value: Self

key: __modelattribute__post.body
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | body
| | __modelattribute__post.body
| __modelattribute__post.body

key: post.createDate
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Pi
| | Sel
| | | ClassRef(com.reljicd.model.Post)
| | | Equals
| | | | FieldRef(com.reljicd.model.Post.Id)
| | | | id
| | createDate
| post.createDate

key: post.user
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.user=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | Alpha.user_id
| | | | User.id
| | List
| | | id
| | | email
| | | password
| | | username
| | | name
| | | lastName
| | | active
| | | User.roles=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Role)
| | | | | Equals
| | | | | | Alpha.role_id
| | | | | | Role.user_id
| | | | List
| | | | | id
| | | | | role
| | | | | Role.users=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.role_id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | User.posts=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Post.user_id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| post.user

key: __modelattribute__post.createDate
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Pi
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | createDate
| | __modelattribute__post.createDate
| __modelattribute__post.createDate

key: condition
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Equals
| | ?
| | | ?
| | | | NotEq
| | | | | principal
| | | | | NullOp
| | | | NotEq
| | | | | Equals
| | | | | | MethodWontHandleOp
| | | | | | this.user.username
| | | | | 0
| | | | 0
| | | 1
| | | 0
| | 0
| Equals
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0

key: optionalPost.createDate
value: Pi
| Sel
| | ClassRef(com.reljicd.model.Post)
| | Equals
| | | FieldRef(com.reljicd.model.Post.Id)
| | | id
| createDate

key: optionalPost
value: Sel
| ClassRef(com.reljicd.model.Post)
| Equals
| | FieldRef(com.reljicd.model.Post.Id)
| | id

key: $r1.user
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| Post.user=Pi
| | Join
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | ClassRef(com.reljicd.model.User)
| | | Equals
| | | | Alpha.user_id
| | | | User.id
| | List
| | | id
| | | email
| | | password
| | | username
| | | name
| | | lastName
| | | active
| | | User.roles=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Role)
| | | | | Equals
| | | | | | Alpha.role_id
| | | | | | Role.user_id
| | | | List
| | | | | id
| | | | | role
| | | | | Role.users=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.role_id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | User.posts=Pi
| | | | Join
| | | | | Alpha
| | | | | ClassRef(Post)
| | | | | Equals
| | | | | | Alpha.id
| | | | | | Post.user_id
| | | | List
| | | | | id
| | | | | title
| | | | | body
| | | | | createDate
| | | | | Post.user=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(User)
| | | | | | | Equals
| | | | | | | | Alpha.user_id
| | | | | | | | User.id
| | | | | | List
| | | | | | | id
| | | | | | | email
| | | | | | | password
| | | | | | | username
| | | | | | | name
| | | | | | | lastName
| | | | | | | active
| | | | | | | NullOp
| | | | | | | NullOp
| | | | | Post.comments=Pi
| | | | | | Join
| | | | | | | Alpha
| | | | | | | ClassRef(Comment)
| | | | | | | Equals
| | | | | | | | Alpha.id
| | | | | | | | Comment.post_id
| | | | | | List
| | | | | | | id
| | | | | | | body
| | | | | | | createDate
| | | | | | | NullOp
| | | | | | | NullOp
| $r1.user

key: __modelattribute__post.user
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Post.user=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.reljicd.model.Post)
| | | | | Equals
| | | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | | id
| | | | ClassRef(com.reljicd.model.User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | email
| | | | password
| | | | username
| | | | name
| | | | lastName
| | | | active
| | | | User.roles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Role)
| | | | | | Equals
| | | | | | | Alpha.role_id
| | | | | | | Role.user_id
| | | | | List
| | | | | | id
| | | | | | role
| | | | | | Role.users=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | Alpha.user_id
| | | | | | | | | User.role_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | email
| | | | | | | | password
| | | | | | | | username
| | | | | | | | name
| | | | | | | | lastName
| | | | | | | | active
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | User.posts=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Post.user_id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | Post.user=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | Alpha.user_id
| | | | | | | | | User.id
| | | | | | | List
| | | | | | | | id
| | | | | | | | email
| | | | | | | | password
| | | | | | | | username
| | | | | | | | name
| | | | | | | | lastName
| | | | | | | | active
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | | | Post.comments=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Comment)
| | | | | | | | Equals
| | | | | | | | | Alpha.id
| | | | | | | | | Comment.post_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | body
| | | | | | | | createDate
| | | | | | | | NullOp
| | | | | | | | NullOp
| | __modelattribute__post.user
| __modelattribute__post.user

key: __modelattribute__post.comments
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | Post.comments=Pi
| | | Join
| | | | Sel
| | | | | ClassRef(com.reljicd.model.Post)
| | | | | Equals
| | | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | | id
| | | | ClassRef(com.reljicd.model.Comment)
| | | | Equals
| | | | | Alpha.id
| | | | | Comment.post_id
| | | List
| | | | id
| | | | body
| | | | createDate
| | | | Comment.post=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Post)
| | | | | | Equals
| | | | | | | Alpha.post_id
| | | | | | | Post.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | body
| | | | | | createDate
| | | | | | Post.user=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(User)
| | | | | | | | Equals
| | | | | | | | | Alpha.user_id
| | | | | | | | | User.id
| | | | | | | List
| | | | | | | | id
| | | | | | | | email
| | | | | | | | password
| | | | | | | | username
| | | | | | | | name
| | | | | | | | lastName
| | | | | | | | active
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | | | Post.comments=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Comment)
| | | | | | | | Equals
| | | | | | | | | Alpha.id
| | | | | | | | | Comment.post_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | body
| | | | | | | | createDate
| | | | | | | | NullOp
| | | | | | | | NullOp
| | | | Comment.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | email
| | | | | | password
| | | | | | username
| | | | | | name
| | | | | | lastName
| | | | | | active
| | | | | | User.roles=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Role)
| | | | | | | | Equals
| | | | | | | | | Alpha.role_id
| | | | | | | | | Role.user_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | role
| | | | | | | | NullOp
| | | | | | User.posts=Pi
| | | | | | | Join
| | | | | | | | Alpha
| | | | | | | | ClassRef(Post)
| | | | | | | | Equals
| | | | | | | | | Alpha.id
| | | | | | | | | Post.user_id
| | | | | | | List
| | | | | | | | id
| | | | | | | | title
| | | | | | | | body
| | | | | | | | createDate
| | | | | | | | NullOp
| | | | | | | | NullOp
| | __modelattribute__post.comments
| __modelattribute__post.comments

key: return
value: ?
| NotEq
| | NotEq
| | | Sel
| | | | ClassRef(com.reljicd.model.Post)
| | | | Equals
| | | | | FieldRef(com.reljicd.model.Post.Id)
| | | | | id
| | | EmptySet
| | 0
| ?
| | NotEq
| | | ?
| | | | ?
| | | | | NotEq
| | | | | | principal
| | | | | | NullOp
| | | | | NotEq
| | | | | | Equals
| | | | | | | MethodWontHandleOp
| | | | | | | this.user.username
| | | | | | 0
| | | | | 0
| | | | 1
| | | | 0
| | | 0
| | "/postForm"
| | "/403"
| "/error"





























 Node contains nested fields
Inside generateNestedJoinSummary
 Node contains nested fields
Inside generateNestedJoinSummary
Time elapsed: 1.712 seconds
