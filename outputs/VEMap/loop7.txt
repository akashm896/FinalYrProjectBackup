EqSQLDriverTest.java: main(): Got the bench-dir option value: target/classes
EqSQLDriverTest.java: main(): Got the controllersig option value: com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])
github/Utils.java: getAbsBenchDir(): pwd: /home/akash/Desktop/FinalYrProjectBackup-LoopHandler
starttime, test: 1664715211185
EqSQLDriver.java: doSetEntryPoints: inputPath is target/classes
Warning: java.lang.Object is a phantom class!
Warning: java.lang.Long is a phantom class!
Warning: org.springframework.beans.factory.annotation.Autowired is a phantom class!
Warning: org.springframework.web.bind.annotation.RequestMapping is a phantom class!
Warning: java.util.Set is a phantom class!
Warning: org.springframework.stereotype.Controller is a phantom class!
Warning: org.springframework.web.bind.annotation.ResponseBody is a phantom class!
Warning: java.lang.Iterable is a phantom class!
Warning: java.io.Serializable is a phantom class!
Warning: java.util.HashSet is a phantom class!
Warning: org.springframework.ui.Model is a phantom class!
Warning: java.lang.String is a phantom class!
Warning: org.springframework.data.repository.CrudRepository is a phantom class!
Warning: javax.persistence.Entity is a phantom class!
Warning: javax.persistence.GeneratedValue is a phantom class!
Warning: java.lang.Double is a phantom class!
Warning: javax.persistence.Id is a phantom class!
Warning: javax.persistence.JoinTable is a phantom class!
Warning: javax.persistence.OneToOne is a phantom class!
Warning: javax.persistence.ManyToMany is a phantom class!
Warning: java.lang.Throwable is a phantom class!
Warning: java.lang.Void is a phantom class!
Warning: java.lang.Float is a phantom class!
Warning: java.lang.AssertionError is a phantom class!
Warning: java.lang.Integer is a phantom class!
Warning: java.lang.NullPointerException is a phantom class!
Warning: java.lang.Character is a phantom class!
Warning: java.lang.Short is a phantom class!
Warning: java.lang.StringBuffer is a phantom class!
Warning: java.lang.Boolean is a phantom class!
Warning: java.lang.Class is a phantom class!
Warning: java.lang.Byte is a phantom class!
Warning: java.lang.NoClassDefFoundError is a phantom class!
Warning: java.lang.IndexOutOfBoundsException is a phantom class!
Warning: java.lang.StackOverflowError is a phantom class!
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
Warning: java.lang.Error is a phantom class!
Warning: java.lang.AbstractMethodError is a phantom class!
Warning: java.lang.ClassCastException is a phantom class!
Warning: java.lang.Runnable is a phantom class!
Warning: java.lang.VerifyError is a phantom class!
Warning: java.lang.NoSuchFieldError is a phantom class!
Warning: java.lang.IllegalMonitorStateException is a phantom class!
Warning: java.lang.Thread is a phantom class!
Warning: java.lang.UnknownError is a phantom class!
Warning: java.lang.InternalError is a phantom class!
Warning: java.lang.ArithmeticException is a phantom class!
Warning: java.lang.NegativeArraySizeException is a phantom class!
Warning: java.lang.ClassCircularityError is a phantom class!
Warning: java.lang.Cloneable is a phantom class!
Warning: java.lang.ref.Finalizer is a phantom class!
Warning: java.lang.LinkageError is a phantom class!
Warning: java.lang.IncompatibleClassChangeError is a phantom class!
Warning: java.lang.NoSuchMethodError is a phantom class!
Warning: java.lang.RuntimeException is a phantom class!
Warning: java.lang.ArrayIndexOutOfBoundsException is a phantom class!
Warning: java.lang.ThreadDeath is a phantom class!
Warning: java.lang.InstantiationError is a phantom class!
Warning: java.lang.IllegalAccessError is a phantom class!
Warning: java.lang.ClassNotFoundException is a phantom class!
Warning: java.lang.ClassFormatError is a phantom class!
Warning: java.lang.UnsatisfiedLinkError is a phantom class!
Warning: java.lang.ArrayStoreException is a phantom class!
Warning: java.lang.ExceptionInInitializerError is a phantom class!
Warning: java.lang.OutOfMemoryError is a phantom class!
patternMatch.java: getUserInputRules: i=0
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? <cond> (save <repo> <list1>) (save <repo> <list2>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (- <init_val> <coll>) (union (pi (select <coll> <cond>) <list1>) (pi (select <coll> (= <cond> 0)) <list2>)))
Fold
| FuncExpr
| | Ternary
| | | Any
| | | Save
| | | | Any
| | | | Any
| | | Save
| | | | Any
| | | | Any
| Any
| Any
| Any


Union
| RelMinus
| | Id:10
| | Id:11
| Union
| | Project
| | | Select
| | | | Id:11
| | | | Id:3
| | | Id:6
| | Project
| | | Select
| | | | Id:11
| | | | Eq
| | | | | Id:3
| | | | | Zero
| | | Id:9

{<repo>=8, <list2>=9, <cond>=3, <list1>=6, <init_val>=10, <itr>=12, <coll>=11}
patternMatch.java: getUserInputRules: i=2
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? <cond> (add_all_fields <list>) <elseval>)) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (pi (select <coll> <cond>) <list>) <init_val>)
Fold
| FuncExpr
| | Ternary
| | | Any
| | | AddWithFieldExprs
| | | | Any
| | | Any
| Any
| Any
| Any


Union
| Project
| | Select
| | | Id:21
| | | Id:16
| | Id:18
| Id:20

{<list>=18, <elseval>=19, <repo>=8, <list2>=9, <cond>=16, <list1>=6, <init_val>=20, <itr>=22, <coll>=21}
patternMatch.java: getUserInputRules: i=4
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (save <repo> (tuple (join next <join_right>) <list>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (- <repo> (select <repo> (in id (pi (join <coll> <join_right>) id)))) (pi <list> (join <coll> <join_right>)))
Fold
| FuncExpr
| | Save
| | | Any
| | | Tuple
| | | | Join
| | | | | Iterator
| | | | | Any
| | | | Any
| Any
| Any
| Any


Union
| RelMinus
| | Id:26
| | Select
| | | Id:26
| | | In
| | | | Id
| | | | Project
| | | | | Join
| | | | | | Id:33
| | | | | | Id:30
| | | | | Id
| Project
| | Id:31
| | Join
| | | Id:33
| | | Id:30

{<list>=31, <elseval>=19, <repo>=26, <list2>=9, <cond>=16, <list1>=6, <init_val>=32, <join_right>=30, <itr>=34, <coll>=33}
patternMatch.java: getUserInputRules: i=6
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (add_all_fields <receiver> (tuple (select <rel> (= <clm> <itr>)) <list>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (pi <list> (select <rel> (in <clm> <coll>))) <init_val>)
Fold
| FuncExpr
| | AddWithFieldExprs
| | | Any
| | | Tuple
| | | | Select
| | | | | Any
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | Any
| Any
| Any
| Any


Union
| Project
| | Id:45
| | Select
| | | Id:41
| | | In
| | | | Id:43
| | | | Id:47
| Id:46

{<list>=45, <rel>=41, <repo>=26, <cond>=16, <clm>=43, <init_val>=46, <join_right>=30, <itr>=48, <receiver>=38, <elseval>=19, <list2>=9, <list1>=6, <coll>=47}
patternMatch.java: getUserInputRules: i=8
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (+ <aggvar> (pi (select <rel> (= <clm> <itr>)) <clmagg>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (+ (agg_sum (select <rel> (in <clm> <coll>)) <clmagg>) <init_val>)
Fold
| FuncExpr
| | ArithAdd
| | | Any
| | | Project
| | | | Select
| | | | | Any
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | Any
| Any
| Any
| Any


ArithAdd
| AggSum
| | Select
| | | Id:55
| | | In
| | | | Id:57
| | | | Id:61
| | Id:59
| Id:60

{<list>=45, <rel>=55, <repo>=26, <cond>=16, <clm>=57, <init_val>=60, <join_right>=30, <itr>=62, <clmagg>=59, <receiver>=38, <aggvar>=52, <elseval>=19, <list2>=9, <list1>=6, <coll>=61}
ServiceAllocTransform.java: internalTransform(): methodsig: <com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: saveOrder
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.shakeel.controller.OrdersController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.shakeel
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String saveOrder(java.lang.String, java.lang.String, java.lang.Long[])
    {
        com.shakeel.controller.OrdersController this;
        java.lang.String firstName, lastName;
        java.lang.Long[] productIds, l7;
        com.shakeel.model.Customer customer, $r0, $r7;
        com.shakeel.model.CustomerOrder customerOrder, $r3;
        java.util.HashSet productSet, $r8;
        int l8, l9;
        java.lang.Long productId, $r5;
        com.shakeel.repository.CustomerRepository $r1, $r4;
        long $l0;
        java.lang.Object $r6, $r10;
        com.shakeel.repository.ProductRepository $r9;
        com.shakeel.model.Product $r11;

        this := @this: com.shakeel.controller.OrdersController;

        firstName := @parameter0: java.lang.String;

        lastName := @parameter1: java.lang.String;

        productIds := @parameter2: java.lang.Long[];

        $r0 = new com.shakeel.model.Customer;

        specialinvoke $r0.<com.shakeel.model.Customer: void <init>()>();

        customer = $r0;

        virtualinvoke customer.<com.shakeel.model.Customer: void setFirstName(java.lang.String)>(firstName);

        virtualinvoke customer.<com.shakeel.model.Customer: void setLastName(java.lang.String)>(lastName);

        $r1 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>;

        interfaceinvoke $r1.<com.shakeel.repository.CustomerRepository: java.lang.Object save(java.lang.Object)>(customer);

        $r3 = new com.shakeel.model.CustomerOrder;

        specialinvoke $r3.<com.shakeel.model.CustomerOrder: void <init>()>();

        customerOrder = $r3;

        $r4 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>;

        $l0 = virtualinvoke customer.<com.shakeel.model.Customer: long getCustomerId()>();

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r6 = interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5);

        $r7 = (com.shakeel.model.Customer) $r6;

        virtualinvoke customerOrder.<com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)>($r7);

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        productSet = $r8;

        l7 = productIds;

        l8 = lengthof l7;

        l9 = 0;

     label1:
        if l9 >= l8 goto label2;

        productId = l7[l9];

        $r9 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.ProductRepository productRepository>;

        $r10 = interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId);

        $r11 = (com.shakeel.model.Product) $r10;

        interfaceinvoke productSet.<java.util.Set: boolean add(java.lang.Object)>($r11);

        l9 = l9 + 1;

        goto label1;

     label2:
        return "testing";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder internalTransform called!
FuncStackInfoBuilder.java: internalTransformHelper(): FuncStackInfoBuilder.java: body: 
    public java.lang.String saveOrder(java.lang.String, java.lang.String, java.lang.Long[])
    {
        com.shakeel.controller.OrdersController this;
        java.lang.String firstName, lastName;
        java.lang.Long[] productIds, l7;
        com.shakeel.model.Customer customer, $r0, $r7;
        com.shakeel.model.CustomerOrder customerOrder, $r3;
        java.util.HashSet productSet, $r8;
        int l8, l9;
        java.lang.Long productId, $r5;
        com.shakeel.repository.CustomerRepository $r1, $r4;
        long $l0;
        java.lang.Object $r6, $r10;
        com.shakeel.repository.ProductRepository $r9;
        com.shakeel.model.Product $r11;

        this := @this: com.shakeel.controller.OrdersController;

        firstName := @parameter0: java.lang.String;

        lastName := @parameter1: java.lang.String;

        productIds := @parameter2: java.lang.Long[];

        $r0 = new com.shakeel.model.Customer;

        specialinvoke $r0.<com.shakeel.model.Customer: void <init>()>();

        customer = $r0;

        virtualinvoke customer.<com.shakeel.model.Customer: void setFirstName(java.lang.String)>(firstName);

        virtualinvoke customer.<com.shakeel.model.Customer: void setLastName(java.lang.String)>(lastName);

        $r1 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>;

        interfaceinvoke $r1.<com.shakeel.repository.CustomerRepository: java.lang.Object save(java.lang.Object)>(customer);

        $r3 = new com.shakeel.model.CustomerOrder;

        specialinvoke $r3.<com.shakeel.model.CustomerOrder: void <init>()>();

        customerOrder = $r3;

        $r4 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>;

        $l0 = virtualinvoke customer.<com.shakeel.model.Customer: long getCustomerId()>();

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r6 = interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5);

        $r7 = (com.shakeel.model.Customer) $r6;

        virtualinvoke customerOrder.<com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)>($r7);

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        productSet = $r8;

        l7 = productIds;

        l8 = lengthof l7;

        l9 = 0;

     label1:
        if l9 >= l8 goto label2;

        productId = l7[l9];

        $r9 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.ProductRepository productRepository>;

        $r10 = interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId);

        $r11 = (com.shakeel.model.Product) $r10;

        interfaceinvoke productSet.<java.util.Set: boolean add(java.lang.Object)>($r11);

        l9 = l9 + 1;

        goto label1;

     label2:
        return "testing";
    }

FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: firstName
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: firstName
FuncStackInfoBuilder.java: regionTreeForBody(): local: lastName
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: lastName
FuncStackInfoBuilder.java: regionTreeForBody(): local: productIds
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: productIds
FuncStackInfoBuilder.java: regionTreeForBody(): local: customer
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: customer
FuncStackInfoBuilder.java: regionTreeForBody(): local: customerOrder
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: customerOrder
FuncStackInfoBuilder.java: regionTreeForBody(): local: productSet
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: productSet
FuncStackInfoBuilder.java: regionTreeForBody(): local: l7
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: l7
FuncStackInfoBuilder.java: regionTreeForBody(): local: l8
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: l8
FuncStackInfoBuilder.java: regionTreeForBody(): local: productId
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: productId
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r3
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r3
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r4
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r4
FuncStackInfoBuilder.java: regionTreeForBody(): local: $l0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $l0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r5
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r5
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r6
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r6
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r7
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r7
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r8
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r8
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r9
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r9
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r10
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r10
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r11
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r11
FuncStackInfoBuilder.java: regionTreeForBody(): local: l9
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: l9
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: saveOrder is Block 0:
[preds: ] [succs: 1 ]
this := @this: com.shakeel.controller.OrdersController;
firstName := @parameter0: java.lang.String;
lastName := @parameter1: java.lang.String;
productIds := @parameter2: java.lang.Long[];
$r0 = new com.shakeel.model.Customer;
specialinvoke $r0.<com.shakeel.model.Customer: void <init>()>();
customer = $r0;
virtualinvoke customer.<com.shakeel.model.Customer: void setFirstName(java.lang.String)>(firstName);
virtualinvoke customer.<com.shakeel.model.Customer: void setLastName(java.lang.String)>(lastName);
$r1 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>;
interfaceinvoke $r1.<com.shakeel.repository.CustomerRepository: java.lang.Object save(java.lang.Object)>(customer);
$r3 = new com.shakeel.model.CustomerOrder;
specialinvoke $r3.<com.shakeel.model.CustomerOrder: void <init>()>();
customerOrder = $r3;
$r4 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>;
$l0 = virtualinvoke customer.<com.shakeel.model.Customer: long getCustomerId()>();
$r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);
$r6 = interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5);
$r7 = (com.shakeel.model.Customer) $r6;
virtualinvoke customerOrder.<com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)>($r7);
$r8 = new java.util.HashSet;
specialinvoke $r8.<java.util.HashSet: void <init>()>();
productSet = $r8;
l7 = productIds;
l8 = lengthof l7;
l9 = 0;

Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if l9 >= l8 goto return "testing";

Block 2:
[preds: 1 ] [succs: 1 ]
productId = l7[l9];
$r9 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.ProductRepository productRepository>;
$r10 = interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId);
$r11 = (com.shakeel.model.Product) $r10;
interfaceinvoke productSet.<java.util.Set: boolean add(java.lang.Object)>($r11);
l9 = l9 + 1;
goto [?= (branch)];

Block 3:
[preds: 1 ] [succs: ]
return "testing";


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
2 -> 1
0 -> 1
1 -> 2
1 -> 3
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
dfsVisit: start = 1
dfsVisit: start = 2
dfsVisit: start = 3
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [2, 3, 1, 0]
StructuralAnalysis.java: structuralAnalysis(): break point!
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = 2
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [2]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 2
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 2
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [2]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 2
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [2]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 3
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [3]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 3
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 3
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: []
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 3
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [3]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 3
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [3]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = 1
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [1]
WARN: StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = null

StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: header = 1
StructuralAnalysis.java: reachUnderSet(): reachUnderSet: backedgenodes: [2]
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: root: 1
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: reachUnderSet: [1, 2]
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: root = 1
StructuralAnalysis.java: cyclicRegionType(): cyclicRegionType: reachUnder = [1, 2]
dfsVisit: start = 1
dfsVisit: start = 2
dfsVisit: start = 3
StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_WhileLoop0
StructuralAnalysis.java: replace(): v: 1
StructuralAnalysis.java: replace(): v: 2
StructuralAnalyis.java: compact(): compact: vset = [1, 2]
StructuralAnalyis.java: compact(): compact: g.vertices before: [1, 2, 3, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 2
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [2, 3, 1, 0]
removeVertices: vset = [1, 2]
removeVertices: v = 1
removeVertex: adj = {1=[2, 3], 2=[1], 3=[], 0=[1]}
removeVertex: incoming = {1=[0, 2], 2=[1], 3=[1], 0=[]}
removeVertex: v = 1
removeVertex: v2 = 0
removeVertex: v2 = 2
removeVertices: v = 2
removeVertex: adj = {2=[], 3=[], 0=[]}
removeVertex: incoming = {2=[], 3=[], 0=[]}
removeVertex: v = 2
StructuralAnalyis.java: compact(): compact: g.vertices after: [3, R_WhileLoop0, 0]
StructuralAnalyis.java: compact(): compact: postCtr after: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [3, R_WhileLoop0, 0]
StructuralAnalysis.java: reduce(): structType before: {}
StructuralAnalysis.java: reduce(): structType after: {R_WhileLoop0=WhileLoop}
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: currVer = R_WhileLoop0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going down phase
StructuralAnalysis.java: acyclicRegionType(): currVer = R_WhileLoop0
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: going up phase
StructuralAnalysis.java: acyclicRegionType(): acyclicRegionType: computed vset = [0, R_WhileLoop0, 3]
StructuralAnalysis.java: acyclicRegionType(): ayclicRegionType: ret = Sequential

StructuralAnalysis.java: reduce(): newAbsRegionVertex: R_Sequential1
StructuralAnalysis.java: replace(): v: 0
StructuralAnalysis.java: replace(): v: R_WhileLoop0
StructuralAnalysis.java: replace(): v: 3
StructuralAnalyis.java: compact(): compact: vset = [0, R_WhileLoop0, 3]
StructuralAnalyis.java: compact(): compact: g.vertices before: [3, R_WhileLoop0, 0]
StructuralAnalyis.java: compact(): compact: postCtr before: 1
StructuralAnalyis.java: compact(): compact: dfsPostOrder before: [3, R_WhileLoop0, 0]
removeVertices: vset = [0, R_WhileLoop0, 3]
removeVertices: v = 0
removeVertex: adj = {3=[], R_WhileLoop0=[3], 0=[R_WhileLoop0]}
removeVertex: incoming = {3=[R_WhileLoop0], R_WhileLoop0=[0], 0=[]}
removeVertex: v = 0
removeVertices: v = R_WhileLoop0
removeVertex: adj = {3=[], R_WhileLoop0=[3]}
removeVertex: incoming = {3=[R_WhileLoop0], R_WhileLoop0=[]}
removeVertex: v = R_WhileLoop0
removeVertices: v = 3
removeVertex: adj = {3=[]}
removeVertex: incoming = {3=[]}
removeVertex: v = 3
StructuralAnalyis.java: compact(): compact: g.vertices after: [R_Sequential1]
StructuralAnalyis.java: compact(): compact: postCtr after: 0
StructuralAnalyis.java: compact(): compact: dfsPostOrder after: [R_Sequential1]
StructuralAnalysis.java: reduce(): structType before: {R_WhileLoop0=WhileLoop}
StructuralAnalysis.java: reduce(): structType after: {R_Sequential1=Sequential, R_WhileLoop0=WhileLoop}
StructuralAnalysis.java: structuralAnalysis(): structType: {R_Sequential1=Sequential, R_WhileLoop0=WhileLoop}
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential1=[0, R_WhileLoop0, 3], R_WhileLoop0=[1, 2]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_WhileLoop0, 2=R_WhileLoop0, 3=R_Sequential1, R_WhileLoop0=R_Sequential1, 0=R_Sequential1}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential1
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- R_Sequential1
|  +- 0
|  +- R_WhileLoop0
|  |  +- 1
|  |  +- 2
|  +- 3

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: 1 ]
this := @this: com.shakeel.controller.OrdersController;
firstName := @parameter0: java.lang.String;
lastName := @parameter1: java.lang.String;
productIds := @parameter2: java.lang.Long[];
$r0 = new com.shakeel.model.Customer;
specialinvoke $r0.<com.shakeel.model.Customer: void <init>()>();
customer = $r0;
virtualinvoke customer.<com.shakeel.model.Customer: void setFirstName(java.lang.String)>(firstName);
virtualinvoke customer.<com.shakeel.model.Customer: void setLastName(java.lang.String)>(lastName);
$r1 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>;
interfaceinvoke $r1.<com.shakeel.repository.CustomerRepository: java.lang.Object save(java.lang.Object)>(customer);
$r3 = new com.shakeel.model.CustomerOrder;
specialinvoke $r3.<com.shakeel.model.CustomerOrder: void <init>()>();
customerOrder = $r3;
$r4 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>;
$l0 = virtualinvoke customer.<com.shakeel.model.Customer: long getCustomerId()>();
$r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);
$r6 = interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5);
$r7 = (com.shakeel.model.Customer) $r6;
virtualinvoke customerOrder.<com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)>($r7);
$r8 = new java.util.HashSet;
specialinvoke $r8.<java.util.HashSet: void <init>()>();
productSet = $r8;
l7 = productIds;
l8 = lengthof l7;
l9 = 0;

Block 1:
[preds: 0 2 ] [succs: 2 3 ]
if l9 >= l8 goto return "testing";

Block 2:
[preds: 1 ] [succs: 1 ]
productId = l7[l9];
$r9 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.ProductRepository productRepository>;
$r10 = interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId);
$r11 = (com.shakeel.model.Product) $r10;
interfaceinvoke productSet.<java.util.Set: boolean add(java.lang.Object)>($r11);
l9 = l9 + 1;
goto [?= (branch)];

Block 3:
[preds: 1 ] [succs: ]
return "testing";


StructuralAnalysis.java: controlTreeRoot(): control tree = {R_Sequential1=[0, R_WhileLoop0, 3], R_WhileLoop0=[1, 2]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {1=R_WhileLoop0, 2=R_WhileLoop0, 3=R_Sequential1, R_WhileLoop0=R_Sequential1, 0=R_Sequential1}
StructuralAnalysis.java: controlTreeRoot(): found root = R_Sequential1
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential1=Sequential, R_WhileLoop0=WhileLoop}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.shakeel.controller.OrdersController, firstName := @parameter0: java.lang.String, lastName := @parameter1: java.lang.String, productIds := @parameter2: java.lang.Long[], $r0 = new com.shakeel.model.Customer, specialinvoke $r0.<com.shakeel.model.Customer: void <init>()>(), customer = $r0, virtualinvoke customer.<com.shakeel.model.Customer: void setFirstName(java.lang.String)>(firstName), virtualinvoke customer.<com.shakeel.model.Customer: void setLastName(java.lang.String)>(lastName), $r1 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>, interfaceinvoke $r1.<com.shakeel.repository.CustomerRepository: java.lang.Object save(java.lang.Object)>(customer), $r3 = new com.shakeel.model.CustomerOrder, specialinvoke $r3.<com.shakeel.model.CustomerOrder: void <init>()>(), customerOrder = $r3, $r4 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>, $l0 = virtualinvoke customer.<com.shakeel.model.Customer: long getCustomerId()>(), $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0), $r6 = interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5), $r7 = (com.shakeel.model.Customer) $r6, virtualinvoke customerOrder.<com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)>($r7), $r8 = new java.util.HashSet, specialinvoke $r8.<java.util.HashSet: void <init>()>(), productSet = $r8, l7 = productIds, l8 = lengthof l7, l9 = 0, if l9 >= l8 goto return "testing", productId = l7[l9], $r9 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.ProductRepository productRepository>, $r10 = interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId), $r11 = (com.shakeel.model.Product) $r10, interfaceinvoke productSet.<java.util.Set: boolean add(java.lang.Object)>($r11), l9 = l9 + 1, goto [?= (branch)], return "testing"]
FuncStackInfoBuilder: createARegionTree(): structType = {R_Sequential1=Sequential, R_WhileLoop0=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 1
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 1
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.shakeel.controller.OrdersController, firstName := @parameter0: java.lang.String, lastName := @parameter1: java.lang.String, productIds := @parameter2: java.lang.Long[], $r0 = new com.shakeel.model.Customer, specialinvoke $r0.<com.shakeel.model.Customer: void <init>()>(), customer = $r0, virtualinvoke customer.<com.shakeel.model.Customer: void setFirstName(java.lang.String)>(firstName), virtualinvoke customer.<com.shakeel.model.Customer: void setLastName(java.lang.String)>(lastName), $r1 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>, interfaceinvoke $r1.<com.shakeel.repository.CustomerRepository: java.lang.Object save(java.lang.Object)>(customer), $r3 = new com.shakeel.model.CustomerOrder, specialinvoke $r3.<com.shakeel.model.CustomerOrder: void <init>()>(), customerOrder = $r3, $r4 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>, $l0 = virtualinvoke customer.<com.shakeel.model.Customer: long getCustomerId()>(), $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0), $r6 = interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5), $r7 = (com.shakeel.model.Customer) $r6, virtualinvoke customerOrder.<com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)>($r7), $r8 = new java.util.HashSet, specialinvoke $r8.<java.util.HashSet: void <init>()>(), productSet = $r8, l7 = productIds, l8 = lengthof l7, l9 = 0, if l9 >= l8 goto return "testing", productId = l7[l9], $r9 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.ProductRepository productRepository>, $r10 = interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId), $r11 = (com.shakeel.model.Product) $r10, interfaceinvoke productSet.<java.util.Set: boolean add(java.lang.Object)>($r11), l9 = l9 + 1, goto [?= (branch)], return "testing"]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, R_Sequential1=Sequential, R_WhileLoop0=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 2
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 2
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 2
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.shakeel.controller.OrdersController, firstName := @parameter0: java.lang.String, lastName := @parameter1: java.lang.String, productIds := @parameter2: java.lang.Long[], $r0 = new com.shakeel.model.Customer, specialinvoke $r0.<com.shakeel.model.Customer: void <init>()>(), customer = $r0, virtualinvoke customer.<com.shakeel.model.Customer: void setFirstName(java.lang.String)>(firstName), virtualinvoke customer.<com.shakeel.model.Customer: void setLastName(java.lang.String)>(lastName), $r1 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>, interfaceinvoke $r1.<com.shakeel.repository.CustomerRepository: java.lang.Object save(java.lang.Object)>(customer), $r3 = new com.shakeel.model.CustomerOrder, specialinvoke $r3.<com.shakeel.model.CustomerOrder: void <init>()>(), customerOrder = $r3, $r4 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>, $l0 = virtualinvoke customer.<com.shakeel.model.Customer: long getCustomerId()>(), $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0), $r6 = interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5), $r7 = (com.shakeel.model.Customer) $r6, virtualinvoke customerOrder.<com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)>($r7), $r8 = new java.util.HashSet, specialinvoke $r8.<java.util.HashSet: void <init>()>(), productSet = $r8, l7 = productIds, l8 = lengthof l7, l9 = 0, if l9 >= l8 goto return "testing", productId = l7[l9], $r9 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.ProductRepository productRepository>, $r10 = interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId), $r11 = (com.shakeel.model.Product) $r10, interfaceinvoke productSet.<java.util.Set: boolean add(java.lang.Object)>($r11), l9 = l9 + 1, goto [?= (branch)], return "testing"]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, R_Sequential1=Sequential, R_WhileLoop0=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_WhileLoop0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 2
LoopRegion created
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, R_Sequential1=Sequential, R_WhileLoop0=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 3
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 3
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 3
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.shakeel.controller.OrdersController, firstName := @parameter0: java.lang.String, lastName := @parameter1: java.lang.String, productIds := @parameter2: java.lang.Long[], $r0 = new com.shakeel.model.Customer, specialinvoke $r0.<com.shakeel.model.Customer: void <init>()>(), customer = $r0, virtualinvoke customer.<com.shakeel.model.Customer: void setFirstName(java.lang.String)>(firstName), virtualinvoke customer.<com.shakeel.model.Customer: void setLastName(java.lang.String)>(lastName), $r1 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>, interfaceinvoke $r1.<com.shakeel.repository.CustomerRepository: java.lang.Object save(java.lang.Object)>(customer), $r3 = new com.shakeel.model.CustomerOrder, specialinvoke $r3.<com.shakeel.model.CustomerOrder: void <init>()>(), customerOrder = $r3, $r4 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>, $l0 = virtualinvoke customer.<com.shakeel.model.Customer: long getCustomerId()>(), $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0), $r6 = interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5), $r7 = (com.shakeel.model.Customer) $r6, virtualinvoke customerOrder.<com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)>($r7), $r8 = new java.util.HashSet, specialinvoke $r8.<java.util.HashSet: void <init>()>(), productSet = $r8, l7 = productIds, l8 = lengthof l7, l9 = 0, if l9 >= l8 goto return "testing", productId = l7[l9], $r9 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.ProductRepository productRepository>, $r10 = interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId), $r11 = (com.shakeel.model.Product) $r10, interfaceinvoke productSet.<java.util.Set: boolean add(java.lang.Object)>($r11), l9 = l9 + 1, goto [?= (branch)], return "testing"]
FuncStackInfoBuilder: createARegionTree(): structType = {1=BasicBlock, 2=BasicBlock, 3=BasicBlock, R_Sequential1=Sequential, R_WhileLoop0=WhileLoop, 0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = R_Sequential1
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 3
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = R_Sequential1
FuncStackInfoBuilder.java: regionTreeForBody(): | Sequential
| | BasicBlock0
| | WhileLoop
| | | BasicBlock1
| | | BasicBlock2
| | BasicBlock3

FuncStackInfoBuilder.java: internalTransformHelper(): topr is not null
FuncStackInfoBuilder.java: internalTransformHelper(): topr = 
| Sequential
| | BasicBlock0
| | WhileLoop
| | | BasicBlock1
| | | BasicBlock2
| | BasicBlock3

FuncStackInfoBuilder.java: internalTransformHelper(): CGSTART: 
STATIC edge: $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])> ==> <java.lang.Long: java.lang.Long valueOf(long)>
SPECIAL edge: specialinvoke $r0.<com.shakeel.model.Customer: void <init>()>() in <com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])> ==> <com.shakeel.model.Customer: void <init>()>
VIRTUAL edge: virtualinvoke customer.<com.shakeel.model.Customer: void setFirstName(java.lang.String)>(firstName) in <com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])> ==> <com.shakeel.model.Customer: void setFirstName(java.lang.String)>
VIRTUAL edge: virtualinvoke customer.<com.shakeel.model.Customer: void setLastName(java.lang.String)>(lastName) in <com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])> ==> <com.shakeel.model.Customer: void setLastName(java.lang.String)>
VIRTUAL edge: $l0 = virtualinvoke customer.<com.shakeel.model.Customer: long getCustomerId()>() in <com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])> ==> <com.shakeel.model.Customer: long getCustomerId()>
SPECIAL edge: specialinvoke $r3.<com.shakeel.model.CustomerOrder: void <init>()>() in <com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])> ==> <com.shakeel.model.CustomerOrder: void <init>()>
VIRTUAL edge: virtualinvoke customerOrder.<com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)>($r7) in <com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])> ==> <com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)>
SPECIAL edge: specialinvoke $r8.<java.util.HashSet: void <init>()>() in <com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])> ==> <java.util.HashSet: void <init>()>
SPECIAL edge: specialinvoke this.<java.lang.Object: void <init>()>() in <com.shakeel.model.Customer: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke this.<java.lang.Object: void <init>()>() in <com.shakeel.model.CustomerOrder: void <init>()> ==> <java.lang.Object: void <init>()>
CGEND

FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = java.lang.Long: java.lang.Long valueOf(long)
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = java.util.HashSet: void <init>()
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: setCustomer
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.shakeel.model.CustomerOrder
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.shakeel
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void setCustomer(com.shakeel.model.Customer)
    {
        com.shakeel.model.CustomerOrder this;
        com.shakeel.model.Customer customer;

        this := @this: com.shakeel.model.CustomerOrder;

        customer := @parameter0: com.shakeel.model.Customer;

        this.<com.shakeel.model.CustomerOrder: com.shakeel.model.Customer customer> = customer;

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: customer
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: customer
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: setCustomer is Block 0:
[preds: ] [succs: ]
this := @this: com.shakeel.model.CustomerOrder;
customer := @parameter0: com.shakeel.model.Customer;
this.<com.shakeel.model.CustomerOrder: com.shakeel.model.Customer customer> = customer;
return;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.shakeel.model.CustomerOrder;
customer := @parameter0: com.shakeel.model.Customer;
this.<com.shakeel.model.CustomerOrder: com.shakeel.model.Customer customer> = customer;
return;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.shakeel.model.CustomerOrder, customer := @parameter0: com.shakeel.model.Customer, this.<com.shakeel.model.CustomerOrder: com.shakeel.model.Customer customer> = customer, return]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.shakeel.model.CustomerOrder: void <init>()
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.shakeel.model.Customer: long getCustomerId()
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: getCustomerId
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.shakeel.model.Customer
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.shakeel
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public long getCustomerId()
    {
        com.shakeel.model.Customer this;
        long $l0;

        this := @this: com.shakeel.model.Customer;

        $l0 = this.<com.shakeel.model.Customer: long customerId>;

        return $l0;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: $l0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $l0
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: getCustomerId is Block 0:
[preds: ] [succs: ]
this := @this: com.shakeel.model.Customer;
$l0 = this.<com.shakeel.model.Customer: long customerId>;
return $l0;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.shakeel.model.Customer;
$l0 = this.<com.shakeel.model.Customer: long customerId>;
return $l0;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.shakeel.model.Customer, $l0 = this.<com.shakeel.model.Customer: long customerId>, return $l0]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.shakeel.model.Customer: void setLastName(java.lang.String)
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: setLastName
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.shakeel.model.Customer
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.shakeel
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void setLastName(java.lang.String)
    {
        com.shakeel.model.Customer this;
        java.lang.String lastName;

        this := @this: com.shakeel.model.Customer;

        lastName := @parameter0: java.lang.String;

        this.<com.shakeel.model.Customer: java.lang.String lastName> = lastName;

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: lastName
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: lastName
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: setLastName is Block 0:
[preds: ] [succs: ]
this := @this: com.shakeel.model.Customer;
lastName := @parameter0: java.lang.String;
this.<com.shakeel.model.Customer: java.lang.String lastName> = lastName;
return;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.shakeel.model.Customer;
lastName := @parameter0: java.lang.String;
this.<com.shakeel.model.Customer: java.lang.String lastName> = lastName;
return;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.shakeel.model.Customer, lastName := @parameter0: java.lang.String, this.<com.shakeel.model.Customer: java.lang.String lastName> = lastName, return]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.shakeel.model.Customer: void setFirstName(java.lang.String)
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: setFirstName
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.shakeel.model.Customer
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.shakeel
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void setFirstName(java.lang.String)
    {
        com.shakeel.model.Customer this;
        java.lang.String firstName;

        this := @this: com.shakeel.model.Customer;

        firstName := @parameter0: java.lang.String;

        this.<com.shakeel.model.Customer: java.lang.String firstName> = firstName;

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: firstName
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: firstName
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: setFirstName is Block 0:
[preds: ] [succs: ]
this := @this: com.shakeel.model.Customer;
firstName := @parameter0: java.lang.String;
this.<com.shakeel.model.Customer: java.lang.String firstName> = firstName;
return;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.shakeel.model.Customer;
firstName := @parameter0: java.lang.String;
this.<com.shakeel.model.Customer: java.lang.String firstName> = firstName;
return;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.shakeel.model.Customer, firstName := @parameter0: java.lang.String, this.<com.shakeel.model.Customer: java.lang.String firstName> = firstName, return]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.shakeel.model.Customer: void <init>()
FuncStackInfoBuilder.java: internalTransformHelper(): FuncStackInfoBuilder.java: functionstack: 
FuncStackInfoBuilder.java: internalTransformHelper():     com.shakeel.model.Customer: void setLastName(java.lang.String)
FuncStackInfoBuilder.java: internalTransformHelper():     com.shakeel.model.Customer: long getCustomerId()
FuncStackInfoBuilder.java: internalTransformHelper():     com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])
FuncStackInfoBuilder.java: internalTransformHelper():     com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)
FuncStackInfoBuilder.java: internalTransformHelper():     com.shakeel.model.Customer: void setFirstName(java.lang.String)
FuncStackInfoBuilder.java: internalTransformHelper(): {com.shakeel.model.Customer: void setLastName(java.lang.String)=    public void setLastName(java.lang.String)
    {
        com.shakeel.model.Customer this;
        java.lang.String lastName;

        this := @this: com.shakeel.model.Customer;

        lastName := @parameter0: java.lang.String;

        this.<com.shakeel.model.Customer: java.lang.String lastName> = lastName;

        return;
    }
, com.shakeel.model.Customer: long getCustomerId()=    public long getCustomerId()
    {
        com.shakeel.model.Customer this;
        long $l0;

        this := @this: com.shakeel.model.Customer;

        $l0 = this.<com.shakeel.model.Customer: long customerId>;

        return $l0;
    }
, com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])=    public java.lang.String saveOrder(java.lang.String, java.lang.String, java.lang.Long[])
    {
        com.shakeel.controller.OrdersController this;
        java.lang.String firstName, lastName;
        java.lang.Long[] productIds, l7;
        com.shakeel.model.Customer customer, $r0, $r7;
        com.shakeel.model.CustomerOrder customerOrder, $r3;
        java.util.HashSet productSet, $r8;
        int l8, l9;
        java.lang.Long productId, $r5;
        com.shakeel.repository.CustomerRepository $r1, $r4;
        long $l0;
        java.lang.Object $r6, $r10;
        com.shakeel.repository.ProductRepository $r9;
        com.shakeel.model.Product $r11;

        this := @this: com.shakeel.controller.OrdersController;

        firstName := @parameter0: java.lang.String;

        lastName := @parameter1: java.lang.String;

        productIds := @parameter2: java.lang.Long[];

        $r0 = new com.shakeel.model.Customer;

        specialinvoke $r0.<com.shakeel.model.Customer: void <init>()>();

        customer = $r0;

        virtualinvoke customer.<com.shakeel.model.Customer: void setFirstName(java.lang.String)>(firstName);

        virtualinvoke customer.<com.shakeel.model.Customer: void setLastName(java.lang.String)>(lastName);

        $r1 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>;

        interfaceinvoke $r1.<com.shakeel.repository.CustomerRepository: java.lang.Object save(java.lang.Object)>(customer);

        $r3 = new com.shakeel.model.CustomerOrder;

        specialinvoke $r3.<com.shakeel.model.CustomerOrder: void <init>()>();

        customerOrder = $r3;

        $r4 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>;

        $l0 = virtualinvoke customer.<com.shakeel.model.Customer: long getCustomerId()>();

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r6 = interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5);

        $r7 = (com.shakeel.model.Customer) $r6;

        virtualinvoke customerOrder.<com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)>($r7);

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        productSet = $r8;

        l7 = productIds;

        l8 = lengthof l7;

        l9 = 0;

     label1:
        if l9 >= l8 goto label2;

        productId = l7[l9];

        $r9 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.ProductRepository productRepository>;

        $r10 = interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId);

        $r11 = (com.shakeel.model.Product) $r10;

        interfaceinvoke productSet.<java.util.Set: boolean add(java.lang.Object)>($r11);

        l9 = l9 + 1;

        goto label1;

     label2:
        return "testing";
    }
, com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)=    public void setCustomer(com.shakeel.model.Customer)
    {
        com.shakeel.model.CustomerOrder this;
        com.shakeel.model.Customer customer;

        this := @this: com.shakeel.model.CustomerOrder;

        customer := @parameter0: com.shakeel.model.Customer;

        this.<com.shakeel.model.CustomerOrder: com.shakeel.model.Customer customer> = customer;

        return;
    }
, com.shakeel.model.Customer: void setFirstName(java.lang.String)=    public void setFirstName(java.lang.String)
    {
        com.shakeel.model.Customer this;
        java.lang.String firstName;

        this := @this: com.shakeel.model.Customer;

        firstName := @parameter0: java.lang.String;

        this.<com.shakeel.model.Customer: java.lang.String firstName> = firstName;

        return;
    }
}

Decompiling com.shakeel.controller.OrdersController... 
ServiceAllocTransform.java: internalTransform(): methodsig: <com.shakeel.controller.OrdersController: void <init>()>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: <init>
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.shakeel.controller.OrdersController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.shakeel
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void <init>()
    {
        com.shakeel.controller.OrdersController this;

        this := @this: com.shakeel.controller.OrdersController;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <com.shakeel.controller.OrdersController: java.lang.String productsList(org.springframework.ui.Model)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: productsList
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.shakeel.controller.OrdersController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.shakeel
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String productsList(org.springframework.ui.Model)
    {
        com.shakeel.controller.OrdersController this;
        org.springframework.ui.Model model;
        com.shakeel.repository.ProductRepository $r0;
        java.lang.Iterable $r1, $r4;
        com.shakeel.repository.OrderRepository $r3;

        this := @this: com.shakeel.controller.OrdersController;

        model := @parameter0: org.springframework.ui.Model;

        $r0 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.ProductRepository productRepository>;

        $r1 = interfaceinvoke $r0.<com.shakeel.repository.ProductRepository: java.lang.Iterable findAll()>();

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("products", $r1);

        $r3 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.OrderRepository orderRepository>;

        $r4 = interfaceinvoke $r3.<com.shakeel.repository.OrderRepository: java.lang.Iterable findAll()>();

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("orders", $r4);

        return "orders";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: saveOrder
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.shakeel.controller.OrdersController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.shakeel
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String saveOrder(java.lang.String, java.lang.String, java.lang.Long[])
    {
        com.shakeel.controller.OrdersController this;
        java.lang.String firstName, lastName;
        java.lang.Long[] productIds, l7;
        com.shakeel.model.Customer customer, $r0, $r7;
        com.shakeel.model.CustomerOrder customerOrder, $r3;
        java.util.HashSet productSet, $r8;
        int l8, l9;
        java.lang.Long productId, $r5;
        com.shakeel.repository.CustomerRepository $r1, $r4;
        long $l0;
        java.lang.Object $r6, $r10;
        com.shakeel.repository.ProductRepository $r9;
        com.shakeel.model.Product $r11;

        this := @this: com.shakeel.controller.OrdersController;

        firstName := @parameter0: java.lang.String;

        lastName := @parameter1: java.lang.String;

        productIds := @parameter2: java.lang.Long[];

        $r0 = new com.shakeel.model.Customer;

        specialinvoke $r0.<com.shakeel.model.Customer: void <init>()>();

        customer = $r0;

        virtualinvoke $r0.<com.shakeel.model.Customer: void setFirstName(java.lang.String)>(firstName);

        virtualinvoke $r0.<com.shakeel.model.Customer: void setLastName(java.lang.String)>(lastName);

        $r1 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>;

        interfaceinvoke $r1.<com.shakeel.repository.CustomerRepository: java.lang.Object save(java.lang.Object)>($r0);

        $r3 = new com.shakeel.model.CustomerOrder;

        specialinvoke $r3.<com.shakeel.model.CustomerOrder: void <init>()>();

        customerOrder = $r3;

        $r4 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>;

        $l0 = virtualinvoke $r0.<com.shakeel.model.Customer: long getCustomerId()>();

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r6 = interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5);

        $r7 = (com.shakeel.model.Customer) $r6;

        virtualinvoke $r3.<com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)>($r7);

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        productSet = $r8;

        l7 = productIds;

        l8 = lengthof productIds;

        l9 = 0;

     label1:
        if l9 >= l8 goto label2;

        productId = productIds[l9];

        $r9 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.ProductRepository productRepository>;

        $r10 = interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId);

        $r11 = (com.shakeel.model.Product) $r10;

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r11);

        l9 = l9 + 1;

        goto label1;

     label2:
        return "testing";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <com.shakeel.controller.OrdersController: java.lang.String removeOrder(java.lang.Long)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: removeOrder
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.shakeel.controller.OrdersController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.shakeel
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String removeOrder(java.lang.Long)
    {
        com.shakeel.controller.OrdersController this;
        java.lang.Long Id;
        com.shakeel.repository.OrderRepository $r0;
        java.lang.String $r1;

        this := @this: com.shakeel.controller.OrdersController;

        Id := @parameter0: java.lang.Long;

        $r0 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.OrderRepository orderRepository>;

        interfaceinvoke $r0.<com.shakeel.repository.OrderRepository: void delete(java.io.Serializable)>(Id);

        $r1 = virtualinvoke Id.<java.lang.Long: java.lang.String toString()>();

        return $r1;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackAnalyzer.java: constructDIRForStack(): FSA: constructDIRsForStack: Stack = [com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[]), com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer), com.shakeel.model.Customer: long getCustomerId(), com.shakeel.model.Customer: void setLastName(java.lang.String), com.shakeel.model.Customer: void setFirstName(java.lang.String)]
FuncStackAnalyzer.java: constructDIRForStack(): top function sig: com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])
FuncStackAnalyzer.java: constructDIRForStack(): body rootmethod before analysis: [this := @this: com.shakeel.controller.OrdersController, firstName := @parameter0: java.lang.String, lastName := @parameter1: java.lang.String, productIds := @parameter2: java.lang.Long[], $r0 = new com.shakeel.model.Customer, specialinvoke $r0.<com.shakeel.model.Customer: void <init>()>(), customer = $r0, virtualinvoke $r0.<com.shakeel.model.Customer: void setFirstName(java.lang.String)>(firstName), virtualinvoke $r0.<com.shakeel.model.Customer: void setLastName(java.lang.String)>(lastName), $r1 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>, interfaceinvoke $r1.<com.shakeel.repository.CustomerRepository: java.lang.Object save(java.lang.Object)>($r0), $r3 = new com.shakeel.model.CustomerOrder, specialinvoke $r3.<com.shakeel.model.CustomerOrder: void <init>()>(), customerOrder = $r3, $r4 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>, $l0 = virtualinvoke $r0.<com.shakeel.model.Customer: long getCustomerId()>(), $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0), $r6 = interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5), $r7 = (com.shakeel.model.Customer) $r6, virtualinvoke $r3.<com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)>($r7), $r8 = new java.util.HashSet, specialinvoke $r8.<java.util.HashSet: void <init>()>(), productSet = $r8, l7 = productIds, l8 = lengthof productIds, l9 = 0, if l9 >= l8 goto return "testing", productId = productIds[l9], $r9 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.ProductRepository productRepository>, $r10 = interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId), $r11 = (com.shakeel.model.Product) $r10, interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r11), l9 = l9 + 1, goto [?= (branch)], return "testing"]
FuncStackAnalyzer.java: constructDIRForStack(): Top level func i.e. com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])has typemap: {}
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregions: [| BasicBlock0, | WhileLoop
| | BasicBlock1
| | BasicBlock2
, | BasicBlock3]
DIRSequentialRegionAnalyzerN.java: constructDIR(): Break point!
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: saveOrder
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.shakeel.controller.OrdersController, firstName := @parameter0: java.lang.String, lastName := @parameter1: java.lang.String, productIds := @parameter2: java.lang.Long[], $r0 = new com.shakeel.model.Customer, specialinvoke $r0.<com.shakeel.model.Customer: void <init>()>(), customer = $r0, virtualinvoke $r0.<com.shakeel.model.Customer: void setFirstName(java.lang.String)>(firstName), virtualinvoke $r0.<com.shakeel.model.Customer: void setLastName(java.lang.String)>(lastName), $r1 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>, interfaceinvoke $r1.<com.shakeel.repository.CustomerRepository: java.lang.Object save(java.lang.Object)>($r0), $r3 = new com.shakeel.model.CustomerOrder, specialinvoke $r3.<com.shakeel.model.CustomerOrder: void <init>()>(), customerOrder = $r3, $r4 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>, $l0 = virtualinvoke $r0.<com.shakeel.model.Customer: long getCustomerId()>(), $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0), $r6 = interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5), $r7 = (com.shakeel.model.Customer) $r6, virtualinvoke $r3.<com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)>($r7), $r8 = new java.util.HashSet, specialinvoke $r8.<java.util.HashSet: void <init>()>(), productSet = $r8, l7 = productIds, l8 = lengthof productIds, l9 = 0, if l9 >= l8 goto return "testing", productId = productIds[l9], $r9 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.ProductRepository productRepository>, $r10 = interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId), $r11 = (com.shakeel.model.Product) $r10, interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r11), l9 = l9 + 1, goto [?= (branch)], return "testing"]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.shakeel.controller.OrdersController
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = firstName := @parameter0: java.lang.String
DIRRegionAnalyzer.java: constructDIR(): curUnit = lastName := @parameter1: java.lang.String
DIRRegionAnalyzer.java: constructDIR(): curUnit = productIds := @parameter2: java.lang.Long[]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = new com.shakeel.model.Customer
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
DIRRegionAnalyzer.java: caseAllocation(): Mapping $r0.customerId to Bottomnode
DIRRegionAnalyzer.java: caseAllocation(): Mapping $r0.firstName to Bottomnode
DIRRegionAnalyzer.java: caseAllocation(): Mapping $r0.lastName to Bottomnode
DIRRegionAnalyzer.java: constructDIR(): curUnit = specialinvoke $r0.<com.shakeel.model.Customer: void <init>()>()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = specialinvoke $r0.<com.shakeel.model.Customer: void <init>()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: <init>
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.shakeel.model.Customer: void <init>()

WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): curUnit = customer = $r0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2, type(v1, v2) = ptr
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: customer
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r0
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [Customer.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
]
AccessPath.java: replaceBase(): input access path: customer.customerId
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: customer.firstName
AccessPath.java: replaceBase(): replacement of base: $r0
AccessPath.java: replaceBase(): input access path: customer.lastName
AccessPath.java: replaceBase(): replacement of base: $r0
DIRRegionAnalyzer.java: constructDIR(): curUnit = virtualinvoke $r0.<com.shakeel.model.Customer: void setFirstName(java.lang.String)>(firstName)
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke $r0.<com.shakeel.model.Customer: void setFirstName(java.lang.String)>(firstName)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: setFirstName
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.shakeel.model.Customer: void setFirstName(java.lang.String)
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.shakeel.model.Customer: void setFirstName(java.lang.String)>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [firstName, this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [firstName, $r0]
ARegion.java: analyze(): set cur method of analyzer to: setFirstName
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.shakeel.model.Customer, firstName := @parameter0: java.lang.String, this.<com.shakeel.model.Customer: java.lang.String firstName> = firstName, return]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.shakeel.model.Customer
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = firstName := @parameter0: java.lang.String
DIRRegionAnalyzer.java: constructDIR(): curUnit = this.<com.shakeel.model.Customer: java.lang.String firstName> = firstName
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): Mapping: this.firstName -> firstName
DIRRegionAnalyzer.java: constructDIR(): curUnit = return
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ this ~~~
Self

~~~ this.firstName ~~~
firstName


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ this ~~~
Self

~~~ this.firstName ~~~
firstName


DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: this.firstName=firstName
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: firstName
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: java.lang.String
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: firstName
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.shakeel.model.Customer
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: $r0
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.customerId, this.firstName, this.lastName]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.customerId
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, this.firstName]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, this.firstName]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: firstName
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.shakeel.model.Customer: void setFirstName(java.lang.String)>(firstName)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.shakeel.model.Customer: void setFirstName(java.lang.String)>(firstName)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.shakeel.model.Customer: void setFirstName(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.shakeel.model.Customer: void setLastName(java.lang.String), com.shakeel.model.Customer: long getCustomerId(), com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[]), com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer), com.shakeel.model.Customer: void setFirstName(java.lang.String)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.shakeel.model.Customer: void setFirstName(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [firstName, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [firstName, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = firstName, actual = firstName
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.customerId, this.firstName, this.lastName]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: firstName
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = firstName
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, this.firstName]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = setFirstName, [$r0.firstName]
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: firstName
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: firstName
DIRRegionAnalyzer.java: handleSideEffects(): Case the formal param is a primitive
DIRRegionAnalyzer.java: handleSideEffects(): fml: firstName
DIRRegionAnalyzer.java: handleSideEffects(): actual arg (Soot Value): firstName
DIRRegionAnalyzer.java: handleSideEffects(): actualNode (Node constructed from value): firstName
DIRRegionAnalyzer.java: handleSideEffects(): formal = firstName, actual = firstName
DIRRegionAnalyzer.java: handleSideEffects(): resolvedActual: firstName
DIRRegionAnalyzer.java: handleSideEffects(): for key = $r0.firstName
DIRRegionAnalyzer.java: handleSideEffects(): Case the formal param is a primitive, firstName
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: $r0
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.customerId, this.firstName, this.lastName]
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.shakeel.model.Customer: void setFirstName(java.lang.String)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
BottomNode

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ this ~~~
Self


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r0.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.shakeel.model.Customer: void setFirstName(java.lang.String)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
BottomNode

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ this ~~~
Self


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r0.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.shakeel.model.Customer: void setFirstName(java.lang.String)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
BottomNode

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ this ~~~
Self


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r0.firstName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: firstName
DIRRegionAnalyzer.java: handleSideEffects(): after: firstName
DIRRegionAnalyzer.java: constructDIR(): curUnit = virtualinvoke $r0.<com.shakeel.model.Customer: void setLastName(java.lang.String)>(lastName)
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke $r0.<com.shakeel.model.Customer: void setLastName(java.lang.String)>(lastName)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: setLastName
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.shakeel.model.Customer: void setLastName(java.lang.String)
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.shakeel.model.Customer: void setLastName(java.lang.String)>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [lastName, this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [lastName, $r0]
ARegion.java: analyze(): set cur method of analyzer to: setLastName
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.shakeel.model.Customer, lastName := @parameter0: java.lang.String, this.<com.shakeel.model.Customer: java.lang.String lastName> = lastName, return]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.shakeel.model.Customer
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = lastName := @parameter0: java.lang.String
DIRRegionAnalyzer.java: constructDIR(): curUnit = this.<com.shakeel.model.Customer: java.lang.String lastName> = lastName
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): Mapping: this.lastName -> lastName
DIRRegionAnalyzer.java: constructDIR(): curUnit = return
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ this ~~~
Self

~~~ this.lastName ~~~
lastName


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ this ~~~
Self

~~~ this.lastName ~~~
lastName


DIR.java: updateRegion(): update region entry: this.lastName=lastName
DIR.java: updateRegion(): update region entry: this=Self
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: lastName
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: java.lang.String
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: lastName
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.shakeel.model.Customer
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: $r0
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.customerId, this.firstName, this.lastName]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.customerId
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.lastName, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.lastName, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.lastName, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: lastName
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.shakeel.model.Customer: void setLastName(java.lang.String)>(lastName)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.shakeel.model.Customer: void setLastName(java.lang.String)>(lastName)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.shakeel.model.Customer: void setLastName(java.lang.String)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.shakeel.model.Customer: void setLastName(java.lang.String), com.shakeel.model.Customer: long getCustomerId(), com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[]), com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer), com.shakeel.model.Customer: void setFirstName(java.lang.String)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.shakeel.model.Customer: void setLastName(java.lang.String)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [lastName, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [lastName, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = lastName, actual = lastName
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.customerId, this.firstName, this.lastName]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: lastName
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = lastName
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = setLastName, [$r0.lastName]
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: lastName
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: lastName
DIRRegionAnalyzer.java: handleSideEffects(): Case the formal param is a primitive
DIRRegionAnalyzer.java: handleSideEffects(): fml: lastName
DIRRegionAnalyzer.java: handleSideEffects(): actual arg (Soot Value): lastName
DIRRegionAnalyzer.java: handleSideEffects(): actualNode (Node constructed from value): lastName
DIRRegionAnalyzer.java: handleSideEffects(): formal = lastName, actual = lastName
DIRRegionAnalyzer.java: handleSideEffects(): resolvedActual: lastName
DIRRegionAnalyzer.java: handleSideEffects(): for key = $r0.lastName
DIRRegionAnalyzer.java: handleSideEffects(): Case the formal param is a primitive, lastName
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: $r0
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.customerId, this.firstName, this.lastName]
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.shakeel.model.Customer: void setLastName(java.lang.String)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ this ~~~
Self


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r0.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.shakeel.model.Customer: void setLastName(java.lang.String)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ this ~~~
Self


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r0.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.shakeel.model.Customer: void setLastName(java.lang.String)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ this ~~~
Self


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r0.lastName
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: lastName
DIRRegionAnalyzer.java: handleSideEffects(): after: lastName
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r1 -> this.customerRepository
DIRRegionAnalyzer.java: constructDIR(): curUnit = interfaceinvoke $r1.<com.shakeel.repository.CustomerRepository: java.lang.Object save(java.lang.Object)>($r0)
DIRRegionAnalyzer.java: constructDIR(): savestmt invoke expr: interfaceinvoke $r1.<com.shakeel.repository.CustomerRepository: java.lang.Object save(java.lang.Object)>($r0)
DIRRegionAnalyzer.java: constructDIR(): baseVarNode: $r1
DIRRegionAnalyzer.java: constructDIR(): dir till now: ~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ $r1 ~~~
this.customerRepository

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): ve map:{$r1=this.customerRepository, $r0.customerId=BottomNode, customer.firstName=BottomNode, customer.customerId=BottomNode, this=Self, $r0.firstName=firstName, customer.lastName=BottomNode, $r0.lastName=lastName, customer=$r0}
DIRRegionAnalyzer.java: constructDIR(): repo: this.customerRepository
DIRRegionAnalyzer.java: constructDIR(): argType: com.shakeel.model.Customer
DIRRegionAnalyzer.java: constructDIR(): table: com.shakeel.model.Customer
DIRRegionAnalyzer.java: constructDIR(): attributes: [customerId, firstName, lastName]
DIRRegionAnalyzer.java: constructDIR(): fieldVarNodes: [$r0.customerId, $r0.firstName, $r0.lastName]
DIRRegionAnalyzer.java: constructDIR(): listNode.columns: [customerId, firstName, lastName]
DIRRegionAnalyzer.java: constructDIR(): mapping: this.customerRepository -> Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName
DIRRegionAnalyzer.java: constructDIR(): savestmt args: [$r0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r3 = new com.shakeel.model.CustomerOrder
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
DIRRegionAnalyzer.java: caseAllocation(): Mapping $r3.orderId to Bottomnode
DIRRegionAnalyzer.java: caseAllocation(): Mapping $r3.total to Bottomnode
DIRRegionAnalyzer.java: constructDIR(): curUnit = specialinvoke $r3.<com.shakeel.model.CustomerOrder: void <init>()>()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = specialinvoke $r3.<com.shakeel.model.CustomerOrder: void <init>()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: <init>
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.shakeel.model.CustomerOrder: void <init>()

WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): curUnit = customerOrder = $r3
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2, type(v1, v2) = ptr
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: customerOrder
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r3
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [CustomerOrder.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
]
AccessPath.java: replaceBase(): input access path: customerOrder.orderId
AccessPath.java: replaceBase(): replacement of base: $r3
AccessPath.java: replaceBase(): input access path: customerOrder.total
AccessPath.java: replaceBase(): replacement of base: $r3
AccessPath.java: replaceBase(): input access path: customerOrder.products
AccessPath.java: replaceBase(): replacement of base: $r3
AccessPath.java: replaceBase(): input access path: customerOrder.customer
AccessPath.java: replaceBase(): replacement of base: $r3
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r4 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r4 -> Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName
DIRRegionAnalyzer.java: constructDIR(): curUnit = $l0 = virtualinvoke $r0.<com.shakeel.model.Customer: long getCustomerId()>()
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = getCustomerId
construct/Utils.java: parseInvokeExpr(): methodSignature = com.shakeel.model.Customer: long getCustomerId()
construct/Utils.java: parseObjectInvoke(): virtualinvoke $r0.<com.shakeel.model.Customer: long getCustomerId()>()
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.shakeel.model.Customer: long getCustomerId()>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.shakeel.model.Customer: long getCustomerId()>
construct/Utils.java: parseObjectInvoke(): methodName = getCustomerId
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke $r0.<com.shakeel.model.Customer: long getCustomerId()>()
construct/Utils.java: parseObjectInvoke(): methodSignature = com.shakeel.model.Customer: long getCustomerId()
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [com.shakeel.model.Customer: void setLastName(java.lang.String), com.shakeel.model.Customer: long getCustomerId(), com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[]), com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer), com.shakeel.model.Customer: void setFirstName(java.lang.String)]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: getCustomerId
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.shakeel.model.Customer, $l0 = this.<com.shakeel.model.Customer: long customerId>, return $l0]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.shakeel.model.Customer
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = $l0 = this.<com.shakeel.model.Customer: long customerId>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $l0 -> this.customerId
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $l0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $l0 ~~~
this.customerId

~~~ return ~~~
this.customerId

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $l0 ~~~
this.customerId

~~~ return ~~~
this.customerId

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: $l0=this.customerId
DIR.java: updateRegion(): update region entry: return=this.customerId
construct/Utils.java: parseObjectInvoke(): Put DIR of callee = com.shakeel.model.Customer: long getCustomerId() in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = long
DIRRegionAnalyzer.java: constructDIR(): leftType : long
DIRRegionAnalyzer.java: constructDIR(): case : caseCallToMethodWBodyRetPrim()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), v1 is primitive, foo is not a library method
DIRRegionAnalyzer.java: constructDIR(): v1: $l0
DIRRegionAnalyzer.java: constructDIR(): foo: <com.shakeel.model.Customer: long getCustomerId()>
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke $r0.<com.shakeel.model.Customer: long getCustomerId()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: getCustomerId
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.shakeel.model.Customer: long getCustomerId()
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.shakeel.model.Customer: long getCustomerId()>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [$r0]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.shakeel.model.Customer
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: $r0
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.customerId, this.firstName, this.lastName]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.customerId
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $l0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $l0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this, $l0, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = getCustomerId, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: $r0
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.customerId, this.firstName, this.lastName]
DIRRegionAnalyzer.java: constructDIR(): methodSig: com.shakeel.model.Customer: long getCustomerId()
DIRRegionAnalyzer.java: constructDIR(): FuncStackAnalyzer.funcDIRMap: {com.shakeel.model.Customer: void setLastName(java.lang.String)=~~~ this ~~~
Self

~~~ this.lastName ~~~
lastName

, com.shakeel.model.Customer: long getCustomerId()=~~~ $l0 ~~~
this.customerId

~~~ return ~~~
this.customerId

~~~ this ~~~
Self

, com.shakeel.model.Customer: void setFirstName(java.lang.String)=~~~ this ~~~
Self

~~~ this.firstName ~~~
firstName

}
DIRRegionAnalyzer.java: constructDIR(): dir callee: ~~~ $l0 ~~~
this.customerId

~~~ return ~~~
this.customerId

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): retCalleeCloned: this.customerId
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: this.customerId
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.shakeel.model.Customer: long getCustomerId()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.shakeel.model.Customer: long getCustomerId()>()
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.shakeel.model.Customer: long getCustomerId()
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.shakeel.model.Customer: void setLastName(java.lang.String), com.shakeel.model.Customer: long getCustomerId(), com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[]), com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer), com.shakeel.model.Customer: void setFirstName(java.lang.String)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.shakeel.model.Customer: long getCustomerId()>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [$r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.customerId, this.firstName, this.lastName]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: this.customerId
DIRRegionAnalyzer.java: constructDIR(): after dag formals to actuals: $r0.customerId
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JStaticInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = valueOf
construct/Utils.java: parseInvokeExpr(): methodSignature = java.lang.Long: java.lang.Long valueOf(long)
construct/Utils.java: parseInvokeExpr(): JstaticInvokeExpr
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.lang.Long: java.lang.Long valueOf(long)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.lang.Long: java.lang.Long valueOf(long)>
Utils.java: parseStaticInvoke(): parseStaticInvoke: name: valueOf
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is library method
Utils.java: getVarNode(): $r5
Utils.java: getVarNode(): LinkedVariableBox($r5)
JAssignStmtCons.java: construct(): staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0)
construct/Utils.java: parseInvokeExpr(): methodName = valueOf
construct/Utils.java: parseInvokeExpr(): methodSignature = java.lang.Long: java.lang.Long valueOf(long)
construct/Utils.java: parseInvokeExpr(): JstaticInvokeExpr
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.lang.Long: java.lang.Long valueOf(long)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <java.lang.Long: java.lang.Long valueOf(long)>
Utils.java: parseStaticInvoke(): parseStaticInvoke: name: valueOf
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r6 = interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = findOne
construct/Utils.java: parseInvokeExpr(): methodSignature = java.lang.Object: java.lang.Object findOne(java.io.Serializable)
construct/Utils.java: parseObjectInvoke(): interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.lang.Object: java.lang.Object findOne(java.io.Serializable)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>
construct/Utils.java: parseObjectInvoke(): methodName = findOne
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5)
construct/Utils.java: parseObjectInvoke(): methodSignature = java.lang.Object: java.lang.Object findOne(java.io.Serializable)
construct/Utils.java: parseObjectInvoke(): repostr in findOne case: com.shakeel.repository.CustomerRepository
construct/Utils.java: parseObjectInvoke(): entity for repo in findOne case: com.shakeel.model.Customer
construct/Utils.java: parseObjectInvoke(): entity class findOne case: com.shakeel.model.Customer
construct/Utils.java: parseObjectInvoke(): check 1 =Sel
| CustomerRepository
| Equals
| | id
| | $r5
cosntruct/utils.java: mapDBFetchAccessGraph(): check relExpBaseAccp= Sel
| CustomerRepository
| Equals
| | id
| | $r5
cosntruct/utils.java: mapDBFetchAccessGraph(): prim fields = [<com.shakeel.model.Customer: long customerId>, <com.shakeel.model.Customer: java.lang.String firstName>, <com.shakeel.model.Customer: java.lang.String lastName>]
cosntruct/utils.java: mapDBFetchAccessGraph(): oneToOne fields= []
cosntruct/utils.java: mapDBFetchAccessGraph(): manyToOne fields = []
cosntruct/utils.java: mapDBFetchAccessGraph(): collection fields = []
cosntruct/utils.java: mapDBFetchAccessGraph(): manyTomany fields = []
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = java.lang.Object
DIRRegionAnalyzer.java: constructDIR(): leftType : java.lang.Object
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: $r6
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5)
DIRRegionAnalyzer.java: constructDIR(): left type = java.lang.Object
DIRRegionAnalyzer.java: constructDIR(): java.lang.Object
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: java.lang.Object
DIRRegionAnalyzer.java: constructDIR(): method sig = java.lang.Object: java.lang.Object findOne(java.io.Serializable)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{com.shakeel.model.Customer: void setLastName(java.lang.String)=~~~ this ~~~
Self

~~~ this.lastName ~~~
lastName

, java.lang.Object: java.lang.Object findOne(java.io.Serializable)=~~~ return ~~~
Sel
| CustomerRepository
| Equals
| | id
| | $r5

~~~ return.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | $r5
| customerId

~~~ return.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | $r5
| firstName

~~~ return.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | $r5
| lastName

, com.shakeel.model.Customer: long getCustomerId()=~~~ $l0 ~~~
this.customerId

~~~ return ~~~
this.customerId

~~~ this ~~~
Self

, com.shakeel.model.Customer: void setFirstName(java.lang.String)=~~~ this ~~~
Self

~~~ this.firstName ~~~
firstName

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ return ~~~
Sel
| CustomerRepository
| Equals
| | id
| | $r5

~~~ return.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | $r5
| customerId

~~~ return.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | $r5
| firstName

~~~ return.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | $r5
| lastName


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: []
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Sel
| CustomerRepository
| Equals
| | id
| | $r5
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.lang.Object: java.lang.Object findOne(java.io.Serializable)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.shakeel.model.Customer: void setLastName(java.lang.String), com.shakeel.model.Customer: long getCustomerId(), com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[]), com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer), com.shakeel.model.Customer: void setFirstName(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): leftType = com.shakeel.model.Customer
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: findOne
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = java.lang.Object: java.lang.Object findOne(java.io.Serializable)

WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
NRA.java: processTableandFields: com.shakeel.model.Customer fields = [<com.shakeel.model.Customer: long customerId>, <com.shakeel.model.Customer: java.lang.String firstName>, <com.shakeel.model.Customer: java.lang.String lastName>]
NRA.java: processTableandFields: sf <com.shakeel.model.Customer: long customerId>  type=FieldData
NRA.java: processTableandFields: sf <com.shakeel.model.Customer: java.lang.String firstName>  type=FieldData
NRA.java: processTableandFields: sf <com.shakeel.model.Customer: java.lang.String lastName>  type=FieldData
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = $r6, com.shakeel.model.Customer
DIRRegionAnalyzer.java: constructDIR(): accesspaths = [$r6.customerId, $r6.firstName, $r6.lastName]
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [com.shakeel.model.Customer: void setLastName(java.lang.String), java.lang.Object: java.lang.Object findOne(java.io.Serializable), com.shakeel.model.Customer: long getCustomerId(), com.shakeel.model.Customer: void setFirstName(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callee = java.lang.Object: java.lang.Object findOne(java.io.Serializable)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
Flatten.java: getNestedFields(): LVAL TYPE: com.shakeel.model.Customer
Flatten.java: getNestedFields(): Type of sf: <com.shakeel.model.Customer: long customerId> = long
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

]
Flatten.java: getNestedFields(): Id fields=customerId
Flatten.java: getNestedFields(): Type of sf: <com.shakeel.model.Customer: java.lang.String firstName> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.shakeel.model.Customer: java.lang.String lastName> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): returning: []
DIRRegionAnalyzer.java: constructDIR(): check nestedFields=[]
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = java.lang.Object: java.lang.Object findOne(java.io.Serializable)
DIRRegionAnalyzer.java: constructDIR(): key = return.customerId
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | $r5
| customerId
DIRRegionAnalyzer.java: constructDIR(): key = return.lastName
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | $r5
| lastName
DIRRegionAnalyzer.java: constructDIR(): key = return.firstName
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | $r5
| firstName
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| CustomerRepository
| Equals
| | id
| | $r5
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = java.lang.Object: java.lang.Object findOne(java.io.Serializable) END
DIRRegionAnalyzer.java: constructDIR(): v1 access paths: [$r6.customerId, $r6.firstName, $r6.lastName]
DIRRegionAnalyzer.java: constructDIR(): key = $r6.customerId
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.customerId
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | $r5
| customerId
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.lang.Object: java.lang.Object findOne(java.io.Serializable)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.shakeel.model.Customer: void setLastName(java.lang.String), com.shakeel.model.Customer: long getCustomerId(), com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[]), com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer), com.shakeel.model.Customer: void setFirstName(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId
DIRRegionAnalyzer.java: constructDIR(): key = $r6.firstName
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.firstName
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | $r5
| firstName
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.lang.Object: java.lang.Object findOne(java.io.Serializable)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.shakeel.model.Customer: void setLastName(java.lang.String), com.shakeel.model.Customer: long getCustomerId(), com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[]), com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer), com.shakeel.model.Customer: void setFirstName(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName
DIRRegionAnalyzer.java: constructDIR(): key = $r6.lastName
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.lastName
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | $r5
| lastName
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.lang.Object: java.lang.Object findOne(java.io.Serializable)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.shakeel.model.Customer: void setLastName(java.lang.String), com.shakeel.model.Customer: long getCustomerId(), com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[]), com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer), com.shakeel.model.Customer: void setFirstName(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r7 = (com.shakeel.model.Customer) $r6
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JCastExpr
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = (type1) v2
DIRRegionAnalyzer.java: constructDIR(): type1: com.shakeel.model.Customer
DIRRegionAnalyzer.java: constructDIR(): castExpr: (com.shakeel.model.Customer) $r6
DIRRegionAnalyzer.java: constructDIR(): v2: $r6
DIRRegionAnalyzer.java: constructDIR(): cur dir: {$r3.orderId=BottomNode, $r3.total=BottomNode, $r1=this.customerRepository, $r6.customerId=Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId, customer.customerId=BottomNode, $r4=Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName, $r5=BottomNode, this=Self, $r0.firstName=firstName, customer.lastName=BottomNode, customerOrder=$r3, $l0=BottomNode, $r6=Sel
| CustomerRepository
| Equals
| | id
| | BottomNode, $r0.lastName=lastName, customerOrder.total=BottomNode, this.customerRepository=Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName, customerOrder.products=$r3.products, $r0.customerId=BottomNode, customerOrder.customer=$r3.customer, customer.firstName=BottomNode, $r6.firstName=Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName, customerOrder.orderId=BottomNode, $r6.lastName=Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName, customer=$r0}
DIRRegionAnalyzer.java: constructDIR(): rightVar in dir: true
WARN: DIRRegionAnalyzer.java: processPointerAssignment(): v1 and v2 have diff types
WARN: DIRRegionAnalyzer.java: processPointerAssignment(): type(v1) = com.shakeel.model.Customer
WARN: DIRRegionAnalyzer.java: processPointerAssignment(): type(v2) = java.lang.Object
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: $r7
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r6
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [Customer.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
]
AccessPath.java: replaceBase(): input access path: $r7.customerId
AccessPath.java: replaceBase(): replacement of base: $r6
AccessPath.java: replaceBase(): input access path: $r7.firstName
AccessPath.java: replaceBase(): replacement of base: $r6
AccessPath.java: replaceBase(): input access path: $r7.lastName
AccessPath.java: replaceBase(): replacement of base: $r6
DIRRegionAnalyzer.java: constructDIR(): curUnit = virtualinvoke $r3.<com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)>($r7)
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke $r3.<com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)>($r7)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: setCustomer
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [customer, this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [$r7, $r3]
ARegion.java: analyze(): set cur method of analyzer to: setCustomer
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.shakeel.model.CustomerOrder, customer := @parameter0: com.shakeel.model.Customer, this.<com.shakeel.model.CustomerOrder: com.shakeel.model.Customer customer> = customer, return]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.shakeel.model.CustomerOrder
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = customer := @parameter0: com.shakeel.model.Customer
DIRRegionAnalyzer.java: constructDIR(): curUnit = this.<com.shakeel.model.CustomerOrder: com.shakeel.model.Customer customer> = customer
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): CASE: v.f = expr, f is non-primtive
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.shakeel.model.CustomerOrder: com.shakeel.model.Customer customer>
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.shakeel.model.CustomerOrder: com.shakeel.model.Customer customer>
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.shakeel.model.CustomerOrder: com.shakeel.model.Customer customer>
DIRRegionAnalyzer.java: constructDIR(): accessPaths = [this.customer.customerId, this.customer.firstName, this.customer.lastName]
DIRRegionAnalyzer.java: constructDIR(): right val = customer
DIRRegionAnalyzer.java: constructDIR(): Subcase: v1.f = v2
AccessPath.java: replaceBase(): input access path: this.customer.customerId
AccessPath.java: replaceBase(): replacement of base: customer
DIRRegionAnalyzer.java: constructDIR(): Mapped: this.customer.customerId -> customer.customerId
AccessPath.java: replaceBase(): input access path: this.customer.firstName
AccessPath.java: replaceBase(): replacement of base: customer
DIRRegionAnalyzer.java: constructDIR(): Mapped: this.customer.firstName -> customer.firstName
AccessPath.java: replaceBase(): input access path: this.customer.lastName
AccessPath.java: replaceBase(): replacement of base: customer
DIRRegionAnalyzer.java: constructDIR(): Mapped: this.customer.lastName -> customer.lastName
DIRRegionAnalyzer.java: constructDIR(): curUnit = return
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ this ~~~
Self

~~~ this.customer.customerId ~~~
customer.customerId

~~~ this.customer.firstName ~~~
customer.firstName

~~~ this.customer.lastName ~~~
customer.lastName


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ this ~~~
Self

~~~ this.customer.customerId ~~~
customer.customerId

~~~ this.customer.firstName ~~~
customer.firstName

~~~ this.customer.lastName ~~~
customer.lastName


DIR.java: updateRegion(): update region entry: this.customer.firstName=customer.firstName
DIR.java: updateRegion(): update region entry: this.customer.customerId=customer.customerId
DIR.java: updateRegion(): update region entry: this.customer.lastName=customer.lastName
DIR.java: updateRegion(): update region entry: this=Self
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: customer
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.shakeel.model.Customer
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: $r7
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: customer
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [customer.customerId, customer.firstName, customer.lastName]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: customer.customerId
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.customer.firstName, this.customer.customerId, this.customer.lastName, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: customer.firstName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.customer.firstName, this.customer.customerId, this.customer.lastName, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: customer.lastName
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.customer.firstName, this.customer.customerId, this.customer.lastName, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.shakeel.model.CustomerOrder
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: $r3
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.orderId, this.total, this.products, this.customer]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.orderId
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.customer.firstName, this.customer.customerId, this.customer.lastName, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.total
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.customer.firstName, this.customer.customerId, this.customer.lastName, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.products
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.customer.firstName, this.customer.customerId, this.customer.lastName, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.customer
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [this.customer.firstName, this.customer.customerId, this.customer.lastName, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = setCustomer, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: customer
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: $r7
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [customer.customerId, customer.firstName, customer.lastName]
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: $r3
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.orderId, this.total, this.products, this.customer]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r8 = new java.util.HashSet
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
DIRRegionAnalyzer.java: constructDIR(): curUnit = specialinvoke $r8.<java.util.HashSet: void <init>()>()
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = specialinvoke $r8.<java.util.HashSet: void <init>()>()
DIRRegionAnalyzer.java: handleSideEffects(): methodname: <init>
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = java.util.HashSet: void <init>()

WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): curUnit = productSet = $r8
STOP
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2, type(v1, v2) = ptr
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: productSet
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r8
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: []
{productSet=$r8}
DIRRegionAnalyzer.java: constructDIR(): curUnit = l7 = productIds
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
Utils.java: getVarNode(): l7
Utils.java: getVarNode(): LinkedVariableBox(l7)
DIRRegionAnalyzer.java: constructDIR(): curUnit = l8 = lengthof productIds
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JLengthExpr
Utils.java: getVarNode(): l8
Utils.java: getVarNode(): LinkedVariableBox(l8)
DIRRegionAnalyzer.java: constructDIR(): curUnit = l9 = 0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.IntConstant
Utils.java: getVarNode(): l9
Utils.java: getVarNode(): LinkedVariableBox(l9)
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $l0 ~~~
BottomNode

~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ $r1 ~~~
this.customerRepository

~~~ $r3.orderId ~~~
BottomNode

~~~ $r3.total ~~~
BottomNode

~~~ $r4 ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName

~~~ $r5 ~~~
BottomNode

~~~ $r6 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r6.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r6.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r6.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r7 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r7.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r7.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r7.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r8 ~~~
BottomNode

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ customerOrder ~~~
$r3

~~~ customerOrder.customer ~~~
$r3.customer

~~~ customerOrder.orderId ~~~
BottomNode

~~~ customerOrder.products ~~~
$r3.products

~~~ customerOrder.total ~~~
BottomNode

~~~ l7 ~~~
productIds

~~~ l8 ~~~
lengthof productIds

~~~ l9 ~~~
0

~~~ this ~~~
Self

~~~ this.customerRepository ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $l0 ~~~
BottomNode

~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ $r1 ~~~
this.customerRepository

~~~ $r3.orderId ~~~
BottomNode

~~~ $r3.total ~~~
BottomNode

~~~ $r4 ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName

~~~ $r5 ~~~
BottomNode

~~~ $r6 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r6.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r6.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r6.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r7 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r7.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r7.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r7.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r8 ~~~
BottomNode

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ customerOrder ~~~
$r3

~~~ customerOrder.customer ~~~
$r3.customer

~~~ customerOrder.orderId ~~~
BottomNode

~~~ customerOrder.products ~~~
$r3.products

~~~ customerOrder.total ~~~
BottomNode

~~~ l7 ~~~
productIds

~~~ l8 ~~~
lengthof productIds

~~~ l9 ~~~
0

~~~ this ~~~
Self

~~~ this.customerRepository ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName


DIR.java: updateRegion(): update region entry: $r7.lastName=Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName
DIR.java: updateRegion(): update region entry: $r3.orderId=BottomNode
DIR.java: updateRegion(): update region entry: $r6.customerId=Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId
DIR.java: updateRegion(): update region entry: customer.customerId=BottomNode
DIR.java: updateRegion(): update region entry: $r0.firstName=firstName
DIR.java: updateRegion(): update region entry: customer.lastName=BottomNode
DIR.java: updateRegion(): update region entry: customerOrder=$r3
DIR.java: updateRegion(): update region entry: l7=productIds
DIR.java: updateRegion(): update region entry: l8=lengthof productIds
DIR.java: updateRegion(): update region entry: this.customerRepository=Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName
DIR.java: updateRegion(): update region entry: l9=0
DIR.java: updateRegion(): update region entry: $r0.customerId=BottomNode
DIR.java: updateRegion(): update region entry: customerOrder.customer=$r3.customer
DIR.java: updateRegion(): update region entry: customerOrder.orderId=BottomNode
DIR.java: updateRegion(): update region entry: $r6.lastName=Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName
DIR.java: updateRegion(): update region entry: $r7.firstName=Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName
DIR.java: updateRegion(): update region entry: $r3.total=BottomNode
DIR.java: updateRegion(): update region entry: $r1=this.customerRepository
DIR.java: updateRegion(): update region entry: $r4=Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName
DIR.java: updateRegion(): update region entry: $r5=BottomNode
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: $l0=BottomNode
DIR.java: updateRegion(): update region entry: $r6=Sel
| CustomerRepository
| Equals
| | id
| | BottomNode
DIR.java: updateRegion(): update region entry: $r0.lastName=lastName
DIR.java: updateRegion(): update region entry: $r7=Sel
| CustomerRepository
| Equals
| | id
| | BottomNode
DIR.java: updateRegion(): update region entry: customerOrder.total=BottomNode
DIR.java: updateRegion(): update region entry: $r8=BottomNode
DIR.java: updateRegion(): update region entry: customerOrder.products=$r3.products
DIR.java: updateRegion(): update region entry: $r7.customerId=Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId
DIR.java: updateRegion(): update region entry: customer.firstName=BottomNode
DIR.java: updateRegion(): update region entry: $r6.firstName=Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName
DIR.java: updateRegion(): update region entry: customer=$r0
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | BasicBlock0
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ $l0 ~~~
BottomNode

~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ $r1 ~~~
this.customerRepository

~~~ $r3.orderId ~~~
BottomNode

~~~ $r3.total ~~~
BottomNode

~~~ $r4 ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName

~~~ $r5 ~~~
BottomNode

~~~ $r6 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r6.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r6.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r6.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r7 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r7.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r7.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r7.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r8 ~~~
BottomNode

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ customerOrder ~~~
$r3

~~~ customerOrder.customer ~~~
$r3.customer

~~~ customerOrder.orderId ~~~
BottomNode

~~~ customerOrder.products ~~~
$r3.products

~~~ customerOrder.total ~~~
BottomNode

~~~ l7 ~~~
productIds

~~~ l8 ~~~
lengthof productIds

~~~ l9 ~~~
0

~~~ this ~~~
Self

~~~ this.customerRepository ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: 
analysis/Utils.java: resolveTree(): in: Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| CustomerRepository
| Equals
| | id
| | BottomNode
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:lastName
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: lastName
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| CustomerRepository
| Equals
| | id
| | BottomNode
analysis/Utils.java: resolveTree(): i = 0 child of top:CustomerRepository
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| id
| BottomNode
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| id
| BottomNode
analysis/Utils.java: resolveTree(): i = 0 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:BottomNode
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: BottomNode
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: CustomerRepository
analysis/Utils.java: resolveTree(): out: Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: BottomNode
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| CustomerRepository
| Equals
| | id
| | BottomNode
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:customerId
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: customerId
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| CustomerRepository
| Equals
| | id
| | BottomNode
analysis/Utils.java: resolveTree(): i = 0 child of top:CustomerRepository
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| id
| BottomNode
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| id
| BottomNode
analysis/Utils.java: resolveTree(): i = 0 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:BottomNode
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: CustomerRepository
analysis/Utils.java: resolveTree(): out: Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: BottomNode
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: firstName
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: BottomNode
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: $r3
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: productIds
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: lengthof productIds
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName
analysis/Utils.java: resolveTree(): i = 0 child of top:$r1
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Tuple
| $r0
| List
| | BottomNode
| | firstName
| | lastName
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Tuple
| $r0
| List
| | BottomNode
| | firstName
| | lastName
analysis/Utils.java: resolveTree(): i = 0 child of top:$r0
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:List
| BottomNode
| firstName
| lastName
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: List
| BottomNode
| firstName
| lastName
analysis/Utils.java: resolveTree(): i = 0 child of top:BottomNode
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:firstName
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:lastName
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: firstName
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r0
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: $r1
analysis/Utils.java: resolveTree(): out: Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: 0
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: BottomNode
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: $r3.customer
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: BottomNode
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): out: Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName
analysis/Utils.java: resolveTree(): i = 0 child of top:Sel
| CustomerRepository
| Equals
| | id
| | BottomNode
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:firstName
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| CustomerRepository
| Equals
| | id
| | BottomNode
analysis/Utils.java: resolveTree(): i = 0 child of top:CustomerRepository
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| id
| BottomNode
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| id
| BottomNode
analysis/Utils.java: resolveTree(): i = 0 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:BottomNode
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: CustomerRepository
analysis/Utils.java: resolveTree(): out: Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: BottomNode
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: this.customerRepository
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): out: Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: BottomNode
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: Self
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: BottomNode
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: Sel
| CustomerRepository
| Equals
| | id
| | BottomNode
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| CustomerRepository
| Equals
| | id
| | BottomNode
analysis/Utils.java: resolveTree(): i = 0 child of top:CustomerRepository
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Equals
| id
| BottomNode
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Equals
| id
| BottomNode
analysis/Utils.java: resolveTree(): i = 0 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:BottomNode
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: CustomerRepository
analysis/Utils.java: resolveTree(): out: Sel
| CustomerRepository
| Equals
| | id
| | BottomNode
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: lastName
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: Sel
| CustomerRepository
| Equals
| | id
| | BottomNode
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): out: Sel
| CustomerRepository
| Equals
| | id
| | BottomNode
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: BottomNode
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: BottomNode
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: $r3.products
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): out: Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: BottomNode
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): in: Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName
analysis/Utils.java: resolveTree(): dir: 
analysis/Utils.java: resolveTree(): out: Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: $r0
analysis/Utils.java: resolveTree(): dir: 
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.LoopRegion
DIRLoopRegionAnalyzer.java: constructDIR(): Analyzing loop head
ARegion.java: analyze(): set cur method of analyzer to: saveOrder
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 1
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.shakeel.controller.OrdersController, firstName := @parameter0: java.lang.String, lastName := @parameter1: java.lang.String, productIds := @parameter2: java.lang.Long[], $r0 = new com.shakeel.model.Customer, specialinvoke $r0.<com.shakeel.model.Customer: void <init>()>(), customer = $r0, virtualinvoke $r0.<com.shakeel.model.Customer: void setFirstName(java.lang.String)>(firstName), virtualinvoke $r0.<com.shakeel.model.Customer: void setLastName(java.lang.String)>(lastName), $r1 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>, interfaceinvoke $r1.<com.shakeel.repository.CustomerRepository: java.lang.Object save(java.lang.Object)>($r0), $r3 = new com.shakeel.model.CustomerOrder, specialinvoke $r3.<com.shakeel.model.CustomerOrder: void <init>()>(), customerOrder = $r3, $r4 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>, $l0 = virtualinvoke $r0.<com.shakeel.model.Customer: long getCustomerId()>(), $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0), $r6 = interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5), $r7 = (com.shakeel.model.Customer) $r6, virtualinvoke $r3.<com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)>($r7), $r8 = new java.util.HashSet, specialinvoke $r8.<java.util.HashSet: void <init>()>(), productSet = $r8, l7 = productIds, l8 = lengthof productIds, l9 = 0, if l9 >= l8 goto return "testing", productId = productIds[l9], $r9 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.ProductRepository productRepository>, $r10 = interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId), $r11 = (com.shakeel.model.Product) $r10, interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r11), l9 = l9 + 1, goto [?= (branch)], return "testing"]
DIRRegionAnalyzer.java: constructDIR(): curUnit = if l9 >= l8 goto return "testing"
IfStmtCons.java: construct(): condition (got from sootstmt.getCondition()l9 >= l8
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock1
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ condition ~~~
<
| l9
| l8


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ condition ~~~
<
| l9
| l8


DIR.java: updateRegion(): update region entry: condition=<
| l9
| l8
DIRLoopRegionAnalyzer.java: constructDIR(): Analyzing loop body
ARegion.java: analyze(): set cur method of analyzer to: saveOrder
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock2
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 2
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.shakeel.controller.OrdersController, firstName := @parameter0: java.lang.String, lastName := @parameter1: java.lang.String, productIds := @parameter2: java.lang.Long[], $r0 = new com.shakeel.model.Customer, specialinvoke $r0.<com.shakeel.model.Customer: void <init>()>(), customer = $r0, virtualinvoke $r0.<com.shakeel.model.Customer: void setFirstName(java.lang.String)>(firstName), virtualinvoke $r0.<com.shakeel.model.Customer: void setLastName(java.lang.String)>(lastName), $r1 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>, interfaceinvoke $r1.<com.shakeel.repository.CustomerRepository: java.lang.Object save(java.lang.Object)>($r0), $r3 = new com.shakeel.model.CustomerOrder, specialinvoke $r3.<com.shakeel.model.CustomerOrder: void <init>()>(), customerOrder = $r3, $r4 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>, $l0 = virtualinvoke $r0.<com.shakeel.model.Customer: long getCustomerId()>(), $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0), $r6 = interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5), $r7 = (com.shakeel.model.Customer) $r6, virtualinvoke $r3.<com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)>($r7), $r8 = new java.util.HashSet, specialinvoke $r8.<java.util.HashSet: void <init>()>(), productSet = $r8, l7 = productIds, l8 = lengthof productIds, l9 = 0, if l9 >= l8 goto return "testing", productId = productIds[l9], $r9 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.ProductRepository productRepository>, $r10 = interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId), $r11 = (com.shakeel.model.Product) $r10, interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r11), l9 = l9 + 1, goto [?= (branch)], return "testing"]
DIRRegionAnalyzer.java: constructDIR(): curUnit = productId = productIds[l9]
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JArrayRef
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r9 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.ProductRepository productRepository>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r9 -> this.productRepository
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r10 = interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = findOne
construct/Utils.java: parseInvokeExpr(): methodSignature = java.lang.Object: java.lang.Object findOne(java.io.Serializable)
construct/Utils.java: parseObjectInvoke(): interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.lang.Object: java.lang.Object findOne(java.io.Serializable)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>
construct/Utils.java: parseObjectInvoke(): methodName = findOne
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId)
construct/Utils.java: parseObjectInvoke(): methodSignature = java.lang.Object: java.lang.Object findOne(java.io.Serializable)
construct/Utils.java: parseObjectInvoke(): repostr in findOne case: com.shakeel.repository.ProductRepository
construct/Utils.java: parseObjectInvoke(): entity for repo in findOne case: com.shakeel.model.Product
construct/Utils.java: parseObjectInvoke(): entity class findOne case: com.shakeel.model.Product
construct/Utils.java: parseObjectInvoke(): check 1 =Sel
| ProductRepository
| Equals
| | id
| | productId
cosntruct/utils.java: mapDBFetchAccessGraph(): check relExpBaseAccp= Sel
| ProductRepository
| Equals
| | id
| | productId
cosntruct/utils.java: mapDBFetchAccessGraph(): prim fields = [<com.shakeel.model.Product: java.lang.Long productId>, <com.shakeel.model.Product: java.lang.String productName>, <com.shakeel.model.Product: java.lang.Double productPrice>]
cosntruct/utils.java: mapDBFetchAccessGraph(): oneToOne fields= []
cosntruct/utils.java: mapDBFetchAccessGraph(): manyToOne fields = []
cosntruct/utils.java: mapDBFetchAccessGraph(): collection fields = []
cosntruct/utils.java: mapDBFetchAccessGraph(): manyTomany fields = []
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = java.lang.Object
DIRRegionAnalyzer.java: constructDIR(): leftType : java.lang.Object
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: $r10
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId)
DIRRegionAnalyzer.java: constructDIR(): left type = java.lang.Object
DIRRegionAnalyzer.java: constructDIR(): java.lang.Object
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: java.lang.Object
DIRRegionAnalyzer.java: constructDIR(): method sig = java.lang.Object: java.lang.Object findOne(java.io.Serializable)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{com.shakeel.model.Customer: void setLastName(java.lang.String)=~~~ this ~~~
Self

~~~ this.lastName ~~~
lastName

, java.lang.Object: java.lang.Object findOne(java.io.Serializable)=~~~ return ~~~
Sel
| ProductRepository
| Equals
| | id
| | productId

~~~ return.productId ~~~
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | productId
| productId

~~~ return.productName ~~~
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | productId
| productName

~~~ return.productPrice ~~~
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | productId
| productPrice

, com.shakeel.model.Customer: long getCustomerId()=~~~ $l0 ~~~
this.customerId

~~~ return ~~~
this.customerId

~~~ this ~~~
Self

, com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)=~~~ this ~~~
Self

~~~ this.customer.customerId ~~~
customer.customerId

~~~ this.customer.firstName ~~~
customer.firstName

~~~ this.customer.lastName ~~~
customer.lastName

, com.shakeel.model.Customer: void setFirstName(java.lang.String)=~~~ this ~~~
Self

~~~ this.firstName ~~~
firstName

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ return ~~~
Sel
| ProductRepository
| Equals
| | id
| | productId

~~~ return.productId ~~~
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | productId
| productId

~~~ return.productName ~~~
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | productId
| productName

~~~ return.productPrice ~~~
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | productId
| productPrice


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: []
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Sel
| ProductRepository
| Equals
| | id
| | productId
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.lang.Object: java.lang.Object findOne(java.io.Serializable)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.shakeel.model.Customer: void setLastName(java.lang.String), com.shakeel.model.Customer: long getCustomerId(), com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[]), com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer), com.shakeel.model.Customer: void setFirstName(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): leftType = com.shakeel.model.Product
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: findOne
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = java.lang.Object: java.lang.Object findOne(java.io.Serializable)

WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
NRA.java: processTableandFields: com.shakeel.model.Product fields = [<com.shakeel.model.Product: java.lang.Long productId>, <com.shakeel.model.Product: java.lang.String productName>, <com.shakeel.model.Product: java.lang.Double productPrice>]
NRA.java: processTableandFields: sf <com.shakeel.model.Product: java.lang.Long productId>  type=FieldData
NRA.java: processTableandFields: sf <com.shakeel.model.Product: java.lang.String productName>  type=FieldData
NRA.java: processTableandFields: sf <com.shakeel.model.Product: java.lang.Double productPrice>  type=FieldData
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = $r10, com.shakeel.model.Product
DIRRegionAnalyzer.java: constructDIR(): accesspaths = [$r10.productId, $r10.productName, $r10.productPrice]
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [com.shakeel.model.Customer: void setLastName(java.lang.String), java.lang.Object: java.lang.Object findOne(java.io.Serializable), com.shakeel.model.Customer: long getCustomerId(), com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer), com.shakeel.model.Customer: void setFirstName(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callee = java.lang.Object: java.lang.Object findOne(java.io.Serializable)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
Flatten.java: getNestedFields(): LVAL TYPE: com.shakeel.model.Product
Flatten.java: getNestedFields(): Type of sf: <com.shakeel.model.Product: java.lang.Long productId> = java.lang.Long
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

]
Flatten.java: getNestedFields(): Id fields=productId
Flatten.java: getNestedFields(): Type of sf: <com.shakeel.model.Product: java.lang.String productName> = java.lang.String
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.shakeel.model.Product: java.lang.Double productPrice> = java.lang.Double
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): returning: []
DIRRegionAnalyzer.java: constructDIR(): check nestedFields=[]
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = java.lang.Object: java.lang.Object findOne(java.io.Serializable)
DIRRegionAnalyzer.java: constructDIR(): key = return.productName
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | productId
| productName
DIRRegionAnalyzer.java: constructDIR(): key = return.productId
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | productId
| productId
DIRRegionAnalyzer.java: constructDIR(): key = return.productPrice
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | productId
| productPrice
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ProductRepository
| Equals
| | id
| | productId
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = java.lang.Object: java.lang.Object findOne(java.io.Serializable) END
DIRRegionAnalyzer.java: constructDIR(): v1 access paths: [$r10.productId, $r10.productName, $r10.productPrice]
DIRRegionAnalyzer.java: constructDIR(): key = $r10.productId
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.productId
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | productId
| productId
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.lang.Object: java.lang.Object findOne(java.io.Serializable)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.shakeel.model.Customer: void setLastName(java.lang.String), com.shakeel.model.Customer: long getCustomerId(), com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[]), com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer), com.shakeel.model.Customer: void setFirstName(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| ArrayRef
| | productIds
| | l9
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| ArrayRef
| | productIds
| | l9
DIRRegionAnalyzer.java: constructDIR(): key = $r10.productName
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.productName
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | productId
| productName
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.lang.Object: java.lang.Object findOne(java.io.Serializable)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.shakeel.model.Customer: void setLastName(java.lang.String), com.shakeel.model.Customer: long getCustomerId(), com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[]), com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer), com.shakeel.model.Customer: void setFirstName(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| productName
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| productName
DIRRegionAnalyzer.java: constructDIR(): key = $r10.productPrice
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.productPrice
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | productId
| productPrice
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.lang.Object: java.lang.Object findOne(java.io.Serializable)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.shakeel.model.Customer: void setLastName(java.lang.String), com.shakeel.model.Customer: long getCustomerId(), com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[]), com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer), com.shakeel.model.Customer: void setFirstName(java.lang.String)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| productPrice
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| productPrice
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r11 = (com.shakeel.model.Product) $r10
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JCastExpr
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = (type1) v2
DIRRegionAnalyzer.java: constructDIR(): type1: com.shakeel.model.Product
DIRRegionAnalyzer.java: constructDIR(): castExpr: (com.shakeel.model.Product) $r10
DIRRegionAnalyzer.java: constructDIR(): v2: $r10
DIRRegionAnalyzer.java: constructDIR(): cur dir: {productId=ArrayRef
| productIds
| l9, $r10.productName=Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| productName, $r10.productId=Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| ArrayRef
| | productIds
| | l9, $r10.productPrice=Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| productPrice, $r9=this.productRepository, $r10=Sel
| ProductRepository
| Equals
| | id
| | ArrayRef
| | | productIds
| | | l9}
DIRRegionAnalyzer.java: constructDIR(): rightVar in dir: true
WARN: DIRRegionAnalyzer.java: processPointerAssignment(): v1 and v2 have diff types
WARN: DIRRegionAnalyzer.java: processPointerAssignment(): type(v1) = com.shakeel.model.Product
WARN: DIRRegionAnalyzer.java: processPointerAssignment(): type(v2) = java.lang.Object
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: $r11
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r10
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [Product.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
]
AccessPath.java: replaceBase(): input access path: $r11.productId
AccessPath.java: replaceBase(): replacement of base: $r10
AccessPath.java: replaceBase(): input access path: $r11.productName
AccessPath.java: replaceBase(): replacement of base: $r10
AccessPath.java: replaceBase(): input access path: $r11.productPrice
AccessPath.java: replaceBase(): replacement of base: $r10
DIRRegionAnalyzer.java: constructDIR(): curUnit = interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r11)
DIRRegionAnalyzer.java: constructDIR(): curUnit = l9 = l9 + 1
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JAddExpr
Utils.java: getVarNode(): l9
Utils.java: getVarNode(): LinkedVariableBox(l9)
DIRRegionAnalyzer.java: constructDIR(): curUnit = goto [?= (branch)]
DIRRegionAnalyzer.java: constructDIR(): GOTO stmt in seq region
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock2
Inside toString() of ArithAddNode.java
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r10 ~~~
Sel
| ProductRepository
| Equals
| | id
| | ArrayRef
| | | productIds
| | | l9

~~~ $r10.productId ~~~
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| ArrayRef
| | productIds
| | l9

~~~ $r10.productName ~~~
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| productName

~~~ $r10.productPrice ~~~
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| productPrice

~~~ $r11 ~~~
Sel
| ProductRepository
| Equals
| | id
| | ArrayRef
| | | productIds
| | | l9

~~~ $r11.productId ~~~
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| ArrayRef
| | productIds
| | l9

~~~ $r11.productName ~~~
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| productName

~~~ $r11.productPrice ~~~
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| productPrice

~~~ $r8 ~~~
AddWithFieldExprs
| $r8
| Tuple
| | Sel
| | | ProductRepository
| | | Equals
| | | | id
| | | | ArrayRef
| | | | | productIds
| | | | | l9
| | List
| | | productId
| | | productName
| | | productPrice

~~~ $r9 ~~~
this.productRepository

~~~ l9 ~~~
+
| l9
| 1

~~~ productId ~~~
ArrayRef
| productIds
| l9


Inside toString() of ArithAddNode.java
AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r10 ~~~
Sel
| ProductRepository
| Equals
| | id
| | ArrayRef
| | | productIds
| | | l9

~~~ $r10.productId ~~~
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| ArrayRef
| | productIds
| | l9

~~~ $r10.productName ~~~
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| productName

~~~ $r10.productPrice ~~~
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| productPrice

~~~ $r11 ~~~
Sel
| ProductRepository
| Equals
| | id
| | ArrayRef
| | | productIds
| | | l9

~~~ $r11.productId ~~~
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| ArrayRef
| | productIds
| | l9

~~~ $r11.productName ~~~
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| productName

~~~ $r11.productPrice ~~~
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| productPrice

~~~ $r8 ~~~
AddWithFieldExprs
| $r8
| Tuple
| | Sel
| | | ProductRepository
| | | Equals
| | | | id
| | | | ArrayRef
| | | | | productIds
| | | | | l9
| | List
| | | productId
| | | productName
| | | productPrice

~~~ $r9 ~~~
this.productRepository

~~~ l9 ~~~
+
| l9
| 1

~~~ productId ~~~
ArrayRef
| productIds
| l9


DIR.java: updateRegion(): update region entry: $r11.productPrice=Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| productPrice
DIR.java: updateRegion(): update region entry: productId=ArrayRef
| productIds
| l9
DIR.java: updateRegion(): update region entry: $r10.productName=Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| productName
DIR.java: updateRegion(): update region entry: $r10.productId=Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| ArrayRef
| | productIds
| | l9
DIR.java: updateRegion(): update region entry: $r10.productPrice=Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| productPrice
DIR.java: updateRegion(): update region entry: $r11.productId=Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| ArrayRef
| | productIds
| | l9
DIR.java: updateRegion(): update region entry: $r11.productName=Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| productName
DIR.java: updateRegion(): update region entry: $r8=AddWithFieldExprs
| $r8
| Tuple
| | Sel
| | | ProductRepository
| | | Equals
| | | | id
| | | | ArrayRef
| | | | | productIds
| | | | | l9
| | List
| | | productId
| | | productName
| | | productPrice
DIR.java: updateRegion(): update region entry: $r9=this.productRepository
DIR.java: updateRegion(): update region entry: $r11=Sel
| ProductRepository
| Equals
| | id
| | ArrayRef
| | | productIds
| | | l9
Inside toString() of ArithAddNode.java
DIR.java: updateRegion(): update region entry: l9=+
| l9
| 1
DIR.java: updateRegion(): update region entry: $r10=Sel
| ProductRepository
| Equals
| | id
| | ArrayRef
| | | productIds
| | | l9
DIRLoopRegionAnalyzer.java: constructDIR(): Done with analyzing loop body
Inside toString() of ArithAddNode.java
DIRLoopRegionAnalyzer.java: constructDIR(): bodyVEMap: {$r11.productPrice=Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| productPrice, productId=ArrayRef
| productIds
| l9, $r10.productName=Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| productName, $r10.productId=Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| ArrayRef
| | productIds
| | l9, $r10.productPrice=Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| productPrice, $r11.productId=Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| ArrayRef
| | productIds
| | l9, $r11.productName=Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | ArrayRef
| | | | productIds
| | | | l9
| productName, $r8=AddWithFieldExprs
| $r8
| Tuple
| | Sel
| | | ProductRepository
| | | Equals
| | | | id
| | | | ArrayRef
| | | | | productIds
| | | | | l9
| | List
| | | productId
| | | productName
| | | productPrice, $r9=this.productRepository, $r11=Sel
| ProductRepository
| Equals
| | id
| | ArrayRef
| | | productIds
| | | l9, l9=+
| l9
| 1, $r10=Sel
| ProductRepository
| Equals
| | id
| | ArrayRef
| | | productIds
| | | l9}
DIRLoopRegionAnalyzer.java: constructDIR(): headVEMap: {condition=<
| l9
| l8}
DIRLoopRegionAnalyzer.java: constructDIR(): headR: | BasicBlock1
DIRLoopRegionAnalyzer.java: getLoopingCol(): headDIR: ~~~ condition ~~~
<
| l9
| l8


DIRLoopRegionAnalyzer.java: constructDIR(): loopingVar: productIds
DIRLoopRegionAnalyzer.java: constructDIR(): foldVars: [$r11.productPrice, productId, $r10.productName, $r10.productId, $r10.productPrice, $r11.productId, $r11.productName, $r8, $r9, $r11, l9, $r10]
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r11.productPrice
Body_Expr:
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | NextOp
| productPrice
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: productId
Body_Expr:
NextOp
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r10.productName
Body_Expr:
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | NextOp
| productName
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r10.productId
Body_Expr:
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | NextOp
| NextOp
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r10.productPrice
Body_Expr:
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | NextOp
| productPrice
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r11.productId
Body_Expr:
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | NextOp
| NextOp
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r11.productName
Body_Expr:
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | NextOp
| productName
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r8
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r9
Body_Expr:
this.productRepository
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r11
Body_Expr:
Sel
| ProductRepository
| Equals
| | id
| | NextOp
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: l9
Body_Expr:
Inside toString() of ArithAddNode.java
+
| <v11>
| 1
DIRLoopRegionAnalyzer.java: constructDIR(): uvar: $r10
Body_Expr:
Sel
| ProductRepository
| Equals
| | id
| | NextOp
DIRLoopRegionAnalyzer.java: constructDIR(): loopDIR: {$r11.productPrice=UnknownNode, productId=UnknownNode, $r10.productName=UnknownNode, $r10.productId=UnknownNode, $r10.productPrice=UnknownNode, $r11.productId=UnknownNode, $r11.productName=UnknownNode, $r8=UnionOp
| Pi
| | List
| | | productId
| | | productName
| | | productPrice
| | Sel
| | | ProductRepository
| | | IN
| | | | id
| | | | productIds
| $r8, $r9=UnknownNode, $r11=UnknownNode, l9=UnknownNode, $r10=UnknownNode}
AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r10 ~~~
UnknownNode

~~~ $r10.productId ~~~
UnknownNode

~~~ $r10.productName ~~~
UnknownNode

~~~ $r10.productPrice ~~~
UnknownNode

~~~ $r11 ~~~
UnknownNode

~~~ $r11.productId ~~~
UnknownNode

~~~ $r11.productName ~~~
UnknownNode

~~~ $r11.productPrice ~~~
UnknownNode

~~~ $r8 ~~~
UnionOp
| Pi
| | List
| | | productId
| | | productName
| | | productPrice
| | Sel
| | | ProductRepository
| | | IN
| | | | id
| | | | productIds
| $r8

~~~ $r9 ~~~
UnknownNode

~~~ l9 ~~~
UnknownNode

~~~ productId ~~~
UnknownNode


DIR.java: updateRegion(): update region entry: $r11.productPrice=UnknownNode
DIR.java: updateRegion(): update region entry: productId=UnknownNode
DIR.java: updateRegion(): update region entry: $r10.productName=UnknownNode
DIR.java: updateRegion(): update region entry: $r10.productId=UnknownNode
DIR.java: updateRegion(): update region entry: $r10.productPrice=UnknownNode
DIR.java: updateRegion(): update region entry: $r11.productId=UnknownNode
DIR.java: updateRegion(): update region entry: $r11.productName=UnknownNode
DIR.java: updateRegion(): update region entry: $r8=UnionOp
| Pi
| | List
| | | productId
| | | productName
| | | productPrice
| | Sel
| | | ProductRepository
| | | IN
| | | | id
| | | | productIds
| $r8
DIR.java: updateRegion(): update region entry: $r9=UnknownNode
DIR.java: updateRegion(): update region entry: $r11=UnknownNode
DIR.java: updateRegion(): update region entry: l9=UnknownNode
DIR.java: updateRegion(): update region entry: $r10=UnknownNode
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | WhileLoop
| | BasicBlock1
| | BasicBlock2

DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ $r10 ~~~
UnknownNode

~~~ $r10.productId ~~~
UnknownNode

~~~ $r10.productName ~~~
UnknownNode

~~~ $r10.productPrice ~~~
UnknownNode

~~~ $r11 ~~~
UnknownNode

~~~ $r11.productId ~~~
UnknownNode

~~~ $r11.productName ~~~
UnknownNode

~~~ $r11.productPrice ~~~
UnknownNode

~~~ $r8 ~~~
UnionOp
| Pi
| | List
| | | productId
| | | productName
| | | productPrice
| | Sel
| | | ProductRepository
| | | IN
| | | | id
| | | | productIds
| $r8

~~~ $r9 ~~~
UnknownNode

~~~ l9 ~~~
UnknownNode

~~~ productId ~~~
UnknownNode


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $l0 ~~~
BottomNode

~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ $r1 ~~~
this.customerRepository

~~~ $r3.orderId ~~~
BottomNode

~~~ $r3.total ~~~
BottomNode

~~~ $r4 ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName

~~~ $r5 ~~~
BottomNode

~~~ $r6 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r6.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r6.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r6.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r7 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r7.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r7.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r7.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r8 ~~~
BottomNode

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ customerOrder ~~~
$r3

~~~ customerOrder.customer ~~~
$r3.customer

~~~ customerOrder.orderId ~~~
BottomNode

~~~ customerOrder.products ~~~
$r3.products

~~~ customerOrder.total ~~~
BottomNode

~~~ l7 ~~~
productIds

~~~ l8 ~~~
lengthof productIds

~~~ l9 ~~~
0

~~~ this ~~~
Self

~~~ this.customerRepository ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName


analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $l0 ~~~
BottomNode

~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ $r1 ~~~
this.customerRepository

~~~ $r3.orderId ~~~
BottomNode

~~~ $r3.total ~~~
BottomNode

~~~ $r4 ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName

~~~ $r5 ~~~
BottomNode

~~~ $r6 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r6.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r6.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r6.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r7 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r7.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r7.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r7.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r8 ~~~
BottomNode

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ customerOrder ~~~
$r3

~~~ customerOrder.customer ~~~
$r3.customer

~~~ customerOrder.orderId ~~~
BottomNode

~~~ customerOrder.products ~~~
$r3.products

~~~ customerOrder.total ~~~
BottomNode

~~~ l7 ~~~
productIds

~~~ l8 ~~~
lengthof productIds

~~~ l9 ~~~
0

~~~ this ~~~
Self

~~~ this.customerRepository ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName


analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $l0 ~~~
BottomNode

~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ $r1 ~~~
this.customerRepository

~~~ $r3.orderId ~~~
BottomNode

~~~ $r3.total ~~~
BottomNode

~~~ $r4 ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName

~~~ $r5 ~~~
BottomNode

~~~ $r6 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r6.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r6.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r6.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r7 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r7.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r7.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r7.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r8 ~~~
BottomNode

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ customerOrder ~~~
$r3

~~~ customerOrder.customer ~~~
$r3.customer

~~~ customerOrder.orderId ~~~
BottomNode

~~~ customerOrder.products ~~~
$r3.products

~~~ customerOrder.total ~~~
BottomNode

~~~ l7 ~~~
productIds

~~~ l8 ~~~
lengthof productIds

~~~ l9 ~~~
0

~~~ this ~~~
Self

~~~ this.customerRepository ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName


analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $l0 ~~~
BottomNode

~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ $r1 ~~~
this.customerRepository

~~~ $r3.orderId ~~~
BottomNode

~~~ $r3.total ~~~
BottomNode

~~~ $r4 ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName

~~~ $r5 ~~~
BottomNode

~~~ $r6 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r6.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r6.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r6.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r7 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r7.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r7.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r7.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r8 ~~~
BottomNode

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ customerOrder ~~~
$r3

~~~ customerOrder.customer ~~~
$r3.customer

~~~ customerOrder.orderId ~~~
BottomNode

~~~ customerOrder.products ~~~
$r3.products

~~~ customerOrder.total ~~~
BottomNode

~~~ l7 ~~~
productIds

~~~ l8 ~~~
lengthof productIds

~~~ l9 ~~~
0

~~~ this ~~~
Self

~~~ this.customerRepository ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName


analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $l0 ~~~
BottomNode

~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ $r1 ~~~
this.customerRepository

~~~ $r3.orderId ~~~
BottomNode

~~~ $r3.total ~~~
BottomNode

~~~ $r4 ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName

~~~ $r5 ~~~
BottomNode

~~~ $r6 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r6.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r6.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r6.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r7 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r7.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r7.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r7.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r8 ~~~
BottomNode

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ customerOrder ~~~
$r3

~~~ customerOrder.customer ~~~
$r3.customer

~~~ customerOrder.orderId ~~~
BottomNode

~~~ customerOrder.products ~~~
$r3.products

~~~ customerOrder.total ~~~
BottomNode

~~~ l7 ~~~
productIds

~~~ l8 ~~~
lengthof productIds

~~~ l9 ~~~
0

~~~ this ~~~
Self

~~~ this.customerRepository ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName


analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $l0 ~~~
BottomNode

~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ $r1 ~~~
this.customerRepository

~~~ $r3.orderId ~~~
BottomNode

~~~ $r3.total ~~~
BottomNode

~~~ $r4 ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName

~~~ $r5 ~~~
BottomNode

~~~ $r6 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r6.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r6.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r6.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r7 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r7.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r7.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r7.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r8 ~~~
BottomNode

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ customerOrder ~~~
$r3

~~~ customerOrder.customer ~~~
$r3.customer

~~~ customerOrder.orderId ~~~
BottomNode

~~~ customerOrder.products ~~~
$r3.products

~~~ customerOrder.total ~~~
BottomNode

~~~ l7 ~~~
productIds

~~~ l8 ~~~
lengthof productIds

~~~ l9 ~~~
0

~~~ this ~~~
Self

~~~ this.customerRepository ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName


analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $l0 ~~~
BottomNode

~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ $r1 ~~~
this.customerRepository

~~~ $r3.orderId ~~~
BottomNode

~~~ $r3.total ~~~
BottomNode

~~~ $r4 ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName

~~~ $r5 ~~~
BottomNode

~~~ $r6 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r6.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r6.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r6.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r7 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r7.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r7.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r7.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r8 ~~~
BottomNode

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ customerOrder ~~~
$r3

~~~ customerOrder.customer ~~~
$r3.customer

~~~ customerOrder.orderId ~~~
BottomNode

~~~ customerOrder.products ~~~
$r3.products

~~~ customerOrder.total ~~~
BottomNode

~~~ l7 ~~~
productIds

~~~ l8 ~~~
lengthof productIds

~~~ l9 ~~~
0

~~~ this ~~~
Self

~~~ this.customerRepository ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName


analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $l0 ~~~
BottomNode

~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ $r1 ~~~
this.customerRepository

~~~ $r3.orderId ~~~
BottomNode

~~~ $r3.total ~~~
BottomNode

~~~ $r4 ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName

~~~ $r5 ~~~
BottomNode

~~~ $r6 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r6.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r6.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r6.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r7 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r7.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r7.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r7.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r8 ~~~
BottomNode

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ customerOrder ~~~
$r3

~~~ customerOrder.customer ~~~
$r3.customer

~~~ customerOrder.orderId ~~~
BottomNode

~~~ customerOrder.products ~~~
$r3.products

~~~ customerOrder.total ~~~
BottomNode

~~~ l7 ~~~
productIds

~~~ l8 ~~~
lengthof productIds

~~~ l9 ~~~
0

~~~ this ~~~
Self

~~~ this.customerRepository ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName


analysis/Utils.java: resolveTree(): in: UnionOp
| Pi
| | List
| | | productId
| | | productName
| | | productPrice
| | Sel
| | | ProductRepository
| | | IN
| | | | id
| | | | productIds
| $r8
analysis/Utils.java: resolveTree(): dir: ~~~ $l0 ~~~
BottomNode

~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ $r1 ~~~
this.customerRepository

~~~ $r3.orderId ~~~
BottomNode

~~~ $r3.total ~~~
BottomNode

~~~ $r4 ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName

~~~ $r5 ~~~
BottomNode

~~~ $r6 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r6.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r6.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r6.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r7 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r7.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r7.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r7.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r8 ~~~
BottomNode

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ customerOrder ~~~
$r3

~~~ customerOrder.customer ~~~
$r3.customer

~~~ customerOrder.orderId ~~~
BottomNode

~~~ customerOrder.products ~~~
$r3.products

~~~ customerOrder.total ~~~
BottomNode

~~~ l7 ~~~
productIds

~~~ l8 ~~~
lengthof productIds

~~~ l9 ~~~
0

~~~ this ~~~
Self

~~~ this.customerRepository ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName


analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: UnionOp
| Pi
| | List
| | | productId
| | | productName
| | | productPrice
| | Sel
| | | ProductRepository
| | | IN
| | | | id
| | | | productIds
| $r8
analysis/Utils.java: resolveTree(): i = 0 child of top:Pi
| List
| | productId
| | productName
| | productPrice
| Sel
| | ProductRepository
| | IN
| | | id
| | | productIds
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:$r8
analysis/Utils.java: resolveTree(): top: UnionOp
| Pi
| | List
| | | productId
| | | productName
| | | productPrice
| | Sel
| | | ProductRepository
| | | IN
| | | | id
| | | | productIds
| $r8
analysis/Utils.java: resolveTree(): resolvedValChild: BottomNode
analysis/Utils.java: resolveTree(): new top: UnionOp
| Pi
| | List
| | | productId
| | | productName
| | | productPrice
| | Sel
| | | ProductRepository
| | | IN
| | | | id
| | | | productIds
| BottomNode
analysis/Utils.java: resolveTree(): newChildValueList.size(): 1
analysis/Utils.java: resolveTree(): newChildValueList: [1=BottomNode]
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Pi
| List
| | productId
| | productName
| | productPrice
| Sel
| | ProductRepository
| | IN
| | | id
| | | productIds
analysis/Utils.java: resolveTree(): i = 0 child of top:List
| productId
| productName
| productPrice
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:Sel
| ProductRepository
| IN
| | id
| | productIds
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: Sel
| ProductRepository
| IN
| | id
| | productIds
analysis/Utils.java: resolveTree(): i = 0 child of top:ProductRepository
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:IN
| id
| productIds
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: IN
| id
| productIds
analysis/Utils.java: resolveTree(): i = 0 child of top:id
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:productIds
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: productIds
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: id
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: ProductRepository
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: List
| productId
| productName
| productPrice
analysis/Utils.java: resolveTree(): i = 0 child of top:productId
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 1 child of top:productName
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): i = 2 child of top:productPrice
analysis/Utils.java: resolveTree(): stack add
analysis/Utils.java: resolveTree(): newChildValueList.size(): 0
analysis/Utils.java: resolveTree(): newChildValueList: []
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: productPrice
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: productName
analysis/Utils.java: resolveTree(): stack pop
analysis/Utils.java: resolveTree(): popped: productId
analysis/Utils.java: resolveTree(): out: UnionOp
| Pi
| | List
| | | productId
| | | productName
| | | productPrice
| | Sel
| | | ProductRepository
| | | IN
| | | | id
| | | | productIds
| BottomNode
analysis/Utils.java: resolveTree(): return
analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $l0 ~~~
BottomNode

~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ $r1 ~~~
this.customerRepository

~~~ $r3.orderId ~~~
BottomNode

~~~ $r3.total ~~~
BottomNode

~~~ $r4 ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName

~~~ $r5 ~~~
BottomNode

~~~ $r6 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r6.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r6.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r6.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r7 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r7.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r7.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r7.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r8 ~~~
BottomNode

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ customerOrder ~~~
$r3

~~~ customerOrder.customer ~~~
$r3.customer

~~~ customerOrder.orderId ~~~
BottomNode

~~~ customerOrder.products ~~~
$r3.products

~~~ customerOrder.total ~~~
BottomNode

~~~ l7 ~~~
productIds

~~~ l8 ~~~
lengthof productIds

~~~ l9 ~~~
0

~~~ this ~~~
Self

~~~ this.customerRepository ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName


analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $l0 ~~~
BottomNode

~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ $r1 ~~~
this.customerRepository

~~~ $r3.orderId ~~~
BottomNode

~~~ $r3.total ~~~
BottomNode

~~~ $r4 ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName

~~~ $r5 ~~~
BottomNode

~~~ $r6 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r6.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r6.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r6.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r7 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r7.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r7.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r7.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r8 ~~~
BottomNode

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ customerOrder ~~~
$r3

~~~ customerOrder.customer ~~~
$r3.customer

~~~ customerOrder.orderId ~~~
BottomNode

~~~ customerOrder.products ~~~
$r3.products

~~~ customerOrder.total ~~~
BottomNode

~~~ l7 ~~~
productIds

~~~ l8 ~~~
lengthof productIds

~~~ l9 ~~~
0

~~~ this ~~~
Self

~~~ this.customerRepository ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName


analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $l0 ~~~
BottomNode

~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ $r1 ~~~
this.customerRepository

~~~ $r3.orderId ~~~
BottomNode

~~~ $r3.total ~~~
BottomNode

~~~ $r4 ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName

~~~ $r5 ~~~
BottomNode

~~~ $r6 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r6.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r6.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r6.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r7 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r7.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r7.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r7.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r8 ~~~
BottomNode

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ customerOrder ~~~
$r3

~~~ customerOrder.customer ~~~
$r3.customer

~~~ customerOrder.orderId ~~~
BottomNode

~~~ customerOrder.products ~~~
$r3.products

~~~ customerOrder.total ~~~
BottomNode

~~~ l7 ~~~
productIds

~~~ l8 ~~~
lengthof productIds

~~~ l9 ~~~
0

~~~ this ~~~
Self

~~~ this.customerRepository ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName


analysis/Utils.java: resolveTree(): in: UnknownNode
analysis/Utils.java: resolveTree(): dir: ~~~ $l0 ~~~
BottomNode

~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ $r1 ~~~
this.customerRepository

~~~ $r3.orderId ~~~
BottomNode

~~~ $r3.total ~~~
BottomNode

~~~ $r4 ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName

~~~ $r5 ~~~
BottomNode

~~~ $r6 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r6.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r6.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r6.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r7 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r7.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r7.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r7.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r8 ~~~
BottomNode

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ customerOrder ~~~
$r3

~~~ customerOrder.customer ~~~
$r3.customer

~~~ customerOrder.orderId ~~~
BottomNode

~~~ customerOrder.products ~~~
$r3.products

~~~ customerOrder.total ~~~
BottomNode

~~~ l7 ~~~
productIds

~~~ l8 ~~~
lengthof productIds

~~~ l9 ~~~
0

~~~ this ~~~
Self

~~~ this.customerRepository ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName


DIRSequentialRegionAnalyzerN.java: constructDIR(): subregion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: saveOrder
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock3
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 3
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.shakeel.controller.OrdersController, firstName := @parameter0: java.lang.String, lastName := @parameter1: java.lang.String, productIds := @parameter2: java.lang.Long[], $r0 = new com.shakeel.model.Customer, specialinvoke $r0.<com.shakeel.model.Customer: void <init>()>(), customer = $r0, virtualinvoke $r0.<com.shakeel.model.Customer: void setFirstName(java.lang.String)>(firstName), virtualinvoke $r0.<com.shakeel.model.Customer: void setLastName(java.lang.String)>(lastName), $r1 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>, interfaceinvoke $r1.<com.shakeel.repository.CustomerRepository: java.lang.Object save(java.lang.Object)>($r0), $r3 = new com.shakeel.model.CustomerOrder, specialinvoke $r3.<com.shakeel.model.CustomerOrder: void <init>()>(), customerOrder = $r3, $r4 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.CustomerRepository customerRepository>, $l0 = virtualinvoke $r0.<com.shakeel.model.Customer: long getCustomerId()>(), $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0), $r6 = interfaceinvoke $r4.<com.shakeel.repository.CustomerRepository: java.lang.Object findOne(java.io.Serializable)>($r5), $r7 = (com.shakeel.model.Customer) $r6, virtualinvoke $r3.<com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)>($r7), $r8 = new java.util.HashSet, specialinvoke $r8.<java.util.HashSet: void <init>()>(), productSet = $r8, l7 = productIds, l8 = lengthof productIds, l9 = 0, if l9 >= l8 goto return "testing", productId = productIds[l9], $r9 = this.<com.shakeel.controller.OrdersController: com.shakeel.repository.ProductRepository productRepository>, $r10 = interfaceinvoke $r9.<com.shakeel.repository.ProductRepository: java.lang.Object findOne(java.io.Serializable)>(productId), $r11 = (com.shakeel.model.Product) $r10, interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>($r11), l9 = l9 + 1, goto [?= (branch)], return "testing"]
DIRRegionAnalyzer.java: constructDIR(): curUnit = return "testing"
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock3
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ return ~~~
"testing"


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ return ~~~
"testing"


DIR.java: updateRegion(): update region entry: return="testing"
DIRSequentialRegionAnalyzerN.java: constructDIR(): merging subregion: | BasicBlock3
DIRSequentialRegionAnalyzerN.java: constructDIR(): subregionDIR: ~~~ return ~~~
"testing"


DIRSequentialRegionAnalyzerN.java: constructDIR(): prevDIR: ~~~ $l0 ~~~
BottomNode

~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ $r1 ~~~
this.customerRepository

~~~ $r10 ~~~
UnknownNode

~~~ $r10.productId ~~~
UnknownNode

~~~ $r10.productName ~~~
UnknownNode

~~~ $r10.productPrice ~~~
UnknownNode

~~~ $r11 ~~~
UnknownNode

~~~ $r11.productId ~~~
UnknownNode

~~~ $r11.productName ~~~
UnknownNode

~~~ $r11.productPrice ~~~
UnknownNode

~~~ $r3.orderId ~~~
BottomNode

~~~ $r3.total ~~~
BottomNode

~~~ $r4 ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName

~~~ $r5 ~~~
BottomNode

~~~ $r6 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r6.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r6.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r6.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r7 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r7.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r7.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r7.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r8 ~~~
UnionOp
| Pi
| | List
| | | productId
| | | productName
| | | productPrice
| | Sel
| | | ProductRepository
| | | IN
| | | | id
| | | | productIds
| BottomNode

~~~ $r9 ~~~
UnknownNode

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ customerOrder ~~~
$r3

~~~ customerOrder.customer ~~~
$r3.customer

~~~ customerOrder.orderId ~~~
BottomNode

~~~ customerOrder.products ~~~
$r3.products

~~~ customerOrder.total ~~~
BottomNode

~~~ l7 ~~~
productIds

~~~ l8 ~~~
lengthof productIds

~~~ l9 ~~~
UnknownNode

~~~ productId ~~~
UnknownNode

~~~ this ~~~
Self

~~~ this.customerRepository ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName


analysis/Utils.java: resolveTree(): in: "testing"
analysis/Utils.java: resolveTree(): dir: ~~~ $l0 ~~~
BottomNode

~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ $r1 ~~~
this.customerRepository

~~~ $r10 ~~~
UnknownNode

~~~ $r10.productId ~~~
UnknownNode

~~~ $r10.productName ~~~
UnknownNode

~~~ $r10.productPrice ~~~
UnknownNode

~~~ $r11 ~~~
UnknownNode

~~~ $r11.productId ~~~
UnknownNode

~~~ $r11.productName ~~~
UnknownNode

~~~ $r11.productPrice ~~~
UnknownNode

~~~ $r3.orderId ~~~
BottomNode

~~~ $r3.total ~~~
BottomNode

~~~ $r4 ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName

~~~ $r5 ~~~
BottomNode

~~~ $r6 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r6.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r6.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r6.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r7 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r7.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r7.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r7.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r8 ~~~
UnionOp
| Pi
| | List
| | | productId
| | | productName
| | | productPrice
| | Sel
| | | ProductRepository
| | | IN
| | | | id
| | | | productIds
| BottomNode

~~~ $r9 ~~~
UnknownNode

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ customerOrder ~~~
$r3

~~~ customerOrder.customer ~~~
$r3.customer

~~~ customerOrder.orderId ~~~
BottomNode

~~~ customerOrder.products ~~~
$r3.products

~~~ customerOrder.total ~~~
BottomNode

~~~ l7 ~~~
productIds

~~~ l8 ~~~
lengthof productIds

~~~ l9 ~~~
UnknownNode

~~~ productId ~~~
UnknownNode

~~~ this ~~~
Self

~~~ this.customerRepository ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName


analysis/Utils.java: resolveTree(): in: $r8
analysis/Utils.java: resolveTree(): dir: ~~~ $l0 ~~~
BottomNode

~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ $r1 ~~~
this.customerRepository

~~~ $r10 ~~~
UnknownNode

~~~ $r10.productId ~~~
UnknownNode

~~~ $r10.productName ~~~
UnknownNode

~~~ $r10.productPrice ~~~
UnknownNode

~~~ $r11 ~~~
UnknownNode

~~~ $r11.productId ~~~
UnknownNode

~~~ $r11.productName ~~~
UnknownNode

~~~ $r11.productPrice ~~~
UnknownNode

~~~ $r3.orderId ~~~
BottomNode

~~~ $r3.total ~~~
BottomNode

~~~ $r4 ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName

~~~ $r5 ~~~
BottomNode

~~~ $r6 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r6.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r6.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r6.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r7 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r7.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r7.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r7.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r8 ~~~
UnionOp
| Pi
| | List
| | | productId
| | | productName
| | | productPrice
| | Sel
| | | ProductRepository
| | | IN
| | | | id
| | | | productIds
| BottomNode

~~~ $r9 ~~~
UnknownNode

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ customerOrder ~~~
$r3

~~~ customerOrder.customer ~~~
$r3.customer

~~~ customerOrder.orderId ~~~
BottomNode

~~~ customerOrder.products ~~~
$r3.products

~~~ customerOrder.total ~~~
BottomNode

~~~ l7 ~~~
productIds

~~~ l8 ~~~
lengthof productIds

~~~ l9 ~~~
UnknownNode

~~~ productId ~~~
UnknownNode

~~~ return ~~~
"testing"

~~~ this ~~~
Self

~~~ this.customerRepository ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName


analysis/Utils.java: resolveTree(): out: UnionOp
| Pi
| | List
| | | productId
| | | productName
| | | productPrice
| | Sel
| | | ProductRepository
| | | IN
| | | | id
| | | | productIds
| BottomNode
analysis/Utils.java: resolveTree(): return
UnionOp
| Pi
| | List
| | | productId
| | | productName
| | | productPrice
| | Sel
| | | ProductRepository
| | | IN
| | | | id
| | | | productIds
| BottomNode
AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $l0 ~~~
BottomNode

~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ $r1 ~~~
this.customerRepository

~~~ $r10 ~~~
UnknownNode

~~~ $r10.productId ~~~
UnknownNode

~~~ $r10.productName ~~~
UnknownNode

~~~ $r10.productPrice ~~~
UnknownNode

~~~ $r11 ~~~
UnknownNode

~~~ $r11.productId ~~~
UnknownNode

~~~ $r11.productName ~~~
UnknownNode

~~~ $r11.productPrice ~~~
UnknownNode

~~~ $r3.orderId ~~~
BottomNode

~~~ $r3.total ~~~
BottomNode

~~~ $r4 ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName

~~~ $r5 ~~~
BottomNode

~~~ $r6 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r6.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r6.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r6.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r7 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r7.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r7.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r7.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r8 ~~~
UnionOp
| Pi
| | List
| | | productId
| | | productName
| | | productPrice
| | Sel
| | | ProductRepository
| | | IN
| | | | id
| | | | productIds
| BottomNode

~~~ $r9 ~~~
UnknownNode

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ customerOrder ~~~
$r3

~~~ customerOrder.customer ~~~
$r3.customer

~~~ customerOrder.orderId ~~~
BottomNode

~~~ customerOrder.products ~~~
$r3.products

~~~ customerOrder.total ~~~
BottomNode

~~~ l7 ~~~
productIds

~~~ l8 ~~~
lengthof productIds

~~~ l9 ~~~
UnknownNode

~~~ productId ~~~
UnknownNode

~~~ productSet ~~~
UnionOp
| Pi
| | List
| | | productId
| | | productName
| | | productPrice
| | Sel
| | | ProductRepository
| | | IN
| | | | id
| | | | productIds
| BottomNode

~~~ return ~~~
"testing"

~~~ this ~~~
Self

~~~ this.customerRepository ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName


DIR.java: updateRegion(): update region entry: $r7.lastName=Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName
DIR.java: updateRegion(): update region entry: $r3.orderId=BottomNode
DIR.java: updateRegion(): update region entry: $r6.customerId=Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId
DIR.java: updateRegion(): update region entry: $r10.productId=UnknownNode
DIR.java: updateRegion(): update region entry: customer.customerId=BottomNode
DIR.java: updateRegion(): update region entry: $r0.firstName=firstName
DIR.java: updateRegion(): update region entry: customer.lastName=BottomNode
DIR.java: updateRegion(): update region entry: customerOrder=$r3
DIR.java: updateRegion(): update region entry: l7=productIds
DIR.java: updateRegion(): update region entry: l8=lengthof productIds
DIR.java: updateRegion(): update region entry: this.customerRepository=Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName
DIR.java: updateRegion(): update region entry: l9=UnknownNode
DIR.java: updateRegion(): update region entry: productSet=UnionOp
| Pi
| | List
| | | productId
| | | productName
| | | productPrice
| | Sel
| | | ProductRepository
| | | IN
| | | | id
| | | | productIds
| BottomNode
DIR.java: updateRegion(): update region entry: $r0.customerId=BottomNode
DIR.java: updateRegion(): update region entry: customerOrder.customer=$r3.customer
DIR.java: updateRegion(): update region entry: $r11.productName=UnknownNode
DIR.java: updateRegion(): update region entry: customerOrder.orderId=BottomNode
DIR.java: updateRegion(): update region entry: $r6.lastName=Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName
DIR.java: updateRegion(): update region entry: $r7.firstName=Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName
DIR.java: updateRegion(): update region entry: $r11.productPrice=UnknownNode
DIR.java: updateRegion(): update region entry: $r3.total=BottomNode
DIR.java: updateRegion(): update region entry: $r1=this.customerRepository
DIR.java: updateRegion(): update region entry: productId=UnknownNode
DIR.java: updateRegion(): update region entry: $r10.productName=UnknownNode
DIR.java: updateRegion(): update region entry: $r4=Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName
DIR.java: updateRegion(): update region entry: $r10.productPrice=UnknownNode
DIR.java: updateRegion(): update region entry: $r5=BottomNode
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: $l0=BottomNode
DIR.java: updateRegion(): update region entry: $r6=Sel
| CustomerRepository
| Equals
| | id
| | BottomNode
DIR.java: updateRegion(): update region entry: $r0.lastName=lastName
DIR.java: updateRegion(): update region entry: $r7=Sel
| CustomerRepository
| Equals
| | id
| | BottomNode
DIR.java: updateRegion(): update region entry: customerOrder.total=BottomNode
DIR.java: updateRegion(): update region entry: $r8=UnionOp
| Pi
| | List
| | | productId
| | | productName
| | | productPrice
| | Sel
| | | ProductRepository
| | | IN
| | | | id
| | | | productIds
| BottomNode
DIR.java: updateRegion(): update region entry: $r9=UnknownNode
DIR.java: updateRegion(): update region entry: customerOrder.products=$r3.products
DIR.java: updateRegion(): update region entry: $r7.customerId=Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId
DIR.java: updateRegion(): update region entry: customer.firstName=BottomNode
DIR.java: updateRegion(): update region entry: $r6.firstName=Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName
DIR.java: updateRegion(): update region entry: $r11.productId=UnknownNode
DIR.java: updateRegion(): update region entry: $r11=UnknownNode
DIR.java: updateRegion(): update region entry: return="testing"
DIR.java: updateRegion(): update region entry: customer=$r0
DIR.java: updateRegion(): update region entry: $r10=UnknownNode
Resultant dag : ~~~ $l0 ~~~
BottomNode

~~~ $r0.customerId ~~~
BottomNode

~~~ $r0.firstName ~~~
firstName

~~~ $r0.lastName ~~~
lastName

~~~ $r1 ~~~
this.customerRepository

~~~ $r10 ~~~
UnknownNode

~~~ $r10.productId ~~~
UnknownNode

~~~ $r10.productName ~~~
UnknownNode

~~~ $r10.productPrice ~~~
UnknownNode

~~~ $r11 ~~~
UnknownNode

~~~ $r11.productId ~~~
UnknownNode

~~~ $r11.productName ~~~
UnknownNode

~~~ $r11.productPrice ~~~
UnknownNode

~~~ $r3.orderId ~~~
BottomNode

~~~ $r3.total ~~~
BottomNode

~~~ $r4 ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName

~~~ $r5 ~~~
BottomNode

~~~ $r6 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r6.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r6.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r6.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r7 ~~~
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

~~~ $r7.customerId ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

~~~ $r7.firstName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

~~~ $r7.lastName ~~~
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

~~~ $r8 ~~~
UnionOp
| Pi
| | List
| | | productId
| | | productName
| | | productPrice
| | Sel
| | | ProductRepository
| | | IN
| | | | id
| | | | productIds
| BottomNode

~~~ $r9 ~~~
UnknownNode

~~~ customer ~~~
$r0

~~~ customer.customerId ~~~
BottomNode

~~~ customer.firstName ~~~
BottomNode

~~~ customer.lastName ~~~
BottomNode

~~~ customerOrder ~~~
$r3

~~~ customerOrder.customer ~~~
$r3.customer

~~~ customerOrder.orderId ~~~
BottomNode

~~~ customerOrder.products ~~~
$r3.products

~~~ customerOrder.total ~~~
BottomNode

~~~ l7 ~~~
productIds

~~~ l8 ~~~
lengthof productIds

~~~ l9 ~~~
UnknownNode

~~~ productId ~~~
UnknownNode

~~~ productSet ~~~
UnionOp
| Pi
| | List
| | | productId
| | | productName
| | | productPrice
| | Sel
| | | ProductRepository
| | | IN
| | | | id
| | | | productIds
| BottomNode

~~~ return ~~~
"testing"

~~~ this ~~~
Self

~~~ this.customerRepository ~~~
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName


final FuncStackAnalyzer3 = 
{com.shakeel.model.Customer: void setLastName(java.lang.String)=~~~ this ~~~
Self

~~~ this.lastName ~~~
lastName

, java.lang.Object: java.lang.Object findOne(java.io.Serializable)=~~~ return ~~~
Sel
| ProductRepository
| Equals
| | id
| | productId

~~~ return.productId ~~~
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | productId
| productId

~~~ return.productName ~~~
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | productId
| productName

~~~ return.productPrice ~~~
Pi
| Sel
| | ProductRepository
| | Equals
| | | id
| | | productId
| productPrice

, com.shakeel.model.Customer: long getCustomerId()=~~~ $l0 ~~~
this.customerId

~~~ return ~~~
this.customerId

~~~ this ~~~
Self

, com.shakeel.model.CustomerOrder: void setCustomer(com.shakeel.model.Customer)=~~~ this ~~~
Self

~~~ this.customer.customerId ~~~
customer.customerId

~~~ this.customer.firstName ~~~
customer.firstName

~~~ this.customer.lastName ~~~
customer.lastName

, com.shakeel.model.Customer: void setFirstName(java.lang.String)=~~~ this ~~~
Self

~~~ this.firstName ~~~
firstName

}
FuncStackAnalyzer.java: constructDIRForStack(): Printing veMap for method: com.shakeel.controller.OrdersController: java.lang.String saveOrder(java.lang.String,java.lang.String,java.lang.Long[])
FuncStackAnalyzer.java: constructDIRForStack(): VEMap Num Entries: 44
FuncStackAnalyzer.java: constructDIRForStack(): key set of ve map of root function: [$r7.lastName, $r3.orderId, $r6.customerId, $r10.productId, customer.customerId, $r0.firstName, customer.lastName, customerOrder, l7, l8, this.customerRepository, l9, productSet, $r0.customerId, customerOrder.customer, $r11.productName, customerOrder.orderId, $r6.lastName, $r7.firstName, $r11.productPrice, $r3.total, $r1, productId, $r10.productName, $r4, $r10.productPrice, $r5, this, $l0, $r6, $r0.lastName, $r7, customerOrder.total, $r8, $r9, customerOrder.products, $r7.customerId, customer.firstName, $r6.firstName, $r11.productId, $r11, return, customer, $r10]
Final veMap of $r7.lastName = 
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName
SavePostProcess.java: SavePostProcess(): repo varnode: $r7.lastName
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r3.orderId = 
BottomNode
SavePostProcess.java: SavePostProcess(): repo varnode: $r3.orderId
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r6.customerId = 
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId
SavePostProcess.java: SavePostProcess(): repo varnode: $r6.customerId
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r10.productId = 
UnknownNode
SavePostProcess.java: SavePostProcess(): repo varnode: $r10.productId
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of customer.customerId = 
BottomNode
SavePostProcess.java: SavePostProcess(): repo varnode: customer.customerId
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r0.firstName = 
firstName
SavePostProcess.java: SavePostProcess(): repo varnode: $r0.firstName
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of customer.lastName = 
BottomNode
SavePostProcess.java: SavePostProcess(): repo varnode: customer.lastName
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of customerOrder = 
$r3
SavePostProcess.java: SavePostProcess(): repo varnode: customerOrder
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of l7 = 
productIds
SavePostProcess.java: SavePostProcess(): repo varnode: l7
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of l8 = 
lengthof productIds
SavePostProcess.java: SavePostProcess(): repo varnode: l8
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of this.customerRepository = 
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName
SavePostProcess.java: SavePostProcess(): repo varnode: this.customerRepository
SavePostProcess.java: SavePostProcess(): repo type = com.shakeel.repository.CustomerRepository
entity = com.shakeel.model.Customer
entity soot cls: com.shakeel.model.Customer
field: <com.shakeel.model.Customer: long customerId>
annotation tag: Annotation type: Ljavax/persistence/Id; without elements
id field = <com.shakeel.model.Customer: long customerId>
id field name = customerId
annotation tag: Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

field tags: [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: AUTO

]
field: <com.shakeel.model.Customer: java.lang.String firstName>
field tags: []
field: <com.shakeel.model.Customer: java.lang.String lastName>
field tags: []
SavePostProcess.java: handleCascading(): accesspathsofarg: [$r0.customerId, $r0.firstName, $r0.lastName]
SavePostProcess.java: handleCascading(): check mapDBFetchAccessGraph in savepostProcess
cosntruct/utils.java: mapDBFetchAccessGraph(): check relExpBaseAccp= null
SavePostProcess.java: transformSave(): saveNode = Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName
SavePostProcess.java: transformSave(): columns: [customerId, firstName, lastName]
SavePostProcess.java: transformSave(): idfieldname: customerId
SavePostProcess.java: transformSave(): idInd = 0
SavePostProcess.java: transformSave(): idField: BottomNode
SavePostProcess.java: transformSave(): transformed save: ?
| Equals
| | Sel
| | | Cartesian
| | | | this.customerRepository
| | | Equals
| | | | customerId
| | | | BottomNode
| | EmptySet
| UnionOp
| | this.customerRepository
| | List
| | | BottomNode
| | | firstName
| | | lastName
| UnionOp
| | RelationalMinus
| | | Cartesian
| | | | this.customerRepository
| | | Sel
| | | | Cartesian
| | | | | this.customerRepository
| | | | Equals
| | | | | customerId
| | | | | BottomNode
| | List
| | | BottomNode
| | | firstName
| | | lastName
Final veMap of l9 = 
UnknownNode
SavePostProcess.java: SavePostProcess(): repo varnode: l9
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of productSet = 
UnionOp
| Pi
| | List
| | | productId
| | | productName
| | | productPrice
| | Sel
| | | ProductRepository
| | | IN
| | | | id
| | | | productIds
| BottomNode
SavePostProcess.java: SavePostProcess(): repo varnode: productSet
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r0.customerId = 
BottomNode
SavePostProcess.java: SavePostProcess(): repo varnode: $r0.customerId
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of customerOrder.customer = 
$r3.customer
SavePostProcess.java: SavePostProcess(): repo varnode: customerOrder.customer
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r11.productName = 
UnknownNode
SavePostProcess.java: SavePostProcess(): repo varnode: $r11.productName
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of customerOrder.orderId = 
BottomNode
SavePostProcess.java: SavePostProcess(): repo varnode: customerOrder.orderId
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r6.lastName = 
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName
SavePostProcess.java: SavePostProcess(): repo varnode: $r6.lastName
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r7.firstName = 
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName
SavePostProcess.java: SavePostProcess(): repo varnode: $r7.firstName
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r11.productPrice = 
UnknownNode
SavePostProcess.java: SavePostProcess(): repo varnode: $r11.productPrice
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r3.total = 
BottomNode
SavePostProcess.java: SavePostProcess(): repo varnode: $r3.total
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r1 = 
this.customerRepository
SavePostProcess.java: SavePostProcess(): repo varnode: $r1
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of productId = 
UnknownNode
SavePostProcess.java: SavePostProcess(): repo varnode: productId
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r10.productName = 
UnknownNode
SavePostProcess.java: SavePostProcess(): repo varnode: $r10.productName
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r4 = 
Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName
SavePostProcess.java: SavePostProcess(): repo varnode: $r4
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
SavePostProcess.java: handleCascading(): accesspathsofarg: [$r0.customerId, $r0.firstName, $r0.lastName]
SavePostProcess.java: handleCascading(): check mapDBFetchAccessGraph in savepostProcess
cosntruct/utils.java: mapDBFetchAccessGraph(): check relExpBaseAccp= null
SavePostProcess.java: transformSave(): saveNode = Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName
SavePostProcess.java: transformSave(): columns: [customerId, firstName, lastName]
SavePostProcess.java: transformSave(): idfieldname: id
SavePostProcess.java: transformSave(): break
Final veMap of $r10.productPrice = 
UnknownNode
SavePostProcess.java: SavePostProcess(): repo varnode: $r10.productPrice
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r5 = 
BottomNode
SavePostProcess.java: SavePostProcess(): repo varnode: $r5
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of this = 
Self
SavePostProcess.java: SavePostProcess(): repo varnode: this
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $l0 = 
BottomNode
SavePostProcess.java: SavePostProcess(): repo varnode: $l0
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r6 = 
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode
SavePostProcess.java: SavePostProcess(): repo varnode: $r6
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r0.lastName = 
lastName
SavePostProcess.java: SavePostProcess(): repo varnode: $r0.lastName
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r7 = 
Sel
| CustomerRepository
| Equals
| | id
| | BottomNode
SavePostProcess.java: SavePostProcess(): repo varnode: $r7
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of customerOrder.total = 
BottomNode
SavePostProcess.java: SavePostProcess(): repo varnode: customerOrder.total
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r8 = 
UnionOp
| Pi
| | List
| | | productId
| | | productName
| | | productPrice
| | Sel
| | | ProductRepository
| | | IN
| | | | id
| | | | productIds
| BottomNode
SavePostProcess.java: SavePostProcess(): repo varnode: $r8
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r9 = 
UnknownNode
SavePostProcess.java: SavePostProcess(): repo varnode: $r9
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of customerOrder.products = 
$r3.products
SavePostProcess.java: SavePostProcess(): repo varnode: customerOrder.products
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r7.customerId = 
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId
SavePostProcess.java: SavePostProcess(): repo varnode: $r7.customerId
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of customer.firstName = 
BottomNode
SavePostProcess.java: SavePostProcess(): repo varnode: customer.firstName
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r6.firstName = 
Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName
SavePostProcess.java: SavePostProcess(): repo varnode: $r6.firstName
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r11.productId = 
UnknownNode
SavePostProcess.java: SavePostProcess(): repo varnode: $r11.productId
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r11 = 
UnknownNode
SavePostProcess.java: SavePostProcess(): repo varnode: $r11
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of return = 
"testing"
SavePostProcess.java: SavePostProcess(): repo varnode: return
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of customer = 
$r0
SavePostProcess.java: SavePostProcess(): repo varnode: customer
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r10 = 
UnknownNode
SavePostProcess.java: SavePostProcess(): repo varnode: $r10
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
key: $r7.lastName
value: Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

key: $r3.orderId
value: BottomNode

key: $r6.customerId
value: Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

key: $r10.productId
value: UnknownNode

key: customer.customerId
value: BottomNode

key: $r0.firstName
value: firstName

key: customer.lastName
value: BottomNode

key: customerOrder
value: $r3

key: l7
value: productIds

key: l8
value: lengthof productIds

key: this.customerRepository
value: ?
| Equals
| | Sel
| | | Cartesian
| | | | this.customerRepository
| | | Equals
| | | | customerId
| | | | BottomNode
| | EmptySet
| UnionOp
| | this.customerRepository
| | List
| | | BottomNode
| | | firstName
| | | lastName
| UnionOp
| | RelationalMinus
| | | Cartesian
| | | | this.customerRepository
| | | Sel
| | | | Cartesian
| | | | | this.customerRepository
| | | | Equals
| | | | | customerId
| | | | | BottomNode
| | List
| | | BottomNode
| | | firstName
| | | lastName

key: l9
value: UnknownNode

key: productSet
value: UnionOp
| Pi
| | List
| | | productId
| | | productName
| | | productPrice
| | Sel
| | | ProductRepository
| | | IN
| | | | id
| | | | productIds
| BottomNode

key: $r0.customerId
value: BottomNode

key: customerOrder.customer
value: $r3.customer

key: $r11.productName
value: UnknownNode

key: customerOrder.orderId
value: BottomNode

key: $r6.lastName
value: Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| lastName

key: $r7.firstName
value: Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

key: $r11.productPrice
value: UnknownNode

key: $r3.total
value: BottomNode

key: $r1
value: this.customerRepository

key: productId
value: UnknownNode

key: $r10.productName
value: UnknownNode

key: $r4
value: Save
| $r1
| Tuple
| | $r0
| | List
| | | BottomNode
| | | firstName
| | | lastName

key: $r10.productPrice
value: UnknownNode

key: $r5
value: BottomNode

key: this
value: Self

key: $l0
value: BottomNode

key: $r6
value: Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

key: $r0.lastName
value: lastName

key: $r7
value: Sel
| CustomerRepository
| Equals
| | id
| | BottomNode

key: customerOrder.total
value: BottomNode

key: $r8
value: UnionOp
| Pi
| | List
| | | productId
| | | productName
| | | productPrice
| | Sel
| | | ProductRepository
| | | IN
| | | | id
| | | | productIds
| BottomNode

key: $r9
value: UnknownNode

key: customerOrder.products
value: $r3.products

key: $r7.customerId
value: Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| customerId

key: customer.firstName
value: BottomNode

key: $r6.firstName
value: Pi
| Sel
| | CustomerRepository
| | Equals
| | | id
| | | BottomNode
| firstName

key: $r11.productId
value: UnknownNode

key: $r11
value: UnknownNode

key: return
value: "testing"

key: customer
value: $r0

key: $r10
value: UnknownNode





























Tables and Fields :

Customer fields = 
{firstName=FieldData, lastName=FieldData, customerId=FieldData}

Product fields = 
{productId=FieldData, productName=FieldData, productPrice=FieldData}

Time elapsed: 0.569 seconds
