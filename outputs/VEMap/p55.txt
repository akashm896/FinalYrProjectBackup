EqSQLDriverTest.java: main(): Got the bench-dir option value: target/classes
EqSQLDriverTest.java: main(): Got the controllersig option value: com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long)
EqSQLDriverTest.java: main(): Got the repo option value: $r1.cartItemRepository
github/Utils.java: getAbsBenchDir(): pwd: /home/akash/Desktop/DbridgeLoop/DbridgeLoop
starttime, test: 1676382856880
EqSQLDriver.java: doSetEntryPoints: inputPath is target/classes
Warning: java.lang.Object is a phantom class!
Warning: org.springframework.web.bind.annotation.PostMapping is a phantom class!
Warning: org.springframework.web.bind.annotation.RequestMapping is a phantom class!
Warning: org.springframework.beans.factory.annotation.Autowired is a phantom class!
Warning: org.springframework.stereotype.Controller is a phantom class!
Warning: java.lang.Integer is a phantom class!
Warning: org.springframework.ui.Model is a phantom class!
Warning: java.util.List is a phantom class!
Warning: java.security.Principal is a phantom class!
Warning: java.lang.Long is a phantom class!
Warning: org.springframework.web.bind.annotation.GetMapping is a phantom class!
Warning: java.lang.StringBuilder is a phantom class!
Warning: java.lang.String is a phantom class!
Warning: javax.persistence.Entity is a phantom class!
Warning: javax.persistence.JoinColumn is a phantom class!
Warning: javax.persistence.OneToMany is a phantom class!
Warning: javax.persistence.OneToOne is a phantom class!
Warning: java.math.BigDecimal is a phantom class!
Warning: javax.persistence.GeneratedValue is a phantom class!
Warning: javax.persistence.Id is a phantom class!
Warning: org.springframework.security.core.userdetails.UserDetails is a phantom class!
Warning: java.util.Collection is a phantom class!
Warning: java.util.Set is a phantom class!
Warning: java.util.HashSet is a phantom class!
Warning: java.util.function.Consumer is a phantom class!
Warning: javax.persistence.Column is a phantom class!
Warning: com.fasterxml.jackson.annotation.JsonIgnore is a phantom class!
Warning: org.springframework.stereotype.Service is a phantom class!
Warning: javax.persistence.ManyToOne is a phantom class!
Warning: javax.persistence.Transient is a phantom class!
Warning: org.springframework.web.multipart.MultipartFile is a phantom class!
Warning: org.springframework.security.core.GrantedAuthority is a phantom class!
Warning: javax.persistence.Table is a phantom class!
Warning: java.util.Date is a phantom class!
Warning: java.util.Calendar is a phantom class!
Warning: java.lang.Throwable is a phantom class!
Warning: java.lang.Void is a phantom class!
Warning: java.lang.Float is a phantom class!
Warning: java.lang.Double is a phantom class!
Warning: java.lang.AssertionError is a phantom class!
Warning: java.lang.NullPointerException is a phantom class!
Warning: java.lang.Character is a phantom class!
Warning: java.lang.Short is a phantom class!
Warning: java.lang.StringBuffer is a phantom class!
Warning: java.lang.Boolean is a phantom class!
Warning: java.lang.Class is a phantom class!
Warning: java.lang.Byte is a phantom class!
Warning: java.lang.NoClassDefFoundError is a phantom class!
Warning: java.lang.IndexOutOfBoundsException is a phantom class!
Warning: java.lang.StackOverflowError is a phantom class!
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
Warning: java.lang.Error is a phantom class!
Warning: java.lang.AbstractMethodError is a phantom class!
Warning: java.lang.ClassCastException is a phantom class!
Warning: java.lang.Runnable is a phantom class!
Warning: java.lang.VerifyError is a phantom class!
Warning: java.lang.NoSuchFieldError is a phantom class!
Warning: java.lang.IllegalMonitorStateException is a phantom class!
Warning: java.lang.Thread is a phantom class!
Warning: java.lang.UnknownError is a phantom class!
Warning: java.lang.InternalError is a phantom class!
Warning: java.lang.ArithmeticException is a phantom class!
Warning: java.lang.NegativeArraySizeException is a phantom class!
Warning: java.lang.ClassCircularityError is a phantom class!
Warning: java.lang.Cloneable is a phantom class!
Warning: java.lang.ref.Finalizer is a phantom class!
Warning: java.lang.LinkageError is a phantom class!
Warning: java.lang.IncompatibleClassChangeError is a phantom class!
Warning: java.lang.NoSuchMethodError is a phantom class!
Warning: java.lang.RuntimeException is a phantom class!
Warning: java.lang.ArrayIndexOutOfBoundsException is a phantom class!
Warning: java.lang.ThreadDeath is a phantom class!
Warning: java.io.Serializable is a phantom class!
Warning: java.lang.InstantiationError is a phantom class!
Warning: java.lang.IllegalAccessError is a phantom class!
Warning: java.lang.ClassNotFoundException is a phantom class!
Warning: java.lang.ClassFormatError is a phantom class!
Warning: java.lang.UnsatisfiedLinkError is a phantom class!
Warning: java.lang.ArrayStoreException is a phantom class!
Warning: java.lang.ExceptionInInitializerError is a phantom class!
Warning: java.lang.OutOfMemoryError is a phantom class!
patternMatch.java: getUserInputRules: i=0
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? <more_than> (save (join <next> <class> <nop>) <list1>) <coll1>)) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (- <init_val> <coll>) (pi (select <init_val> <more_than>) <list1>))
Fold
| FuncExpr
| | Ternary
| | | Any
| | | Save
| | | | Join
| | | | | Any
| | | | | Any
| | | | | Any
| | | | Any
| | | Any
| Any
| Any
| Any


Union
| RelMinus
| | Id:11
| | Id:12
| Project
| | Select
| | | Id:11
| | | Id:3
| | Id:9

{<coll1>=10, <class>=7, <more_than>=3, <list1>=9, <nop>=8, <init_val>=11, <itr>=13, <next>=6, <coll>=12}
patternMatch.java: getUserInputRules: i=2
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? (more_than <col1> <col2>) (+ <col3> <col4>) <col3>)) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (? (more_than <col1> <col2>) (+ <init_val> <col4>) <init_val>)
Fold
| FuncExpr
| | Ternary
| | | MoreThan
| | | | Any
| | | | Any
| | | ArithAdd
| | | | Any
| | | | Any
| | | Any
| Any
| Any
| Any


Ternary
| MoreThan
| | Id:18
| | Id:19
| ArithAdd
| | Id:24
| | Id:22
| Id:24

{<coll1>=10, <col3>=23, <class>=7, <col4>=22, <nop>=8, <init_val>=24, <itr>=26, <next>=6, <col1>=18, <more_than>=3, <list1>=9, <col2>=19, <coll>=25}
patternMatch.java: getUserInputRules: i=4
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? (Neq (= <col1> <col2>) (0Node)) (union (repo) (list)) (repo))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (select <coll> (= <col1> <col2>))
Fold
| FuncExpr
| | Ternary
| | | NotEq
| | | | Eq
| | | | | Any
| | | | | Any
| | | | Any
| | | Union
| | | | Any
| | | | List
| | | Any
| Any
| Any
| Any


Select
| Id:40
| Eq
| | Id:32
| | Id:33

{<coll1>=10, <col3>=23, <class>=7, <col4>=22, <nop>=8, <init_val>=39, <itr>=41, <next>=6, <col1>=32, <more_than>=3, <list1>=9, <col2>=33, <coll>=40}
patternMatch.java: getUserInputRules: i=6
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? (= (? (= <col1> <col2>) (1Node) (0Node)) <col3>) (? (Neq (= <col4> <col5>) <col6>) (col7) (? (= (? (= <col8> <col9>) (1Node) (0Node)) <col10>) (? (Neq (= <col4> <col5>) <col6>) (col7) (col11)) (col11))) (col11))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (select <coll> (AND (OR (= <col1> <col2>) (Neq <col8> <col9>)) (= <col4> <col5>)))
Fold
| FuncExpr
| | Ternary
| | | Eq
| | | | Ternary
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | | Any
| | | | | Any
| | | | Any
| | | Ternary
| | | | NotEq
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | | Any
| | | | Any
| | | | Ternary
| | | | | Eq
| | | | | | Ternary
| | | | | | | Eq
| | | | | | | | Any
| | | | | | | | Any
| | | | | | | Any
| | | | | | | Any
| | | | | | Any
| | | | | Ternary
| | | | | | NotEq
| | | | | | | Eq
| | | | | | | | Any
| | | | | | | | Any
| | | | | | | Any
| | | | | | Any
| | | | | | Any
| | | | | Any
| | | Any
| Any
| Any
| Any


Select
| Id:80
| And
| | Or
| | | Eq
| | | | Id:48
| | | | Id:49
| | | NotEq
| | | | Id:64
| | | | Id:65
| | Eq
| | | Id:72
| | | Id:73

{<col9>=65, <coll1>=10, <col8>=64, <col5>=73, <col6>=74, <col3>=52, <class>=7, <col4>=72, <col10>=68, <nop>=8, <init_val>=79, <itr>=81, <next>=6, <col1>=48, <more_than>=3, <list1>=9, <col2>=49, <coll>=80}
patternMatch.java: getUserInputRules: i=8
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? <cond> (save <repo> <list1>) (save <repo> <list2>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (- <init_val> <coll>) (union (pi (select <coll> <cond>) <list1>) (pi (select <coll> (= <cond> 0)) <list2>)))
Fold
| FuncExpr
| | Ternary
| | | Any
| | | Save
| | | | Any
| | | | Any
| | | Save
| | | | Any
| | | | Any
| Any
| Any
| Any


Union
| RelMinus
| | Id:92
| | Id:93
| Union
| | Project
| | | Select
| | | | Id:93
| | | | Id:85
| | | Id:88
| | Project
| | | Select
| | | | Id:93
| | | | Eq
| | | | | Id:85
| | | | | Zero
| | | Id:91

{<col9>=65, <coll1>=10, <col8>=64, <col5>=73, <col6>=74, <col3>=52, <class>=7, <col4>=72, <col10>=68, <repo>=90, <cond>=85, <nop>=8, <init_val>=92, <itr>=94, <next>=6, <col1>=48, <list2>=91, <more_than>=3, <list1>=88, <col2>=49, <coll>=93}
patternMatch.java: getUserInputRules: i=10
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (? <cond> (add_all_fields <list>) <elseval>)) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (pi (select <coll> <cond>) <list>) <init_val>)
Fold
| FuncExpr
| | Ternary
| | | Any
| | | AddWithFieldExprs
| | | | Any
| | | Any
| Any
| Any
| Any


Union
| Project
| | Select
| | | Id:103
| | | Id:98
| | Id:100
| Id:102

{<col9>=65, <coll1>=10, <list>=100, <col8>=64, <col5>=73, <col6>=74, <col3>=52, <class>=7, <col4>=72, <col10>=68, <repo>=90, <cond>=98, <nop>=8, <init_val>=102, <itr>=104, <next>=6, <elseval>=101, <col1>=48, <list2>=91, <more_than>=3, <list1>=88, <col2>=49, <coll>=103}
patternMatch.java: getUserInputRules: i=12
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (save <repo> (tuple (join next <join_right>) <list>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (- <repo> (select <repo> (in id (pi (join <coll> <join_right>) id)))) (pi <list> (join <coll> <join_right>)))
Fold
| FuncExpr
| | Save
| | | Any
| | | Tuple
| | | | Join
| | | | | Iterator
| | | | | Any
| | | | Any
| Any
| Any
| Any


Union
| RelMinus
| | Id:108
| | Select
| | | Id:108
| | | In
| | | | Id
| | | | Project
| | | | | Join
| | | | | | Id:115
| | | | | | Id:112
| | | | | Id
| Project
| | Id:113
| | Join
| | | Id:115
| | | Id:112

{<col9>=65, <coll1>=10, <list>=113, <col8>=64, <col5>=73, <col6>=74, <col3>=52, <class>=7, <col4>=72, <col10>=68, <repo>=108, <cond>=98, <nop>=8, <init_val>=114, <join_right>=112, <itr>=116, <next>=6, <elseval>=101, <col1>=48, <list2>=91, <more_than>=3, <list1>=88, <col2>=49, <coll>=115}
patternMatch.java: getUserInputRules: i=14
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (add_all_fields <receiver> (tuple (select <rel> (= <clm> <itr>)) <list>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (union (pi <list> (select <rel> (in <clm> <coll>))) <init_val>)
Fold
| FuncExpr
| | AddWithFieldExprs
| | | Any
| | | Tuple
| | | | Select
| | | | | Any
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | Any
| Any
| Any
| Any


Union
| Project
| | Id:127
| | Select
| | | Id:123
| | | In
| | | | Id:125
| | | | Id:129
| Id:128

{<col8>=64, <rel>=123, <col6>=74, <class>=7, <col4>=72, <col10>=68, <repo>=108, <nop>=8, <init_val>=128, <itr>=130, <next>=6, <receiver>=120, <list2>=91, <more_than>=3, <col2>=49, <coll>=129, <col9>=65, <coll1>=10, <list>=127, <col5>=73, <col3>=52, <cond>=98, <clm>=125, <join_right>=112, <elseval>=101, <col1>=48, <list1>=88}
patternMatch.java: getUserInputRules: i=16
patternMatch.java: getUserInputRules: ruleInput: (loop (body_expr (+ <aggvar> (pi (select <rel> (= <clm> <itr>)) <clmagg>))) <init_val> <coll> <itr>)
patternMatch.java: getUserInputRules: rule output: (+ (agg_sum (select <rel> (in <clm> <coll>)) <clmagg>) <init_val>)
Fold
| FuncExpr
| | ArithAdd
| | | Any
| | | Project
| | | | Select
| | | | | Any
| | | | | Eq
| | | | | | Any
| | | | | | Any
| | | | Any
| Any
| Any
| Any


ArithAdd
| AggSum
| | Select
| | | Id:137
| | | In
| | | | Id:139
| | | | Id:143
| | Id:141
| Id:142

{<col8>=64, <rel>=137, <col6>=74, <class>=7, <col4>=72, <col10>=68, <repo>=108, <nop>=8, <init_val>=142, <itr>=144, <clmagg>=141, <next>=6, <receiver>=120, <aggvar>=134, <list2>=91, <more_than>=3, <col2>=49, <coll>=143, <col9>=65, <coll1>=10, <list>=127, <col5>=73, <col3>=52, <cond>=98, <clm>=139, <join_right>=112, <elseval>=101, <col1>=48, <list1>=88}
1
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/home/akash/Desktop/DbridgeLoop/DbridgeLoop/lib/eqsql.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/home/akash/Desktop/DbridgeLoop/DbridgeLoop/lib/soot-trunk-1.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [org.slf4j.impl.SimpleLoggerFactory]
ServiceAllocTransform.java: internalTransform(): methodsig: <com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: removeItem
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String removeItem(java.lang.Long)
    {
        com.bookstore.controller.ShoppingCartController this;
        java.lang.Long id;
        com.bookstore.service.impl.CartItemService $r0, $r1;
        com.bookstore.domain.CartItem $r2;

        this := @this: com.bookstore.controller.ShoppingCartController;

        id := @parameter0: java.lang.Long;

        $r1 = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemService cartItemService>;

        $r0 = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemService cartItemService>;

        $r2 = interfaceinvoke $r0.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem findById(java.lang.Long)>(id);

        interfaceinvoke $r1.<com.bookstore.service.impl.CartItemService: void removeCartItem(com.bookstore.domain.CartItem)>($r2);

        return "forward:/shoppingCart/cart";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.bookstore.controller.ShoppingCartController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.HomeController
Warning: java.util.Arrays is a phantom class!
Warning: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder is a phantom class!
Warning: java.util.Locale is a phantom class!
Warning: org.springframework.security.core.context.SecurityContextHolder is a phantom class!
Warning: java.lang.CharSequence is a phantom class!
Warning: org.springframework.mail.javamail.JavaMailSender is a phantom class!
Warning: java.util.UUID is a phantom class!
Warning: java.lang.Exception is a phantom class!
Warning: org.springframework.security.core.context.SecurityContext is a phantom class!
Warning: org.springframework.security.authentication.UsernamePasswordAuthenticationToken is a phantom class!
Warning: org.springframework.security.core.Authentication is a phantom class!
Warning: org.springframework.mail.SimpleMailMessage is a phantom class!
Warning: javax.servlet.http.HttpServletRequest is a phantom class!
Warning: java.util.Collections is a phantom class!
Warning: org.springframework.stereotype.Component is a phantom class!
Warning: org.springframework.core.env.Environment is a phantom class!
Warning: java.security.SecureRandom is a phantom class!
Warning: java.util.Random is a phantom class!
Warning: org.springframework.context.annotation.Bean is a phantom class!
Warning: org.springframework.security.core.userdetails.UserDetailsService is a phantom class!
Warning: org.springframework.security.core.userdetails.UsernameNotFoundException is a phantom class!
Warning: java.util.Map is a phantom class!
Warning: com.bookstore.utility.USConstants$1 is a phantom class!
Warning: java.util.ArrayList is a phantom class!
Warning: org.springframework.data.repository.CrudRepository is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.BookstoreApplication
Warning: org.springframework.boot.CommandLineRunner is a phantom class!
Warning: org.springframework.boot.autoconfigure.SpringBootApplication is a phantom class!
Warning: org.springframework.boot.SpringApplication is a phantom class!
Warning: org.springframework.context.ConfigurableApplicationContext is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.CommandLineRunner
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.config.SecurityConfig
Warning: org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.RememberMeConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.web.builders.HttpSecurity is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.CsrfConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.LogoutConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.authentication.configurers.userdetails.DaoAuthenticationConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity is a phantom class!
Warning: org.springframework.security.web.util.matcher.RequestMatcher is a phantom class!
Warning: org.springframework.context.annotation.Configuration is a phantom class!
Warning: org.springframework.security.config.annotation.SecurityBuilder is a phantom class!
Warning: org.springframework.security.crypto.password.PasswordEncoder is a phantom class!
Warning: org.springframework.security.config.annotation.web.configuration.EnableWebSecurity is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.CorsConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.web.HttpSecurityBuilder is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.AbstractAuthenticationFilterConfigurer is a phantom class!
Warning: org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$AuthorizedUrl is a phantom class!
Warning: org.springframework.security.web.util.matcher.AntPathRequestMatcher is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.ShoppingCartRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.CartItemRepository
Warning: org.springframework.transaction.annotation.Transactional is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserPaymentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookToCartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserShippingRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.PasswordResetTokenRepository
Warning: org.springframework.data.jpa.repository.JpaRepository is a phantom class!
Warning: org.springframework.data.jpa.repository.Modifying is a phantom class!
Warning: org.springframework.data.jpa.repository.Query is a phantom class!
Warning: java.util.stream.Stream is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.USConstants
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.SecurityUtility
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.MailConstructor
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentServiceImpl
Warning: java.util.Optional is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookServiceImpl
Warning: java.lang.Iterable is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserSecurityService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetailsService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserServiceImpl
Warning: org.slf4j.LoggerFactory is a phantom class!
Warning: org.slf4j.Logger is a phantom class!
Warning: java.util.Iterator is a phantom class!
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): $r1 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserPayment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Payment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BillingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Order
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.User
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetails
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BookToCartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShippingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.UserRole
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.PasswordResetToken
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Authority
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.GrantedAuthority
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserBilling
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserShipping
ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.bookstore.controller.ShoppingCartController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.BookstoreApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.CommandLineRunner
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.config.SecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.ShoppingCartRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.CartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserPaymentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookToCartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserShippingRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.PasswordResetTokenRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.USConstants
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.SecurityUtility
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.MailConstructor
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserSecurityService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetailsService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): $r0 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserPayment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Payment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BillingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Order
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.User
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetails
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BookToCartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShippingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.UserRole
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.PasswordResetToken
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Authority
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.GrantedAuthority
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserBilling
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserShipping
ServiceAllocTransform.java: instrumentServiceImplementations(): service list = [$r1=com.bookstore.service.impl.CartItemServiceImpl, $r0=com.bookstore.service.impl.CartItemServiceImpl]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = id := @parameter0: java.lang.Long
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r2 = interfaceinvoke $r0.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r1.<com.bookstore.service.impl.CartItemService: void removeCartItem(com.bookstore.domain.CartItem)>($r2)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r1.<com.bookstore.service.impl.CartItemService: void removeCartItem(com.bookstore.domain.CartItem)>($r2)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserService userService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartService shoppingCartService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookService bookService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemService cartItemService>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "forward:/shoppingCart/cart"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String removeItem(java.lang.Long)
    {
        com.bookstore.controller.ShoppingCartController this;
        java.lang.Long id;
        com.bookstore.service.impl.CartItemService $r0, $r1;
        com.bookstore.domain.CartItem $r2;

        this := @this: com.bookstore.controller.ShoppingCartController;

        id := @parameter0: java.lang.Long;

        $r1 = new com.bookstore.service.impl.CartItemServiceImpl;

        $r0 = new com.bookstore.service.impl.CartItemServiceImpl;

        $r2 = interfaceinvoke $r0.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem findById(java.lang.Long)>(id);

        virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)>($r2);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1;

        return "forward:/shoppingCart/cart";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = id := @parameter0: java.lang.Long
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r2 = interfaceinvoke $r0.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserService userService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartService shoppingCartService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookService bookService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)>($r2)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "forward:/shoppingCart/cart"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String removeItem(java.lang.Long)
    {
        com.bookstore.controller.ShoppingCartController this;
        java.lang.Long id;
        com.bookstore.service.impl.CartItemService $r0, $r1;
        com.bookstore.domain.CartItem $r2;

        this := @this: com.bookstore.controller.ShoppingCartController;

        id := @parameter0: java.lang.Long;

        $r1 = new com.bookstore.service.impl.CartItemServiceImpl;

        $r0 = new com.bookstore.service.impl.CartItemServiceImpl;

        $r2 = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r0;

        virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)>($r2);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1;

        return "forward:/shoppingCart/cart";
    }

FuncStackInfoBuilder internalTransform called!
FuncStackInfoBuilder.java: internalTransformHelper(): FuncStackInfoBuilder.java: body: 
    public java.lang.String removeItem(java.lang.Long)
    {
        com.bookstore.controller.ShoppingCartController this;
        java.lang.Long id;
        com.bookstore.service.impl.CartItemService $r0, $r1;
        com.bookstore.domain.CartItem $r2;

        this := @this: com.bookstore.controller.ShoppingCartController;

        id := @parameter0: java.lang.Long;

        $r1 = new com.bookstore.service.impl.CartItemServiceImpl;

        $r0 = new com.bookstore.service.impl.CartItemServiceImpl;

        $r2 = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r0;

        virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)>($r2);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1;

        return "forward:/shoppingCart/cart";
    }

FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: id
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: id
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: removeItem is Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.controller.ShoppingCartController;
id := @parameter0: java.lang.Long;
$r1 = new com.bookstore.service.impl.CartItemServiceImpl;
$r0 = new com.bookstore.service.impl.CartItemServiceImpl;
$r2 = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id);
this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r0;
virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)>($r2);
this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1;
return "forward:/shoppingCart/cart";


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.controller.ShoppingCartController;
id := @parameter0: java.lang.Long;
$r1 = new com.bookstore.service.impl.CartItemServiceImpl;
$r0 = new com.bookstore.service.impl.CartItemServiceImpl;
$r2 = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id);
this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r0;
virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)>($r2);
this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1;
return "forward:/shoppingCart/cart";


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.bookstore.controller.ShoppingCartController, id := @parameter0: java.lang.Long, $r1 = new com.bookstore.service.impl.CartItemServiceImpl, $r0 = new com.bookstore.service.impl.CartItemServiceImpl, $r2 = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id), this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r0, virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)>($r2), this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1, return "forward:/shoppingCart/cart"]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): topr is not null
FuncStackInfoBuilder.java: internalTransformHelper(): topr = 
| BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): CGSTART: 
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id) in <com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long)> ==> <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>
VIRTUAL edge: virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)>($r2) in <com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long)> ==> <com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)>
CGEND

FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: findById
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public com.bookstore.domain.CartItem findById(java.lang.Long)
    {
        com.bookstore.service.impl.CartItemServiceImpl this;
        java.lang.Long cartItemId;
        com.bookstore.repository.CartItemRepository $r0;
        java.util.Optional $r1;
        java.lang.Object $r2;
        com.bookstore.domain.CartItem $r3;

        this := @this: com.bookstore.service.impl.CartItemServiceImpl;

        cartItemId := @parameter0: java.lang.Long;

        $r0 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>;

        $r1 = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId);

        $r2 = virtualinvoke $r1.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);

        $r3 = (com.bookstore.domain.CartItem) $r2;

        return $r3;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: cartItemId
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: cartItemId
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r2
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r3
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r3
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: findById is Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.service.impl.CartItemServiceImpl;
cartItemId := @parameter0: java.lang.Long;
$r0 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>;
$r1 = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId);
$r2 = virtualinvoke $r1.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);
$r3 = (com.bookstore.domain.CartItem) $r2;
return $r3;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.service.impl.CartItemServiceImpl;
cartItemId := @parameter0: java.lang.Long;
$r0 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>;
$r1 = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId);
$r2 = virtualinvoke $r1.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);
$r3 = (com.bookstore.domain.CartItem) $r2;
return $r3;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.bookstore.service.impl.CartItemServiceImpl, cartItemId := @parameter0: java.lang.Long, $r0 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>, $r1 = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId), $r2 = virtualinvoke $r1.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null), $r3 = (com.bookstore.domain.CartItem) $r2, return $r3]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FSIB: InternalTransformHelper: calleeStr = com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: removeCartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void removeCartItem(com.bookstore.domain.CartItem)
    {
        com.bookstore.service.impl.CartItemServiceImpl this;
        com.bookstore.domain.CartItem cartItem;
        com.bookstore.repository.BookToCartItemRepository $r0;
        com.bookstore.repository.CartItemRepository $r1;

        this := @this: com.bookstore.service.impl.CartItemServiceImpl;

        cartItem := @parameter0: com.bookstore.domain.CartItem;

        $r0 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.BookToCartItemRepository bookToCartItemRepository>;

        interfaceinvoke $r0.<com.bookstore.repository.BookToCartItemRepository: void deleteByCartItem(com.bookstore.domain.CartItem)>(cartItem);

        $r1 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>;

        interfaceinvoke $r1.<com.bookstore.repository.CartItemRepository: void delete(java.lang.Object)>(cartItem);

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackInfoBuilder.java: regionTreeForBody(): local: this
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: this
FuncStackInfoBuilder.java: regionTreeForBody(): local: cartItem
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: cartItem
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r0
FuncStackInfoBuilder.java: regionTreeForBody(): local: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): local tags: $r1
FuncStackInfoBuilder.java: regionTreeForBody(): bbg for method: removeCartItem is Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.service.impl.CartItemServiceImpl;
cartItem := @parameter0: com.bookstore.domain.CartItem;
$r0 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.BookToCartItemRepository bookToCartItemRepository>;
interfaceinvoke $r0.<com.bookstore.repository.BookToCartItemRepository: void deleteByCartItem(com.bookstore.domain.CartItem)>(cartItem);
$r1 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>;
interfaceinvoke $r1.<com.bookstore.repository.CartItemRepository: void delete(java.lang.Object)>(cartItem);
return;


FuncStackInfoBuilder.java: regionTreeForBody(): cfgdot: digraph {
}

StructuralAnalysis.java: structuralAnalysis(): Start vertex: 0
dfsVisit: start = 0
StructuralAnalysis.java: structuralAnalysis(): structuralAnalysis: initial dfspostorder: [0]
FuncStackInfoBuilder.java: regionTreeForBody(): PRINTING Control Tree
StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): 
+- 0

FuncStackInfoBuilder.java: regionTreeForBody(): bbg = Block 0:
[preds: ] [succs: ]
this := @this: com.bookstore.service.impl.CartItemServiceImpl;
cartItem := @parameter0: com.bookstore.domain.CartItem;
$r0 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.BookToCartItemRepository bookToCartItemRepository>;
interfaceinvoke $r0.<com.bookstore.repository.BookToCartItemRepository: void deleteByCartItem(com.bookstore.domain.CartItem)>(cartItem);
$r1 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>;
interfaceinvoke $r1.<com.bookstore.repository.CartItemRepository: void delete(java.lang.Object)>(cartItem);
return;


StructuralAnalysis.java: controlTreeRoot(): control tree = {0=[]}
StructuralAnalysis.java: controlTreeRoot(): parent map = {}
StructuralAnalysis.java: controlTreeRoot(): found root = 0
FuncStackInfoBuilder: createARegionTree(): structType = {0=BasicBlock}
FuncStackInfoBuilder: createARegionTree(): ctRoot = 0
FuncStackInfoBuilder: createARegionTree(): childRegions.length: 0
FuncStackInfoBuilder: createARegionTree(): ctRoot.dat: 0
FuncStackInfoBuilder: createARegionTree(): Created bb region, num: 0
FuncStackInfoBuilder: createARegionTree(): bb units: [this := @this: com.bookstore.service.impl.CartItemServiceImpl, cartItem := @parameter0: com.bookstore.domain.CartItem, $r0 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.BookToCartItemRepository bookToCartItemRepository>, interfaceinvoke $r0.<com.bookstore.repository.BookToCartItemRepository: void deleteByCartItem(com.bookstore.domain.CartItem)>(cartItem), $r1 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>, interfaceinvoke $r1.<com.bookstore.repository.CartItemRepository: void delete(java.lang.Object)>(cartItem), return]
FuncStackInfoBuilder.java: regionTreeForBody(): created region tree for root = 0
FuncStackInfoBuilder.java: regionTreeForBody(): | BasicBlock0
FuncStackInfoBuilder.java: internalTransformHelper(): FuncStackInfoBuilder.java: functionstack: 
FuncStackInfoBuilder.java: internalTransformHelper():     com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)
FuncStackInfoBuilder.java: internalTransformHelper():     com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long)
FuncStackInfoBuilder.java: internalTransformHelper():     com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)
FuncStackInfoBuilder.java: internalTransformHelper(): {com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)=    public com.bookstore.domain.CartItem findById(java.lang.Long)
    {
        com.bookstore.service.impl.CartItemServiceImpl this;
        java.lang.Long cartItemId;
        com.bookstore.repository.CartItemRepository $r0;
        java.util.Optional $r1;
        java.lang.Object $r2;
        com.bookstore.domain.CartItem $r3;

        this := @this: com.bookstore.service.impl.CartItemServiceImpl;

        cartItemId := @parameter0: java.lang.Long;

        $r0 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>;

        $r1 = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId);

        $r2 = virtualinvoke $r1.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);

        $r3 = (com.bookstore.domain.CartItem) $r2;

        return $r3;
    }
, com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long)=    public java.lang.String removeItem(java.lang.Long)
    {
        com.bookstore.controller.ShoppingCartController this;
        java.lang.Long id;
        com.bookstore.service.impl.CartItemService $r0, $r1;
        com.bookstore.domain.CartItem $r2;

        this := @this: com.bookstore.controller.ShoppingCartController;

        id := @parameter0: java.lang.Long;

        $r1 = new com.bookstore.service.impl.CartItemServiceImpl;

        $r0 = new com.bookstore.service.impl.CartItemServiceImpl;

        $r2 = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r0;

        virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)>($r2);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1;

        return "forward:/shoppingCart/cart";
    }
, com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)=    public void removeCartItem(com.bookstore.domain.CartItem)
    {
        com.bookstore.service.impl.CartItemServiceImpl this;
        com.bookstore.domain.CartItem cartItem;
        com.bookstore.repository.BookToCartItemRepository $r0;
        com.bookstore.repository.CartItemRepository $r1;

        this := @this: com.bookstore.service.impl.CartItemServiceImpl;

        cartItem := @parameter0: com.bookstore.domain.CartItem;

        $r0 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.BookToCartItemRepository bookToCartItemRepository>;

        interfaceinvoke $r0.<com.bookstore.repository.BookToCartItemRepository: void deleteByCartItem(com.bookstore.domain.CartItem)>(cartItem);

        $r1 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>;

        interfaceinvoke $r1.<com.bookstore.repository.CartItemRepository: void delete(java.lang.Object)>(cartItem);

        return;
    }
}

Decompiling com.bookstore.controller.ShoppingCartController... 
ServiceAllocTransform.java: internalTransform(): methodsig: <com.bookstore.controller.ShoppingCartController: void <init>()>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: <init>
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public void <init>()
    {
        com.bookstore.controller.ShoppingCartController this;

        this := @this: com.bookstore.controller.ShoppingCartController;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
ServiceAllocTransform.java: internalTransform(): methodsig: <com.bookstore.controller.ShoppingCartController: java.lang.String shoppingCart(org.springframework.ui.Model,java.security.Principal)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: shoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String shoppingCart(org.springframework.ui.Model, java.security.Principal)
    {
        com.bookstore.controller.ShoppingCartController this;
        org.springframework.ui.Model model;
        java.security.Principal principal;
        com.bookstore.domain.User user;
        com.bookstore.domain.ShoppingCart shoppingCart;
        java.util.List cartItemList;
        com.bookstore.service.impl.UserService $r0;
        java.lang.String $r1;
        com.bookstore.service.impl.CartItemService $r2;
        com.bookstore.service.impl.ShoppingCartService $r3;

        this := @this: com.bookstore.controller.ShoppingCartController;

        model := @parameter0: org.springframework.ui.Model;

        principal := @parameter1: java.security.Principal;

        $r0 = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserService userService>;

        $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        user = interfaceinvoke $r0.<com.bookstore.service.impl.UserService: com.bookstore.domain.User findByUsername(java.lang.String)>($r1);

        shoppingCart = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>();

        $r2 = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemService cartItemService>;

        cartItemList = interfaceinvoke $r2.<com.bookstore.service.impl.CartItemService: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        $r3 = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartService shoppingCartService>;

        interfaceinvoke $r3.<com.bookstore.service.impl.ShoppingCartService: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart);

        return "shoppingCart";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.bookstore.controller.ShoppingCartController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.BookstoreApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.CommandLineRunner
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.config.SecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.ShoppingCartRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.CartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserPaymentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookToCartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserShippingRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.PasswordResetTokenRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.USConstants
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.SecurityUtility
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.MailConstructor
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserSecurityService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetailsService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): $r0 = new com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserPayment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Payment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BillingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Order
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.User
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetails
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BookToCartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShippingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.UserRole
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.PasswordResetToken
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Authority
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.GrantedAuthority
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserBilling
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserShipping
ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.bookstore.controller.ShoppingCartController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.BookstoreApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.CommandLineRunner
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.config.SecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.ShoppingCartRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.CartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserPaymentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookToCartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserShippingRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.PasswordResetTokenRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.USConstants
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.SecurityUtility
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.MailConstructor
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserSecurityService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetailsService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): $r2 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserPayment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Payment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BillingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Order
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.User
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetails
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BookToCartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShippingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.UserRole
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.PasswordResetToken
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Authority
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.GrantedAuthority
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserBilling
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserShipping
ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.bookstore.controller.ShoppingCartController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.BookstoreApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.CommandLineRunner
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.config.SecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.ShoppingCartRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.CartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserPaymentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookToCartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserShippingRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.PasswordResetTokenRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.USConstants
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.SecurityUtility
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.MailConstructor
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserSecurityService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetailsService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): $r3 = new com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserPayment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Payment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BillingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Order
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.User
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetails
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BookToCartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShippingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.UserRole
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.PasswordResetToken
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Authority
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.GrantedAuthority
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserBilling
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserShipping
ServiceAllocTransform.java: instrumentServiceImplementations(): service list = [$r0=com.bookstore.service.impl.UserServiceImpl, $r2=com.bookstore.service.impl.CartItemServiceImpl, $r3=com.bookstore.service.impl.ShoppingCartServiceImpl]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = model := @parameter0: org.springframework.ui.Model
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = principal := @parameter1: java.security.Principal
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = principal
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = user = interfaceinvoke $r0.<com.bookstore.service.impl.UserService: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserService userService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartService shoppingCartService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookService bookService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = shoppingCart = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r2 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = cartItemList = interfaceinvoke $r2.<com.bookstore.service.impl.CartItemService: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r3 = new com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r3.<com.bookstore.service.impl.ShoppingCartService: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r3.<com.bookstore.service.impl.ShoppingCartService: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r3
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "shoppingCart"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String shoppingCart(org.springframework.ui.Model, java.security.Principal)
    {
        com.bookstore.controller.ShoppingCartController this;
        org.springframework.ui.Model model;
        java.security.Principal principal;
        com.bookstore.domain.User user;
        com.bookstore.domain.ShoppingCart shoppingCart;
        java.util.List cartItemList;
        com.bookstore.service.impl.UserService $r0;
        java.lang.String $r1;
        com.bookstore.service.impl.CartItemService $r2;
        com.bookstore.service.impl.ShoppingCartService $r3;

        this := @this: com.bookstore.controller.ShoppingCartController;

        model := @parameter0: org.springframework.ui.Model;

        principal := @parameter1: java.security.Principal;

        $r0 = new com.bookstore.service.impl.UserServiceImpl;

        $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0;

        shoppingCart = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>();

        $r2 = new com.bookstore.service.impl.CartItemServiceImpl;

        cartItemList = interfaceinvoke $r2.<com.bookstore.service.impl.CartItemService: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        $r3 = new com.bookstore.service.impl.ShoppingCartServiceImpl;

        interfaceinvoke $r3.<com.bookstore.service.impl.ShoppingCartService: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart);

        return "shoppingCart";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = model := @parameter0: org.springframework.ui.Model
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = principal := @parameter1: java.security.Principal
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = principal
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): Break
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = shoppingCart = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r2 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = cartItemList = interfaceinvoke $r2.<com.bookstore.service.impl.CartItemService: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): Break
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartService shoppingCartService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookService bookService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r3 = new com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r3.<com.bookstore.service.impl.ShoppingCartService: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r3.<com.bookstore.service.impl.ShoppingCartService: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r3
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): Break
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): Break
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): Break
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "shoppingCart"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String shoppingCart(org.springframework.ui.Model, java.security.Principal)
    {
        com.bookstore.controller.ShoppingCartController this;
        org.springframework.ui.Model model;
        java.security.Principal principal;
        com.bookstore.domain.User user;
        com.bookstore.domain.ShoppingCart shoppingCart;
        java.util.List cartItemList;
        com.bookstore.service.impl.UserService $r0;
        java.lang.String $r1;
        com.bookstore.service.impl.CartItemService $r2;
        com.bookstore.service.impl.ShoppingCartService $r3;

        this := @this: com.bookstore.controller.ShoppingCartController;

        model := @parameter0: org.springframework.ui.Model;

        principal := @parameter1: java.security.Principal;

        $r0 = new com.bookstore.service.impl.UserServiceImpl;

        $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0;

        shoppingCart = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>();

        $r2 = new com.bookstore.service.impl.CartItemServiceImpl;

        cartItemList = virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r2;

        $r3 = new com.bookstore.service.impl.ShoppingCartServiceImpl;

        interfaceinvoke $r3.<com.bookstore.service.impl.ShoppingCartService: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart);

        return "shoppingCart";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r3
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = model := @parameter0: org.springframework.ui.Model
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = principal := @parameter1: java.security.Principal
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = principal
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r3
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = shoppingCart = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r2 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = cartItemList = virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r3 = new com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r3.<com.bookstore.service.impl.ShoppingCartService: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r3.<com.bookstore.service.impl.ShoppingCartService: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r3
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r3
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartService shoppingCartService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookService bookService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r3
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r3
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = model
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r3
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "shoppingCart"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String shoppingCart(org.springframework.ui.Model, java.security.Principal)
    {
        com.bookstore.controller.ShoppingCartController this;
        org.springframework.ui.Model model;
        java.security.Principal principal;
        com.bookstore.domain.User user;
        com.bookstore.domain.ShoppingCart shoppingCart;
        java.util.List cartItemList;
        com.bookstore.service.impl.UserService $r0;
        java.lang.String $r1;
        com.bookstore.service.impl.CartItemService $r2;
        com.bookstore.service.impl.ShoppingCartService $r3;

        this := @this: com.bookstore.controller.ShoppingCartController;

        model := @parameter0: org.springframework.ui.Model;

        principal := @parameter1: java.security.Principal;

        $r0 = new com.bookstore.service.impl.UserServiceImpl;

        $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0;

        shoppingCart = virtualinvoke user.<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart getShoppingCart()>();

        $r2 = new com.bookstore.service.impl.CartItemServiceImpl;

        cartItemList = virtualinvoke $r2.<com.bookstore.service.impl.CartItemServiceImpl: java.util.List findByShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r2;

        $r3 = new com.bookstore.service.impl.ShoppingCartServiceImpl;

        virtualinvoke $r3.<com.bookstore.service.impl.ShoppingCartServiceImpl: com.bookstore.domain.ShoppingCart updateShoppingCart(com.bookstore.domain.ShoppingCart)>(shoppingCart);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl> = $r3;

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("cartItemList", cartItemList);

        interfaceinvoke model.<org.springframework.ui.Model: org.springframework.ui.Model addAttribute(java.lang.String,java.lang.Object)>("shoppingCart", shoppingCart);

        return "shoppingCart";
    }

ServiceAllocTransform.java: internalTransform(): methodsig: <com.bookstore.controller.ShoppingCartController: java.lang.String addItem(com.bookstore.domain.Book,java.lang.String,org.springframework.ui.Model,java.security.Principal)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: addItem
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String addItem(com.bookstore.domain.Book, java.lang.String, org.springframework.ui.Model, java.security.Principal)
    {
        com.bookstore.controller.ShoppingCartController this;
        java.lang.String qty, $r1, $r9;
        org.springframework.ui.Model model;
        java.security.Principal principal;
        com.bookstore.domain.User user;
        com.bookstore.service.impl.UserService $r0;
        com.bookstore.service.impl.BookService $r2;
        java.lang.Long $r3, $r7;
        com.bookstore.service.impl.CartItemService $r4;
        int $i0;
        java.lang.StringBuilder $r5, $r6, $r8;
        com.bookstore.domain.Book book, book;

        this := @this: com.bookstore.controller.ShoppingCartController;

        book := @parameter0: com.bookstore.domain.Book;

        qty := @parameter1: java.lang.String;

        model := @parameter2: org.springframework.ui.Model;

        principal := @parameter3: java.security.Principal;

        $r0 = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserService userService>;

        $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        user = interfaceinvoke $r0.<com.bookstore.service.impl.UserService: com.bookstore.domain.User findByUsername(java.lang.String)>($r1);

        $r2 = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookService bookService>;

        $r3 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>();

        book = interfaceinvoke $r2.<com.bookstore.service.impl.BookService: com.bookstore.domain.Book findById(java.lang.Long)>($r3);

        $r4 = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemService cartItemService>;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(qty);

        interfaceinvoke $r4.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem addBookToCartItem(com.bookstore.domain.Book,com.bookstore.domain.User,int)>(book, user, $i0);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forward:/bookDetail?id=");

        $r7 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.bookstore.controller.ShoppingCartController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.BookstoreApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.CommandLineRunner
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.config.SecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.ShoppingCartRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.CartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserPaymentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookToCartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserShippingRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.PasswordResetTokenRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.USConstants
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.SecurityUtility
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.MailConstructor
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserSecurityService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetailsService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): $r0 = new com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserPayment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Payment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BillingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Order
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.User
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetails
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BookToCartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShippingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.UserRole
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.PasswordResetToken
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Authority
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.GrantedAuthority
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserBilling
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserShipping
ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.bookstore.controller.ShoppingCartController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.BookstoreApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.CommandLineRunner
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.config.SecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.ShoppingCartRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.CartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserPaymentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookToCartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserShippingRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.PasswordResetTokenRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.USConstants
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.SecurityUtility
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.MailConstructor
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): $r2 = new com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserSecurityService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetailsService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserPayment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Payment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BillingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Order
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.User
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetails
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BookToCartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShippingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.UserRole
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.PasswordResetToken
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Authority
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.GrantedAuthority
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserBilling
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserShipping
ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.bookstore.controller.ShoppingCartController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.BookstoreApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.CommandLineRunner
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.config.SecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.ShoppingCartRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.CartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserPaymentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookToCartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserShippingRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.PasswordResetTokenRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.USConstants
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.SecurityUtility
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.MailConstructor
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserSecurityService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetailsService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): $r4 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserPayment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Payment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BillingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Order
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.User
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetails
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BookToCartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShippingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.UserRole
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.PasswordResetToken
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Authority
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.GrantedAuthority
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserBilling
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserShipping
ServiceAllocTransform.java: instrumentServiceImplementations(): service list = [$r0=com.bookstore.service.impl.UserServiceImpl, $r2=com.bookstore.service.impl.BookServiceImpl, $r4=com.bookstore.service.impl.CartItemServiceImpl]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = book := @parameter0: com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = qty := @parameter1: java.lang.String
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = model := @parameter2: org.springframework.ui.Model
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = principal := @parameter3: java.security.Principal
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = principal
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = user = interfaceinvoke $r0.<com.bookstore.service.impl.UserService: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookService bookService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r2 = new com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r3 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = book = interfaceinvoke $r2.<com.bookstore.service.impl.BookService: com.bookstore.domain.Book findById(java.lang.Long)>($r3)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r4 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(qty)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r4.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem addBookToCartItem(com.bookstore.domain.Book,com.bookstore.domain.User,int)>(book, user, $i0)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r4.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem addBookToCartItem(com.bookstore.domain.Book,com.bookstore.domain.User,int)>(book, user, $i0)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r4
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r5 = new java.lang.StringBuilder
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forward:/bookDetail?id=")
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r7 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return $r9
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String addItem(com.bookstore.domain.Book, java.lang.String, org.springframework.ui.Model, java.security.Principal)
    {
        com.bookstore.controller.ShoppingCartController this;
        java.lang.String qty, $r1, $r9;
        org.springframework.ui.Model model;
        java.security.Principal principal;
        com.bookstore.domain.User user;
        com.bookstore.service.impl.UserService $r0;
        com.bookstore.service.impl.BookService $r2;
        java.lang.Long $r3, $r7;
        com.bookstore.service.impl.CartItemService $r4;
        int $i0;
        java.lang.StringBuilder $r5, $r6, $r8;
        com.bookstore.domain.Book book, book;

        this := @this: com.bookstore.controller.ShoppingCartController;

        book := @parameter0: com.bookstore.domain.Book;

        qty := @parameter1: java.lang.String;

        model := @parameter2: org.springframework.ui.Model;

        principal := @parameter3: java.security.Principal;

        $r0 = new com.bookstore.service.impl.UserServiceImpl;

        $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0;

        $r2 = new com.bookstore.service.impl.BookServiceImpl;

        $r3 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>();

        book = interfaceinvoke $r2.<com.bookstore.service.impl.BookService: com.bookstore.domain.Book findById(java.lang.Long)>($r3);

        $r4 = new com.bookstore.service.impl.CartItemServiceImpl;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(qty);

        interfaceinvoke $r4.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem addBookToCartItem(com.bookstore.domain.Book,com.bookstore.domain.User,int)>(book, user, $i0);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forward:/bookDetail?id=");

        $r7 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = book := @parameter0: com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = qty := @parameter1: java.lang.String
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = model := @parameter2: org.springframework.ui.Model
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = principal := @parameter3: java.security.Principal
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = principal
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): Break
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r2 = new com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r3 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = book = interfaceinvoke $r2.<com.bookstore.service.impl.BookService: com.bookstore.domain.Book findById(java.lang.Long)>($r3)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): Break
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookService bookService>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r4 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(qty)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r4.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem addBookToCartItem(com.bookstore.domain.Book,com.bookstore.domain.User,int)>(book, user, $i0)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r4.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem addBookToCartItem(com.bookstore.domain.Book,com.bookstore.domain.User,int)>(book, user, $i0)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r4
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): Break
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r5 = new java.lang.StringBuilder
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forward:/bookDetail?id=")
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r7 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return $r9
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String addItem(com.bookstore.domain.Book, java.lang.String, org.springframework.ui.Model, java.security.Principal)
    {
        com.bookstore.controller.ShoppingCartController this;
        java.lang.String qty, $r1, $r9;
        org.springframework.ui.Model model;
        java.security.Principal principal;
        com.bookstore.domain.User user;
        com.bookstore.service.impl.UserService $r0;
        com.bookstore.service.impl.BookService $r2;
        java.lang.Long $r3, $r7;
        com.bookstore.service.impl.CartItemService $r4;
        int $i0;
        java.lang.StringBuilder $r5, $r6, $r8;
        com.bookstore.domain.Book book, book;

        this := @this: com.bookstore.controller.ShoppingCartController;

        book := @parameter0: com.bookstore.domain.Book;

        qty := @parameter1: java.lang.String;

        model := @parameter2: org.springframework.ui.Model;

        principal := @parameter3: java.security.Principal;

        $r0 = new com.bookstore.service.impl.UserServiceImpl;

        $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0;

        $r2 = new com.bookstore.service.impl.BookServiceImpl;

        $r3 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>();

        book = virtualinvoke $r2.<com.bookstore.service.impl.BookServiceImpl: com.bookstore.domain.Book findById(java.lang.Long)>($r3);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookServiceImpl bookServiceImpl> = $r2;

        $r4 = new com.bookstore.service.impl.CartItemServiceImpl;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(qty);

        interfaceinvoke $r4.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem addBookToCartItem(com.bookstore.domain.Book,com.bookstore.domain.User,int)>(book, user, $i0);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forward:/bookDetail?id=");

        $r7 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r4
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = book := @parameter0: com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = qty := @parameter1: java.lang.String
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = model := @parameter2: org.springframework.ui.Model
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = principal := @parameter3: java.security.Principal
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = principal
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r4
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r2 = new com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r3 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = book = virtualinvoke $r2.<com.bookstore.service.impl.BookServiceImpl: com.bookstore.domain.Book findById(java.lang.Long)>($r3)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookServiceImpl bookServiceImpl> = $r2
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r4 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(qty)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r4.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem addBookToCartItem(com.bookstore.domain.Book,com.bookstore.domain.User,int)>(book, user, $i0)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r4.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem addBookToCartItem(com.bookstore.domain.Book,com.bookstore.domain.User,int)>(book, user, $i0)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r4
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r4
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookServiceImpl bookServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r4
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r5 = new java.lang.StringBuilder
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forward:/bookDetail?id=")
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r7 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return $r9
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String addItem(com.bookstore.domain.Book, java.lang.String, org.springframework.ui.Model, java.security.Principal)
    {
        com.bookstore.controller.ShoppingCartController this;
        java.lang.String qty, $r1, $r9;
        org.springframework.ui.Model model;
        java.security.Principal principal;
        com.bookstore.domain.User user;
        com.bookstore.service.impl.UserService $r0;
        com.bookstore.service.impl.BookService $r2;
        java.lang.Long $r3, $r7;
        com.bookstore.service.impl.CartItemService $r4;
        int $i0;
        java.lang.StringBuilder $r5, $r6, $r8;
        com.bookstore.domain.Book book, book;

        this := @this: com.bookstore.controller.ShoppingCartController;

        book := @parameter0: com.bookstore.domain.Book;

        qty := @parameter1: java.lang.String;

        model := @parameter2: org.springframework.ui.Model;

        principal := @parameter3: java.security.Principal;

        $r0 = new com.bookstore.service.impl.UserServiceImpl;

        $r1 = interfaceinvoke principal.<java.security.Principal: java.lang.String getName()>();

        user = virtualinvoke $r0.<com.bookstore.service.impl.UserServiceImpl: com.bookstore.domain.User findByUsername(java.lang.String)>($r1);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl> = $r0;

        $r2 = new com.bookstore.service.impl.BookServiceImpl;

        $r3 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>();

        book = virtualinvoke $r2.<com.bookstore.service.impl.BookServiceImpl: com.bookstore.domain.Book findById(java.lang.Long)>($r3);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookServiceImpl bookServiceImpl> = $r2;

        $r4 = new com.bookstore.service.impl.CartItemServiceImpl;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(qty);

        virtualinvoke $r4.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem addBookToCartItem(com.bookstore.domain.Book,com.bookstore.domain.User,int)>(book, user, $i0);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("forward:/bookDetail?id=");

        $r7 = virtualinvoke book.<com.bookstore.domain.Book: java.lang.Long getId()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

ServiceAllocTransform.java: internalTransform(): methodsig: <com.bookstore.controller.ShoppingCartController: java.lang.String updateShoppingCart(java.lang.Long,int)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: updateShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String updateShoppingCart(java.lang.Long, int)
    {
        com.bookstore.controller.ShoppingCartController this;
        java.lang.Long cartItemId;
        int qty;
        com.bookstore.domain.CartItem cartItem;
        com.bookstore.service.impl.CartItemService $r0, $r1;

        this := @this: com.bookstore.controller.ShoppingCartController;

        cartItemId := @parameter0: java.lang.Long;

        qty := @parameter1: int;

        $r0 = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemService cartItemService>;

        cartItem = interfaceinvoke $r0.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem findById(java.lang.Long)>(cartItemId);

        virtualinvoke cartItem.<com.bookstore.domain.CartItem: void setQty(int)>(qty);

        $r1 = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemService cartItemService>;

        interfaceinvoke $r1.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem);

        return "forward:/shoppingCart/cart";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.bookstore.controller.ShoppingCartController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.BookstoreApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.CommandLineRunner
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.config.SecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.ShoppingCartRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.CartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserPaymentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookToCartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserShippingRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.PasswordResetTokenRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.USConstants
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.SecurityUtility
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.MailConstructor
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserSecurityService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetailsService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): $r0 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserPayment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Payment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BillingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Order
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.User
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetails
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BookToCartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShippingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.UserRole
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.PasswordResetToken
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Authority
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.GrantedAuthority
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserBilling
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserShipping
ServiceAllocTransform.java: instrumentServiceImplementations(): Application Classes: [com.bookstore.controller.ShoppingCartController]
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.HomeController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.BookstoreApplication
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.boot.CommandLineRunner
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.config.SecurityConfig
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.RoleRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.ShoppingCartRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.CartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserPaymentRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookToCartItemRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.UserShippingRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.PasswordResetTokenRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.jpa.repository.JpaRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.repository.BookRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.data.repository.CrudRepository
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.USConstants
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.SecurityUtility
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.utility.MailConstructor
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserSecurityService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetailsService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserPaymentService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.BookService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.UserService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.ShoppingCartService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implementation found: com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): $r1 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.service.impl.UserShippingService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Book
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserPayment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShoppingCart
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Payment
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.CartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BillingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.Order
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.User
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.userdetails.UserDetails
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.BookToCartItem
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.ShippingAddress
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.UserRole
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.PasswordResetToken
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Authority
ServiceAllocTransform.java: instrumentServiceImplementations(): interface implemented = org.springframework.security.core.GrantedAuthority
ServiceAllocTransform.java: instrumentServiceImplementations(): rhsValType =com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.security.Role
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserBilling
ServiceAllocTransform.java: instrumentServiceImplementations(): com.bookstore.domain.UserShipping
ServiceAllocTransform.java: instrumentServiceImplementations(): service list = [$r0=com.bookstore.service.impl.CartItemServiceImpl, $r1=com.bookstore.service.impl.CartItemServiceImpl]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = cartItemId := @parameter0: java.lang.Long
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = qty := @parameter1: int
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = cartItem = interfaceinvoke $r0.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem findById(java.lang.Long)>(cartItemId)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookServiceImpl bookServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = virtualinvoke cartItem.<com.bookstore.domain.CartItem: void setQty(int)>(qty)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r1.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r1.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "forward:/shoppingCart/cart"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String updateShoppingCart(java.lang.Long, int)
    {
        com.bookstore.controller.ShoppingCartController this;
        java.lang.Long cartItemId;
        int qty;
        com.bookstore.domain.CartItem cartItem;
        com.bookstore.service.impl.CartItemService $r0, $r1;

        this := @this: com.bookstore.controller.ShoppingCartController;

        cartItemId := @parameter0: java.lang.Long;

        qty := @parameter1: int;

        $r0 = new com.bookstore.service.impl.CartItemServiceImpl;

        cartItem = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(cartItemId);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r0;

        virtualinvoke cartItem.<com.bookstore.domain.CartItem: void setQty(int)>(qty);

        $r1 = new com.bookstore.service.impl.CartItemServiceImpl;

        interfaceinvoke $r1.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem);

        return "forward:/shoppingCart/cart";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service var = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): implementation class = com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): iterating through all units to find service.method() invoke statements
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this := @this: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = cartItemId := @parameter0: java.lang.Long
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = qty := @parameter1: int
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JIdentityStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r0 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = cartItem = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(cartItemId)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r0
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = virtualinvoke cartItem.<com.bookstore.domain.CartItem: void setQty(int)>(qty)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = $r1 = new com.bookstore.service.impl.CartItemServiceImpl
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JAssignStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = interfaceinvoke $r1.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem)
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JInvokeStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): Found a interface invoke. Case: stmt instanceof InterfaceInvokeExpr. stmt: interfaceinvoke $r1.<com.bookstore.service.impl.CartItemService: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem)
ServiceAllocTransform.java: instrumentServiceImplementations(): invoke base = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): left = $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): fields of class of method: [<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.UserServiceImpl userServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.ShoppingCartServiceImpl shoppingCartServiceImpl>, <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.BookServiceImpl bookServiceImpl>]
ServiceAllocTransform.java: instrumentServiceImplementations(): service var: $r1
ServiceAllocTransform.java: instrumentServiceImplementations(): service var type: com.bookstore.service.impl.CartItemService
ServiceAllocTransform.java: instrumentServiceImplementations(): cst = return "forward:/shoppingCart/cart"
ServiceAllocTransform.java: instrumentServiceImplementations(): class of cst: class soot.jimple.internal.JReturnStmt
ServiceAllocTransform.java: instrumentServiceImplementations(): body AFTER service replacement with its implementation
    public java.lang.String updateShoppingCart(java.lang.Long, int)
    {
        com.bookstore.controller.ShoppingCartController this;
        java.lang.Long cartItemId;
        int qty;
        com.bookstore.domain.CartItem cartItem;
        com.bookstore.service.impl.CartItemService $r0, $r1;

        this := @this: com.bookstore.controller.ShoppingCartController;

        cartItemId := @parameter0: java.lang.Long;

        qty := @parameter1: int;

        $r0 = new com.bookstore.service.impl.CartItemServiceImpl;

        cartItem = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(cartItemId);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r0;

        virtualinvoke cartItem.<com.bookstore.domain.CartItem: void setQty(int)>(qty);

        $r1 = new com.bookstore.service.impl.CartItemServiceImpl;

        virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem updateCartItem(com.bookstore.domain.CartItem)>(cartItem);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1;

        return "forward:/shoppingCart/cart";
    }

ServiceAllocTransform.java: internalTransform(): methodsig: <com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long)>
ServiceAllocTransform.java: instrumentServiceImplementations(): body methodname: removeItem
ServiceAllocTransform.java: instrumentServiceImplementations(): class of method: com.bookstore.controller.ShoppingCartController
ServiceAllocTransform.java: instrumentServiceImplementations(): currCaseSig: com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long)
ServiceAllocTransform.java: instrumentServiceImplementations(): package prefix: com.bookstore
ServiceAllocTransform.java: instrumentServiceImplementations(): body before service replacement with its implementation: 
    public java.lang.String removeItem(java.lang.Long)
    {
        com.bookstore.controller.ShoppingCartController this;
        java.lang.Long id;
        com.bookstore.service.impl.CartItemService $r0, $r1;
        com.bookstore.domain.CartItem $r2;

        this := @this: com.bookstore.controller.ShoppingCartController;

        id := @parameter0: java.lang.Long;

        $r1 = new com.bookstore.service.impl.CartItemServiceImpl;

        $r0 = new com.bookstore.service.impl.CartItemServiceImpl;

        $r2 = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r0;

        virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)>($r2);

        this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1;

        return "forward:/shoppingCart/cart";
    }

ServiceAllocTransform.java: instrumentServiceImplementations(): service list = []
FuncStackAnalyzer.java: constructDIRForStack(): FSA: constructDIRsForStack: Stack = [com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
FuncStackAnalyzer.java: constructDIRForStack(): top function sig: com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long)
FuncStackAnalyzer.java: constructDIRForStack(): body rootmethod before analysis: [this := @this: com.bookstore.controller.ShoppingCartController, id := @parameter0: java.lang.Long, $r1 = new com.bookstore.service.impl.CartItemServiceImpl, $r0 = new com.bookstore.service.impl.CartItemServiceImpl, $r2 = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id), this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r0, virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)>($r2), this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1, return "forward:/shoppingCart/cart"]
FuncStackAnalyzer.java: constructDIRForStack(): Top level func i.e. com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long)has typemap: {}
ARegion.java: analyze(): set cur method of analyzer to: removeItem
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.bookstore.controller.ShoppingCartController, id := @parameter0: java.lang.Long, $r1 = new com.bookstore.service.impl.CartItemServiceImpl, $r0 = new com.bookstore.service.impl.CartItemServiceImpl, $r2 = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id), this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r0, virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)>($r2), this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1, return "forward:/shoppingCart/cart"]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.bookstore.controller.ShoppingCartController
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = id := @parameter0: java.lang.Long
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = new com.bookstore.service.impl.CartItemServiceImpl
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = new com.bookstore.service.impl.CartItemServiceImpl
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JNewExpr
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r2 = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = findById
construct/Utils.java: parseInvokeExpr(): methodSignature = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)
construct/Utils.java: parseObjectInvoke(): virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>
construct/Utils.java: parseObjectInvoke(): methodName = findById
construct/Utils.java: parseObjectInvoke(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
construct/Utils.java: parseObjectInvoke(): methodSignature = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)
construct/Utils.java: parseObjectInvoke(): Case : findBy
Utils.java: getRelExpForMethod(): getRelExpForMethod: virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
Utils.java: getRelExpForMethod(): actualargs = [id]
Utils.java: getRelExpForMethod(): methodInvoked = <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>
Utils.java: getRelExpForMethod(): taglist: 
[]
construct/Utils.java: parseObjectInvoke(): relExpFor method : virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
construct/Utils.java: parseObjectInvoke(): expr : null
DIRRegionAnalyzer.java: valIsRepository(): fpar val: $r0
DIRRegionAnalyzer.java: valIsRepository(): refType: com.bookstore.service.impl.CartItemService
DIRRegionAnalyzer.java: valIsRepository(): valClass: com.bookstore.service.impl.CartItemService
DIRRegionAnalyzer.java: valIsRepository(): ret: false
construct/Utils.java: parseObjectInvoke(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
construct/Utils.java: parseObjectInvoke(): calleeRegion class: class dbridge.analysis.region.regions.Region
ARegion.java: analyze(): set cur method of analyzer to: findById
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.bookstore.service.impl.CartItemServiceImpl, cartItemId := @parameter0: java.lang.Long, $r0 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>, $r1 = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId), $r2 = virtualinvoke $r1.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null), $r3 = (com.bookstore.domain.CartItem) $r2, return $r3]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.bookstore.service.impl.CartItemServiceImpl
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = cartItemId := @parameter0: java.lang.Long
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r0 -> this.cartItemRepository
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInterfaceInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
DIRRegionAnalyzer.java: constructDIR(): Update dir map
construct/Utils.java: parseInvokeExpr(): methodName = findById
construct/Utils.java: parseInvokeExpr(): methodSignature = java.lang.Object: java.util.Optional findById(java.lang.Object)
construct/Utils.java: parseObjectInvoke(): interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
Utils.java: normalizeMethodSignature(): invokeExpr.getMethod().getSignature(): <java.lang.Object: java.util.Optional findById(java.lang.Object)>
Utils.java: normalizeMethodSignature(): invokeExpr.getMethodRef().getSignature(): <com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>
construct/Utils.java: parseObjectInvoke(): methodName = findById
construct/Utils.java: parseObjectInvoke(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
construct/Utils.java: parseObjectInvoke(): methodSignature = java.lang.Object: java.util.Optional findById(java.lang.Object)
construct/Utils.java: parseObjectInvoke(): Case : findBy
Utils.java: getRelExpForMethod(): getRelExpForMethod: interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
Utils.java: getRelExpForMethod(): actualargs = [cartItemId]
Utils.java: getRelExpForMethod(): methodInvoked = <java.lang.Object: java.util.Optional findById(java.lang.Object)>
Utils.java: getRelExpForMethod(): taglist: 
[]
construct/Utils.java: parseObjectInvoke(): relExpFor method : interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
construct/Utils.java: parseObjectInvoke(): expr : null
DIRRegionAnalyzer.java: valIsRepository(): fpar val: $r0
DIRRegionAnalyzer.java: valIsRepository(): refType: com.bookstore.repository.CartItemRepository
DIRRegionAnalyzer.java: valIsRepository(): valClass: com.bookstore.repository.CartItemRepository
DIRRegionAnalyzer.java: valIsRepository(): ret: true
construct/Utils.java: parseObjectInvoke(): Return is optional-typed for function: java.lang.Object: java.util.Optional findById(java.lang.Object)
construct/Utils.java: parseObjectInvoke(): typeTable after analyzeBCEL: {return_com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)=com.bookstore.domain.CartItem, return=com.bookstore.domain.CartItem}
construct/Utils.java: parseObjectInvoke(): retTypeStr: com.bookstore.domain.CartItem
construct/Utils.java: parseObjectInvoke(): retType = com.bookstore.domain.CartItem
construct/Utils.java: parseObjectInvoke(): entityClass = com.bookstore.domain.CartItem
construct/Utils.java: parseObjectInvoke(): tableName = com.bookstore.domain.CartItem
construct/Utils.java: parseObjectInvoke(): check = Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId
construct/Utils.java: parseObjectInvoke(): attributes = [id, qty, subtotal]
construct/Utils.java: parseObjectInvoke(): retAccp: return
construct/Utils.java: parseObjectInvoke(): check 2
cosntruct/utils.java: mapDBFetchAccessGraph(): check relExpBaseAccp= Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId
cosntruct/utils.java: mapDBFetchAccessGraph(): prim fields = [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>]
cosntruct/utils.java: mapDBFetchAccessGraph(): oneToOne fields= [<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>]
cosntruct/utils.java: mapDBFetchAccessGraph(): check = Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.Book)
| NullOp
cosntruct/utils.java: mapDBFetchAccessGraph(): check relExpBaseAccp= Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.Book)
| NullOp
cosntruct/utils.java: mapDBFetchAccessGraph(): prim fields = [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>]
cosntruct/utils.java: mapDBFetchAccessGraph(): oneToOne fields= [<com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
cosntruct/utils.java: mapDBFetchAccessGraph(): check = Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp
cosntruct/utils.java: mapDBFetchAccessGraph(): manyToOne fields = []
cosntruct/utils.java: mapDBFetchAccessGraph(): collection fields = [<com.bookstore.domain.Book: java.util.List bookToCartItemsList>]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
cosntruct/utils.java: mapDBFetchAccessGraph(): manyTomany fields = []
cosntruct/utils.java: mapDBFetchAccessGraph(): manyToOne fields = [<com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
cosntruct/utils.java: mapDBFetchAccessGraph(): check relExpBaseAccp= Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp
cosntruct/utils.java: mapDBFetchAccessGraph(): prim fields = [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>]
cosntruct/utils.java: mapDBFetchAccessGraph(): oneToOne fields= [<com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
cosntruct/utils.java: mapDBFetchAccessGraph(): check = Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp
cosntruct/utils.java: mapDBFetchAccessGraph(): manyToOne fields = []
cosntruct/utils.java: mapDBFetchAccessGraph(): collection fields = [<com.bookstore.domain.ShoppingCart: java.util.List cartItemList>]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
cosntruct/utils.java: mapDBFetchAccessGraph(): manyTomany fields = []
cosntruct/utils.java: mapDBFetchAccessGraph(): check relExpBaseAccp= Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.Order)
| NullOp
cosntruct/utils.java: mapDBFetchAccessGraph(): prim fields = [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>]
cosntruct/utils.java: mapDBFetchAccessGraph(): oneToOne fields= [<com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>]
cosntruct/utils.java: mapDBFetchAccessGraph(): check = Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.ShippingAddress)
| NullOp
cosntruct/utils.java: mapDBFetchAccessGraph(): check = Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.Payment)
| NullOp
cosntruct/utils.java: mapDBFetchAccessGraph(): check = Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.BillingAddress)
| NullOp
cosntruct/utils.java: mapDBFetchAccessGraph(): manyToOne fields = [<com.bookstore.domain.Order: com.bookstore.domain.User user>]
cosntruct/utils.java: mapDBFetchAccessGraph(): collection fields = [<com.bookstore.domain.Order: java.util.List cartItemList>]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
cosntruct/utils.java: mapDBFetchAccessGraph(): manyTomany fields = []
cosntruct/utils.java: mapDBFetchAccessGraph(): collection fields = [<com.bookstore.domain.CartItem: java.util.List bookToCartItemList>]
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
cosntruct/utils.java: mapDBFetchAccessGraph(): manyTomany fields = []
construct/Utils.java: parseObjectInvoke(): dir after mapDBFetchAccessGraph: {return.order.orederStatus=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.orederStatus), return.book.shippingWeight=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.shippingWeight), return.book.description=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.description), return.book=Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.Book)
| NullOp, return.shoppingCart.id=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id), return.order.payment=Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.Payment)
| NullOp, return.book.bookToCartItemsList=Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| ClassRef(com.bookstore.domain.BookToCartItem)
| NullOp, return.book.category=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.category), return.book.publisher=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.publisher), return.book.listPrice=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.listPrice), return.book.inStockNumber=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.inStockNumber), return.book.publicationDate=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.publicationDate), return.id=Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id, return.qty=Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty, return.book.format=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.format), return.bookToCartItemList=Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.BookToCartItem)
| NullOp, return.order.orderTotal=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.orderTotal), return.shoppingCart.user=Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp, return.order.shippingMethod=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.shippingMethod), return.book.author=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.author), return.book.id=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.id), return.order.orderDate=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.orderDate), return.book.numberOfPages=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.numberOfPages), return.shoppingCart=Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp, return.book.cartItem=Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp, return.order.shippingAddress=Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.ShippingAddress)
| NullOp, return.subtotal=Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal, return.book.title=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.title), return.book.isbn=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.isbn), return.order.shippingDate=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.shippingDate), return.shoppingCart.cartItemList=Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp, return.book.ourPrice=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.ourPrice), return.order.id=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.id), return.book.language=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.language), return.order=Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.Order)
| NullOp, return.book.active=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.active), return.order.cartItemList=Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp, return.shoppingCart.GrandTotal=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal), return=Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId, return.order.billingAddress=Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.BillingAddress)
| NullOp}
construct/Utils.java: parseObjectInvoke(): @Query not present, relnode = Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): leftType : java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: $r1
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: constructDIR(): left type = java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: java.util.Optional
DIRRegionAnalyzer.java: constructDIR(): v1 type is optional
DIRRegionAnalyzer.java: constructDIR(): method sig = java.lang.Object: java.util.Optional findById(java.lang.Object)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{java.lang.Object: java.util.Optional findById(java.lang.Object)=~~~ optionalret ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ return.book ~~~
Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.Book)
| NullOp

~~~ return.book.active ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.active)

~~~ return.book.author ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.author)

~~~ return.book.bookToCartItemsList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| ClassRef(com.bookstore.domain.BookToCartItem)
| NullOp

~~~ return.book.cartItem ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.book.category ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.category)

~~~ return.book.description ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.description)

~~~ return.book.format ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.format)

~~~ return.book.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.id)

~~~ return.book.inStockNumber ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.inStockNumber)

~~~ return.book.isbn ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.isbn)

~~~ return.book.language ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.language)

~~~ return.book.listPrice ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.listPrice)

~~~ return.book.numberOfPages ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.numberOfPages)

~~~ return.book.ourPrice ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.ourPrice)

~~~ return.book.publicationDate ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.publicationDate)

~~~ return.book.publisher ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.publisher)

~~~ return.book.shippingWeight ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.shippingWeight)

~~~ return.book.title ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.title)

~~~ return.bookToCartItemList ~~~
Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.BookToCartItem)
| NullOp

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id

~~~ return.order ~~~
Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.Order)
| NullOp

~~~ return.order.billingAddress ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.BillingAddress)
| NullOp

~~~ return.order.cartItemList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.order.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.id)

~~~ return.order.orderDate ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.orderDate)

~~~ return.order.orderTotal ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.orderTotal)

~~~ return.order.orederStatus ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.orederStatus)

~~~ return.order.payment ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.Payment)
| NullOp

~~~ return.order.shippingAddress ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.ShippingAddress)
| NullOp

~~~ return.order.shippingDate ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.shippingDate)

~~~ return.order.shippingMethod ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.shippingMethod)

~~~ return.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty

~~~ return.shoppingCart ~~~
Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp

~~~ return.shoppingCart.GrandTotal ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ return.shoppingCart.cartItemList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.shoppingCart.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ return.shoppingCart.user ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp

~~~ return.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ optionalret ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ return.book ~~~
Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.Book)
| NullOp

~~~ return.book.active ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.active)

~~~ return.book.author ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.author)

~~~ return.book.bookToCartItemsList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| ClassRef(com.bookstore.domain.BookToCartItem)
| NullOp

~~~ return.book.cartItem ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.book.category ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.category)

~~~ return.book.description ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.description)

~~~ return.book.format ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.format)

~~~ return.book.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.id)

~~~ return.book.inStockNumber ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.inStockNumber)

~~~ return.book.isbn ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.isbn)

~~~ return.book.language ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.language)

~~~ return.book.listPrice ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.listPrice)

~~~ return.book.numberOfPages ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.numberOfPages)

~~~ return.book.ourPrice ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.ourPrice)

~~~ return.book.publicationDate ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.publicationDate)

~~~ return.book.publisher ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.publisher)

~~~ return.book.shippingWeight ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.shippingWeight)

~~~ return.book.title ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.title)

~~~ return.bookToCartItemList ~~~
Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.BookToCartItem)
| NullOp

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id

~~~ return.order ~~~
Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.Order)
| NullOp

~~~ return.order.billingAddress ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.BillingAddress)
| NullOp

~~~ return.order.cartItemList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.order.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.id)

~~~ return.order.orderDate ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.orderDate)

~~~ return.order.orderTotal ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.orderTotal)

~~~ return.order.orederStatus ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.orederStatus)

~~~ return.order.payment ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.Payment)
| NullOp

~~~ return.order.shippingAddress ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.ShippingAddress)
| NullOp

~~~ return.order.shippingDate ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.shippingDate)

~~~ return.order.shippingMethod ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.shippingMethod)

~~~ return.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty

~~~ return.shoppingCart ~~~
Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp

~~~ return.shoppingCart.GrandTotal ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ return.shoppingCart.cartItemList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.shoppingCart.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ return.shoppingCart.user ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp

~~~ return.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [CartItem.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.lang.Object: java.util.Optional findById(java.lang.Object)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: constructDIR(): leftType = com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: findById
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = java.lang.Object: java.util.Optional findById(java.lang.Object)

WARN: DIRRegionAnalyzer.java: handleSideEffects(): Wont handle method
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
NRA.java: processTableandFields: com.bookstore.domain.CartItem fields = [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: int qty>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>  type=ShoppingCart
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>  type=Order
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = $r1, com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): accesspaths = [$r1.id, $r1.qty, $r1.subtotal, $r1.book, $r1.bookToCartItemList, $r1.shoppingCart, $r1.order]
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [java.lang.Object: java.util.Optional findById(java.lang.Object)]
DIRRegionAnalyzer.java: constructDIR(): callee = java.lang.Object: java.util.Optional findById(java.lang.Object)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
Flatten.java: getNestedFields(): LVAL TYPE: com.bookstore.domain.CartItem
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.CartItem: java.lang.Long id> = java.lang.Long
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
Flatten.java: getNestedFields(): Id fields=id
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.CartItem: int qty> = int
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal> = java.math.BigDecimal
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.CartItem: com.bookstore.domain.Book book> = com.bookstore.domain.Book
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
Flatten.java: getNestedFields(): check *ToOne sf: book , type = com.bookstore.domain.Book
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.CartItem: java.util.List bookToCartItemList> = java.util.List
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
Flatten.java: getNestedFields(): check *ToMany sf: bookToCartItemList , type = java.util.List
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart> = com.bookstore.domain.ShoppingCart
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
Flatten.java: getNestedFields(): check *ToOne sf: shoppingCart , type = com.bookstore.domain.ShoppingCart
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.CartItem: com.bookstore.domain.Order order> = com.bookstore.domain.Order
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: orderId

]
Flatten.java: getNestedFields(): check *ToOne sf: order , type = com.bookstore.domain.Order
Flatten.java: getNestedFields(): returning: [<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
DIRRegionAnalyzer.java: constructDIR(): check nestedFields=[<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.book
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=CartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= book
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.bookstore.domain.Book
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.bookstore.domain.Book
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.Book)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.lang.Object: java.util.Optional findById(java.lang.Object)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: constructDIR(): key= return.book
 value= Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.Book)
| NullOp
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Book.cartItemId
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.Book)
| NullOp
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nested field name= book
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Book
NRA.java: processTableandFields: com.bookstore.domain.Book fields = [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String author>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publisher>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publicationDate>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String language>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String category>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int numberOfPages>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String format>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String isbn>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double shippingWeight>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double listPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double ourPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: boolean active>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String description>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int inStockNumber>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>  type=MultipartFile
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.util.List bookToCartItemsList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Book
NRA.java: genExprNra(): com.bookstore.domain.Book fields= [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 19
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String title>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String author>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publisher>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publicationDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String language>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String category>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int numberOfPages>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String format>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String isbn>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double shippingWeight>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double listPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double ourPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: boolean active>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String description>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: columnDefinition value: text

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int inStockNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Transient; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/Transient;
Construct/Utils.java: bcelActualCollectionFieldType(): Transient field= bookImage
NRA.java: genExprNra(): sfEntity=org.springframework.web.multipart.MultipartFile
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = MultipartFile
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.util.List bookToCartItemsList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.bookId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nested field name= bookToCartItemsList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: com.bookstore.domain.BookToCartItem fields = [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): com.bookstore.domain.BookToCartItem fields= [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.bookId
| Book.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nested field name= book
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Book
NRA.java: processTableandFields: com.bookstore.domain.Book fields = [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String author>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publisher>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publicationDate>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String language>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String category>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int numberOfPages>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String format>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String isbn>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double shippingWeight>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double listPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double ourPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: boolean active>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String description>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int inStockNumber>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>  type=MultipartFile
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.util.List bookToCartItemsList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Book
NRA.java: genExprNra(): com.bookstore.domain.Book fields= [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 19
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String title>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String author>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publisher>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publicationDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String language>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String category>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int numberOfPages>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String format>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String isbn>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double shippingWeight>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double listPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double ourPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: boolean active>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String description>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: columnDefinition value: text

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int inStockNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Transient; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/Transient;
Construct/Utils.java: bcelActualCollectionFieldType(): Transient field= bookImage
NRA.java: genExprNra(): sfEntity=org.springframework.web.multipart.MultipartFile
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = MultipartFile
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.util.List bookToCartItemsList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.bookId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| CartItem.bookId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Book.id), FieldRef(com.bookstore.domain.Book.title), FieldRef(com.bookstore.domain.Book.author), FieldRef(com.bookstore.domain.Book.publisher), FieldRef(com.bookstore.domain.Book.publicationDate), FieldRef(com.bookstore.domain.Book.language), FieldRef(com.bookstore.domain.Book.category), FieldRef(com.bookstore.domain.Book.numberOfPages), FieldRef(com.bookstore.domain.Book.format), FieldRef(com.bookstore.domain.Book.isbn), FieldRef(com.bookstore.domain.Book.shippingWeight), FieldRef(com.bookstore.domain.Book.listPrice), FieldRef(com.bookstore.domain.Book.ourPrice), FieldRef(com.bookstore.domain.Book.active), FieldRef(com.bookstore.domain.Book.description), FieldRef(com.bookstore.domain.Book.inStockNumber), FieldRef(com.bookstore.domain.Book.bookImage), FieldRef(com.bookstore.domain.Book.bookToCartItemsList), FieldRef(com.bookstore.domain.Book.cartItem)]
NRA.java: genExprNra(): projectNode name: BookToCartItem.book=Pi
NRA.java: genExprNra(): nestexpr= BookToCartItem.book=Pi
| Join
| | Alpha
| | ClassRef(Book)
| | Equals
| | | Alpha.bookId
| | | Book.id
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.cartItemId
| CartItem.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nested field name= cartItem
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.CartItem
NRA.java: processTableandFields: com.bookstore.domain.CartItem fields = [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: int qty>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>  type=ShoppingCart
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>  type=Order
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.CartItem
NRA.java: genExprNra(): com.bookstore.domain.CartItem fields= [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: genExprNra(): fields count= 7
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: int qty>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Book.cartItemId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.util.List bookToCartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.cartItemId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= shoppingCart
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = ShoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.shoppingCartId
| ShoppingCart.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Order order>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: orderId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=order
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= order
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= order
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.orderId
| Order.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.CartItem.id), FieldRef(com.bookstore.domain.CartItem.qty), FieldRef(com.bookstore.domain.CartItem.subtotal), FieldRef(com.bookstore.domain.CartItem.book), FieldRef(com.bookstore.domain.CartItem.bookToCartItemList), FieldRef(com.bookstore.domain.CartItem.shoppingCart), FieldRef(com.bookstore.domain.CartItem.order)]
NRA.java: genExprNra(): projectNode name: BookToCartItem.cartItem=Pi
NRA.java: genExprNra(): nestexpr= BookToCartItem.cartItem=Pi
| Join
| | Alpha
| | ClassRef(CartItem)
| | Equals
| | | Alpha.cartItemId
| | | CartItem.id
| List
| | id
| | qty
| | subtotal
| | NullOp
| | NullOp
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.BookToCartItem.id), FieldRef(com.bookstore.domain.BookToCartItem.book), FieldRef(com.bookstore.domain.BookToCartItem.cartItem)]
NRA.java: genExprNra(): projectNode name: Book.bookToCartItemsList=Pi
NRA.java: genExprNra(): nestexpr= Book.bookToCartItemsList=Pi
| Join
| | Alpha
| | ClassRef(BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.bookId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | NullOp
| | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| CartItem.bookId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nested field name= cartItem
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.CartItem
NRA.java: processTableandFields: com.bookstore.domain.CartItem fields = [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: int qty>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>  type=ShoppingCart
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>  type=Order
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.CartItem
NRA.java: genExprNra(): com.bookstore.domain.CartItem fields= [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: genExprNra(): fields count= 7
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: int qty>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Book.cartItemId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nested field name= book
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Book
NRA.java: processTableandFields: com.bookstore.domain.Book fields = [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String author>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publisher>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publicationDate>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String language>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String category>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int numberOfPages>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String format>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String isbn>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double shippingWeight>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double listPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double ourPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: boolean active>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String description>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int inStockNumber>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>  type=MultipartFile
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.util.List bookToCartItemsList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Book
NRA.java: genExprNra(): com.bookstore.domain.Book fields= [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 19
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String title>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String author>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publisher>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publicationDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String language>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String category>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int numberOfPages>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String format>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String isbn>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double shippingWeight>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double listPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double ourPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: boolean active>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String description>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: columnDefinition value: text

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int inStockNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Transient; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/Transient;
Construct/Utils.java: bcelActualCollectionFieldType(): Transient field= bookImage
NRA.java: genExprNra(): sfEntity=org.springframework.web.multipart.MultipartFile
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = MultipartFile
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.util.List bookToCartItemsList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.bookId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| CartItem.bookId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Book.id), FieldRef(com.bookstore.domain.Book.title), FieldRef(com.bookstore.domain.Book.author), FieldRef(com.bookstore.domain.Book.publisher), FieldRef(com.bookstore.domain.Book.publicationDate), FieldRef(com.bookstore.domain.Book.language), FieldRef(com.bookstore.domain.Book.category), FieldRef(com.bookstore.domain.Book.numberOfPages), FieldRef(com.bookstore.domain.Book.format), FieldRef(com.bookstore.domain.Book.isbn), FieldRef(com.bookstore.domain.Book.shippingWeight), FieldRef(com.bookstore.domain.Book.listPrice), FieldRef(com.bookstore.domain.Book.ourPrice), FieldRef(com.bookstore.domain.Book.active), FieldRef(com.bookstore.domain.Book.description), FieldRef(com.bookstore.domain.Book.inStockNumber), FieldRef(com.bookstore.domain.Book.bookImage), FieldRef(com.bookstore.domain.Book.bookToCartItemsList), FieldRef(com.bookstore.domain.Book.cartItem)]
NRA.java: genExprNra(): projectNode name: CartItem.book=Pi
NRA.java: genExprNra(): nestexpr= CartItem.book=Pi
| Join
| | Alpha
| | ClassRef(Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.util.List bookToCartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.cartItemId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nested field name= bookToCartItemList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: com.bookstore.domain.BookToCartItem fields = [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): com.bookstore.domain.BookToCartItem fields= [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.bookId
| Book.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.cartItemId
| CartItem.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.BookToCartItem.id), FieldRef(com.bookstore.domain.BookToCartItem.book), FieldRef(com.bookstore.domain.BookToCartItem.cartItem)]
NRA.java: genExprNra(): projectNode name: CartItem.bookToCartItemList=Pi
NRA.java: genExprNra(): nestexpr= CartItem.bookToCartItemList=Pi
| Join
| | Alpha
| | ClassRef(BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= shoppingCart
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = ShoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.shoppingCartId
| ShoppingCart.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): nested field name= shoppingCart
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.ShoppingCart
NRA.java: processTableandFields: com.bookstore.domain.ShoppingCart fields = [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>  type=User
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): com.bookstore.domain.ShoppingCart fields= [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 4
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.shoppingCartId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  userId
NRA.java: getCondFromOneToOne(): join condition = Equals
| lhs.lhs
| rhs.rhs
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.ShoppingCart.id), FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal), FieldRef(com.bookstore.domain.ShoppingCart.cartItemList), FieldRef(com.bookstore.domain.ShoppingCart.user)]
NRA.java: genExprNra(): projectNode name: CartItem.shoppingCart=Pi
NRA.java: genExprNra(): nestexpr= CartItem.shoppingCart=Pi
| Join
| | Alpha
| | ClassRef(ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Order order>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: orderId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=order
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= order
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= order
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.orderId
| Order.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nested field name= order
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Order
NRA.java: processTableandFields: com.bookstore.domain.Order fields = [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date orderDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date shippingDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String shippingMethod>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String orederStatus>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>  type=ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>  type=Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>  type=BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Order
NRA.java: genExprNra(): com.bookstore.domain.Order fields= [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date orderDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date shippingDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String shippingMethod>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String orederStatus>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.math.BigDecimal orderTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.orderId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shippingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShippingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.Payment payment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=payment
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= payment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= payment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Payment
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Payment.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Payment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= billingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| BillingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Order.id), FieldRef(com.bookstore.domain.Order.orderDate), FieldRef(com.bookstore.domain.Order.shippingDate), FieldRef(com.bookstore.domain.Order.shippingMethod), FieldRef(com.bookstore.domain.Order.orederStatus), FieldRef(com.bookstore.domain.Order.orderTotal), FieldRef(com.bookstore.domain.Order.cartItemList), FieldRef(com.bookstore.domain.Order.shippingAddress), FieldRef(com.bookstore.domain.Order.payment), FieldRef(com.bookstore.domain.Order.billingAddress), FieldRef(com.bookstore.domain.Order.user)]
NRA.java: genExprNra(): projectNode name: CartItem.order=Pi
NRA.java: genExprNra(): nestexpr= CartItem.order=Pi
| Join
| | Alpha
| | ClassRef(Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | NullOp
| | NullOp
| | NullOp
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.CartItem.id), FieldRef(com.bookstore.domain.CartItem.qty), FieldRef(com.bookstore.domain.CartItem.subtotal), FieldRef(com.bookstore.domain.CartItem.book), FieldRef(com.bookstore.domain.CartItem.bookToCartItemList), FieldRef(com.bookstore.domain.CartItem.shoppingCart), FieldRef(com.bookstore.domain.CartItem.order)]
NRA.java: genExprNra(): projectNode name: Book.cartItem=Pi
NRA.java: genExprNra(): nestexpr= Book.cartItem=Pi
| Join
| | Alpha
| | ClassRef(CartItem)
| | Equals
| | | Alpha.id
| | | CartItem.bookId
| List
| | id
| | qty
| | subtotal
| | CartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.id
| | | | | Book.cartItemId
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | NullOp
| | | | NullOp
| | CartItem.bookToCartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.cartItemId
| | | List
| | | | id
| | | | NullOp
| | | | NullOp
| | CartItem.shoppingCart=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShoppingCart)
| | | | Equals
| | | | | Alpha.shoppingCartId
| | | | | ShoppingCart.id
| | | List
| | | | id
| | | | GrandTotal
| | | | NullOp
| | | | NullOp
| | CartItem.order=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Order)
| | | | Equals
| | | | | Alpha.orderId
| | | | | Order.id
| | | List
| | | | id
| | | | orderDate
| | | | shippingDate
| | | | shippingMethod
| | | | orederStatus
| | | | orderTotal
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Book.id), FieldRef(com.bookstore.domain.Book.title), FieldRef(com.bookstore.domain.Book.author), FieldRef(com.bookstore.domain.Book.publisher), FieldRef(com.bookstore.domain.Book.publicationDate), FieldRef(com.bookstore.domain.Book.language), FieldRef(com.bookstore.domain.Book.category), FieldRef(com.bookstore.domain.Book.numberOfPages), FieldRef(com.bookstore.domain.Book.format), FieldRef(com.bookstore.domain.Book.isbn), FieldRef(com.bookstore.domain.Book.shippingWeight), FieldRef(com.bookstore.domain.Book.listPrice), FieldRef(com.bookstore.domain.Book.ourPrice), FieldRef(com.bookstore.domain.Book.active), FieldRef(com.bookstore.domain.Book.description), FieldRef(com.bookstore.domain.Book.inStockNumber), FieldRef(com.bookstore.domain.Book.bookImage), FieldRef(com.bookstore.domain.Book.bookToCartItemsList), FieldRef(com.bookstore.domain.Book.cartItem)]
NRA.java: genExprNra(): projectNode name: CartItem.book=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): key : return.book
 value : 
 CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.bookToCartItemList
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=CartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.bookstore.domain.BookToCartItem
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.bookstore.domain.BookToCartItem
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.BookToCartItem)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.lang.Object: java.util.Optional findById(java.lang.Object)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: constructDIR(): key= return.bookToCartItemList
 value= Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.BookToCartItem)
| NullOp
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.cartItemId
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.BookToCartItem)
| NullOp
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nested field name= bookToCartItemList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: com.bookstore.domain.BookToCartItem fields = [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): com.bookstore.domain.BookToCartItem fields= [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.bookId
| Book.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nested field name= book
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Book
NRA.java: processTableandFields: com.bookstore.domain.Book fields = [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String author>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publisher>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publicationDate>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String language>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String category>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int numberOfPages>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String format>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String isbn>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double shippingWeight>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double listPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double ourPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: boolean active>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String description>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int inStockNumber>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>  type=MultipartFile
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.util.List bookToCartItemsList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Book
NRA.java: genExprNra(): com.bookstore.domain.Book fields= [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 19
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String title>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String author>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publisher>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publicationDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String language>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String category>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int numberOfPages>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String format>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String isbn>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double shippingWeight>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double listPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double ourPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: boolean active>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String description>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: columnDefinition value: text

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int inStockNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Transient; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/Transient;
Construct/Utils.java: bcelActualCollectionFieldType(): Transient field= bookImage
NRA.java: genExprNra(): sfEntity=org.springframework.web.multipart.MultipartFile
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = MultipartFile
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.util.List bookToCartItemsList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.bookId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nested field name= bookToCartItemsList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: com.bookstore.domain.BookToCartItem fields = [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): com.bookstore.domain.BookToCartItem fields= [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.bookId
| Book.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.cartItemId
| CartItem.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.BookToCartItem.id), FieldRef(com.bookstore.domain.BookToCartItem.book), FieldRef(com.bookstore.domain.BookToCartItem.cartItem)]
NRA.java: genExprNra(): projectNode name: Book.bookToCartItemsList=Pi
NRA.java: genExprNra(): nestexpr= Book.bookToCartItemsList=Pi
| Join
| | Alpha
| | ClassRef(BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.bookId
| List
| | id
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| CartItem.bookId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nested field name= cartItem
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.CartItem
NRA.java: processTableandFields: com.bookstore.domain.CartItem fields = [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: int qty>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>  type=ShoppingCart
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>  type=Order
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.CartItem
NRA.java: genExprNra(): com.bookstore.domain.CartItem fields= [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: genExprNra(): fields count= 7
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: int qty>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Book.cartItemId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.util.List bookToCartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.cartItemId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= shoppingCart
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = ShoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.shoppingCartId
| ShoppingCart.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Order order>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: orderId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=order
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= order
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= order
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.orderId
| Order.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.CartItem.id), FieldRef(com.bookstore.domain.CartItem.qty), FieldRef(com.bookstore.domain.CartItem.subtotal), FieldRef(com.bookstore.domain.CartItem.book), FieldRef(com.bookstore.domain.CartItem.bookToCartItemList), FieldRef(com.bookstore.domain.CartItem.shoppingCart), FieldRef(com.bookstore.domain.CartItem.order)]
NRA.java: genExprNra(): projectNode name: Book.cartItem=Pi
NRA.java: genExprNra(): nestexpr= Book.cartItem=Pi
| Join
| | Alpha
| | ClassRef(CartItem)
| | Equals
| | | Alpha.id
| | | CartItem.bookId
| List
| | id
| | qty
| | subtotal
| | NullOp
| | NullOp
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Book.id), FieldRef(com.bookstore.domain.Book.title), FieldRef(com.bookstore.domain.Book.author), FieldRef(com.bookstore.domain.Book.publisher), FieldRef(com.bookstore.domain.Book.publicationDate), FieldRef(com.bookstore.domain.Book.language), FieldRef(com.bookstore.domain.Book.category), FieldRef(com.bookstore.domain.Book.numberOfPages), FieldRef(com.bookstore.domain.Book.format), FieldRef(com.bookstore.domain.Book.isbn), FieldRef(com.bookstore.domain.Book.shippingWeight), FieldRef(com.bookstore.domain.Book.listPrice), FieldRef(com.bookstore.domain.Book.ourPrice), FieldRef(com.bookstore.domain.Book.active), FieldRef(com.bookstore.domain.Book.description), FieldRef(com.bookstore.domain.Book.inStockNumber), FieldRef(com.bookstore.domain.Book.bookImage), FieldRef(com.bookstore.domain.Book.bookToCartItemsList), FieldRef(com.bookstore.domain.Book.cartItem)]
NRA.java: genExprNra(): projectNode name: BookToCartItem.book=Pi
NRA.java: genExprNra(): nestexpr= BookToCartItem.book=Pi
| Join
| | Alpha
| | ClassRef(Book)
| | Equals
| | | Alpha.bookId
| | | Book.id
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | NullOp
| | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.cartItemId
| CartItem.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nested field name= cartItem
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.CartItem
NRA.java: processTableandFields: com.bookstore.domain.CartItem fields = [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: int qty>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>  type=ShoppingCart
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>  type=Order
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.CartItem
NRA.java: genExprNra(): com.bookstore.domain.CartItem fields= [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: genExprNra(): fields count= 7
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: int qty>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Book.cartItemId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nested field name= book
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Book
NRA.java: processTableandFields: com.bookstore.domain.Book fields = [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String author>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publisher>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publicationDate>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String language>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String category>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int numberOfPages>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String format>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String isbn>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double shippingWeight>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double listPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double ourPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: boolean active>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String description>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int inStockNumber>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>  type=MultipartFile
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.util.List bookToCartItemsList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Book
NRA.java: genExprNra(): com.bookstore.domain.Book fields= [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 19
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String title>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String author>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publisher>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publicationDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String language>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String category>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int numberOfPages>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String format>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String isbn>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double shippingWeight>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double listPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double ourPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: boolean active>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String description>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: columnDefinition value: text

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int inStockNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Transient; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/Transient;
Construct/Utils.java: bcelActualCollectionFieldType(): Transient field= bookImage
NRA.java: genExprNra(): sfEntity=org.springframework.web.multipart.MultipartFile
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = MultipartFile
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.util.List bookToCartItemsList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.bookId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| CartItem.bookId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Book.id), FieldRef(com.bookstore.domain.Book.title), FieldRef(com.bookstore.domain.Book.author), FieldRef(com.bookstore.domain.Book.publisher), FieldRef(com.bookstore.domain.Book.publicationDate), FieldRef(com.bookstore.domain.Book.language), FieldRef(com.bookstore.domain.Book.category), FieldRef(com.bookstore.domain.Book.numberOfPages), FieldRef(com.bookstore.domain.Book.format), FieldRef(com.bookstore.domain.Book.isbn), FieldRef(com.bookstore.domain.Book.shippingWeight), FieldRef(com.bookstore.domain.Book.listPrice), FieldRef(com.bookstore.domain.Book.ourPrice), FieldRef(com.bookstore.domain.Book.active), FieldRef(com.bookstore.domain.Book.description), FieldRef(com.bookstore.domain.Book.inStockNumber), FieldRef(com.bookstore.domain.Book.bookImage), FieldRef(com.bookstore.domain.Book.bookToCartItemsList), FieldRef(com.bookstore.domain.Book.cartItem)]
NRA.java: genExprNra(): projectNode name: CartItem.book=Pi
NRA.java: genExprNra(): nestexpr= CartItem.book=Pi
| Join
| | Alpha
| | ClassRef(Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.util.List bookToCartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.cartItemId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nested field name= bookToCartItemList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: com.bookstore.domain.BookToCartItem fields = [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): com.bookstore.domain.BookToCartItem fields= [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.bookId
| Book.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.cartItemId
| CartItem.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.BookToCartItem.id), FieldRef(com.bookstore.domain.BookToCartItem.book), FieldRef(com.bookstore.domain.BookToCartItem.cartItem)]
NRA.java: genExprNra(): projectNode name: CartItem.bookToCartItemList=Pi
NRA.java: genExprNra(): nestexpr= CartItem.bookToCartItemList=Pi
| Join
| | Alpha
| | ClassRef(BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= shoppingCart
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = ShoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.shoppingCartId
| ShoppingCart.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): nested field name= shoppingCart
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.ShoppingCart
NRA.java: processTableandFields: com.bookstore.domain.ShoppingCart fields = [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>  type=User
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): com.bookstore.domain.ShoppingCart fields= [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 4
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.shoppingCartId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  userId
NRA.java: getCondFromOneToOne(): join condition = Equals
| lhs.lhs
| rhs.rhs
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.ShoppingCart.id), FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal), FieldRef(com.bookstore.domain.ShoppingCart.cartItemList), FieldRef(com.bookstore.domain.ShoppingCart.user)]
NRA.java: genExprNra(): projectNode name: CartItem.shoppingCart=Pi
NRA.java: genExprNra(): nestexpr= CartItem.shoppingCart=Pi
| Join
| | Alpha
| | ClassRef(ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Order order>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: orderId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=order
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= order
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= order
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.orderId
| Order.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nested field name= order
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Order
NRA.java: processTableandFields: com.bookstore.domain.Order fields = [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date orderDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date shippingDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String shippingMethod>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String orederStatus>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>  type=ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>  type=Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>  type=BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Order
NRA.java: genExprNra(): com.bookstore.domain.Order fields= [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date orderDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date shippingDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String shippingMethod>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String orederStatus>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.math.BigDecimal orderTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.orderId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shippingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShippingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.Payment payment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=payment
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= payment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= payment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Payment
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Payment.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Payment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= billingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| BillingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Order.id), FieldRef(com.bookstore.domain.Order.orderDate), FieldRef(com.bookstore.domain.Order.shippingDate), FieldRef(com.bookstore.domain.Order.shippingMethod), FieldRef(com.bookstore.domain.Order.orederStatus), FieldRef(com.bookstore.domain.Order.orderTotal), FieldRef(com.bookstore.domain.Order.cartItemList), FieldRef(com.bookstore.domain.Order.shippingAddress), FieldRef(com.bookstore.domain.Order.payment), FieldRef(com.bookstore.domain.Order.billingAddress), FieldRef(com.bookstore.domain.Order.user)]
NRA.java: genExprNra(): projectNode name: CartItem.order=Pi
NRA.java: genExprNra(): nestexpr= CartItem.order=Pi
| Join
| | Alpha
| | ClassRef(Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | NullOp
| | NullOp
| | NullOp
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.CartItem.id), FieldRef(com.bookstore.domain.CartItem.qty), FieldRef(com.bookstore.domain.CartItem.subtotal), FieldRef(com.bookstore.domain.CartItem.book), FieldRef(com.bookstore.domain.CartItem.bookToCartItemList), FieldRef(com.bookstore.domain.CartItem.shoppingCart), FieldRef(com.bookstore.domain.CartItem.order)]
NRA.java: genExprNra(): projectNode name: BookToCartItem.cartItem=Pi
NRA.java: genExprNra(): nestexpr= BookToCartItem.cartItem=Pi
| Join
| | Alpha
| | ClassRef(CartItem)
| | Equals
| | | Alpha.cartItemId
| | | CartItem.id
| List
| | id
| | qty
| | subtotal
| | CartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.id
| | | | | Book.cartItemId
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | NullOp
| | | | NullOp
| | CartItem.bookToCartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.cartItemId
| | | List
| | | | id
| | | | NullOp
| | | | NullOp
| | CartItem.shoppingCart=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShoppingCart)
| | | | Equals
| | | | | Alpha.shoppingCartId
| | | | | ShoppingCart.id
| | | List
| | | | id
| | | | GrandTotal
| | | | NullOp
| | | | NullOp
| | CartItem.order=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Order)
| | | | Equals
| | | | | Alpha.orderId
| | | | | Order.id
| | | List
| | | | id
| | | | orderDate
| | | | shippingDate
| | | | shippingMethod
| | | | orederStatus
| | | | orderTotal
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.BookToCartItem.id), FieldRef(com.bookstore.domain.BookToCartItem.book), FieldRef(com.bookstore.domain.BookToCartItem.cartItem)]
NRA.java: genExprNra(): projectNode name: CartItem.bookToCartItemList=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): key : return.bookToCartItemList
 value : 
 CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=CartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= shoppingCart
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.lang.Object: java.util.Optional findById(java.lang.Object)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: constructDIR(): key= return.shoppingCart
 value= Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.shoppingCartId
| ShoppingCart.id
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.ShoppingCart)
| NullOp
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): nested field name= shoppingCart
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.ShoppingCart
NRA.java: processTableandFields: com.bookstore.domain.ShoppingCart fields = [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>  type=User
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): com.bookstore.domain.ShoppingCart fields= [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 4
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.shoppingCartId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nested field name= cartItemList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.CartItem
NRA.java: processTableandFields: com.bookstore.domain.CartItem fields = [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: int qty>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>  type=ShoppingCart
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>  type=Order
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.CartItem
NRA.java: genExprNra(): com.bookstore.domain.CartItem fields= [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: genExprNra(): fields count= 7
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: int qty>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Book.cartItemId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nested field name= book
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Book
NRA.java: processTableandFields: com.bookstore.domain.Book fields = [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String author>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publisher>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publicationDate>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String language>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String category>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int numberOfPages>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String format>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String isbn>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double shippingWeight>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double listPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double ourPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: boolean active>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String description>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int inStockNumber>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>  type=MultipartFile
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.util.List bookToCartItemsList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Book
NRA.java: genExprNra(): com.bookstore.domain.Book fields= [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 19
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String title>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String author>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publisher>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publicationDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String language>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String category>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int numberOfPages>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String format>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String isbn>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double shippingWeight>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double listPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double ourPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: boolean active>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String description>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: columnDefinition value: text

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int inStockNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Transient; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/Transient;
Construct/Utils.java: bcelActualCollectionFieldType(): Transient field= bookImage
NRA.java: genExprNra(): sfEntity=org.springframework.web.multipart.MultipartFile
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = MultipartFile
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.util.List bookToCartItemsList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.bookId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| CartItem.bookId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Book.id), FieldRef(com.bookstore.domain.Book.title), FieldRef(com.bookstore.domain.Book.author), FieldRef(com.bookstore.domain.Book.publisher), FieldRef(com.bookstore.domain.Book.publicationDate), FieldRef(com.bookstore.domain.Book.language), FieldRef(com.bookstore.domain.Book.category), FieldRef(com.bookstore.domain.Book.numberOfPages), FieldRef(com.bookstore.domain.Book.format), FieldRef(com.bookstore.domain.Book.isbn), FieldRef(com.bookstore.domain.Book.shippingWeight), FieldRef(com.bookstore.domain.Book.listPrice), FieldRef(com.bookstore.domain.Book.ourPrice), FieldRef(com.bookstore.domain.Book.active), FieldRef(com.bookstore.domain.Book.description), FieldRef(com.bookstore.domain.Book.inStockNumber), FieldRef(com.bookstore.domain.Book.bookImage), FieldRef(com.bookstore.domain.Book.bookToCartItemsList), FieldRef(com.bookstore.domain.Book.cartItem)]
NRA.java: genExprNra(): projectNode name: CartItem.book=Pi
NRA.java: genExprNra(): nestexpr= CartItem.book=Pi
| Join
| | Alpha
| | ClassRef(Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.util.List bookToCartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.cartItemId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nested field name= bookToCartItemList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: com.bookstore.domain.BookToCartItem fields = [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): com.bookstore.domain.BookToCartItem fields= [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.bookId
| Book.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.cartItemId
| CartItem.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.BookToCartItem.id), FieldRef(com.bookstore.domain.BookToCartItem.book), FieldRef(com.bookstore.domain.BookToCartItem.cartItem)]
NRA.java: genExprNra(): projectNode name: CartItem.bookToCartItemList=Pi
NRA.java: genExprNra(): nestexpr= CartItem.bookToCartItemList=Pi
| Join
| | Alpha
| | ClassRef(BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= shoppingCart
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = ShoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.shoppingCartId
| ShoppingCart.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): nested field name= shoppingCart
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.ShoppingCart
NRA.java: processTableandFields: com.bookstore.domain.ShoppingCart fields = [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>  type=User
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): com.bookstore.domain.ShoppingCart fields= [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 4
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.shoppingCartId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  userId
NRA.java: getCondFromOneToOne(): join condition = Equals
| lhs.lhs
| rhs.rhs
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.ShoppingCart.id), FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal), FieldRef(com.bookstore.domain.ShoppingCart.cartItemList), FieldRef(com.bookstore.domain.ShoppingCart.user)]
NRA.java: genExprNra(): projectNode name: CartItem.shoppingCart=Pi
NRA.java: genExprNra(): nestexpr= CartItem.shoppingCart=Pi
| Join
| | Alpha
| | ClassRef(ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Order order>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: orderId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=order
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= order
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= order
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.orderId
| Order.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nested field name= order
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Order
NRA.java: processTableandFields: com.bookstore.domain.Order fields = [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date orderDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date shippingDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String shippingMethod>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String orederStatus>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>  type=ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>  type=Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>  type=BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Order
NRA.java: genExprNra(): com.bookstore.domain.Order fields= [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date orderDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date shippingDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String shippingMethod>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String orederStatus>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.math.BigDecimal orderTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.orderId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shippingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShippingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.Payment payment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=payment
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= payment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= payment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Payment
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Payment.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Payment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= billingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| BillingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Order.id), FieldRef(com.bookstore.domain.Order.orderDate), FieldRef(com.bookstore.domain.Order.shippingDate), FieldRef(com.bookstore.domain.Order.shippingMethod), FieldRef(com.bookstore.domain.Order.orederStatus), FieldRef(com.bookstore.domain.Order.orderTotal), FieldRef(com.bookstore.domain.Order.cartItemList), FieldRef(com.bookstore.domain.Order.shippingAddress), FieldRef(com.bookstore.domain.Order.payment), FieldRef(com.bookstore.domain.Order.billingAddress), FieldRef(com.bookstore.domain.Order.user)]
NRA.java: genExprNra(): projectNode name: CartItem.order=Pi
NRA.java: genExprNra(): nestexpr= CartItem.order=Pi
| Join
| | Alpha
| | ClassRef(Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | NullOp
| | NullOp
| | NullOp
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.CartItem.id), FieldRef(com.bookstore.domain.CartItem.qty), FieldRef(com.bookstore.domain.CartItem.subtotal), FieldRef(com.bookstore.domain.CartItem.book), FieldRef(com.bookstore.domain.CartItem.bookToCartItemList), FieldRef(com.bookstore.domain.CartItem.shoppingCart), FieldRef(com.bookstore.domain.CartItem.order)]
NRA.java: genExprNra(): projectNode name: ShoppingCart.cartItemList=Pi
NRA.java: genExprNra(): nestexpr= ShoppingCart.cartItemList=Pi
| Join
| | Alpha
| | ClassRef(CartItem)
| | Equals
| | | Alpha.id
| | | CartItem.shoppingCartId
| List
| | id
| | qty
| | subtotal
| | CartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.id
| | | | | Book.cartItemId
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | NullOp
| | | | NullOp
| | CartItem.bookToCartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.cartItemId
| | | List
| | | | id
| | | | NullOp
| | | | NullOp
| | CartItem.shoppingCart=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShoppingCart)
| | | | Equals
| | | | | Alpha.shoppingCartId
| | | | | ShoppingCart.id
| | | List
| | | | id
| | | | GrandTotal
| | | | NullOp
| | | | NullOp
| | CartItem.order=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Order)
| | | | Equals
| | | | | Alpha.orderId
| | | | | Order.id
| | | List
| | | | id
| | | | orderDate
| | | | shippingDate
| | | | shippingMethod
| | | | orederStatus
| | | | orderTotal
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  userId
NRA.java: getCondFromOneToOne(): join condition = Equals
| lhs.lhs
| rhs.rhs
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nested field name= user
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.User
NRA.java: processTableandFields: com.bookstore.domain.User fields = [<com.bookstore.domain.User: java.lang.Long id>, <com.bookstore.domain.User: java.lang.String username>, <com.bookstore.domain.User: java.lang.String password>, <com.bookstore.domain.User: java.lang.String firstName>, <com.bookstore.domain.User: java.lang.String lastName>, <com.bookstore.domain.User: java.lang.String email>, <com.bookstore.domain.User: java.lang.String phone>, <com.bookstore.domain.User: boolean enabled>, <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userOrderList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String firstName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String phone>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: boolean enabled>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>  type=ShoppingCart
NRA.java: getCondFromOneToOne(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  userId
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.UserShipping
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.util.List userShippingList>  type=UserShipping
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.UserShipping
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.Order
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.util.List userOrderList>  type=Order
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.Order
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.UserPayment
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.util.List userPaymentList>  type=UserPayment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.UserPayment
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.security.UserRole
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.util.Set userRoles>  type=UserRole
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.security.UserRole
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.User
NRA.java: genExprNra(): com.bookstore.domain.User fields= [<com.bookstore.domain.User: java.lang.Long id>, <com.bookstore.domain.User: java.lang.String username>, <com.bookstore.domain.User: java.lang.String password>, <com.bookstore.domain.User: java.lang.String firstName>, <com.bookstore.domain.User: java.lang.String lastName>, <com.bookstore.domain.User: java.lang.String email>, <com.bookstore.domain.User: java.lang.String phone>, <com.bookstore.domain.User: boolean enabled>, <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userOrderList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
NRA.java: genExprNra(): fields count= 13
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: id
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String username>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String password>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String firstName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String phone>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: boolean enabled>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shoppingCart
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = ShoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getCondFromOneToOne(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  userId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShoppingCart.userId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): nested field name= shoppingCart
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.ShoppingCart
NRA.java: processTableandFields: com.bookstore.domain.ShoppingCart fields = [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>  type=User
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): com.bookstore.domain.ShoppingCart fields= [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 4
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.shoppingCartId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  userId
NRA.java: getCondFromOneToOne(): join condition = Equals
| lhs.lhs
| rhs.rhs
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.ShoppingCart.id), FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal), FieldRef(com.bookstore.domain.ShoppingCart.cartItemList), FieldRef(com.bookstore.domain.ShoppingCart.user)]
NRA.java: genExprNra(): projectNode name: User.shoppingCart=Pi
NRA.java: genExprNra(): nestexpr= User.shoppingCart=Pi
| Join
| | Alpha
| | ClassRef(ShoppingCart)
| | Equals
| | | Alpha.id
| | | ShoppingCart.userId
| List
| | id
| | GrandTotal
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userShippingList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userShippingList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userShippingList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserShipping
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = UserShipping
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| UserShipping.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserShipping
NRA.java: genExprNra(): nested field name= userShippingList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.UserShipping
NRA.java: processTableandFields: com.bookstore.domain.UserShipping fields = [<com.bookstore.domain.UserShipping: java.lang.Long id>, <com.bookstore.domain.UserShipping: java.lang.String userShippingName>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCity>, <com.bookstore.domain.UserShipping: java.lang.String userShippingState>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>, <com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>, <com.bookstore.domain.UserShipping: boolean userShippingDefault>, <com.bookstore.domain.UserShipping: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingCity>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingState>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: boolean userShippingDefault>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.UserShipping
NRA.java: genExprNra(): com.bookstore.domain.UserShipping fields= [<com.bookstore.domain.UserShipping: java.lang.Long id>, <com.bookstore.domain.UserShipping: java.lang.String userShippingName>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCity>, <com.bookstore.domain.UserShipping: java.lang.String userShippingState>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>, <com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>, <com.bookstore.domain.UserShipping: boolean userShippingDefault>, <com.bookstore.domain.UserShipping: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 10
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingCity>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingState>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: boolean userShippingDefault>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.UserShipping
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingStreet1
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingStreet2
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingCity
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingState
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingCountry
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingZipcode
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean userShippingDefault
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = UserShipping
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.UserShipping.id), FieldRef(com.bookstore.domain.UserShipping.userShippingName), FieldRef(com.bookstore.domain.UserShipping.userShippingStreet1), FieldRef(com.bookstore.domain.UserShipping.userShippingStreet2), FieldRef(com.bookstore.domain.UserShipping.userShippingCity), FieldRef(com.bookstore.domain.UserShipping.userShippingState), FieldRef(com.bookstore.domain.UserShipping.userShippingCountry), FieldRef(com.bookstore.domain.UserShipping.userShippingZipcode), FieldRef(com.bookstore.domain.UserShipping.userShippingDefault), FieldRef(com.bookstore.domain.UserShipping.user)]
NRA.java: genExprNra(): projectNode name: User.userShippingList=Pi
NRA.java: genExprNra(): nestexpr= User.userShippingList=Pi
| Join
| | Alpha
| | ClassRef(UserShipping)
| | Equals
| | | Alpha.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userOrderList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userOrderList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userOrderList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userOrderList [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Order.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nested field name= userOrderList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Order
NRA.java: processTableandFields: com.bookstore.domain.Order fields = [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date orderDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date shippingDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String shippingMethod>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String orederStatus>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>  type=ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>  type=Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>  type=BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Order
NRA.java: genExprNra(): com.bookstore.domain.Order fields= [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date orderDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date shippingDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String shippingMethod>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String orederStatus>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.math.BigDecimal orderTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.orderId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shippingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShippingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.Payment payment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=payment
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= payment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= payment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Payment
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Payment.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Payment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= billingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| BillingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Order.id), FieldRef(com.bookstore.domain.Order.orderDate), FieldRef(com.bookstore.domain.Order.shippingDate), FieldRef(com.bookstore.domain.Order.shippingMethod), FieldRef(com.bookstore.domain.Order.orederStatus), FieldRef(com.bookstore.domain.Order.orderTotal), FieldRef(com.bookstore.domain.Order.cartItemList), FieldRef(com.bookstore.domain.Order.shippingAddress), FieldRef(com.bookstore.domain.Order.payment), FieldRef(com.bookstore.domain.Order.billingAddress), FieldRef(com.bookstore.domain.Order.user)]
NRA.java: genExprNra(): projectNode name: User.userOrderList=Pi
NRA.java: genExprNra(): nestexpr= User.userOrderList=Pi
| Join
| | Alpha
| | ClassRef(Order)
| | Equals
| | | Alpha.id
| | | Order.user_id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | NullOp
| | NullOp
| | NullOp
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userPaymentList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userPaymentList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userPaymentList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userOrderList [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserPayment
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = UserPayment
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| UserPayment.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserPayment
NRA.java: genExprNra(): nested field name= userPaymentList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.UserPayment
NRA.java: processTableandFields: com.bookstore.domain.UserPayment fields = [<com.bookstore.domain.UserPayment: java.lang.Long id>, <com.bookstore.domain.UserPayment: java.lang.String type>, <com.bookstore.domain.UserPayment: java.lang.String cardName>, <com.bookstore.domain.UserPayment: java.lang.String cardNumber>, <com.bookstore.domain.UserPayment: int expiryMonth>, <com.bookstore.domain.UserPayment: int expiryYear>, <com.bookstore.domain.UserPayment: int cvc>, <com.bookstore.domain.UserPayment: java.lang.String holderName>, <com.bookstore.domain.UserPayment: boolean defaultPayment>, <com.bookstore.domain.UserPayment: com.bookstore.domain.User user>, <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>]
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: java.lang.String type>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: java.lang.String cardName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: java.lang.String cardNumber>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: int expiryMonth>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: int expiryYear>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: int cvc>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: java.lang.String holderName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: boolean defaultPayment>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>  type=UserBilling
NRA.java: getCondFromOneToOne(): mappedBy= userPayment
NRA.java: getJoinedColumn(): joined Column value=  userPayment_id
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.UserPayment
NRA.java: genExprNra(): com.bookstore.domain.UserPayment fields= [<com.bookstore.domain.UserPayment: java.lang.Long id>, <com.bookstore.domain.UserPayment: java.lang.String type>, <com.bookstore.domain.UserPayment: java.lang.String cardName>, <com.bookstore.domain.UserPayment: java.lang.String cardNumber>, <com.bookstore.domain.UserPayment: int expiryMonth>, <com.bookstore.domain.UserPayment: int expiryYear>, <com.bookstore.domain.UserPayment: int cvc>, <com.bookstore.domain.UserPayment: java.lang.String holderName>, <com.bookstore.domain.UserPayment: boolean defaultPayment>, <com.bookstore.domain.UserPayment: com.bookstore.domain.User user>, <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>]
NRA.java: genExprNra(): fields count= 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String type>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String cardName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String cardNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int expiryMonth>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int expiryYear>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int cvc>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String holderName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: boolean defaultPayment>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.UserPayment
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String type
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryMonth
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryYear
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int cvc
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String holderName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean defaultPayment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = UserPayment
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: userPayment

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userBilling_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=userBilling
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.UserPayment
 fieldName= userBilling
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String type
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryMonth
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryYear
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int cvc
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String holderName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean defaultPayment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.UserBilling userBilling [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= userBilling
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserBilling
NRA.java: genExprNra(): baseclass = UserPayment
NRA.java: genExprNra(): fieldclass = UserBilling
NRA.java: getJoinedColumn(): joined Column value=  userBilling_id
NRA.java: getCondFromOneToOne(): mappedBy= userPayment
NRA.java: getJoinedColumn(): joined Column value=  userPayment_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| UserBilling.userPayment_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: userPayment

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userBilling_id

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserBilling
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.UserPayment.id), FieldRef(com.bookstore.domain.UserPayment.type), FieldRef(com.bookstore.domain.UserPayment.cardName), FieldRef(com.bookstore.domain.UserPayment.cardNumber), FieldRef(com.bookstore.domain.UserPayment.expiryMonth), FieldRef(com.bookstore.domain.UserPayment.expiryYear), FieldRef(com.bookstore.domain.UserPayment.cvc), FieldRef(com.bookstore.domain.UserPayment.holderName), FieldRef(com.bookstore.domain.UserPayment.defaultPayment), FieldRef(com.bookstore.domain.UserPayment.user), FieldRef(com.bookstore.domain.UserPayment.userBilling)]
NRA.java: genExprNra(): projectNode name: User.userPaymentList=Pi
NRA.java: genExprNra(): nestexpr= User.userPaymentList=Pi
| Join
| | Alpha
| | ClassRef(UserPayment)
| | Equals
| | | Alpha.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.Set userRoles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userRoles
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userRoles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userOrderList [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set userRoles [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = UserRole
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| UserRole.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): nested field name= userRoles
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.security.UserRole
NRA.java: processTableandFields: com.bookstore.domain.security.UserRole fields = [<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>]
NRA.java: processTableandFields: sf <com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: processTableandFields: sf <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>  type=Role
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: role_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): com.bookstore.domain.security.UserRole fields= [<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToOne; num elems: 1 elems: 
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.security.UserRole
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long userRoleId [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = UserRole
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.userRoleId
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToOne; num elems: 1 elems: 
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=role
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.security.UserRole
 fieldName= role
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long userRoleId [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.security.Role role [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= role
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.security.Role
NRA.java: genExprNra(): baseclass = UserRole
NRA.java: genExprNra(): fieldclass = Role
NRA.java: getJoinedColumn(): joined Column value=  role_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: role_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.role_id
| Role.userRoleId
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.security.Role
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.security.UserRole.userRoleId), FieldRef(com.bookstore.domain.security.UserRole.user), FieldRef(com.bookstore.domain.security.UserRole.role)]
NRA.java: genExprNra(): projectNode name: User.userRoles=Pi
NRA.java: genExprNra(): nestexpr= User.userRoles=Pi
| Join
| | Alpha
| | ClassRef(UserRole)
| | Equals
| | | Alpha.id
| | | UserRole.user_id
| List
| | userRoleId
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.User.id), FieldRef(com.bookstore.domain.User.username), FieldRef(com.bookstore.domain.User.password), FieldRef(com.bookstore.domain.User.firstName), FieldRef(com.bookstore.domain.User.lastName), FieldRef(com.bookstore.domain.User.email), FieldRef(com.bookstore.domain.User.phone), FieldRef(com.bookstore.domain.User.enabled), FieldRef(com.bookstore.domain.User.shoppingCart), FieldRef(com.bookstore.domain.User.userShippingList), FieldRef(com.bookstore.domain.User.userOrderList), FieldRef(com.bookstore.domain.User.userPaymentList), FieldRef(com.bookstore.domain.User.userRoles)]
NRA.java: genExprNra(): projectNode name: ShoppingCart.user=Pi
NRA.java: genExprNra(): nestexpr= ShoppingCart.user=Pi
| Join
| | Alpha
| | ClassRef(User)
| | Equals
| | | lhs.lhs
| | | rhs.rhs
| List
| | id
| | username
| | password
| | firstName
| | lastName
| | email
| | phone
| | enabled
| | User.shoppingCart=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShoppingCart)
| | | | Equals
| | | | | Alpha.id
| | | | | ShoppingCart.userId
| | | List
| | | | id
| | | | GrandTotal
| | | | NullOp
| | | | NullOp
| | User.userShippingList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(UserShipping)
| | | | Equals
| | | | | Alpha.id
| | | | | UserShipping.user_id
| | | List
| | | | id
| | | | userShippingName
| | | | userShippingStreet1
| | | | userShippingStreet2
| | | | userShippingCity
| | | | userShippingState
| | | | userShippingCountry
| | | | userShippingZipcode
| | | | userShippingDefault
| | | | NullOp
| | User.userOrderList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Order)
| | | | Equals
| | | | | Alpha.id
| | | | | Order.user_id
| | | List
| | | | id
| | | | orderDate
| | | | shippingDate
| | | | shippingMethod
| | | | orederStatus
| | | | orderTotal
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | User.userPaymentList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(UserPayment)
| | | | Equals
| | | | | Alpha.id
| | | | | UserPayment.user_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | defaultPayment
| | | | NullOp
| | | | NullOp
| | User.userRoles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(UserRole)
| | | | Equals
| | | | | Alpha.id
| | | | | UserRole.user_id
| | | List
| | | | userRoleId
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.ShoppingCart.id), FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal), FieldRef(com.bookstore.domain.ShoppingCart.cartItemList), FieldRef(com.bookstore.domain.ShoppingCart.user)]
NRA.java: genExprNra(): projectNode name: CartItem.shoppingCart=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): key : return.shoppingCart
 value : 
 CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.order
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=CartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= order
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= order
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.bookstore.domain.Order
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.bookstore.domain.Order
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.Order)
| NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.lang.Object: java.util.Optional findById(java.lang.Object)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: constructDIR(): key= return.order
 value= Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.Order)
| NullOp
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.orderId
| Order.id
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| ClassRef(com.bookstore.domain.Order)
| NullOp
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nested field name= order
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Order
NRA.java: processTableandFields: com.bookstore.domain.Order fields = [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date orderDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date shippingDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String shippingMethod>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String orederStatus>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>  type=ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>  type=Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>  type=BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Order
NRA.java: genExprNra(): com.bookstore.domain.Order fields= [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date orderDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date shippingDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String shippingMethod>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String orederStatus>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.math.BigDecimal orderTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.orderId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nested field name= cartItemList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.CartItem
NRA.java: processTableandFields: com.bookstore.domain.CartItem fields = [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: int qty>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>  type=ShoppingCart
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>  type=Order
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.CartItem
NRA.java: genExprNra(): com.bookstore.domain.CartItem fields= [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: genExprNra(): fields count= 7
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: int qty>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Book.cartItemId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nested field name= book
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Book
NRA.java: processTableandFields: com.bookstore.domain.Book fields = [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String author>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publisher>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publicationDate>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String language>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String category>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int numberOfPages>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String format>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String isbn>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double shippingWeight>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double listPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double ourPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: boolean active>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String description>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int inStockNumber>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>  type=MultipartFile
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.util.List bookToCartItemsList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Book
NRA.java: genExprNra(): com.bookstore.domain.Book fields= [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 19
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String title>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String author>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publisher>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publicationDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String language>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String category>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int numberOfPages>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String format>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String isbn>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double shippingWeight>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double listPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double ourPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: boolean active>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String description>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: columnDefinition value: text

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int inStockNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Transient; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/Transient;
Construct/Utils.java: bcelActualCollectionFieldType(): Transient field= bookImage
NRA.java: genExprNra(): sfEntity=org.springframework.web.multipart.MultipartFile
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = MultipartFile
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.util.List bookToCartItemsList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.bookId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| CartItem.bookId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Book.id), FieldRef(com.bookstore.domain.Book.title), FieldRef(com.bookstore.domain.Book.author), FieldRef(com.bookstore.domain.Book.publisher), FieldRef(com.bookstore.domain.Book.publicationDate), FieldRef(com.bookstore.domain.Book.language), FieldRef(com.bookstore.domain.Book.category), FieldRef(com.bookstore.domain.Book.numberOfPages), FieldRef(com.bookstore.domain.Book.format), FieldRef(com.bookstore.domain.Book.isbn), FieldRef(com.bookstore.domain.Book.shippingWeight), FieldRef(com.bookstore.domain.Book.listPrice), FieldRef(com.bookstore.domain.Book.ourPrice), FieldRef(com.bookstore.domain.Book.active), FieldRef(com.bookstore.domain.Book.description), FieldRef(com.bookstore.domain.Book.inStockNumber), FieldRef(com.bookstore.domain.Book.bookImage), FieldRef(com.bookstore.domain.Book.bookToCartItemsList), FieldRef(com.bookstore.domain.Book.cartItem)]
NRA.java: genExprNra(): projectNode name: CartItem.book=Pi
NRA.java: genExprNra(): nestexpr= CartItem.book=Pi
| Join
| | Alpha
| | ClassRef(Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.util.List bookToCartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.cartItemId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nested field name= bookToCartItemList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: com.bookstore.domain.BookToCartItem fields = [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): com.bookstore.domain.BookToCartItem fields= [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.bookId
| Book.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.cartItemId
| CartItem.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.BookToCartItem.id), FieldRef(com.bookstore.domain.BookToCartItem.book), FieldRef(com.bookstore.domain.BookToCartItem.cartItem)]
NRA.java: genExprNra(): projectNode name: CartItem.bookToCartItemList=Pi
NRA.java: genExprNra(): nestexpr= CartItem.bookToCartItemList=Pi
| Join
| | Alpha
| | ClassRef(BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= shoppingCart
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = ShoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.shoppingCartId
| ShoppingCart.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): nested field name= shoppingCart
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.ShoppingCart
NRA.java: processTableandFields: com.bookstore.domain.ShoppingCart fields = [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>  type=User
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): com.bookstore.domain.ShoppingCart fields= [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 4
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.shoppingCartId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  userId
NRA.java: getCondFromOneToOne(): join condition = Equals
| lhs.lhs
| rhs.rhs
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.ShoppingCart.id), FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal), FieldRef(com.bookstore.domain.ShoppingCart.cartItemList), FieldRef(com.bookstore.domain.ShoppingCart.user)]
NRA.java: genExprNra(): projectNode name: CartItem.shoppingCart=Pi
NRA.java: genExprNra(): nestexpr= CartItem.shoppingCart=Pi
| Join
| | Alpha
| | ClassRef(ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Order order>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: orderId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=order
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= order
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= order
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.orderId
| Order.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nested field name= order
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Order
NRA.java: processTableandFields: com.bookstore.domain.Order fields = [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date orderDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date shippingDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String shippingMethod>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String orederStatus>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>  type=ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>  type=Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>  type=BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Order
NRA.java: genExprNra(): com.bookstore.domain.Order fields= [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date orderDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date shippingDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String shippingMethod>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String orederStatus>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.math.BigDecimal orderTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.orderId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shippingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShippingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.Payment payment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=payment
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= payment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= payment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Payment
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Payment.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Payment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= billingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| BillingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Order.id), FieldRef(com.bookstore.domain.Order.orderDate), FieldRef(com.bookstore.domain.Order.shippingDate), FieldRef(com.bookstore.domain.Order.shippingMethod), FieldRef(com.bookstore.domain.Order.orederStatus), FieldRef(com.bookstore.domain.Order.orderTotal), FieldRef(com.bookstore.domain.Order.cartItemList), FieldRef(com.bookstore.domain.Order.shippingAddress), FieldRef(com.bookstore.domain.Order.payment), FieldRef(com.bookstore.domain.Order.billingAddress), FieldRef(com.bookstore.domain.Order.user)]
NRA.java: genExprNra(): projectNode name: CartItem.order=Pi
NRA.java: genExprNra(): nestexpr= CartItem.order=Pi
| Join
| | Alpha
| | ClassRef(Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | NullOp
| | NullOp
| | NullOp
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.CartItem.id), FieldRef(com.bookstore.domain.CartItem.qty), FieldRef(com.bookstore.domain.CartItem.subtotal), FieldRef(com.bookstore.domain.CartItem.book), FieldRef(com.bookstore.domain.CartItem.bookToCartItemList), FieldRef(com.bookstore.domain.CartItem.shoppingCart), FieldRef(com.bookstore.domain.CartItem.order)]
NRA.java: genExprNra(): projectNode name: Order.cartItemList=Pi
NRA.java: genExprNra(): nestexpr= Order.cartItemList=Pi
| Join
| | Alpha
| | ClassRef(CartItem)
| | Equals
| | | Alpha.id
| | | CartItem.orderId
| List
| | id
| | qty
| | subtotal
| | CartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.id
| | | | | Book.cartItemId
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | NullOp
| | | | NullOp
| | CartItem.bookToCartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.cartItemId
| | | List
| | | | id
| | | | NullOp
| | | | NullOp
| | CartItem.shoppingCart=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShoppingCart)
| | | | Equals
| | | | | Alpha.shoppingCartId
| | | | | ShoppingCart.id
| | | List
| | | | id
| | | | GrandTotal
| | | | NullOp
| | | | NullOp
| | CartItem.order=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Order)
| | | | Equals
| | | | | Alpha.orderId
| | | | | Order.id
| | | List
| | | | id
| | | | orderDate
| | | | shippingDate
| | | | shippingMethod
| | | | orederStatus
| | | | orderTotal
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shippingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShippingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): nested field name= shippingAddress
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.ShippingAddress
NRA.java: processTableandFields: com.bookstore.domain.ShippingAddress fields = [<com.bookstore.domain.ShippingAddress: java.lang.Long id>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressName>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressStreet1>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressStreet2>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressCity>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressState>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressCountry>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressZipcode>, <com.bookstore.domain.ShippingAddress: com.bookstore.domain.User user>, <com.bookstore.domain.ShippingAddress: com.bookstore.domain.Order order>]
NRA.java: processTableandFields: sf <com.bookstore.domain.ShippingAddress: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressStreet1>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressStreet2>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressCity>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressState>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressCountry>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressZipcode>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShippingAddress: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: processTableandFields: sf <com.bookstore.domain.ShippingAddress: com.bookstore.domain.Order order>  type=Order
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): com.bookstore.domain.ShippingAddress fields= [<com.bookstore.domain.ShippingAddress: java.lang.Long id>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressName>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressStreet1>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressStreet2>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressCity>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressState>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressCountry>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressZipcode>, <com.bookstore.domain.ShippingAddress: com.bookstore.domain.User user>, <com.bookstore.domain.ShippingAddress: com.bookstore.domain.Order order>]
NRA.java: genExprNra(): fields count= 10
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressStreet1>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressStreet2>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressCity>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressState>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressCountry>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressZipcode>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShippingAddress
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressStreet1
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressStreet2
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressCity
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressState
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressCountry
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressZipcode
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = ShippingAddress
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nested field name= user
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.User
NRA.java: processTableandFields: com.bookstore.domain.User fields = [<com.bookstore.domain.User: java.lang.Long id>, <com.bookstore.domain.User: java.lang.String username>, <com.bookstore.domain.User: java.lang.String password>, <com.bookstore.domain.User: java.lang.String firstName>, <com.bookstore.domain.User: java.lang.String lastName>, <com.bookstore.domain.User: java.lang.String email>, <com.bookstore.domain.User: java.lang.String phone>, <com.bookstore.domain.User: boolean enabled>, <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userOrderList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String firstName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String phone>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: boolean enabled>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>  type=ShoppingCart
NRA.java: getCondFromOneToOne(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  userId
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.UserShipping
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.util.List userShippingList>  type=UserShipping
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.UserShipping
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.Order
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.util.List userOrderList>  type=Order
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.Order
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.UserPayment
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.util.List userPaymentList>  type=UserPayment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.UserPayment
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.security.UserRole
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.util.Set userRoles>  type=UserRole
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.security.UserRole
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.User
NRA.java: genExprNra(): com.bookstore.domain.User fields= [<com.bookstore.domain.User: java.lang.Long id>, <com.bookstore.domain.User: java.lang.String username>, <com.bookstore.domain.User: java.lang.String password>, <com.bookstore.domain.User: java.lang.String firstName>, <com.bookstore.domain.User: java.lang.String lastName>, <com.bookstore.domain.User: java.lang.String email>, <com.bookstore.domain.User: java.lang.String phone>, <com.bookstore.domain.User: boolean enabled>, <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userOrderList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
NRA.java: genExprNra(): fields count= 13
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: id
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String username>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String password>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String firstName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String phone>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: boolean enabled>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shoppingCart
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = ShoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getCondFromOneToOne(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  userId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShoppingCart.userId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userShippingList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userShippingList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userShippingList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserShipping
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = UserShipping
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| UserShipping.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserShipping
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userOrderList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userOrderList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userOrderList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userOrderList [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Order.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userPaymentList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userPaymentList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userPaymentList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userOrderList [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserPayment
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = UserPayment
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| UserPayment.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserPayment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.Set userRoles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userRoles
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userRoles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userOrderList [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set userRoles [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = UserRole
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| UserRole.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.User.id), FieldRef(com.bookstore.domain.User.username), FieldRef(com.bookstore.domain.User.password), FieldRef(com.bookstore.domain.User.firstName), FieldRef(com.bookstore.domain.User.lastName), FieldRef(com.bookstore.domain.User.email), FieldRef(com.bookstore.domain.User.phone), FieldRef(com.bookstore.domain.User.enabled), FieldRef(com.bookstore.domain.User.shoppingCart), FieldRef(com.bookstore.domain.User.userShippingList), FieldRef(com.bookstore.domain.User.userOrderList), FieldRef(com.bookstore.domain.User.userPaymentList), FieldRef(com.bookstore.domain.User.userRoles)]
NRA.java: genExprNra(): projectNode name: ShippingAddress.user=Pi
NRA.java: genExprNra(): nestexpr= ShippingAddress.user=Pi
| Join
| | Alpha
| | ClassRef(User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | username
| | password
| | firstName
| | lastName
| | email
| | phone
| | enabled
| | NullOp
| | NullOp
| | NullOp
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: com.bookstore.domain.Order order>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/OneToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: order_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=order
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShippingAddress
 fieldName= order
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressStreet1
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressStreet2
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressCity
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressState
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressCountry
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressZipcode
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= order
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = ShippingAddress
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| lhs.lhs
| rhs.rhs
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/OneToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: order_id

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nested field name= order
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Order
NRA.java: processTableandFields: com.bookstore.domain.Order fields = [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date orderDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date shippingDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String shippingMethod>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String orederStatus>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>  type=ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>  type=Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>  type=BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Order
NRA.java: genExprNra(): com.bookstore.domain.Order fields= [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date orderDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date shippingDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String shippingMethod>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String orederStatus>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.math.BigDecimal orderTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.orderId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shippingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShippingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.Payment payment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=payment
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= payment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= payment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Payment
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Payment.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Payment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= billingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| BillingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Order.id), FieldRef(com.bookstore.domain.Order.orderDate), FieldRef(com.bookstore.domain.Order.shippingDate), FieldRef(com.bookstore.domain.Order.shippingMethod), FieldRef(com.bookstore.domain.Order.orederStatus), FieldRef(com.bookstore.domain.Order.orderTotal), FieldRef(com.bookstore.domain.Order.cartItemList), FieldRef(com.bookstore.domain.Order.shippingAddress), FieldRef(com.bookstore.domain.Order.payment), FieldRef(com.bookstore.domain.Order.billingAddress), FieldRef(com.bookstore.domain.Order.user)]
NRA.java: genExprNra(): projectNode name: ShippingAddress.order=Pi
NRA.java: genExprNra(): nestexpr= ShippingAddress.order=Pi
| Join
| | Alpha
| | ClassRef(Order)
| | Equals
| | | lhs.lhs
| | | rhs.rhs
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | NullOp
| | NullOp
| | NullOp
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.ShippingAddress.id), FieldRef(com.bookstore.domain.ShippingAddress.shippingAddressName), FieldRef(com.bookstore.domain.ShippingAddress.shippingAddressStreet1), FieldRef(com.bookstore.domain.ShippingAddress.shippingAddressStreet2), FieldRef(com.bookstore.domain.ShippingAddress.shippingAddressCity), FieldRef(com.bookstore.domain.ShippingAddress.shippingAddressState), FieldRef(com.bookstore.domain.ShippingAddress.shippingAddressCountry), FieldRef(com.bookstore.domain.ShippingAddress.shippingAddressZipcode), FieldRef(com.bookstore.domain.ShippingAddress.user), FieldRef(com.bookstore.domain.ShippingAddress.order)]
NRA.java: genExprNra(): projectNode name: Order.shippingAddress=Pi
NRA.java: genExprNra(): nestexpr= Order.shippingAddress=Pi
| Join
| | Alpha
| | ClassRef(ShippingAddress)
| | Equals
| | | Alpha.id
| | | ShippingAddress.order_id
| List
| | id
| | shippingAddressName
| | shippingAddressStreet1
| | shippingAddressStreet2
| | shippingAddressCity
| | shippingAddressState
| | shippingAddressCountry
| | shippingAddressZipcode
| | ShippingAddress.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | ShippingAddress.order=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Order)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | orderDate
| | | | shippingDate
| | | | shippingMethod
| | | | orederStatus
| | | | orderTotal
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.Payment payment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=payment
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= payment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= payment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Payment
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Payment.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Payment
NRA.java: genExprNra(): nested field name= payment
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Payment
NRA.java: processTableandFields: com.bookstore.domain.Payment fields = [<com.bookstore.domain.Payment: java.lang.Long id>, <com.bookstore.domain.Payment: java.lang.String type>, <com.bookstore.domain.Payment: java.lang.String cardName>, <com.bookstore.domain.Payment: java.lang.String cardNumber>, <com.bookstore.domain.Payment: int expiryMonth>, <com.bookstore.domain.Payment: int expiryYear>, <com.bookstore.domain.Payment: int cvc>, <com.bookstore.domain.Payment: java.lang.String holderName>, <com.bookstore.domain.Payment: com.bookstore.domain.Order order>, <com.bookstore.domain.Payment: com.bookstore.domain.UserBilling userBilling>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Payment: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Payment: java.lang.String type>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Payment: java.lang.String cardName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Payment: java.lang.String cardNumber>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Payment: int expiryMonth>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Payment: int expiryYear>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Payment: int cvc>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Payment: java.lang.String holderName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Payment: com.bookstore.domain.Order order>  type=Order
NRA.java: processTableandFields: sf <com.bookstore.domain.Payment: com.bookstore.domain.UserBilling userBilling>  type=UserBilling
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Payment
NRA.java: genExprNra(): com.bookstore.domain.Payment fields= [<com.bookstore.domain.Payment: java.lang.Long id>, <com.bookstore.domain.Payment: java.lang.String type>, <com.bookstore.domain.Payment: java.lang.String cardName>, <com.bookstore.domain.Payment: java.lang.String cardNumber>, <com.bookstore.domain.Payment: int expiryMonth>, <com.bookstore.domain.Payment: int expiryYear>, <com.bookstore.domain.Payment: int cvc>, <com.bookstore.domain.Payment: java.lang.String holderName>, <com.bookstore.domain.Payment: com.bookstore.domain.Order order>, <com.bookstore.domain.Payment: com.bookstore.domain.UserBilling userBilling>]
NRA.java: genExprNra(): fields count= 10
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: java.lang.String type>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: java.lang.String cardName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: java.lang.String cardNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: int expiryMonth>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: int expiryYear>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: int cvc>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: java.lang.String holderName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: com.bookstore.domain.Order order>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/OneToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: order_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=order
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Payment
 fieldName= order
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String type
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryMonth
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryYear
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int cvc
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String holderName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= order
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = Payment
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| lhs.lhs
| rhs.rhs
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/OneToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: order_id

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nested field name= order
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Order
NRA.java: processTableandFields: com.bookstore.domain.Order fields = [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date orderDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date shippingDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String shippingMethod>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String orederStatus>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>  type=ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>  type=Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>  type=BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Order
NRA.java: genExprNra(): com.bookstore.domain.Order fields= [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date orderDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date shippingDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String shippingMethod>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String orederStatus>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.math.BigDecimal orderTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.orderId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shippingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShippingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.Payment payment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=payment
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= payment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= payment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Payment
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Payment.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Payment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= billingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| BillingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Order.id), FieldRef(com.bookstore.domain.Order.orderDate), FieldRef(com.bookstore.domain.Order.shippingDate), FieldRef(com.bookstore.domain.Order.shippingMethod), FieldRef(com.bookstore.domain.Order.orederStatus), FieldRef(com.bookstore.domain.Order.orderTotal), FieldRef(com.bookstore.domain.Order.cartItemList), FieldRef(com.bookstore.domain.Order.shippingAddress), FieldRef(com.bookstore.domain.Order.payment), FieldRef(com.bookstore.domain.Order.billingAddress), FieldRef(com.bookstore.domain.Order.user)]
NRA.java: genExprNra(): projectNode name: Payment.order=Pi
NRA.java: genExprNra(): nestexpr= Payment.order=Pi
| Join
| | Alpha
| | ClassRef(Order)
| | Equals
| | | lhs.lhs
| | | rhs.rhs
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | NullOp
| | NullOp
| | NullOp
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: com.bookstore.domain.UserBilling userBilling>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/OneToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userBilling_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=userBilling
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Payment
 fieldName= userBilling
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String type
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryMonth
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryYear
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int cvc
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String holderName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.UserBilling userBilling [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= userBilling
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserBilling
NRA.java: genExprNra(): baseclass = Payment
NRA.java: genExprNra(): fieldclass = UserBilling
NRA.java: getJoinedColumn(): joined Column value=  userBilling_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| lhs.lhs
| rhs.rhs
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/OneToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userBilling_id

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserBilling
NRA.java: genExprNra(): nested field name= userBilling
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.UserBilling
NRA.java: processTableandFields: com.bookstore.domain.UserBilling fields = [<com.bookstore.domain.UserBilling: java.lang.Long id>, <com.bookstore.domain.UserBilling: java.lang.String userBillingName>, <com.bookstore.domain.UserBilling: java.lang.String userBillingStreet1>, <com.bookstore.domain.UserBilling: java.lang.String userBillingStreet2>, <com.bookstore.domain.UserBilling: java.lang.String userBillingCity>, <com.bookstore.domain.UserBilling: java.lang.String userBillingState>, <com.bookstore.domain.UserBilling: java.lang.String userBillingCountry>, <com.bookstore.domain.UserBilling: java.lang.String userBillingZipcode>, <com.bookstore.domain.UserBilling: com.bookstore.domain.UserPayment userPayment>, <com.bookstore.domain.UserBilling: com.bookstore.domain.Payment payment>]
NRA.java: processTableandFields: sf <com.bookstore.domain.UserBilling: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserBilling: java.lang.String userBillingName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserBilling: java.lang.String userBillingStreet1>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserBilling: java.lang.String userBillingStreet2>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserBilling: java.lang.String userBillingCity>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserBilling: java.lang.String userBillingState>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserBilling: java.lang.String userBillingCountry>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserBilling: java.lang.String userBillingZipcode>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserBilling: com.bookstore.domain.UserPayment userPayment>  type=UserPayment
NRA.java: getCondFromOneToOne(): mappedBy= userBilling
NRA.java: getJoinedColumn(): joined Column value=  userBilling_id
NRA.java: processTableandFields: sf <com.bookstore.domain.UserBilling: com.bookstore.domain.Payment payment>  type=Payment
NRA.java: getCondFromOneToOne(): mappedBy= userBilling
NRA.java: getJoinedColumn(): joined Column value=  userBilling_id
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.UserBilling
NRA.java: genExprNra(): com.bookstore.domain.UserBilling fields= [<com.bookstore.domain.UserBilling: java.lang.Long id>, <com.bookstore.domain.UserBilling: java.lang.String userBillingName>, <com.bookstore.domain.UserBilling: java.lang.String userBillingStreet1>, <com.bookstore.domain.UserBilling: java.lang.String userBillingStreet2>, <com.bookstore.domain.UserBilling: java.lang.String userBillingCity>, <com.bookstore.domain.UserBilling: java.lang.String userBillingState>, <com.bookstore.domain.UserBilling: java.lang.String userBillingCountry>, <com.bookstore.domain.UserBilling: java.lang.String userBillingZipcode>, <com.bookstore.domain.UserBilling: com.bookstore.domain.UserPayment userPayment>, <com.bookstore.domain.UserBilling: com.bookstore.domain.Payment payment>]
NRA.java: genExprNra(): fields count= 10
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingStreet1>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingStreet2>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingCity>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingState>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingCountry>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingZipcode>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: com.bookstore.domain.UserPayment userPayment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: userBilling

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userPayment_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=userPayment
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.UserBilling
 fieldName= userPayment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingStreet1
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingStreet2
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingCity
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingState
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingCountry
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingZipcode
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.UserPayment userPayment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= userPayment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserPayment
NRA.java: genExprNra(): baseclass = UserBilling
NRA.java: genExprNra(): fieldclass = UserPayment
NRA.java: getJoinedColumn(): joined Column value=  userPayment_id
NRA.java: getCondFromOneToOne(): mappedBy= userBilling
NRA.java: getJoinedColumn(): joined Column value=  userBilling_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| UserPayment.userBilling_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: userBilling

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userPayment_id

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserPayment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: com.bookstore.domain.Payment payment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: userBilling

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=payment
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.UserBilling
 fieldName= payment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingStreet1
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingStreet2
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingCity
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingState
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingCountry
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingZipcode
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.UserPayment userPayment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= payment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Payment
NRA.java: genExprNra(): baseclass = UserBilling
NRA.java: genExprNra(): fieldclass = Payment
NRA.java: getCondFromOneToOne(): mappedBy= userBilling
NRA.java: getJoinedColumn(): joined Column value=  userBilling_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Payment.userBilling_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: userBilling

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Payment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.UserBilling.id), FieldRef(com.bookstore.domain.UserBilling.userBillingName), FieldRef(com.bookstore.domain.UserBilling.userBillingStreet1), FieldRef(com.bookstore.domain.UserBilling.userBillingStreet2), FieldRef(com.bookstore.domain.UserBilling.userBillingCity), FieldRef(com.bookstore.domain.UserBilling.userBillingState), FieldRef(com.bookstore.domain.UserBilling.userBillingCountry), FieldRef(com.bookstore.domain.UserBilling.userBillingZipcode), FieldRef(com.bookstore.domain.UserBilling.userPayment), FieldRef(com.bookstore.domain.UserBilling.payment)]
NRA.java: genExprNra(): projectNode name: Payment.userBilling=Pi
NRA.java: genExprNra(): nestexpr= Payment.userBilling=Pi
| Join
| | Alpha
| | ClassRef(UserBilling)
| | Equals
| | | lhs.lhs
| | | rhs.rhs
| List
| | id
| | userBillingName
| | userBillingStreet1
| | userBillingStreet2
| | userBillingCity
| | userBillingState
| | userBillingCountry
| | userBillingZipcode
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Payment.id), FieldRef(com.bookstore.domain.Payment.type), FieldRef(com.bookstore.domain.Payment.cardName), FieldRef(com.bookstore.domain.Payment.cardNumber), FieldRef(com.bookstore.domain.Payment.expiryMonth), FieldRef(com.bookstore.domain.Payment.expiryYear), FieldRef(com.bookstore.domain.Payment.cvc), FieldRef(com.bookstore.domain.Payment.holderName), FieldRef(com.bookstore.domain.Payment.order), FieldRef(com.bookstore.domain.Payment.userBilling)]
NRA.java: genExprNra(): projectNode name: Order.payment=Pi
NRA.java: genExprNra(): nestexpr= Order.payment=Pi
| Join
| | Alpha
| | ClassRef(Payment)
| | Equals
| | | Alpha.id
| | | Payment.order_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | Payment.order=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Order)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | orderDate
| | | | shippingDate
| | | | shippingMethod
| | | | orederStatus
| | | | orderTotal
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | Payment.userBilling=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(UserBilling)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | userBillingName
| | | | userBillingStreet1
| | | | userBillingStreet2
| | | | userBillingCity
| | | | userBillingState
| | | | userBillingCountry
| | | | userBillingZipcode
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= billingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| BillingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): nested field name= billingAddress
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.BillingAddress
NRA.java: processTableandFields: com.bookstore.domain.BillingAddress fields = [<com.bookstore.domain.BillingAddress: java.lang.Long id>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressName>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressgStreet1>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressgStreet2>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressCity>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressState>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressCountry>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressZipcode>, <com.bookstore.domain.BillingAddress: com.bookstore.domain.Order order>]
NRA.java: processTableandFields: sf <com.bookstore.domain.BillingAddress: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BillingAddress: java.lang.String billingAddressName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BillingAddress: java.lang.String billingAddressgStreet1>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BillingAddress: java.lang.String billingAddressgStreet2>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BillingAddress: java.lang.String billingAddressCity>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BillingAddress: java.lang.String billingAddressState>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BillingAddress: java.lang.String billingAddressCountry>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BillingAddress: java.lang.String billingAddressZipcode>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BillingAddress: com.bookstore.domain.Order order>  type=Order
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): com.bookstore.domain.BillingAddress fields= [<com.bookstore.domain.BillingAddress: java.lang.Long id>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressName>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressgStreet1>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressgStreet2>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressCity>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressState>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressCountry>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressZipcode>, <com.bookstore.domain.BillingAddress: com.bookstore.domain.Order order>]
NRA.java: genExprNra(): fields count= 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BillingAddress: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BillingAddress: java.lang.String billingAddressName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BillingAddress: java.lang.String billingAddressgStreet1>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BillingAddress: java.lang.String billingAddressgStreet2>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BillingAddress: java.lang.String billingAddressCity>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BillingAddress: java.lang.String billingAddressState>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BillingAddress: java.lang.String billingAddressCountry>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BillingAddress: java.lang.String billingAddressZipcode>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BillingAddress: com.bookstore.domain.Order order>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/OneToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: order_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=order
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BillingAddress
 fieldName= order
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String billingAddressName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String billingAddressgStreet1
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String billingAddressgStreet2
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String billingAddressCity
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String billingAddressState
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String billingAddressCountry
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String billingAddressZipcode
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= order
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = BillingAddress
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| lhs.lhs
| rhs.rhs
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/OneToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: order_id

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nested field name= order
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Order
NRA.java: processTableandFields: com.bookstore.domain.Order fields = [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date orderDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date shippingDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String shippingMethod>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String orederStatus>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>  type=ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>  type=Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>  type=BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Order
NRA.java: genExprNra(): com.bookstore.domain.Order fields= [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date orderDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date shippingDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String shippingMethod>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String orederStatus>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.math.BigDecimal orderTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.orderId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shippingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShippingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.Payment payment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=payment
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= payment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= payment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Payment
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Payment.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Payment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= billingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| BillingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Order.id), FieldRef(com.bookstore.domain.Order.orderDate), FieldRef(com.bookstore.domain.Order.shippingDate), FieldRef(com.bookstore.domain.Order.shippingMethod), FieldRef(com.bookstore.domain.Order.orederStatus), FieldRef(com.bookstore.domain.Order.orderTotal), FieldRef(com.bookstore.domain.Order.cartItemList), FieldRef(com.bookstore.domain.Order.shippingAddress), FieldRef(com.bookstore.domain.Order.payment), FieldRef(com.bookstore.domain.Order.billingAddress), FieldRef(com.bookstore.domain.Order.user)]
NRA.java: genExprNra(): projectNode name: BillingAddress.order=Pi
NRA.java: genExprNra(): nestexpr= BillingAddress.order=Pi
| Join
| | Alpha
| | ClassRef(Order)
| | Equals
| | | lhs.lhs
| | | rhs.rhs
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | NullOp
| | NullOp
| | NullOp
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.BillingAddress.id), FieldRef(com.bookstore.domain.BillingAddress.billingAddressName), FieldRef(com.bookstore.domain.BillingAddress.billingAddressgStreet1), FieldRef(com.bookstore.domain.BillingAddress.billingAddressgStreet2), FieldRef(com.bookstore.domain.BillingAddress.billingAddressCity), FieldRef(com.bookstore.domain.BillingAddress.billingAddressState), FieldRef(com.bookstore.domain.BillingAddress.billingAddressCountry), FieldRef(com.bookstore.domain.BillingAddress.billingAddressZipcode), FieldRef(com.bookstore.domain.BillingAddress.order)]
NRA.java: genExprNra(): projectNode name: Order.billingAddress=Pi
NRA.java: genExprNra(): nestexpr= Order.billingAddress=Pi
| Join
| | Alpha
| | ClassRef(BillingAddress)
| | Equals
| | | Alpha.id
| | | BillingAddress.order_id
| List
| | id
| | billingAddressName
| | billingAddressgStreet1
| | billingAddressgStreet2
| | billingAddressCity
| | billingAddressState
| | billingAddressCountry
| | billingAddressZipcode
| | BillingAddress.order=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Order)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | orderDate
| | | | shippingDate
| | | | shippingMethod
| | | | orederStatus
| | | | orderTotal
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nested field name= user
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.User
NRA.java: processTableandFields: com.bookstore.domain.User fields = [<com.bookstore.domain.User: java.lang.Long id>, <com.bookstore.domain.User: java.lang.String username>, <com.bookstore.domain.User: java.lang.String password>, <com.bookstore.domain.User: java.lang.String firstName>, <com.bookstore.domain.User: java.lang.String lastName>, <com.bookstore.domain.User: java.lang.String email>, <com.bookstore.domain.User: java.lang.String phone>, <com.bookstore.domain.User: boolean enabled>, <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userOrderList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String firstName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String phone>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: boolean enabled>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>  type=ShoppingCart
NRA.java: getCondFromOneToOne(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  userId
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.UserShipping
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.util.List userShippingList>  type=UserShipping
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.UserShipping
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.Order
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.util.List userOrderList>  type=Order
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.Order
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.UserPayment
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.util.List userPaymentList>  type=UserPayment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.UserPayment
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.security.UserRole
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.util.Set userRoles>  type=UserRole
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.security.UserRole
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.User
NRA.java: genExprNra(): com.bookstore.domain.User fields= [<com.bookstore.domain.User: java.lang.Long id>, <com.bookstore.domain.User: java.lang.String username>, <com.bookstore.domain.User: java.lang.String password>, <com.bookstore.domain.User: java.lang.String firstName>, <com.bookstore.domain.User: java.lang.String lastName>, <com.bookstore.domain.User: java.lang.String email>, <com.bookstore.domain.User: java.lang.String phone>, <com.bookstore.domain.User: boolean enabled>, <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userOrderList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
NRA.java: genExprNra(): fields count= 13
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: id
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String username>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String password>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String firstName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String phone>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: boolean enabled>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shoppingCart
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = ShoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getCondFromOneToOne(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  userId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShoppingCart.userId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): nested field name= shoppingCart
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.ShoppingCart
NRA.java: processTableandFields: com.bookstore.domain.ShoppingCart fields = [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>  type=User
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): com.bookstore.domain.ShoppingCart fields= [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 4
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.shoppingCartId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  userId
NRA.java: getCondFromOneToOne(): join condition = Equals
| lhs.lhs
| rhs.rhs
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.ShoppingCart.id), FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal), FieldRef(com.bookstore.domain.ShoppingCart.cartItemList), FieldRef(com.bookstore.domain.ShoppingCart.user)]
NRA.java: genExprNra(): projectNode name: User.shoppingCart=Pi
NRA.java: genExprNra(): nestexpr= User.shoppingCart=Pi
| Join
| | Alpha
| | ClassRef(ShoppingCart)
| | Equals
| | | Alpha.id
| | | ShoppingCart.userId
| List
| | id
| | GrandTotal
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userShippingList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userShippingList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userShippingList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserShipping
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = UserShipping
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| UserShipping.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserShipping
NRA.java: genExprNra(): nested field name= userShippingList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.UserShipping
NRA.java: processTableandFields: com.bookstore.domain.UserShipping fields = [<com.bookstore.domain.UserShipping: java.lang.Long id>, <com.bookstore.domain.UserShipping: java.lang.String userShippingName>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCity>, <com.bookstore.domain.UserShipping: java.lang.String userShippingState>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>, <com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>, <com.bookstore.domain.UserShipping: boolean userShippingDefault>, <com.bookstore.domain.UserShipping: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingCity>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingState>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: boolean userShippingDefault>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.UserShipping
NRA.java: genExprNra(): com.bookstore.domain.UserShipping fields= [<com.bookstore.domain.UserShipping: java.lang.Long id>, <com.bookstore.domain.UserShipping: java.lang.String userShippingName>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCity>, <com.bookstore.domain.UserShipping: java.lang.String userShippingState>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>, <com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>, <com.bookstore.domain.UserShipping: boolean userShippingDefault>, <com.bookstore.domain.UserShipping: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 10
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingCity>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingState>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: boolean userShippingDefault>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.UserShipping
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingStreet1
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingStreet2
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingCity
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingState
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingCountry
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingZipcode
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean userShippingDefault
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = UserShipping
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.UserShipping.id), FieldRef(com.bookstore.domain.UserShipping.userShippingName), FieldRef(com.bookstore.domain.UserShipping.userShippingStreet1), FieldRef(com.bookstore.domain.UserShipping.userShippingStreet2), FieldRef(com.bookstore.domain.UserShipping.userShippingCity), FieldRef(com.bookstore.domain.UserShipping.userShippingState), FieldRef(com.bookstore.domain.UserShipping.userShippingCountry), FieldRef(com.bookstore.domain.UserShipping.userShippingZipcode), FieldRef(com.bookstore.domain.UserShipping.userShippingDefault), FieldRef(com.bookstore.domain.UserShipping.user)]
NRA.java: genExprNra(): projectNode name: User.userShippingList=Pi
NRA.java: genExprNra(): nestexpr= User.userShippingList=Pi
| Join
| | Alpha
| | ClassRef(UserShipping)
| | Equals
| | | Alpha.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userOrderList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userOrderList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userOrderList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userOrderList [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Order.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nested field name= userOrderList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Order
NRA.java: processTableandFields: com.bookstore.domain.Order fields = [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date orderDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date shippingDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String shippingMethod>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String orederStatus>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>  type=ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>  type=Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>  type=BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Order
NRA.java: genExprNra(): com.bookstore.domain.Order fields= [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date orderDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date shippingDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String shippingMethod>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String orederStatus>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.math.BigDecimal orderTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.orderId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shippingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShippingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.Payment payment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=payment
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= payment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= payment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Payment
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Payment.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Payment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= billingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| BillingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Order.id), FieldRef(com.bookstore.domain.Order.orderDate), FieldRef(com.bookstore.domain.Order.shippingDate), FieldRef(com.bookstore.domain.Order.shippingMethod), FieldRef(com.bookstore.domain.Order.orederStatus), FieldRef(com.bookstore.domain.Order.orderTotal), FieldRef(com.bookstore.domain.Order.cartItemList), FieldRef(com.bookstore.domain.Order.shippingAddress), FieldRef(com.bookstore.domain.Order.payment), FieldRef(com.bookstore.domain.Order.billingAddress), FieldRef(com.bookstore.domain.Order.user)]
NRA.java: genExprNra(): projectNode name: User.userOrderList=Pi
NRA.java: genExprNra(): nestexpr= User.userOrderList=Pi
| Join
| | Alpha
| | ClassRef(Order)
| | Equals
| | | Alpha.id
| | | Order.user_id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | NullOp
| | NullOp
| | NullOp
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userPaymentList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userPaymentList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userPaymentList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userOrderList [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserPayment
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = UserPayment
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| UserPayment.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserPayment
NRA.java: genExprNra(): nested field name= userPaymentList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.UserPayment
NRA.java: processTableandFields: com.bookstore.domain.UserPayment fields = [<com.bookstore.domain.UserPayment: java.lang.Long id>, <com.bookstore.domain.UserPayment: java.lang.String type>, <com.bookstore.domain.UserPayment: java.lang.String cardName>, <com.bookstore.domain.UserPayment: java.lang.String cardNumber>, <com.bookstore.domain.UserPayment: int expiryMonth>, <com.bookstore.domain.UserPayment: int expiryYear>, <com.bookstore.domain.UserPayment: int cvc>, <com.bookstore.domain.UserPayment: java.lang.String holderName>, <com.bookstore.domain.UserPayment: boolean defaultPayment>, <com.bookstore.domain.UserPayment: com.bookstore.domain.User user>, <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>]
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: java.lang.String type>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: java.lang.String cardName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: java.lang.String cardNumber>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: int expiryMonth>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: int expiryYear>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: int cvc>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: java.lang.String holderName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: boolean defaultPayment>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>  type=UserBilling
NRA.java: getCondFromOneToOne(): mappedBy= userPayment
NRA.java: getJoinedColumn(): joined Column value=  userPayment_id
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.UserPayment
NRA.java: genExprNra(): com.bookstore.domain.UserPayment fields= [<com.bookstore.domain.UserPayment: java.lang.Long id>, <com.bookstore.domain.UserPayment: java.lang.String type>, <com.bookstore.domain.UserPayment: java.lang.String cardName>, <com.bookstore.domain.UserPayment: java.lang.String cardNumber>, <com.bookstore.domain.UserPayment: int expiryMonth>, <com.bookstore.domain.UserPayment: int expiryYear>, <com.bookstore.domain.UserPayment: int cvc>, <com.bookstore.domain.UserPayment: java.lang.String holderName>, <com.bookstore.domain.UserPayment: boolean defaultPayment>, <com.bookstore.domain.UserPayment: com.bookstore.domain.User user>, <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>]
NRA.java: genExprNra(): fields count= 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String type>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String cardName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String cardNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int expiryMonth>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int expiryYear>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int cvc>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String holderName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: boolean defaultPayment>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.UserPayment
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String type
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryMonth
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryYear
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int cvc
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String holderName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean defaultPayment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = UserPayment
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: userPayment

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userBilling_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=userBilling
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.UserPayment
 fieldName= userBilling
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String type
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryMonth
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryYear
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int cvc
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String holderName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean defaultPayment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.UserBilling userBilling [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= userBilling
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserBilling
NRA.java: genExprNra(): baseclass = UserPayment
NRA.java: genExprNra(): fieldclass = UserBilling
NRA.java: getJoinedColumn(): joined Column value=  userBilling_id
NRA.java: getCondFromOneToOne(): mappedBy= userPayment
NRA.java: getJoinedColumn(): joined Column value=  userPayment_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| UserBilling.userPayment_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: userPayment

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userBilling_id

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserBilling
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.UserPayment.id), FieldRef(com.bookstore.domain.UserPayment.type), FieldRef(com.bookstore.domain.UserPayment.cardName), FieldRef(com.bookstore.domain.UserPayment.cardNumber), FieldRef(com.bookstore.domain.UserPayment.expiryMonth), FieldRef(com.bookstore.domain.UserPayment.expiryYear), FieldRef(com.bookstore.domain.UserPayment.cvc), FieldRef(com.bookstore.domain.UserPayment.holderName), FieldRef(com.bookstore.domain.UserPayment.defaultPayment), FieldRef(com.bookstore.domain.UserPayment.user), FieldRef(com.bookstore.domain.UserPayment.userBilling)]
NRA.java: genExprNra(): projectNode name: User.userPaymentList=Pi
NRA.java: genExprNra(): nestexpr= User.userPaymentList=Pi
| Join
| | Alpha
| | ClassRef(UserPayment)
| | Equals
| | | Alpha.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.Set userRoles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userRoles
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userRoles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userOrderList [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set userRoles [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = UserRole
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| UserRole.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): nested field name= userRoles
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.security.UserRole
NRA.java: processTableandFields: com.bookstore.domain.security.UserRole fields = [<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>]
NRA.java: processTableandFields: sf <com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: processTableandFields: sf <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>  type=Role
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: role_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): com.bookstore.domain.security.UserRole fields= [<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToOne; num elems: 1 elems: 
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.security.UserRole
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long userRoleId [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = UserRole
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.userRoleId
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToOne; num elems: 1 elems: 
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=role
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.security.UserRole
 fieldName= role
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long userRoleId [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.security.Role role [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= role
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.security.Role
NRA.java: genExprNra(): baseclass = UserRole
NRA.java: genExprNra(): fieldclass = Role
NRA.java: getJoinedColumn(): joined Column value=  role_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: role_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.role_id
| Role.userRoleId
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.security.Role
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.security.UserRole.userRoleId), FieldRef(com.bookstore.domain.security.UserRole.user), FieldRef(com.bookstore.domain.security.UserRole.role)]
NRA.java: genExprNra(): projectNode name: User.userRoles=Pi
NRA.java: genExprNra(): nestexpr= User.userRoles=Pi
| Join
| | Alpha
| | ClassRef(UserRole)
| | Equals
| | | Alpha.id
| | | UserRole.user_id
| List
| | userRoleId
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.User.id), FieldRef(com.bookstore.domain.User.username), FieldRef(com.bookstore.domain.User.password), FieldRef(com.bookstore.domain.User.firstName), FieldRef(com.bookstore.domain.User.lastName), FieldRef(com.bookstore.domain.User.email), FieldRef(com.bookstore.domain.User.phone), FieldRef(com.bookstore.domain.User.enabled), FieldRef(com.bookstore.domain.User.shoppingCart), FieldRef(com.bookstore.domain.User.userShippingList), FieldRef(com.bookstore.domain.User.userOrderList), FieldRef(com.bookstore.domain.User.userPaymentList), FieldRef(com.bookstore.domain.User.userRoles)]
NRA.java: genExprNra(): projectNode name: Order.user=Pi
NRA.java: genExprNra(): nestexpr= Order.user=Pi
| Join
| | Alpha
| | ClassRef(User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | username
| | password
| | firstName
| | lastName
| | email
| | phone
| | enabled
| | User.shoppingCart=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShoppingCart)
| | | | Equals
| | | | | Alpha.id
| | | | | ShoppingCart.userId
| | | List
| | | | id
| | | | GrandTotal
| | | | NullOp
| | | | NullOp
| | User.userShippingList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(UserShipping)
| | | | Equals
| | | | | Alpha.id
| | | | | UserShipping.user_id
| | | List
| | | | id
| | | | userShippingName
| | | | userShippingStreet1
| | | | userShippingStreet2
| | | | userShippingCity
| | | | userShippingState
| | | | userShippingCountry
| | | | userShippingZipcode
| | | | userShippingDefault
| | | | NullOp
| | User.userOrderList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Order)
| | | | Equals
| | | | | Alpha.id
| | | | | Order.user_id
| | | List
| | | | id
| | | | orderDate
| | | | shippingDate
| | | | shippingMethod
| | | | orederStatus
| | | | orderTotal
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | User.userPaymentList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(UserPayment)
| | | | Equals
| | | | | Alpha.id
| | | | | UserPayment.user_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | defaultPayment
| | | | NullOp
| | | | NullOp
| | User.userRoles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(UserRole)
| | | | Equals
| | | | | Alpha.id
| | | | | UserRole.user_id
| | | List
| | | | userRoleId
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Order.id), FieldRef(com.bookstore.domain.Order.orderDate), FieldRef(com.bookstore.domain.Order.shippingDate), FieldRef(com.bookstore.domain.Order.shippingMethod), FieldRef(com.bookstore.domain.Order.orederStatus), FieldRef(com.bookstore.domain.Order.orderTotal), FieldRef(com.bookstore.domain.Order.cartItemList), FieldRef(com.bookstore.domain.Order.shippingAddress), FieldRef(com.bookstore.domain.Order.payment), FieldRef(com.bookstore.domain.Order.billingAddress), FieldRef(com.bookstore.domain.Order.user)]
NRA.java: genExprNra(): projectNode name: CartItem.order=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): key : return.order
 value : 
 CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = java.lang.Object: java.util.Optional findById(java.lang.Object)
DIRRegionAnalyzer.java: constructDIR(): key = return.order.orederStatus
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.orederStatus)
DIRRegionAnalyzer.java: constructDIR(): key = return.book.shippingWeight
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.shippingWeight)
DIRRegionAnalyzer.java: constructDIR(): key = return.book.description
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.description)
DIRRegionAnalyzer.java: constructDIR(): key = return.book
DIRRegionAnalyzer.java: constructDIR(): val = CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return.shoppingCart.id
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id)
DIRRegionAnalyzer.java: constructDIR(): key = return.order.payment
DIRRegionAnalyzer.java: constructDIR(): val = Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.Payment)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return.book.bookToCartItemsList
DIRRegionAnalyzer.java: constructDIR(): val = Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| ClassRef(com.bookstore.domain.BookToCartItem)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return.book.category
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.category)
DIRRegionAnalyzer.java: constructDIR(): key = return.book.publisher
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.publisher)
DIRRegionAnalyzer.java: constructDIR(): key = return.book.listPrice
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.listPrice)
DIRRegionAnalyzer.java: constructDIR(): key = return.book.inStockNumber
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.inStockNumber)
DIRRegionAnalyzer.java: constructDIR(): key = return.book.publicationDate
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.publicationDate)
DIRRegionAnalyzer.java: constructDIR(): key = return.id
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id
DIRRegionAnalyzer.java: constructDIR(): key = return.qty
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty
DIRRegionAnalyzer.java: constructDIR(): key = return.book.format
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.format)
DIRRegionAnalyzer.java: constructDIR(): key = return.bookToCartItemList
DIRRegionAnalyzer.java: constructDIR(): val = CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return.order.orderTotal
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.orderTotal)
DIRRegionAnalyzer.java: constructDIR(): key = return.shoppingCart.user
DIRRegionAnalyzer.java: constructDIR(): val = Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return.order.shippingMethod
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.shippingMethod)
DIRRegionAnalyzer.java: constructDIR(): key = return.book.author
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.author)
DIRRegionAnalyzer.java: constructDIR(): key = return.book.id
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.id)
DIRRegionAnalyzer.java: constructDIR(): key = return.order.orderDate
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.orderDate)
DIRRegionAnalyzer.java: constructDIR(): key = return.book.numberOfPages
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.numberOfPages)
DIRRegionAnalyzer.java: constructDIR(): key = return.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): val = CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return.book.cartItem
DIRRegionAnalyzer.java: constructDIR(): val = Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return.order.shippingAddress
DIRRegionAnalyzer.java: constructDIR(): val = Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.ShippingAddress)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return.subtotal
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal
DIRRegionAnalyzer.java: constructDIR(): key = return.book.title
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.title)
DIRRegionAnalyzer.java: constructDIR(): key = return.book.isbn
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.isbn)
DIRRegionAnalyzer.java: constructDIR(): key = return.order.shippingDate
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.shippingDate)
DIRRegionAnalyzer.java: constructDIR(): key = return.shoppingCart.cartItemList
DIRRegionAnalyzer.java: constructDIR(): val = Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return.book.ourPrice
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.ourPrice)
DIRRegionAnalyzer.java: constructDIR(): key = return.order.id
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.id)
DIRRegionAnalyzer.java: constructDIR(): key = return.book.language
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.language)
DIRRegionAnalyzer.java: constructDIR(): key = return.order
DIRRegionAnalyzer.java: constructDIR(): val = CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return.book.active
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.active)
DIRRegionAnalyzer.java: constructDIR(): key = optionalret
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId
DIRRegionAnalyzer.java: constructDIR(): key = return.order.cartItemList
DIRRegionAnalyzer.java: constructDIR(): val = Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return.shoppingCart.GrandTotal
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId
DIRRegionAnalyzer.java: constructDIR(): key = return.order.billingAddress
DIRRegionAnalyzer.java: constructDIR(): val = Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.BillingAddress)
| NullOp
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = java.lang.Object: java.util.Optional findById(java.lang.Object) END
DIRRegionAnalyzer.java: constructDIR(): v1 access paths: [$r1.id, $r1.qty, $r1.subtotal, $r1.book, $r1.bookToCartItemList, $r1.shoppingCart, $r1.order]
DIRRegionAnalyzer.java: constructDIR(): key = $r1.id
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.lang.Object: java.util.Optional findById(java.lang.Object)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id
DIRRegionAnalyzer.java: constructDIR(): key = $r1.qty
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.qty
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.lang.Object: java.util.Optional findById(java.lang.Object)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty
DIRRegionAnalyzer.java: constructDIR(): key = $r1.subtotal
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.subtotal
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.lang.Object: java.util.Optional findById(java.lang.Object)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal
DIRRegionAnalyzer.java: constructDIR(): key = $r1.book
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.book
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.lang.Object: java.util.Optional findById(java.lang.Object)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r1.bookToCartItemList
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.bookToCartItemList
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.lang.Object: java.util.Optional findById(java.lang.Object)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r1.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.shoppingCart
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.lang.Object: java.util.Optional findById(java.lang.Object)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r1.order
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.order
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.lang.Object: java.util.Optional findById(java.lang.Object)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: constructDIR(): callersDag = CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = interfaceinvoke $r0.<com.bookstore.repository.CartItemRepository: java.util.Optional findById(java.lang.Object)>(cartItemId)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = java.lang.Object: java.util.Optional findById(java.lang.Object)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r2 = virtualinvoke $r1.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null)
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JVirtualInvokeExpr
DIRRegionAnalyzer.java: constructDIR(): CASE method call in rhs
AccessPath.java: replaceBase(): input access path: $r2.id
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: $r2.qty
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: $r2.subtotal
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: $r2.book
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: $r2.bookToCartItemList
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: $r2.shoppingCart
AccessPath.java: replaceBase(): replacement of base: $r1
AccessPath.java: replaceBase(): input access path: $r2.order
AccessPath.java: replaceBase(): replacement of base: $r1
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r3 = (com.bookstore.domain.CartItem) $r2
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JCastExpr
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = (type1) v2
DIRRegionAnalyzer.java: constructDIR(): type1: com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): castExpr: (com.bookstore.domain.CartItem) $r2
DIRRegionAnalyzer.java: constructDIR(): v2: $r2
DIRRegionAnalyzer.java: constructDIR(): cur dir: {$r0=this.cartItemRepository, $r1=Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId, $r1.order=CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp, $r2=Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId, $r2.subtotal=Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal, this=Self, $r2.id=Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id, $r2.order=CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp, $r2.book=CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp, $r2.qty=Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty, $r1.id=Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id, $r2.bookToCartItemList=CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp, $r1.subtotal=Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal, $r1.book=CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp, $r1.bookToCartItemList=CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp, $r2.shoppingCart=CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp, $r1.qty=Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty, $r1.shoppingCart=CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp}
DIRRegionAnalyzer.java: constructDIR(): rightVar in dir: true
WARN: DIRRegionAnalyzer.java: processPointerAssignment(): v1 and v2 have diff types
WARN: DIRRegionAnalyzer.java: processPointerAssignment(): type(v1) = com.bookstore.domain.CartItem
WARN: DIRRegionAnalyzer.java: processPointerAssignment(): type(v2) = java.lang.Object
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: $r3
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r2
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [CartItem.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
]
AccessPath.java: replaceBase(): input access path: $r3.id
AccessPath.java: replaceBase(): replacement of base: $r2
AccessPath.java: replaceBase(): input access path: $r3.qty
AccessPath.java: replaceBase(): replacement of base: $r2
AccessPath.java: replaceBase(): input access path: $r3.subtotal
AccessPath.java: replaceBase(): replacement of base: $r2
AccessPath.java: replaceBase(): input access path: $r3.book
AccessPath.java: replaceBase(): replacement of base: $r2
AccessPath.java: replaceBase(): input access path: $r3.bookToCartItemList
AccessPath.java: replaceBase(): replacement of base: $r2
AccessPath.java: replaceBase(): input access path: $r3.shoppingCart
AccessPath.java: replaceBase(): replacement of base: $r2
AccessPath.java: replaceBase(): input access path: $r3.order
AccessPath.java: replaceBase(): replacement of base: $r2
DIRRegionAnalyzer.java: constructDIR(): curUnit = return $r3
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: processPointerAssignment(): lhs of pointer assignment: return
DIRRegionAnalyzer.java: processPointerAssignment(): rhs of pointer assignment: $r3
DIRRegionAnalyzer.java: processPointerAssignment(): soot class tags: [CartItem.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
]
AccessPath.java: replaceBase(): input access path: return.id
AccessPath.java: replaceBase(): replacement of base: $r3
AccessPath.java: replaceBase(): input access path: return.qty
AccessPath.java: replaceBase(): replacement of base: $r3
AccessPath.java: replaceBase(): input access path: return.subtotal
AccessPath.java: replaceBase(): replacement of base: $r3
AccessPath.java: replaceBase(): input access path: return.book
AccessPath.java: replaceBase(): replacement of base: $r3
AccessPath.java: replaceBase(): input access path: return.bookToCartItemList
AccessPath.java: replaceBase(): replacement of base: $r3
AccessPath.java: replaceBase(): input access path: return.shoppingCart
AccessPath.java: replaceBase(): replacement of base: $r3
AccessPath.java: replaceBase(): input access path: return.order
AccessPath.java: replaceBase(): replacement of base: $r3
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.cartItemRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ $r1.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id

~~~ $r1.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty

~~~ $r1.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal

~~~ $r2 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ $r2.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id

~~~ $r2.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty

~~~ $r2.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal

~~~ $r3 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ $r3.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r3.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r3.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id

~~~ $r3.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r3.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty

~~~ $r3.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r3.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ return.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ return.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id

~~~ return.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ return.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty

~~~ return.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ return.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal

~~~ this ~~~
Self


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.cartItemRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ $r1.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id

~~~ $r1.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty

~~~ $r1.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal

~~~ $r2 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ $r2.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id

~~~ $r2.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty

~~~ $r2.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal

~~~ $r3 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ $r3.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r3.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r3.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id

~~~ $r3.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r3.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty

~~~ $r3.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r3.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ return.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ return.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id

~~~ return.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ return.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty

~~~ return.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ return.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal

~~~ this ~~~
Self


DIR.java: updateRegion(): update region entry: $r1.order=CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: $r3.id=Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id
DIR.java: updateRegion(): update region entry: return.book=CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: $r2.book=CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: $r1.id=Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id
DIR.java: updateRegion(): update region entry: $r1.book=CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: $r1.bookToCartItemList=CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: $r3.order=CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: $r1.qty=Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty
DIR.java: updateRegion(): update region entry: return.id=Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id
DIR.java: updateRegion(): update region entry: return.qty=Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty
DIR.java: updateRegion(): update region entry: return.bookToCartItemList=CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: $r3.subtotal=Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal
DIR.java: updateRegion(): update region entry: $r0=this.cartItemRepository
DIR.java: updateRegion(): update region entry: $r1=Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId
DIR.java: updateRegion(): update region entry: $r3.qty=Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty
DIR.java: updateRegion(): update region entry: $r2=Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId
DIR.java: updateRegion(): update region entry: $r3=Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId
DIR.java: updateRegion(): update region entry: $r2.subtotal=Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: return.shoppingCart=CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: $r2.id=Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id
DIR.java: updateRegion(): update region entry: $r2.order=CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: $r3.bookToCartItemList=CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: return.subtotal=Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal
DIR.java: updateRegion(): update region entry: $r2.qty=Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty
DIR.java: updateRegion(): update region entry: $r2.bookToCartItemList=CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: $r1.subtotal=Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal
DIR.java: updateRegion(): update region entry: $r3.shoppingCart=CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: $r2.shoppingCart=CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: return.order=CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: $r1.shoppingCart=CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: $r3.book=CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: return=Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId
DIR.java: updateRegion(): update region entry: return=Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId
construct/Utils.java: parseObjectInvoke(): Put DIR of callee = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long) in the map
DIRRegionAnalyzer.java: constructDIR(): CASE: v1 = v2.foo(v3), foo is Non-library method
DIRRegionAnalyzer.java: constructDIR(): leftType = com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): leftType : com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): case : caseCallPtrAsgnMethodWBody()
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3)
DIRRegionAnalyzer.java: constructDIR(): v1: $r2
DIRRegionAnalyzer.java: constructDIR(): v2.foo(v3): virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: constructDIR(): left type = com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): invoke methodref rettype: com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): method sig = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap = 
{java.lang.Object: java.util.Optional findById(java.lang.Object)=~~~ optionalret ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ return.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ return.book.active ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.active)

~~~ return.book.author ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.author)

~~~ return.book.bookToCartItemsList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| ClassRef(com.bookstore.domain.BookToCartItem)
| NullOp

~~~ return.book.cartItem ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.book.category ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.category)

~~~ return.book.description ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.description)

~~~ return.book.format ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.format)

~~~ return.book.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.id)

~~~ return.book.inStockNumber ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.inStockNumber)

~~~ return.book.isbn ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.isbn)

~~~ return.book.language ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.language)

~~~ return.book.listPrice ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.listPrice)

~~~ return.book.numberOfPages ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.numberOfPages)

~~~ return.book.ourPrice ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.ourPrice)

~~~ return.book.publicationDate ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.publicationDate)

~~~ return.book.publisher ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.publisher)

~~~ return.book.shippingWeight ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.shippingWeight)

~~~ return.book.title ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.title)

~~~ return.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id

~~~ return.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ return.order.billingAddress ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.BillingAddress)
| NullOp

~~~ return.order.cartItemList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.order.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.id)

~~~ return.order.orderDate ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.orderDate)

~~~ return.order.orderTotal ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.orderTotal)

~~~ return.order.orederStatus ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.orederStatus)

~~~ return.order.payment ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.Payment)
| NullOp

~~~ return.order.shippingAddress ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.ShippingAddress)
| NullOp

~~~ return.order.shippingDate ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.shippingDate)

~~~ return.order.shippingMethod ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.shippingMethod)

~~~ return.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty

~~~ return.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ return.shoppingCart.GrandTotal ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ return.shoppingCart.cartItemList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.shoppingCart.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ return.shoppingCart.user ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp

~~~ return.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal

, com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)=~~~ $r0 ~~~
this.cartItemRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ $r1.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id

~~~ $r1.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty

~~~ $r1.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal

~~~ $r2 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ $r2.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id

~~~ $r2.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty

~~~ $r2.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal

~~~ $r3 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ $r3.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r3.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r3.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id

~~~ $r3.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r3.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty

~~~ $r3.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r3.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ return.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ return.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id

~~~ return.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ return.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty

~~~ return.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ return.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal

~~~ this ~~~
Self

}
DIRRegionAnalyzer.java: constructDIR(): calleeDIR= ~~~ $r0 ~~~
this.cartItemRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ $r1.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id

~~~ $r1.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty

~~~ $r1.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal

~~~ $r2 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ $r2.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id

~~~ $r2.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty

~~~ $r2.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal

~~~ $r3 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ $r3.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r3.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r3.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id

~~~ $r3.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r3.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty

~~~ $r3.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r3.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ return.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ return.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id

~~~ return.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ return.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty

~~~ return.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ return.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): check 1
DIRRegionAnalyzer.java: constructDIR(): soot class tags: [CartItem.java, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Entity; without elements
]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [cartItemId, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [id, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = cartItemId, actual = id
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId
DIRRegionAnalyzer.java: constructDIR(): leftType = com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: findById
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [cartItemId, this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [id, $r0]
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: cartItemId
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: java.lang.Long
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: id
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.bookstore.service.impl.CartItemServiceImpl
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: $r0
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.bookToCartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.order, $r3.id, return.book, $r2.book, $r1.id, $r1.book, $r1.bookToCartItemList, $r3.order, $r1.qty, return.id, return.qty, return.bookToCartItemList, $r3.subtotal, $r0, $r1, $r3.qty, $r2, $r3, $r2.subtotal, this, return.shoppingCart, $r2.id, $r2.order, $r3.bookToCartItemList, return.subtotal, $r2.qty, $r2.bookToCartItemList, $r1.subtotal, $r3.shoppingCart, $r2.shoppingCart, return.order, $r1.shoppingCart, $r3.book, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.cartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r1.order, $r3.id, return.book, $r2.book, $r1.id, $r1.book, $r1.bookToCartItemList, $r3.order, $r1.qty, return.id, return.qty, return.bookToCartItemList, $r3.subtotal, $r0, $r1, $r3.qty, $r2, $r3, $r2.subtotal, this, return.shoppingCart, $r2.id, $r2.order, $r3.bookToCartItemList, return.subtotal, $r2.qty, $r2.bookToCartItemList, $r1.subtotal, $r3.shoppingCart, $r2.shoppingCart, return.order, $r1.shoppingCart, $r3.book, return, return]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = findById, []
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: cartItemId
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: id
DIRRegionAnalyzer.java: handleSideEffects(): Case the formal param is a primitive
DIRRegionAnalyzer.java: handleSideEffects(): fml: cartItemId
DIRRegionAnalyzer.java: handleSideEffects(): actual arg (Soot Value): id
DIRRegionAnalyzer.java: handleSideEffects(): actualNode (Node constructed from value): id
DIRRegionAnalyzer.java: handleSideEffects(): formal = cartItemId, actual = id
DIRRegionAnalyzer.java: handleSideEffects(): resolvedActual: id
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: $r0
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.foo(v3), type(v1) is pointer non-collection
NRA.java: processTableandFields: com.bookstore.domain.CartItem fields = [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: int qty>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>  type=ShoppingCart
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>  type=Order
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
DIRRegionAnalyzer.java: constructDIR(): going to flatten (var, type) = $r2, com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): accesspaths = [$r2.id, $r2.qty, $r2.subtotal, $r2.book, $r2.bookToCartItemList, $r2.shoppingCart, $r2.order]
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain = [java.lang.Object: java.util.Optional findById(java.lang.Object), com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)]
DIRRegionAnalyzer.java: constructDIR(): callee = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)
DIRRegionAnalyzer.java: constructDIR(): funcDIRMap domain contains callee = true
Flatten.java: getNestedFields(): LVAL TYPE: com.bookstore.domain.CartItem
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.CartItem: java.lang.Long id> = java.lang.Long
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
Flatten.java: getNestedFields(): Id fields=id
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.CartItem: int qty> = int
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal> = java.math.BigDecimal
Flatten.java: getNestedFields(): tags= []
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.CartItem: com.bookstore.domain.Book book> = com.bookstore.domain.Book
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
Flatten.java: getNestedFields(): check *ToOne sf: book , type = com.bookstore.domain.Book
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.CartItem: java.util.List bookToCartItemList> = java.util.List
Flatten.java: getNestedFields(): tags= [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
Flatten.java: getNestedFields(): check *ToMany sf: bookToCartItemList , type = java.util.List
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart> = com.bookstore.domain.ShoppingCart
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
Flatten.java: getNestedFields(): check *ToOne sf: shoppingCart , type = com.bookstore.domain.ShoppingCart
Flatten.java: getNestedFields(): Type of sf: <com.bookstore.domain.CartItem: com.bookstore.domain.Order order> = com.bookstore.domain.Order
Flatten.java: getNestedFields(): tags= [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: orderId

]
Flatten.java: getNestedFields(): check *ToOne sf: order , type = com.bookstore.domain.Order
Flatten.java: getNestedFields(): returning: [<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
DIRRegionAnalyzer.java: constructDIR(): check nestedFields=[<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.book
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=CartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= book
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.bookstore.domain.Book
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.bookstore.domain.Book
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [cartItemId, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [id, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = cartItemId, actual = id
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key= return.book
 value= CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Book.cartItemId
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| ClassRef(com.bookstore.domain.Book)
| Equals
| | Alpha.id
| | Book.cartItemId
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nested field name= book
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Book
NRA.java: processTableandFields: com.bookstore.domain.Book fields = [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String author>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publisher>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publicationDate>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String language>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String category>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int numberOfPages>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String format>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String isbn>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double shippingWeight>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double listPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double ourPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: boolean active>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String description>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int inStockNumber>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>  type=MultipartFile
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.util.List bookToCartItemsList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Book
NRA.java: genExprNra(): com.bookstore.domain.Book fields= [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 19
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String title>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String author>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publisher>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publicationDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String language>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String category>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int numberOfPages>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String format>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String isbn>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double shippingWeight>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double listPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double ourPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: boolean active>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String description>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: columnDefinition value: text

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int inStockNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Transient; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/Transient;
Construct/Utils.java: bcelActualCollectionFieldType(): Transient field= bookImage
NRA.java: genExprNra(): sfEntity=org.springframework.web.multipart.MultipartFile
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = MultipartFile
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.util.List bookToCartItemsList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.bookId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nested field name= bookToCartItemsList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: com.bookstore.domain.BookToCartItem fields = [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): com.bookstore.domain.BookToCartItem fields= [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.bookId
| Book.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nested field name= book
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Book
NRA.java: processTableandFields: com.bookstore.domain.Book fields = [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String author>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publisher>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publicationDate>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String language>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String category>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int numberOfPages>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String format>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String isbn>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double shippingWeight>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double listPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double ourPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: boolean active>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String description>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int inStockNumber>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>  type=MultipartFile
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.util.List bookToCartItemsList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Book
NRA.java: genExprNra(): com.bookstore.domain.Book fields= [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 19
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String title>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String author>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publisher>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publicationDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String language>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String category>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int numberOfPages>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String format>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String isbn>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double shippingWeight>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double listPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double ourPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: boolean active>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String description>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: columnDefinition value: text

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int inStockNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Transient; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/Transient;
Construct/Utils.java: bcelActualCollectionFieldType(): Transient field= bookImage
NRA.java: genExprNra(): sfEntity=org.springframework.web.multipart.MultipartFile
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = MultipartFile
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.util.List bookToCartItemsList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.bookId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| CartItem.bookId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Book.id), FieldRef(com.bookstore.domain.Book.title), FieldRef(com.bookstore.domain.Book.author), FieldRef(com.bookstore.domain.Book.publisher), FieldRef(com.bookstore.domain.Book.publicationDate), FieldRef(com.bookstore.domain.Book.language), FieldRef(com.bookstore.domain.Book.category), FieldRef(com.bookstore.domain.Book.numberOfPages), FieldRef(com.bookstore.domain.Book.format), FieldRef(com.bookstore.domain.Book.isbn), FieldRef(com.bookstore.domain.Book.shippingWeight), FieldRef(com.bookstore.domain.Book.listPrice), FieldRef(com.bookstore.domain.Book.ourPrice), FieldRef(com.bookstore.domain.Book.active), FieldRef(com.bookstore.domain.Book.description), FieldRef(com.bookstore.domain.Book.inStockNumber), FieldRef(com.bookstore.domain.Book.bookImage), FieldRef(com.bookstore.domain.Book.bookToCartItemsList), FieldRef(com.bookstore.domain.Book.cartItem)]
NRA.java: genExprNra(): projectNode name: BookToCartItem.book=Pi
NRA.java: genExprNra(): nestexpr= BookToCartItem.book=Pi
| Join
| | Alpha
| | ClassRef(Book)
| | Equals
| | | Alpha.bookId
| | | Book.id
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.cartItemId
| CartItem.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nested field name= cartItem
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.CartItem
NRA.java: processTableandFields: com.bookstore.domain.CartItem fields = [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: int qty>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>  type=ShoppingCart
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>  type=Order
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.CartItem
NRA.java: genExprNra(): com.bookstore.domain.CartItem fields= [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: genExprNra(): fields count= 7
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: int qty>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Book.cartItemId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.util.List bookToCartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.cartItemId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= shoppingCart
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = ShoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.shoppingCartId
| ShoppingCart.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Order order>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: orderId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=order
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= order
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= order
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.orderId
| Order.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.CartItem.id), FieldRef(com.bookstore.domain.CartItem.qty), FieldRef(com.bookstore.domain.CartItem.subtotal), FieldRef(com.bookstore.domain.CartItem.book), FieldRef(com.bookstore.domain.CartItem.bookToCartItemList), FieldRef(com.bookstore.domain.CartItem.shoppingCart), FieldRef(com.bookstore.domain.CartItem.order)]
NRA.java: genExprNra(): projectNode name: BookToCartItem.cartItem=Pi
NRA.java: genExprNra(): nestexpr= BookToCartItem.cartItem=Pi
| Join
| | Alpha
| | ClassRef(CartItem)
| | Equals
| | | Alpha.cartItemId
| | | CartItem.id
| List
| | id
| | qty
| | subtotal
| | NullOp
| | NullOp
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.BookToCartItem.id), FieldRef(com.bookstore.domain.BookToCartItem.book), FieldRef(com.bookstore.domain.BookToCartItem.cartItem)]
NRA.java: genExprNra(): projectNode name: Book.bookToCartItemsList=Pi
NRA.java: genExprNra(): nestexpr= Book.bookToCartItemsList=Pi
| Join
| | Alpha
| | ClassRef(BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.bookId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | NullOp
| | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| CartItem.bookId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nested field name= cartItem
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.CartItem
NRA.java: processTableandFields: com.bookstore.domain.CartItem fields = [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: int qty>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>  type=ShoppingCart
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>  type=Order
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.CartItem
NRA.java: genExprNra(): com.bookstore.domain.CartItem fields= [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: genExprNra(): fields count= 7
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: int qty>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Book.cartItemId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nested field name= book
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Book
NRA.java: processTableandFields: com.bookstore.domain.Book fields = [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String author>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publisher>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publicationDate>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String language>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String category>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int numberOfPages>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String format>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String isbn>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double shippingWeight>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double listPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double ourPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: boolean active>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String description>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int inStockNumber>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>  type=MultipartFile
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.util.List bookToCartItemsList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Book
NRA.java: genExprNra(): com.bookstore.domain.Book fields= [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 19
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String title>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String author>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publisher>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publicationDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String language>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String category>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int numberOfPages>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String format>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String isbn>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double shippingWeight>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double listPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double ourPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: boolean active>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String description>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: columnDefinition value: text

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int inStockNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Transient; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/Transient;
Construct/Utils.java: bcelActualCollectionFieldType(): Transient field= bookImage
NRA.java: genExprNra(): sfEntity=org.springframework.web.multipart.MultipartFile
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = MultipartFile
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.util.List bookToCartItemsList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.bookId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| CartItem.bookId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Book.id), FieldRef(com.bookstore.domain.Book.title), FieldRef(com.bookstore.domain.Book.author), FieldRef(com.bookstore.domain.Book.publisher), FieldRef(com.bookstore.domain.Book.publicationDate), FieldRef(com.bookstore.domain.Book.language), FieldRef(com.bookstore.domain.Book.category), FieldRef(com.bookstore.domain.Book.numberOfPages), FieldRef(com.bookstore.domain.Book.format), FieldRef(com.bookstore.domain.Book.isbn), FieldRef(com.bookstore.domain.Book.shippingWeight), FieldRef(com.bookstore.domain.Book.listPrice), FieldRef(com.bookstore.domain.Book.ourPrice), FieldRef(com.bookstore.domain.Book.active), FieldRef(com.bookstore.domain.Book.description), FieldRef(com.bookstore.domain.Book.inStockNumber), FieldRef(com.bookstore.domain.Book.bookImage), FieldRef(com.bookstore.domain.Book.bookToCartItemsList), FieldRef(com.bookstore.domain.Book.cartItem)]
NRA.java: genExprNra(): projectNode name: CartItem.book=Pi
NRA.java: genExprNra(): nestexpr= CartItem.book=Pi
| Join
| | Alpha
| | ClassRef(Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.util.List bookToCartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.cartItemId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nested field name= bookToCartItemList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: com.bookstore.domain.BookToCartItem fields = [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): com.bookstore.domain.BookToCartItem fields= [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.bookId
| Book.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.cartItemId
| CartItem.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.BookToCartItem.id), FieldRef(com.bookstore.domain.BookToCartItem.book), FieldRef(com.bookstore.domain.BookToCartItem.cartItem)]
NRA.java: genExprNra(): projectNode name: CartItem.bookToCartItemList=Pi
NRA.java: genExprNra(): nestexpr= CartItem.bookToCartItemList=Pi
| Join
| | Alpha
| | ClassRef(BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= shoppingCart
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = ShoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.shoppingCartId
| ShoppingCart.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): nested field name= shoppingCart
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.ShoppingCart
NRA.java: processTableandFields: com.bookstore.domain.ShoppingCart fields = [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>  type=User
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): com.bookstore.domain.ShoppingCart fields= [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 4
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.shoppingCartId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  userId
NRA.java: getCondFromOneToOne(): join condition = Equals
| lhs.lhs
| rhs.rhs
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.ShoppingCart.id), FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal), FieldRef(com.bookstore.domain.ShoppingCart.cartItemList), FieldRef(com.bookstore.domain.ShoppingCart.user)]
NRA.java: genExprNra(): projectNode name: CartItem.shoppingCart=Pi
NRA.java: genExprNra(): nestexpr= CartItem.shoppingCart=Pi
| Join
| | Alpha
| | ClassRef(ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Order order>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: orderId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=order
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= order
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= order
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.orderId
| Order.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nested field name= order
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Order
NRA.java: processTableandFields: com.bookstore.domain.Order fields = [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date orderDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date shippingDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String shippingMethod>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String orederStatus>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>  type=ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>  type=Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>  type=BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Order
NRA.java: genExprNra(): com.bookstore.domain.Order fields= [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date orderDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date shippingDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String shippingMethod>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String orederStatus>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.math.BigDecimal orderTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.orderId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shippingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShippingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.Payment payment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=payment
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= payment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= payment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Payment
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Payment.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Payment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= billingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| BillingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Order.id), FieldRef(com.bookstore.domain.Order.orderDate), FieldRef(com.bookstore.domain.Order.shippingDate), FieldRef(com.bookstore.domain.Order.shippingMethod), FieldRef(com.bookstore.domain.Order.orederStatus), FieldRef(com.bookstore.domain.Order.orderTotal), FieldRef(com.bookstore.domain.Order.cartItemList), FieldRef(com.bookstore.domain.Order.shippingAddress), FieldRef(com.bookstore.domain.Order.payment), FieldRef(com.bookstore.domain.Order.billingAddress), FieldRef(com.bookstore.domain.Order.user)]
NRA.java: genExprNra(): projectNode name: CartItem.order=Pi
NRA.java: genExprNra(): nestexpr= CartItem.order=Pi
| Join
| | Alpha
| | ClassRef(Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | NullOp
| | NullOp
| | NullOp
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.CartItem.id), FieldRef(com.bookstore.domain.CartItem.qty), FieldRef(com.bookstore.domain.CartItem.subtotal), FieldRef(com.bookstore.domain.CartItem.book), FieldRef(com.bookstore.domain.CartItem.bookToCartItemList), FieldRef(com.bookstore.domain.CartItem.shoppingCart), FieldRef(com.bookstore.domain.CartItem.order)]
NRA.java: genExprNra(): projectNode name: Book.cartItem=Pi
NRA.java: genExprNra(): nestexpr= Book.cartItem=Pi
| Join
| | Alpha
| | ClassRef(CartItem)
| | Equals
| | | Alpha.id
| | | CartItem.bookId
| List
| | id
| | qty
| | subtotal
| | CartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.id
| | | | | Book.cartItemId
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | NullOp
| | | | NullOp
| | CartItem.bookToCartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.cartItemId
| | | List
| | | | id
| | | | NullOp
| | | | NullOp
| | CartItem.shoppingCart=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShoppingCart)
| | | | Equals
| | | | | Alpha.shoppingCartId
| | | | | ShoppingCart.id
| | | List
| | | | id
| | | | GrandTotal
| | | | NullOp
| | | | NullOp
| | CartItem.order=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Order)
| | | | Equals
| | | | | Alpha.orderId
| | | | | Order.id
| | | List
| | | | id
| | | | orderDate
| | | | shippingDate
| | | | shippingMethod
| | | | orederStatus
| | | | orderTotal
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Book.id), FieldRef(com.bookstore.domain.Book.title), FieldRef(com.bookstore.domain.Book.author), FieldRef(com.bookstore.domain.Book.publisher), FieldRef(com.bookstore.domain.Book.publicationDate), FieldRef(com.bookstore.domain.Book.language), FieldRef(com.bookstore.domain.Book.category), FieldRef(com.bookstore.domain.Book.numberOfPages), FieldRef(com.bookstore.domain.Book.format), FieldRef(com.bookstore.domain.Book.isbn), FieldRef(com.bookstore.domain.Book.shippingWeight), FieldRef(com.bookstore.domain.Book.listPrice), FieldRef(com.bookstore.domain.Book.ourPrice), FieldRef(com.bookstore.domain.Book.active), FieldRef(com.bookstore.domain.Book.description), FieldRef(com.bookstore.domain.Book.inStockNumber), FieldRef(com.bookstore.domain.Book.bookImage), FieldRef(com.bookstore.domain.Book.bookToCartItemsList), FieldRef(com.bookstore.domain.Book.cartItem)]
NRA.java: genExprNra(): projectNode name: CartItem.book=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): repeat node
DIRRegionAnalyzer.java: constructDIR(): key : return.book
 value : 
 CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.bookToCartItemList
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=CartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.bookstore.domain.BookToCartItem
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.bookstore.domain.BookToCartItem
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [cartItemId, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [id, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = cartItemId, actual = id
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key= return.bookToCartItemList
 value= CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.cartItemId
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| ClassRef(com.bookstore.domain.BookToCartItem)
| Equals
| | Alpha.id
| | BookToCartItem.cartItemId
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nested field name= bookToCartItemList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: com.bookstore.domain.BookToCartItem fields = [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): com.bookstore.domain.BookToCartItem fields= [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.bookId
| Book.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nested field name= book
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Book
NRA.java: processTableandFields: com.bookstore.domain.Book fields = [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String author>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publisher>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publicationDate>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String language>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String category>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int numberOfPages>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String format>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String isbn>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double shippingWeight>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double listPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double ourPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: boolean active>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String description>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int inStockNumber>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>  type=MultipartFile
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.util.List bookToCartItemsList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Book
NRA.java: genExprNra(): com.bookstore.domain.Book fields= [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 19
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String title>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String author>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publisher>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publicationDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String language>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String category>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int numberOfPages>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String format>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String isbn>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double shippingWeight>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double listPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double ourPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: boolean active>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String description>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: columnDefinition value: text

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int inStockNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Transient; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/Transient;
Construct/Utils.java: bcelActualCollectionFieldType(): Transient field= bookImage
NRA.java: genExprNra(): sfEntity=org.springframework.web.multipart.MultipartFile
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = MultipartFile
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.util.List bookToCartItemsList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.bookId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nested field name= bookToCartItemsList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: com.bookstore.domain.BookToCartItem fields = [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): com.bookstore.domain.BookToCartItem fields= [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.bookId
| Book.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.cartItemId
| CartItem.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.BookToCartItem.id), FieldRef(com.bookstore.domain.BookToCartItem.book), FieldRef(com.bookstore.domain.BookToCartItem.cartItem)]
NRA.java: genExprNra(): projectNode name: Book.bookToCartItemsList=Pi
NRA.java: genExprNra(): nestexpr= Book.bookToCartItemsList=Pi
| Join
| | Alpha
| | ClassRef(BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.bookId
| List
| | id
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| CartItem.bookId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nested field name= cartItem
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.CartItem
NRA.java: processTableandFields: com.bookstore.domain.CartItem fields = [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: int qty>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>  type=ShoppingCart
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>  type=Order
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.CartItem
NRA.java: genExprNra(): com.bookstore.domain.CartItem fields= [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: genExprNra(): fields count= 7
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: int qty>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Book.cartItemId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.util.List bookToCartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.cartItemId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= shoppingCart
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = ShoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.shoppingCartId
| ShoppingCart.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Order order>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: orderId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=order
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= order
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= order
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.orderId
| Order.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.CartItem.id), FieldRef(com.bookstore.domain.CartItem.qty), FieldRef(com.bookstore.domain.CartItem.subtotal), FieldRef(com.bookstore.domain.CartItem.book), FieldRef(com.bookstore.domain.CartItem.bookToCartItemList), FieldRef(com.bookstore.domain.CartItem.shoppingCart), FieldRef(com.bookstore.domain.CartItem.order)]
NRA.java: genExprNra(): projectNode name: Book.cartItem=Pi
NRA.java: genExprNra(): nestexpr= Book.cartItem=Pi
| Join
| | Alpha
| | ClassRef(CartItem)
| | Equals
| | | Alpha.id
| | | CartItem.bookId
| List
| | id
| | qty
| | subtotal
| | NullOp
| | NullOp
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Book.id), FieldRef(com.bookstore.domain.Book.title), FieldRef(com.bookstore.domain.Book.author), FieldRef(com.bookstore.domain.Book.publisher), FieldRef(com.bookstore.domain.Book.publicationDate), FieldRef(com.bookstore.domain.Book.language), FieldRef(com.bookstore.domain.Book.category), FieldRef(com.bookstore.domain.Book.numberOfPages), FieldRef(com.bookstore.domain.Book.format), FieldRef(com.bookstore.domain.Book.isbn), FieldRef(com.bookstore.domain.Book.shippingWeight), FieldRef(com.bookstore.domain.Book.listPrice), FieldRef(com.bookstore.domain.Book.ourPrice), FieldRef(com.bookstore.domain.Book.active), FieldRef(com.bookstore.domain.Book.description), FieldRef(com.bookstore.domain.Book.inStockNumber), FieldRef(com.bookstore.domain.Book.bookImage), FieldRef(com.bookstore.domain.Book.bookToCartItemsList), FieldRef(com.bookstore.domain.Book.cartItem)]
NRA.java: genExprNra(): projectNode name: BookToCartItem.book=Pi
NRA.java: genExprNra(): nestexpr= BookToCartItem.book=Pi
| Join
| | Alpha
| | ClassRef(Book)
| | Equals
| | | Alpha.bookId
| | | Book.id
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | NullOp
| | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.cartItemId
| CartItem.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nested field name= cartItem
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.CartItem
NRA.java: processTableandFields: com.bookstore.domain.CartItem fields = [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: int qty>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>  type=ShoppingCart
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>  type=Order
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.CartItem
NRA.java: genExprNra(): com.bookstore.domain.CartItem fields= [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: genExprNra(): fields count= 7
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: int qty>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Book.cartItemId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nested field name= book
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Book
NRA.java: processTableandFields: com.bookstore.domain.Book fields = [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String author>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publisher>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publicationDate>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String language>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String category>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int numberOfPages>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String format>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String isbn>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double shippingWeight>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double listPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double ourPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: boolean active>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String description>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int inStockNumber>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>  type=MultipartFile
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.util.List bookToCartItemsList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Book
NRA.java: genExprNra(): com.bookstore.domain.Book fields= [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 19
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String title>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String author>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publisher>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publicationDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String language>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String category>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int numberOfPages>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String format>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String isbn>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double shippingWeight>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double listPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double ourPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: boolean active>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String description>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: columnDefinition value: text

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int inStockNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Transient; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/Transient;
Construct/Utils.java: bcelActualCollectionFieldType(): Transient field= bookImage
NRA.java: genExprNra(): sfEntity=org.springframework.web.multipart.MultipartFile
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = MultipartFile
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.util.List bookToCartItemsList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.bookId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| CartItem.bookId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Book.id), FieldRef(com.bookstore.domain.Book.title), FieldRef(com.bookstore.domain.Book.author), FieldRef(com.bookstore.domain.Book.publisher), FieldRef(com.bookstore.domain.Book.publicationDate), FieldRef(com.bookstore.domain.Book.language), FieldRef(com.bookstore.domain.Book.category), FieldRef(com.bookstore.domain.Book.numberOfPages), FieldRef(com.bookstore.domain.Book.format), FieldRef(com.bookstore.domain.Book.isbn), FieldRef(com.bookstore.domain.Book.shippingWeight), FieldRef(com.bookstore.domain.Book.listPrice), FieldRef(com.bookstore.domain.Book.ourPrice), FieldRef(com.bookstore.domain.Book.active), FieldRef(com.bookstore.domain.Book.description), FieldRef(com.bookstore.domain.Book.inStockNumber), FieldRef(com.bookstore.domain.Book.bookImage), FieldRef(com.bookstore.domain.Book.bookToCartItemsList), FieldRef(com.bookstore.domain.Book.cartItem)]
NRA.java: genExprNra(): projectNode name: CartItem.book=Pi
NRA.java: genExprNra(): nestexpr= CartItem.book=Pi
| Join
| | Alpha
| | ClassRef(Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.util.List bookToCartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.cartItemId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nested field name= bookToCartItemList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: com.bookstore.domain.BookToCartItem fields = [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): com.bookstore.domain.BookToCartItem fields= [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.bookId
| Book.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.cartItemId
| CartItem.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.BookToCartItem.id), FieldRef(com.bookstore.domain.BookToCartItem.book), FieldRef(com.bookstore.domain.BookToCartItem.cartItem)]
NRA.java: genExprNra(): projectNode name: CartItem.bookToCartItemList=Pi
NRA.java: genExprNra(): nestexpr= CartItem.bookToCartItemList=Pi
| Join
| | Alpha
| | ClassRef(BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= shoppingCart
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = ShoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.shoppingCartId
| ShoppingCart.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): nested field name= shoppingCart
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.ShoppingCart
NRA.java: processTableandFields: com.bookstore.domain.ShoppingCart fields = [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>  type=User
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): com.bookstore.domain.ShoppingCart fields= [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 4
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.shoppingCartId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  userId
NRA.java: getCondFromOneToOne(): join condition = Equals
| lhs.lhs
| rhs.rhs
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.ShoppingCart.id), FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal), FieldRef(com.bookstore.domain.ShoppingCart.cartItemList), FieldRef(com.bookstore.domain.ShoppingCart.user)]
NRA.java: genExprNra(): projectNode name: CartItem.shoppingCart=Pi
NRA.java: genExprNra(): nestexpr= CartItem.shoppingCart=Pi
| Join
| | Alpha
| | ClassRef(ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Order order>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: orderId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=order
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= order
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= order
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.orderId
| Order.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nested field name= order
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Order
NRA.java: processTableandFields: com.bookstore.domain.Order fields = [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date orderDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date shippingDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String shippingMethod>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String orederStatus>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>  type=ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>  type=Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>  type=BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Order
NRA.java: genExprNra(): com.bookstore.domain.Order fields= [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date orderDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date shippingDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String shippingMethod>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String orederStatus>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.math.BigDecimal orderTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.orderId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shippingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShippingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.Payment payment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=payment
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= payment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= payment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Payment
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Payment.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Payment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= billingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| BillingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Order.id), FieldRef(com.bookstore.domain.Order.orderDate), FieldRef(com.bookstore.domain.Order.shippingDate), FieldRef(com.bookstore.domain.Order.shippingMethod), FieldRef(com.bookstore.domain.Order.orederStatus), FieldRef(com.bookstore.domain.Order.orderTotal), FieldRef(com.bookstore.domain.Order.cartItemList), FieldRef(com.bookstore.domain.Order.shippingAddress), FieldRef(com.bookstore.domain.Order.payment), FieldRef(com.bookstore.domain.Order.billingAddress), FieldRef(com.bookstore.domain.Order.user)]
NRA.java: genExprNra(): projectNode name: CartItem.order=Pi
NRA.java: genExprNra(): nestexpr= CartItem.order=Pi
| Join
| | Alpha
| | ClassRef(Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | NullOp
| | NullOp
| | NullOp
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.CartItem.id), FieldRef(com.bookstore.domain.CartItem.qty), FieldRef(com.bookstore.domain.CartItem.subtotal), FieldRef(com.bookstore.domain.CartItem.book), FieldRef(com.bookstore.domain.CartItem.bookToCartItemList), FieldRef(com.bookstore.domain.CartItem.shoppingCart), FieldRef(com.bookstore.domain.CartItem.order)]
NRA.java: genExprNra(): projectNode name: BookToCartItem.cartItem=Pi
NRA.java: genExprNra(): nestexpr= BookToCartItem.cartItem=Pi
| Join
| | Alpha
| | ClassRef(CartItem)
| | Equals
| | | Alpha.cartItemId
| | | CartItem.id
| List
| | id
| | qty
| | subtotal
| | CartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.id
| | | | | Book.cartItemId
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | NullOp
| | | | NullOp
| | CartItem.bookToCartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.cartItemId
| | | List
| | | | id
| | | | NullOp
| | | | NullOp
| | CartItem.shoppingCart=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShoppingCart)
| | | | Equals
| | | | | Alpha.shoppingCartId
| | | | | ShoppingCart.id
| | | List
| | | | id
| | | | GrandTotal
| | | | NullOp
| | | | NullOp
| | CartItem.order=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Order)
| | | | Equals
| | | | | Alpha.orderId
| | | | | Order.id
| | | List
| | | | id
| | | | orderDate
| | | | shippingDate
| | | | shippingMethod
| | | | orederStatus
| | | | orderTotal
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.BookToCartItem.id), FieldRef(com.bookstore.domain.BookToCartItem.book), FieldRef(com.bookstore.domain.BookToCartItem.cartItem)]
NRA.java: genExprNra(): projectNode name: CartItem.bookToCartItemList=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): repeat node
DIRRegionAnalyzer.java: constructDIR(): key : return.bookToCartItemList
 value : 
 CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=CartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= shoppingCart
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.bookstore.domain.ShoppingCart
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [cartItemId, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [id, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = cartItemId, actual = id
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key= return.shoppingCart
 value= CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.shoppingCartId
| ShoppingCart.id
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| ClassRef(com.bookstore.domain.ShoppingCart)
| Equals
| | Alpha.shoppingCartId
| | ShoppingCart.id
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): nested field name= shoppingCart
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.ShoppingCart
NRA.java: processTableandFields: com.bookstore.domain.ShoppingCart fields = [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>  type=User
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): com.bookstore.domain.ShoppingCart fields= [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 4
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.shoppingCartId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nested field name= cartItemList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.CartItem
NRA.java: processTableandFields: com.bookstore.domain.CartItem fields = [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: int qty>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>  type=ShoppingCart
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>  type=Order
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.CartItem
NRA.java: genExprNra(): com.bookstore.domain.CartItem fields= [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: genExprNra(): fields count= 7
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: int qty>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Book.cartItemId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nested field name= book
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Book
NRA.java: processTableandFields: com.bookstore.domain.Book fields = [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String author>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publisher>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publicationDate>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String language>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String category>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int numberOfPages>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String format>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String isbn>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double shippingWeight>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double listPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double ourPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: boolean active>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String description>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int inStockNumber>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>  type=MultipartFile
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.util.List bookToCartItemsList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Book
NRA.java: genExprNra(): com.bookstore.domain.Book fields= [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 19
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String title>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String author>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publisher>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publicationDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String language>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String category>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int numberOfPages>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String format>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String isbn>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double shippingWeight>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double listPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double ourPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: boolean active>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String description>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: columnDefinition value: text

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int inStockNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Transient; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/Transient;
Construct/Utils.java: bcelActualCollectionFieldType(): Transient field= bookImage
NRA.java: genExprNra(): sfEntity=org.springframework.web.multipart.MultipartFile
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = MultipartFile
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.util.List bookToCartItemsList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.bookId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| CartItem.bookId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Book.id), FieldRef(com.bookstore.domain.Book.title), FieldRef(com.bookstore.domain.Book.author), FieldRef(com.bookstore.domain.Book.publisher), FieldRef(com.bookstore.domain.Book.publicationDate), FieldRef(com.bookstore.domain.Book.language), FieldRef(com.bookstore.domain.Book.category), FieldRef(com.bookstore.domain.Book.numberOfPages), FieldRef(com.bookstore.domain.Book.format), FieldRef(com.bookstore.domain.Book.isbn), FieldRef(com.bookstore.domain.Book.shippingWeight), FieldRef(com.bookstore.domain.Book.listPrice), FieldRef(com.bookstore.domain.Book.ourPrice), FieldRef(com.bookstore.domain.Book.active), FieldRef(com.bookstore.domain.Book.description), FieldRef(com.bookstore.domain.Book.inStockNumber), FieldRef(com.bookstore.domain.Book.bookImage), FieldRef(com.bookstore.domain.Book.bookToCartItemsList), FieldRef(com.bookstore.domain.Book.cartItem)]
NRA.java: genExprNra(): projectNode name: CartItem.book=Pi
NRA.java: genExprNra(): nestexpr= CartItem.book=Pi
| Join
| | Alpha
| | ClassRef(Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.util.List bookToCartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.cartItemId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nested field name= bookToCartItemList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: com.bookstore.domain.BookToCartItem fields = [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): com.bookstore.domain.BookToCartItem fields= [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.bookId
| Book.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.cartItemId
| CartItem.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.BookToCartItem.id), FieldRef(com.bookstore.domain.BookToCartItem.book), FieldRef(com.bookstore.domain.BookToCartItem.cartItem)]
NRA.java: genExprNra(): projectNode name: CartItem.bookToCartItemList=Pi
NRA.java: genExprNra(): nestexpr= CartItem.bookToCartItemList=Pi
| Join
| | Alpha
| | ClassRef(BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= shoppingCart
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = ShoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.shoppingCartId
| ShoppingCart.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): nested field name= shoppingCart
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.ShoppingCart
NRA.java: processTableandFields: com.bookstore.domain.ShoppingCart fields = [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>  type=User
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): com.bookstore.domain.ShoppingCart fields= [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 4
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.shoppingCartId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  userId
NRA.java: getCondFromOneToOne(): join condition = Equals
| lhs.lhs
| rhs.rhs
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.ShoppingCart.id), FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal), FieldRef(com.bookstore.domain.ShoppingCart.cartItemList), FieldRef(com.bookstore.domain.ShoppingCart.user)]
NRA.java: genExprNra(): projectNode name: CartItem.shoppingCart=Pi
NRA.java: genExprNra(): nestexpr= CartItem.shoppingCart=Pi
| Join
| | Alpha
| | ClassRef(ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Order order>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: orderId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=order
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= order
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= order
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.orderId
| Order.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nested field name= order
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Order
NRA.java: processTableandFields: com.bookstore.domain.Order fields = [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date orderDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date shippingDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String shippingMethod>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String orederStatus>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>  type=ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>  type=Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>  type=BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Order
NRA.java: genExprNra(): com.bookstore.domain.Order fields= [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date orderDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date shippingDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String shippingMethod>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String orederStatus>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.math.BigDecimal orderTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.orderId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shippingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShippingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.Payment payment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=payment
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= payment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= payment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Payment
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Payment.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Payment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= billingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| BillingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Order.id), FieldRef(com.bookstore.domain.Order.orderDate), FieldRef(com.bookstore.domain.Order.shippingDate), FieldRef(com.bookstore.domain.Order.shippingMethod), FieldRef(com.bookstore.domain.Order.orederStatus), FieldRef(com.bookstore.domain.Order.orderTotal), FieldRef(com.bookstore.domain.Order.cartItemList), FieldRef(com.bookstore.domain.Order.shippingAddress), FieldRef(com.bookstore.domain.Order.payment), FieldRef(com.bookstore.domain.Order.billingAddress), FieldRef(com.bookstore.domain.Order.user)]
NRA.java: genExprNra(): projectNode name: CartItem.order=Pi
NRA.java: genExprNra(): nestexpr= CartItem.order=Pi
| Join
| | Alpha
| | ClassRef(Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | NullOp
| | NullOp
| | NullOp
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.CartItem.id), FieldRef(com.bookstore.domain.CartItem.qty), FieldRef(com.bookstore.domain.CartItem.subtotal), FieldRef(com.bookstore.domain.CartItem.book), FieldRef(com.bookstore.domain.CartItem.bookToCartItemList), FieldRef(com.bookstore.domain.CartItem.shoppingCart), FieldRef(com.bookstore.domain.CartItem.order)]
NRA.java: genExprNra(): projectNode name: ShoppingCart.cartItemList=Pi
NRA.java: genExprNra(): nestexpr= ShoppingCart.cartItemList=Pi
| Join
| | Alpha
| | ClassRef(CartItem)
| | Equals
| | | Alpha.id
| | | CartItem.shoppingCartId
| List
| | id
| | qty
| | subtotal
| | CartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.id
| | | | | Book.cartItemId
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | NullOp
| | | | NullOp
| | CartItem.bookToCartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.cartItemId
| | | List
| | | | id
| | | | NullOp
| | | | NullOp
| | CartItem.shoppingCart=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShoppingCart)
| | | | Equals
| | | | | Alpha.shoppingCartId
| | | | | ShoppingCart.id
| | | List
| | | | id
| | | | GrandTotal
| | | | NullOp
| | | | NullOp
| | CartItem.order=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Order)
| | | | Equals
| | | | | Alpha.orderId
| | | | | Order.id
| | | List
| | | | id
| | | | orderDate
| | | | shippingDate
| | | | shippingMethod
| | | | orederStatus
| | | | orderTotal
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  userId
NRA.java: getCondFromOneToOne(): join condition = Equals
| lhs.lhs
| rhs.rhs
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nested field name= user
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.User
NRA.java: processTableandFields: com.bookstore.domain.User fields = [<com.bookstore.domain.User: java.lang.Long id>, <com.bookstore.domain.User: java.lang.String username>, <com.bookstore.domain.User: java.lang.String password>, <com.bookstore.domain.User: java.lang.String firstName>, <com.bookstore.domain.User: java.lang.String lastName>, <com.bookstore.domain.User: java.lang.String email>, <com.bookstore.domain.User: java.lang.String phone>, <com.bookstore.domain.User: boolean enabled>, <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userOrderList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String firstName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String phone>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: boolean enabled>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>  type=ShoppingCart
NRA.java: getCondFromOneToOne(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  userId
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.UserShipping
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.util.List userShippingList>  type=UserShipping
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.UserShipping
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.Order
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.util.List userOrderList>  type=Order
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.Order
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.UserPayment
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.util.List userPaymentList>  type=UserPayment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.UserPayment
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.security.UserRole
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.util.Set userRoles>  type=UserRole
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.security.UserRole
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.User
NRA.java: genExprNra(): com.bookstore.domain.User fields= [<com.bookstore.domain.User: java.lang.Long id>, <com.bookstore.domain.User: java.lang.String username>, <com.bookstore.domain.User: java.lang.String password>, <com.bookstore.domain.User: java.lang.String firstName>, <com.bookstore.domain.User: java.lang.String lastName>, <com.bookstore.domain.User: java.lang.String email>, <com.bookstore.domain.User: java.lang.String phone>, <com.bookstore.domain.User: boolean enabled>, <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userOrderList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
NRA.java: genExprNra(): fields count= 13
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: id
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String username>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String password>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String firstName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String phone>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: boolean enabled>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shoppingCart
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = ShoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getCondFromOneToOne(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  userId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShoppingCart.userId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): nested field name= shoppingCart
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.ShoppingCart
NRA.java: processTableandFields: com.bookstore.domain.ShoppingCart fields = [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>  type=User
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): com.bookstore.domain.ShoppingCart fields= [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 4
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.shoppingCartId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  userId
NRA.java: getCondFromOneToOne(): join condition = Equals
| lhs.lhs
| rhs.rhs
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.ShoppingCart.id), FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal), FieldRef(com.bookstore.domain.ShoppingCart.cartItemList), FieldRef(com.bookstore.domain.ShoppingCart.user)]
NRA.java: genExprNra(): projectNode name: User.shoppingCart=Pi
NRA.java: genExprNra(): nestexpr= User.shoppingCart=Pi
| Join
| | Alpha
| | ClassRef(ShoppingCart)
| | Equals
| | | Alpha.id
| | | ShoppingCart.userId
| List
| | id
| | GrandTotal
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userShippingList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userShippingList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userShippingList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserShipping
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = UserShipping
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| UserShipping.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserShipping
NRA.java: genExprNra(): nested field name= userShippingList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.UserShipping
NRA.java: processTableandFields: com.bookstore.domain.UserShipping fields = [<com.bookstore.domain.UserShipping: java.lang.Long id>, <com.bookstore.domain.UserShipping: java.lang.String userShippingName>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCity>, <com.bookstore.domain.UserShipping: java.lang.String userShippingState>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>, <com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>, <com.bookstore.domain.UserShipping: boolean userShippingDefault>, <com.bookstore.domain.UserShipping: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingCity>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingState>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: boolean userShippingDefault>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.UserShipping
NRA.java: genExprNra(): com.bookstore.domain.UserShipping fields= [<com.bookstore.domain.UserShipping: java.lang.Long id>, <com.bookstore.domain.UserShipping: java.lang.String userShippingName>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCity>, <com.bookstore.domain.UserShipping: java.lang.String userShippingState>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>, <com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>, <com.bookstore.domain.UserShipping: boolean userShippingDefault>, <com.bookstore.domain.UserShipping: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 10
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingCity>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingState>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: boolean userShippingDefault>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.UserShipping
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingStreet1
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingStreet2
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingCity
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingState
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingCountry
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingZipcode
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean userShippingDefault
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = UserShipping
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.UserShipping.id), FieldRef(com.bookstore.domain.UserShipping.userShippingName), FieldRef(com.bookstore.domain.UserShipping.userShippingStreet1), FieldRef(com.bookstore.domain.UserShipping.userShippingStreet2), FieldRef(com.bookstore.domain.UserShipping.userShippingCity), FieldRef(com.bookstore.domain.UserShipping.userShippingState), FieldRef(com.bookstore.domain.UserShipping.userShippingCountry), FieldRef(com.bookstore.domain.UserShipping.userShippingZipcode), FieldRef(com.bookstore.domain.UserShipping.userShippingDefault), FieldRef(com.bookstore.domain.UserShipping.user)]
NRA.java: genExprNra(): projectNode name: User.userShippingList=Pi
NRA.java: genExprNra(): nestexpr= User.userShippingList=Pi
| Join
| | Alpha
| | ClassRef(UserShipping)
| | Equals
| | | Alpha.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userOrderList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userOrderList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userOrderList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userOrderList [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Order.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nested field name= userOrderList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Order
NRA.java: processTableandFields: com.bookstore.domain.Order fields = [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date orderDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date shippingDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String shippingMethod>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String orederStatus>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>  type=ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>  type=Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>  type=BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Order
NRA.java: genExprNra(): com.bookstore.domain.Order fields= [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date orderDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date shippingDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String shippingMethod>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String orederStatus>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.math.BigDecimal orderTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.orderId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shippingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShippingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.Payment payment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=payment
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= payment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= payment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Payment
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Payment.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Payment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= billingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| BillingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Order.id), FieldRef(com.bookstore.domain.Order.orderDate), FieldRef(com.bookstore.domain.Order.shippingDate), FieldRef(com.bookstore.domain.Order.shippingMethod), FieldRef(com.bookstore.domain.Order.orederStatus), FieldRef(com.bookstore.domain.Order.orderTotal), FieldRef(com.bookstore.domain.Order.cartItemList), FieldRef(com.bookstore.domain.Order.shippingAddress), FieldRef(com.bookstore.domain.Order.payment), FieldRef(com.bookstore.domain.Order.billingAddress), FieldRef(com.bookstore.domain.Order.user)]
NRA.java: genExprNra(): projectNode name: User.userOrderList=Pi
NRA.java: genExprNra(): nestexpr= User.userOrderList=Pi
| Join
| | Alpha
| | ClassRef(Order)
| | Equals
| | | Alpha.id
| | | Order.user_id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | NullOp
| | NullOp
| | NullOp
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userPaymentList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userPaymentList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userPaymentList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userOrderList [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserPayment
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = UserPayment
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| UserPayment.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserPayment
NRA.java: genExprNra(): nested field name= userPaymentList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.UserPayment
NRA.java: processTableandFields: com.bookstore.domain.UserPayment fields = [<com.bookstore.domain.UserPayment: java.lang.Long id>, <com.bookstore.domain.UserPayment: java.lang.String type>, <com.bookstore.domain.UserPayment: java.lang.String cardName>, <com.bookstore.domain.UserPayment: java.lang.String cardNumber>, <com.bookstore.domain.UserPayment: int expiryMonth>, <com.bookstore.domain.UserPayment: int expiryYear>, <com.bookstore.domain.UserPayment: int cvc>, <com.bookstore.domain.UserPayment: java.lang.String holderName>, <com.bookstore.domain.UserPayment: boolean defaultPayment>, <com.bookstore.domain.UserPayment: com.bookstore.domain.User user>, <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>]
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: java.lang.String type>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: java.lang.String cardName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: java.lang.String cardNumber>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: int expiryMonth>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: int expiryYear>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: int cvc>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: java.lang.String holderName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: boolean defaultPayment>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>  type=UserBilling
NRA.java: getCondFromOneToOne(): mappedBy= userPayment
NRA.java: getJoinedColumn(): joined Column value=  userPayment_id
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.UserPayment
NRA.java: genExprNra(): com.bookstore.domain.UserPayment fields= [<com.bookstore.domain.UserPayment: java.lang.Long id>, <com.bookstore.domain.UserPayment: java.lang.String type>, <com.bookstore.domain.UserPayment: java.lang.String cardName>, <com.bookstore.domain.UserPayment: java.lang.String cardNumber>, <com.bookstore.domain.UserPayment: int expiryMonth>, <com.bookstore.domain.UserPayment: int expiryYear>, <com.bookstore.domain.UserPayment: int cvc>, <com.bookstore.domain.UserPayment: java.lang.String holderName>, <com.bookstore.domain.UserPayment: boolean defaultPayment>, <com.bookstore.domain.UserPayment: com.bookstore.domain.User user>, <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>]
NRA.java: genExprNra(): fields count= 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String type>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String cardName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String cardNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int expiryMonth>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int expiryYear>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int cvc>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String holderName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: boolean defaultPayment>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.UserPayment
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String type
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryMonth
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryYear
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int cvc
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String holderName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean defaultPayment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = UserPayment
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: userPayment

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userBilling_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=userBilling
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.UserPayment
 fieldName= userBilling
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String type
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryMonth
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryYear
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int cvc
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String holderName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean defaultPayment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.UserBilling userBilling [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= userBilling
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserBilling
NRA.java: genExprNra(): baseclass = UserPayment
NRA.java: genExprNra(): fieldclass = UserBilling
NRA.java: getJoinedColumn(): joined Column value=  userBilling_id
NRA.java: getCondFromOneToOne(): mappedBy= userPayment
NRA.java: getJoinedColumn(): joined Column value=  userPayment_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| UserBilling.userPayment_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: userPayment

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userBilling_id

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserBilling
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.UserPayment.id), FieldRef(com.bookstore.domain.UserPayment.type), FieldRef(com.bookstore.domain.UserPayment.cardName), FieldRef(com.bookstore.domain.UserPayment.cardNumber), FieldRef(com.bookstore.domain.UserPayment.expiryMonth), FieldRef(com.bookstore.domain.UserPayment.expiryYear), FieldRef(com.bookstore.domain.UserPayment.cvc), FieldRef(com.bookstore.domain.UserPayment.holderName), FieldRef(com.bookstore.domain.UserPayment.defaultPayment), FieldRef(com.bookstore.domain.UserPayment.user), FieldRef(com.bookstore.domain.UserPayment.userBilling)]
NRA.java: genExprNra(): projectNode name: User.userPaymentList=Pi
NRA.java: genExprNra(): nestexpr= User.userPaymentList=Pi
| Join
| | Alpha
| | ClassRef(UserPayment)
| | Equals
| | | Alpha.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.Set userRoles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userRoles
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userRoles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userOrderList [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set userRoles [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = UserRole
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| UserRole.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): nested field name= userRoles
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.security.UserRole
NRA.java: processTableandFields: com.bookstore.domain.security.UserRole fields = [<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>]
NRA.java: processTableandFields: sf <com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: processTableandFields: sf <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>  type=Role
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: role_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): com.bookstore.domain.security.UserRole fields= [<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToOne; num elems: 1 elems: 
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.security.UserRole
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long userRoleId [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = UserRole
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.userRoleId
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToOne; num elems: 1 elems: 
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=role
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.security.UserRole
 fieldName= role
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long userRoleId [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.security.Role role [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= role
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.security.Role
NRA.java: genExprNra(): baseclass = UserRole
NRA.java: genExprNra(): fieldclass = Role
NRA.java: getJoinedColumn(): joined Column value=  role_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: role_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.role_id
| Role.userRoleId
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.security.Role
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.security.UserRole.userRoleId), FieldRef(com.bookstore.domain.security.UserRole.user), FieldRef(com.bookstore.domain.security.UserRole.role)]
NRA.java: genExprNra(): projectNode name: User.userRoles=Pi
NRA.java: genExprNra(): nestexpr= User.userRoles=Pi
| Join
| | Alpha
| | ClassRef(UserRole)
| | Equals
| | | Alpha.id
| | | UserRole.user_id
| List
| | userRoleId
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.User.id), FieldRef(com.bookstore.domain.User.username), FieldRef(com.bookstore.domain.User.password), FieldRef(com.bookstore.domain.User.firstName), FieldRef(com.bookstore.domain.User.lastName), FieldRef(com.bookstore.domain.User.email), FieldRef(com.bookstore.domain.User.phone), FieldRef(com.bookstore.domain.User.enabled), FieldRef(com.bookstore.domain.User.shoppingCart), FieldRef(com.bookstore.domain.User.userShippingList), FieldRef(com.bookstore.domain.User.userOrderList), FieldRef(com.bookstore.domain.User.userPaymentList), FieldRef(com.bookstore.domain.User.userRoles)]
NRA.java: genExprNra(): projectNode name: ShoppingCart.user=Pi
NRA.java: genExprNra(): nestexpr= ShoppingCart.user=Pi
| Join
| | Alpha
| | ClassRef(User)
| | Equals
| | | lhs.lhs
| | | rhs.rhs
| List
| | id
| | username
| | password
| | firstName
| | lastName
| | email
| | phone
| | enabled
| | User.shoppingCart=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShoppingCart)
| | | | Equals
| | | | | Alpha.id
| | | | | ShoppingCart.userId
| | | List
| | | | id
| | | | GrandTotal
| | | | NullOp
| | | | NullOp
| | User.userShippingList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(UserShipping)
| | | | Equals
| | | | | Alpha.id
| | | | | UserShipping.user_id
| | | List
| | | | id
| | | | userShippingName
| | | | userShippingStreet1
| | | | userShippingStreet2
| | | | userShippingCity
| | | | userShippingState
| | | | userShippingCountry
| | | | userShippingZipcode
| | | | userShippingDefault
| | | | NullOp
| | User.userOrderList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Order)
| | | | Equals
| | | | | Alpha.id
| | | | | Order.user_id
| | | List
| | | | id
| | | | orderDate
| | | | shippingDate
| | | | shippingMethod
| | | | orederStatus
| | | | orderTotal
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | User.userPaymentList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(UserPayment)
| | | | Equals
| | | | | Alpha.id
| | | | | UserPayment.user_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | defaultPayment
| | | | NullOp
| | | | NullOp
| | User.userRoles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(UserRole)
| | | | Equals
| | | | | Alpha.id
| | | | | UserRole.user_id
| | | List
| | | | userRoleId
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.ShoppingCart.id), FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal), FieldRef(com.bookstore.domain.ShoppingCart.cartItemList), FieldRef(com.bookstore.domain.ShoppingCart.user)]
NRA.java: genExprNra(): projectNode name: CartItem.shoppingCart=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): repeat node
DIRRegionAnalyzer.java: constructDIR(): key : return.shoppingCart
 value : 
 CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.order
DIRRegionAnalyzer.java: constructDIR(): baseEntity NAme=CartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= order
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= order
DIRRegionAnalyzer.java: constructDIR(): nestedField Entity= com.bookstore.domain.Order
DIRRegionAnalyzer.java: constructDIR(): From soot typeclass= com.bookstore.domain.Order
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [cartItemId, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [id, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = cartItemId, actual = id
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key= return.order
 value= CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.orderId
| Order.id
DIRRegionAnalyzer.java: constructDIR(): relExp = Join
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| ClassRef(com.bookstore.domain.Order)
| Equals
| | Alpha.orderId
| | Order.id
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nested field name= order
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Order
NRA.java: processTableandFields: com.bookstore.domain.Order fields = [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date orderDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date shippingDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String shippingMethod>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String orederStatus>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>  type=ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>  type=Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>  type=BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Order
NRA.java: genExprNra(): com.bookstore.domain.Order fields= [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date orderDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date shippingDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String shippingMethod>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String orederStatus>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.math.BigDecimal orderTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.orderId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nested field name= cartItemList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.CartItem
NRA.java: processTableandFields: com.bookstore.domain.CartItem fields = [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: int qty>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>  type=ShoppingCart
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: processTableandFields: sf <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>  type=Order
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.CartItem
NRA.java: genExprNra(): com.bookstore.domain.CartItem fields= [<com.bookstore.domain.CartItem: java.lang.Long id>, <com.bookstore.domain.CartItem: int qty>, <com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>, <com.bookstore.domain.CartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.CartItem: java.util.List bookToCartItemList>, <com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.CartItem: com.bookstore.domain.Order order>]
NRA.java: genExprNra(): fields count= 7
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: int qty>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.math.BigDecimal subtotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Book.cartItemId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nested field name= book
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Book
NRA.java: processTableandFields: com.bookstore.domain.Book fields = [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String title>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String author>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publisher>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String publicationDate>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String language>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String category>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int numberOfPages>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String format>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String isbn>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double shippingWeight>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double listPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: double ourPrice>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: boolean active>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.lang.String description>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: int inStockNumber>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>  type=MultipartFile
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: java.util.List bookToCartItemsList>  type=BookToCartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.BookToCartItem
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: processTableandFields: sf <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Book
NRA.java: genExprNra(): com.bookstore.domain.Book fields= [<com.bookstore.domain.Book: java.lang.Long id>, <com.bookstore.domain.Book: java.lang.String title>, <com.bookstore.domain.Book: java.lang.String author>, <com.bookstore.domain.Book: java.lang.String publisher>, <com.bookstore.domain.Book: java.lang.String publicationDate>, <com.bookstore.domain.Book: java.lang.String language>, <com.bookstore.domain.Book: java.lang.String category>, <com.bookstore.domain.Book: int numberOfPages>, <com.bookstore.domain.Book: java.lang.String format>, <com.bookstore.domain.Book: java.lang.String isbn>, <com.bookstore.domain.Book: double shippingWeight>, <com.bookstore.domain.Book: double listPrice>, <com.bookstore.domain.Book: double ourPrice>, <com.bookstore.domain.Book: boolean active>, <com.bookstore.domain.Book: java.lang.String description>, <com.bookstore.domain.Book: int inStockNumber>, <com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>, <com.bookstore.domain.Book: java.util.List bookToCartItemsList>, <com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 19
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String title>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String author>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publisher>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String publicationDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String language>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String category>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int numberOfPages>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String format>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String isbn>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double shippingWeight>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double listPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: double ourPrice>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: boolean active>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.lang.String description>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 1 elems: 
Annotation Element: kind: s name: columnDefinition value: text

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: int inStockNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: org.springframework.web.multipart.MultipartFile bookImage>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Transient; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookImage
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/Transient;
Construct/Utils.java: bcelActualCollectionFieldType(): Transient field= bookImage
NRA.java: genExprNra(): sfEntity=org.springframework.web.multipart.MultipartFile
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = MultipartFile
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: java.util.List bookToCartItemsList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: book

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= bookToCartItemsList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.bookId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Book: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Book
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String title
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String author
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publisher
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String publicationDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String language
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String category
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int numberOfPages
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String format
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String isbn
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double shippingWeight
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double listPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private double ourPrice
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean active
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String description [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int inStockNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private org.springframework.web.multipart.MultipartFile bookImage [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemsList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Book
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToOne(): mappedBy= book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| CartItem.bookId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: book

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Book.id), FieldRef(com.bookstore.domain.Book.title), FieldRef(com.bookstore.domain.Book.author), FieldRef(com.bookstore.domain.Book.publisher), FieldRef(com.bookstore.domain.Book.publicationDate), FieldRef(com.bookstore.domain.Book.language), FieldRef(com.bookstore.domain.Book.category), FieldRef(com.bookstore.domain.Book.numberOfPages), FieldRef(com.bookstore.domain.Book.format), FieldRef(com.bookstore.domain.Book.isbn), FieldRef(com.bookstore.domain.Book.shippingWeight), FieldRef(com.bookstore.domain.Book.listPrice), FieldRef(com.bookstore.domain.Book.ourPrice), FieldRef(com.bookstore.domain.Book.active), FieldRef(com.bookstore.domain.Book.description), FieldRef(com.bookstore.domain.Book.inStockNumber), FieldRef(com.bookstore.domain.Book.bookImage), FieldRef(com.bookstore.domain.Book.bookToCartItemsList), FieldRef(com.bookstore.domain.Book.cartItem)]
NRA.java: genExprNra(): projectNode name: CartItem.book=Pi
NRA.java: genExprNra(): nestexpr= CartItem.book=Pi
| Join
| | Alpha
| | ClassRef(Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: java.util.List bookToCartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: cartItem

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= bookToCartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = BookToCartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= cartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| BookToCartItem.cartItemId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): nested field name= bookToCartItemList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.BookToCartItem
NRA.java: processTableandFields: com.bookstore.domain.BookToCartItem fields = [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>  type=Book
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: processTableandFields: sf <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>  type=CartItem
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.BookToCartItem
NRA.java: genExprNra(): com.bookstore.domain.BookToCartItem fields= [<com.bookstore.domain.BookToCartItem: java.lang.Long id>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>, <com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.Book book>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: bookId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=book
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= book
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= book
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Book
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = Book
NRA.java: getJoinedColumn(): joined Column value=  bookId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: bookId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.bookId
| Book.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Book
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BookToCartItem: com.bookstore.domain.CartItem cartItem>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: cartItemId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BookToCartItem
 fieldName= cartItem
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.CartItem cartItem [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= cartItem
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = BookToCartItem
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinedColumn(): joined Column value=  cartItemId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: cartItemId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.cartItemId
| CartItem.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.BookToCartItem.id), FieldRef(com.bookstore.domain.BookToCartItem.book), FieldRef(com.bookstore.domain.BookToCartItem.cartItem)]
NRA.java: genExprNra(): projectNode name: CartItem.bookToCartItemList=Pi
NRA.java: genExprNra(): nestexpr= CartItem.bookToCartItemList=Pi
| Join
| | Alpha
| | ClassRef(BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= shoppingCart
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = ShoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: shoppingCartId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.shoppingCartId
| ShoppingCart.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): nested field name= shoppingCart
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.ShoppingCart
NRA.java: processTableandFields: com.bookstore.domain.ShoppingCart fields = [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>  type=User
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): com.bookstore.domain.ShoppingCart fields= [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 4
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.shoppingCartId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  userId
NRA.java: getCondFromOneToOne(): join condition = Equals
| lhs.lhs
| rhs.rhs
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.ShoppingCart.id), FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal), FieldRef(com.bookstore.domain.ShoppingCart.cartItemList), FieldRef(com.bookstore.domain.ShoppingCart.user)]
NRA.java: genExprNra(): projectNode name: CartItem.shoppingCart=Pi
NRA.java: genExprNra(): nestexpr= CartItem.shoppingCart=Pi
| Join
| | Alpha
| | ClassRef(ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.CartItem: com.bookstore.domain.Order order>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: orderId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=order
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.CartItem
 fieldName= order
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int qty
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal subtotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Book book [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List bookToCartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/BookToCartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= order
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = CartItem
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: orderId]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.orderId
| Order.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nested field name= order
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Order
NRA.java: processTableandFields: com.bookstore.domain.Order fields = [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date orderDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date shippingDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String shippingMethod>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String orederStatus>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>  type=ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>  type=Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>  type=BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Order
NRA.java: genExprNra(): com.bookstore.domain.Order fields= [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date orderDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date shippingDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String shippingMethod>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String orederStatus>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.math.BigDecimal orderTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.orderId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shippingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShippingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.Payment payment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=payment
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= payment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= payment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Payment
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Payment.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Payment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= billingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| BillingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Order.id), FieldRef(com.bookstore.domain.Order.orderDate), FieldRef(com.bookstore.domain.Order.shippingDate), FieldRef(com.bookstore.domain.Order.shippingMethod), FieldRef(com.bookstore.domain.Order.orederStatus), FieldRef(com.bookstore.domain.Order.orderTotal), FieldRef(com.bookstore.domain.Order.cartItemList), FieldRef(com.bookstore.domain.Order.shippingAddress), FieldRef(com.bookstore.domain.Order.payment), FieldRef(com.bookstore.domain.Order.billingAddress), FieldRef(com.bookstore.domain.Order.user)]
NRA.java: genExprNra(): projectNode name: CartItem.order=Pi
NRA.java: genExprNra(): nestexpr= CartItem.order=Pi
| Join
| | Alpha
| | ClassRef(Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | NullOp
| | NullOp
| | NullOp
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.CartItem.id), FieldRef(com.bookstore.domain.CartItem.qty), FieldRef(com.bookstore.domain.CartItem.subtotal), FieldRef(com.bookstore.domain.CartItem.book), FieldRef(com.bookstore.domain.CartItem.bookToCartItemList), FieldRef(com.bookstore.domain.CartItem.shoppingCart), FieldRef(com.bookstore.domain.CartItem.order)]
NRA.java: genExprNra(): projectNode name: Order.cartItemList=Pi
NRA.java: genExprNra(): nestexpr= Order.cartItemList=Pi
| Join
| | Alpha
| | ClassRef(CartItem)
| | Equals
| | | Alpha.id
| | | CartItem.orderId
| List
| | id
| | qty
| | subtotal
| | CartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.id
| | | | | Book.cartItemId
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | NullOp
| | | | NullOp
| | CartItem.bookToCartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.cartItemId
| | | List
| | | | id
| | | | NullOp
| | | | NullOp
| | CartItem.shoppingCart=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShoppingCart)
| | | | Equals
| | | | | Alpha.shoppingCartId
| | | | | ShoppingCart.id
| | | List
| | | | id
| | | | GrandTotal
| | | | NullOp
| | | | NullOp
| | CartItem.order=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Order)
| | | | Equals
| | | | | Alpha.orderId
| | | | | Order.id
| | | List
| | | | id
| | | | orderDate
| | | | shippingDate
| | | | shippingMethod
| | | | orederStatus
| | | | orderTotal
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shippingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShippingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): nested field name= shippingAddress
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.ShippingAddress
NRA.java: processTableandFields: com.bookstore.domain.ShippingAddress fields = [<com.bookstore.domain.ShippingAddress: java.lang.Long id>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressName>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressStreet1>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressStreet2>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressCity>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressState>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressCountry>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressZipcode>, <com.bookstore.domain.ShippingAddress: com.bookstore.domain.User user>, <com.bookstore.domain.ShippingAddress: com.bookstore.domain.Order order>]
NRA.java: processTableandFields: sf <com.bookstore.domain.ShippingAddress: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressStreet1>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressStreet2>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressCity>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressState>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressCountry>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressZipcode>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShippingAddress: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: processTableandFields: sf <com.bookstore.domain.ShippingAddress: com.bookstore.domain.Order order>  type=Order
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): com.bookstore.domain.ShippingAddress fields= [<com.bookstore.domain.ShippingAddress: java.lang.Long id>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressName>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressStreet1>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressStreet2>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressCity>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressState>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressCountry>, <com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressZipcode>, <com.bookstore.domain.ShippingAddress: com.bookstore.domain.User user>, <com.bookstore.domain.ShippingAddress: com.bookstore.domain.Order order>]
NRA.java: genExprNra(): fields count= 10
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressStreet1>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressStreet2>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressCity>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressState>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressCountry>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: java.lang.String shippingAddressZipcode>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShippingAddress
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressStreet1
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressStreet2
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressCity
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressState
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressCountry
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressZipcode
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = ShippingAddress
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nested field name= user
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.User
NRA.java: processTableandFields: com.bookstore.domain.User fields = [<com.bookstore.domain.User: java.lang.Long id>, <com.bookstore.domain.User: java.lang.String username>, <com.bookstore.domain.User: java.lang.String password>, <com.bookstore.domain.User: java.lang.String firstName>, <com.bookstore.domain.User: java.lang.String lastName>, <com.bookstore.domain.User: java.lang.String email>, <com.bookstore.domain.User: java.lang.String phone>, <com.bookstore.domain.User: boolean enabled>, <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userOrderList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String firstName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String phone>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: boolean enabled>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>  type=ShoppingCart
NRA.java: getCondFromOneToOne(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  userId
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.UserShipping
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.util.List userShippingList>  type=UserShipping
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.UserShipping
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.Order
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.util.List userOrderList>  type=Order
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.Order
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.UserPayment
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.util.List userPaymentList>  type=UserPayment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.UserPayment
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.security.UserRole
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.util.Set userRoles>  type=UserRole
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.security.UserRole
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.User
NRA.java: genExprNra(): com.bookstore.domain.User fields= [<com.bookstore.domain.User: java.lang.Long id>, <com.bookstore.domain.User: java.lang.String username>, <com.bookstore.domain.User: java.lang.String password>, <com.bookstore.domain.User: java.lang.String firstName>, <com.bookstore.domain.User: java.lang.String lastName>, <com.bookstore.domain.User: java.lang.String email>, <com.bookstore.domain.User: java.lang.String phone>, <com.bookstore.domain.User: boolean enabled>, <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userOrderList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
NRA.java: genExprNra(): fields count= 13
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: id
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String username>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String password>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String firstName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String phone>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: boolean enabled>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shoppingCart
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = ShoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getCondFromOneToOne(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  userId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShoppingCart.userId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userShippingList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userShippingList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userShippingList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserShipping
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = UserShipping
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| UserShipping.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserShipping
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userOrderList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userOrderList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userOrderList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userOrderList [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Order.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userPaymentList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userPaymentList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userPaymentList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userOrderList [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserPayment
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = UserPayment
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| UserPayment.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserPayment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.Set userRoles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userRoles
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userRoles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userOrderList [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set userRoles [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = UserRole
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| UserRole.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.User.id), FieldRef(com.bookstore.domain.User.username), FieldRef(com.bookstore.domain.User.password), FieldRef(com.bookstore.domain.User.firstName), FieldRef(com.bookstore.domain.User.lastName), FieldRef(com.bookstore.domain.User.email), FieldRef(com.bookstore.domain.User.phone), FieldRef(com.bookstore.domain.User.enabled), FieldRef(com.bookstore.domain.User.shoppingCart), FieldRef(com.bookstore.domain.User.userShippingList), FieldRef(com.bookstore.domain.User.userOrderList), FieldRef(com.bookstore.domain.User.userPaymentList), FieldRef(com.bookstore.domain.User.userRoles)]
NRA.java: genExprNra(): projectNode name: ShippingAddress.user=Pi
NRA.java: genExprNra(): nestexpr= ShippingAddress.user=Pi
| Join
| | Alpha
| | ClassRef(User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | username
| | password
| | firstName
| | lastName
| | email
| | phone
| | enabled
| | NullOp
| | NullOp
| | NullOp
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShippingAddress: com.bookstore.domain.Order order>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/OneToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: order_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=order
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShippingAddress
 fieldName= order
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressStreet1
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressStreet2
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressCity
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressState
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressCountry
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingAddressZipcode
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= order
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = ShippingAddress
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| lhs.lhs
| rhs.rhs
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/OneToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: order_id

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nested field name= order
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Order
NRA.java: processTableandFields: com.bookstore.domain.Order fields = [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date orderDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date shippingDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String shippingMethod>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String orederStatus>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>  type=ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>  type=Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>  type=BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Order
NRA.java: genExprNra(): com.bookstore.domain.Order fields= [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date orderDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date shippingDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String shippingMethod>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String orederStatus>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.math.BigDecimal orderTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.orderId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shippingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShippingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.Payment payment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=payment
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= payment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= payment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Payment
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Payment.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Payment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= billingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| BillingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Order.id), FieldRef(com.bookstore.domain.Order.orderDate), FieldRef(com.bookstore.domain.Order.shippingDate), FieldRef(com.bookstore.domain.Order.shippingMethod), FieldRef(com.bookstore.domain.Order.orederStatus), FieldRef(com.bookstore.domain.Order.orderTotal), FieldRef(com.bookstore.domain.Order.cartItemList), FieldRef(com.bookstore.domain.Order.shippingAddress), FieldRef(com.bookstore.domain.Order.payment), FieldRef(com.bookstore.domain.Order.billingAddress), FieldRef(com.bookstore.domain.Order.user)]
NRA.java: genExprNra(): projectNode name: ShippingAddress.order=Pi
NRA.java: genExprNra(): nestexpr= ShippingAddress.order=Pi
| Join
| | Alpha
| | ClassRef(Order)
| | Equals
| | | lhs.lhs
| | | rhs.rhs
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | NullOp
| | NullOp
| | NullOp
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.ShippingAddress.id), FieldRef(com.bookstore.domain.ShippingAddress.shippingAddressName), FieldRef(com.bookstore.domain.ShippingAddress.shippingAddressStreet1), FieldRef(com.bookstore.domain.ShippingAddress.shippingAddressStreet2), FieldRef(com.bookstore.domain.ShippingAddress.shippingAddressCity), FieldRef(com.bookstore.domain.ShippingAddress.shippingAddressState), FieldRef(com.bookstore.domain.ShippingAddress.shippingAddressCountry), FieldRef(com.bookstore.domain.ShippingAddress.shippingAddressZipcode), FieldRef(com.bookstore.domain.ShippingAddress.user), FieldRef(com.bookstore.domain.ShippingAddress.order)]
NRA.java: genExprNra(): projectNode name: Order.shippingAddress=Pi
NRA.java: genExprNra(): nestexpr= Order.shippingAddress=Pi
| Join
| | Alpha
| | ClassRef(ShippingAddress)
| | Equals
| | | Alpha.id
| | | ShippingAddress.order_id
| List
| | id
| | shippingAddressName
| | shippingAddressStreet1
| | shippingAddressStreet2
| | shippingAddressCity
| | shippingAddressState
| | shippingAddressCountry
| | shippingAddressZipcode
| | ShippingAddress.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | ShippingAddress.order=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Order)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | orderDate
| | | | shippingDate
| | | | shippingMethod
| | | | orederStatus
| | | | orderTotal
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.Payment payment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=payment
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= payment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= payment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Payment
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Payment.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Payment
NRA.java: genExprNra(): nested field name= payment
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Payment
NRA.java: processTableandFields: com.bookstore.domain.Payment fields = [<com.bookstore.domain.Payment: java.lang.Long id>, <com.bookstore.domain.Payment: java.lang.String type>, <com.bookstore.domain.Payment: java.lang.String cardName>, <com.bookstore.domain.Payment: java.lang.String cardNumber>, <com.bookstore.domain.Payment: int expiryMonth>, <com.bookstore.domain.Payment: int expiryYear>, <com.bookstore.domain.Payment: int cvc>, <com.bookstore.domain.Payment: java.lang.String holderName>, <com.bookstore.domain.Payment: com.bookstore.domain.Order order>, <com.bookstore.domain.Payment: com.bookstore.domain.UserBilling userBilling>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Payment: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Payment: java.lang.String type>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Payment: java.lang.String cardName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Payment: java.lang.String cardNumber>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Payment: int expiryMonth>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Payment: int expiryYear>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Payment: int cvc>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Payment: java.lang.String holderName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Payment: com.bookstore.domain.Order order>  type=Order
NRA.java: processTableandFields: sf <com.bookstore.domain.Payment: com.bookstore.domain.UserBilling userBilling>  type=UserBilling
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Payment
NRA.java: genExprNra(): com.bookstore.domain.Payment fields= [<com.bookstore.domain.Payment: java.lang.Long id>, <com.bookstore.domain.Payment: java.lang.String type>, <com.bookstore.domain.Payment: java.lang.String cardName>, <com.bookstore.domain.Payment: java.lang.String cardNumber>, <com.bookstore.domain.Payment: int expiryMonth>, <com.bookstore.domain.Payment: int expiryYear>, <com.bookstore.domain.Payment: int cvc>, <com.bookstore.domain.Payment: java.lang.String holderName>, <com.bookstore.domain.Payment: com.bookstore.domain.Order order>, <com.bookstore.domain.Payment: com.bookstore.domain.UserBilling userBilling>]
NRA.java: genExprNra(): fields count= 10
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: java.lang.String type>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: java.lang.String cardName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: java.lang.String cardNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: int expiryMonth>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: int expiryYear>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: int cvc>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: java.lang.String holderName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: com.bookstore.domain.Order order>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/OneToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: order_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=order
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Payment
 fieldName= order
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String type
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryMonth
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryYear
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int cvc
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String holderName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= order
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = Payment
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| lhs.lhs
| rhs.rhs
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/OneToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: order_id

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nested field name= order
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Order
NRA.java: processTableandFields: com.bookstore.domain.Order fields = [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date orderDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date shippingDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String shippingMethod>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String orederStatus>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>  type=ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>  type=Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>  type=BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Order
NRA.java: genExprNra(): com.bookstore.domain.Order fields= [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date orderDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date shippingDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String shippingMethod>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String orederStatus>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.math.BigDecimal orderTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.orderId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shippingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShippingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.Payment payment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=payment
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= payment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= payment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Payment
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Payment.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Payment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= billingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| BillingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Order.id), FieldRef(com.bookstore.domain.Order.orderDate), FieldRef(com.bookstore.domain.Order.shippingDate), FieldRef(com.bookstore.domain.Order.shippingMethod), FieldRef(com.bookstore.domain.Order.orederStatus), FieldRef(com.bookstore.domain.Order.orderTotal), FieldRef(com.bookstore.domain.Order.cartItemList), FieldRef(com.bookstore.domain.Order.shippingAddress), FieldRef(com.bookstore.domain.Order.payment), FieldRef(com.bookstore.domain.Order.billingAddress), FieldRef(com.bookstore.domain.Order.user)]
NRA.java: genExprNra(): projectNode name: Payment.order=Pi
NRA.java: genExprNra(): nestexpr= Payment.order=Pi
| Join
| | Alpha
| | ClassRef(Order)
| | Equals
| | | lhs.lhs
| | | rhs.rhs
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | NullOp
| | NullOp
| | NullOp
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Payment: com.bookstore.domain.UserBilling userBilling>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/OneToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userBilling_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=userBilling
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Payment
 fieldName= userBilling
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String type
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryMonth
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryYear
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int cvc
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String holderName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.UserBilling userBilling [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= userBilling
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserBilling
NRA.java: genExprNra(): baseclass = Payment
NRA.java: genExprNra(): fieldclass = UserBilling
NRA.java: getJoinedColumn(): joined Column value=  userBilling_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| lhs.lhs
| rhs.rhs
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/OneToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userBilling_id

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserBilling
NRA.java: genExprNra(): nested field name= userBilling
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.UserBilling
NRA.java: processTableandFields: com.bookstore.domain.UserBilling fields = [<com.bookstore.domain.UserBilling: java.lang.Long id>, <com.bookstore.domain.UserBilling: java.lang.String userBillingName>, <com.bookstore.domain.UserBilling: java.lang.String userBillingStreet1>, <com.bookstore.domain.UserBilling: java.lang.String userBillingStreet2>, <com.bookstore.domain.UserBilling: java.lang.String userBillingCity>, <com.bookstore.domain.UserBilling: java.lang.String userBillingState>, <com.bookstore.domain.UserBilling: java.lang.String userBillingCountry>, <com.bookstore.domain.UserBilling: java.lang.String userBillingZipcode>, <com.bookstore.domain.UserBilling: com.bookstore.domain.UserPayment userPayment>, <com.bookstore.domain.UserBilling: com.bookstore.domain.Payment payment>]
NRA.java: processTableandFields: sf <com.bookstore.domain.UserBilling: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserBilling: java.lang.String userBillingName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserBilling: java.lang.String userBillingStreet1>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserBilling: java.lang.String userBillingStreet2>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserBilling: java.lang.String userBillingCity>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserBilling: java.lang.String userBillingState>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserBilling: java.lang.String userBillingCountry>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserBilling: java.lang.String userBillingZipcode>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserBilling: com.bookstore.domain.UserPayment userPayment>  type=UserPayment
NRA.java: getCondFromOneToOne(): mappedBy= userBilling
NRA.java: getJoinedColumn(): joined Column value=  userBilling_id
NRA.java: processTableandFields: sf <com.bookstore.domain.UserBilling: com.bookstore.domain.Payment payment>  type=Payment
NRA.java: getCondFromOneToOne(): mappedBy= userBilling
NRA.java: getJoinedColumn(): joined Column value=  userBilling_id
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.UserBilling
NRA.java: genExprNra(): com.bookstore.domain.UserBilling fields= [<com.bookstore.domain.UserBilling: java.lang.Long id>, <com.bookstore.domain.UserBilling: java.lang.String userBillingName>, <com.bookstore.domain.UserBilling: java.lang.String userBillingStreet1>, <com.bookstore.domain.UserBilling: java.lang.String userBillingStreet2>, <com.bookstore.domain.UserBilling: java.lang.String userBillingCity>, <com.bookstore.domain.UserBilling: java.lang.String userBillingState>, <com.bookstore.domain.UserBilling: java.lang.String userBillingCountry>, <com.bookstore.domain.UserBilling: java.lang.String userBillingZipcode>, <com.bookstore.domain.UserBilling: com.bookstore.domain.UserPayment userPayment>, <com.bookstore.domain.UserBilling: com.bookstore.domain.Payment payment>]
NRA.java: genExprNra(): fields count= 10
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingStreet1>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingStreet2>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingCity>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingState>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingCountry>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: java.lang.String userBillingZipcode>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: com.bookstore.domain.UserPayment userPayment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: userBilling

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userPayment_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=userPayment
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.UserBilling
 fieldName= userPayment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingStreet1
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingStreet2
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingCity
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingState
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingCountry
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingZipcode
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.UserPayment userPayment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= userPayment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserPayment
NRA.java: genExprNra(): baseclass = UserBilling
NRA.java: genExprNra(): fieldclass = UserPayment
NRA.java: getJoinedColumn(): joined Column value=  userPayment_id
NRA.java: getCondFromOneToOne(): mappedBy= userBilling
NRA.java: getJoinedColumn(): joined Column value=  userBilling_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| UserPayment.userBilling_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: userBilling

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userPayment_id

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserPayment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserBilling: com.bookstore.domain.Payment payment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: userBilling

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=payment
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.UserBilling
 fieldName= payment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingStreet1
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingStreet2
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingCity
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingState
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingCountry
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userBillingZipcode
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.UserPayment userPayment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= payment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Payment
NRA.java: genExprNra(): baseclass = UserBilling
NRA.java: genExprNra(): fieldclass = Payment
NRA.java: getCondFromOneToOne(): mappedBy= userBilling
NRA.java: getJoinedColumn(): joined Column value=  userBilling_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Payment.userBilling_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: userBilling

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Payment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.UserBilling.id), FieldRef(com.bookstore.domain.UserBilling.userBillingName), FieldRef(com.bookstore.domain.UserBilling.userBillingStreet1), FieldRef(com.bookstore.domain.UserBilling.userBillingStreet2), FieldRef(com.bookstore.domain.UserBilling.userBillingCity), FieldRef(com.bookstore.domain.UserBilling.userBillingState), FieldRef(com.bookstore.domain.UserBilling.userBillingCountry), FieldRef(com.bookstore.domain.UserBilling.userBillingZipcode), FieldRef(com.bookstore.domain.UserBilling.userPayment), FieldRef(com.bookstore.domain.UserBilling.payment)]
NRA.java: genExprNra(): projectNode name: Payment.userBilling=Pi
NRA.java: genExprNra(): nestexpr= Payment.userBilling=Pi
| Join
| | Alpha
| | ClassRef(UserBilling)
| | Equals
| | | lhs.lhs
| | | rhs.rhs
| List
| | id
| | userBillingName
| | userBillingStreet1
| | userBillingStreet2
| | userBillingCity
| | userBillingState
| | userBillingCountry
| | userBillingZipcode
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Payment.id), FieldRef(com.bookstore.domain.Payment.type), FieldRef(com.bookstore.domain.Payment.cardName), FieldRef(com.bookstore.domain.Payment.cardNumber), FieldRef(com.bookstore.domain.Payment.expiryMonth), FieldRef(com.bookstore.domain.Payment.expiryYear), FieldRef(com.bookstore.domain.Payment.cvc), FieldRef(com.bookstore.domain.Payment.holderName), FieldRef(com.bookstore.domain.Payment.order), FieldRef(com.bookstore.domain.Payment.userBilling)]
NRA.java: genExprNra(): projectNode name: Order.payment=Pi
NRA.java: genExprNra(): nestexpr= Order.payment=Pi
| Join
| | Alpha
| | ClassRef(Payment)
| | Equals
| | | Alpha.id
| | | Payment.order_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | Payment.order=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Order)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | orderDate
| | | | shippingDate
| | | | shippingMethod
| | | | orederStatus
| | | | orderTotal
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | Payment.userBilling=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(UserBilling)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | userBillingName
| | | | userBillingStreet1
| | | | userBillingStreet2
| | | | userBillingCity
| | | | userBillingState
| | | | userBillingCountry
| | | | userBillingZipcode
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= billingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| BillingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): nested field name= billingAddress
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.BillingAddress
NRA.java: processTableandFields: com.bookstore.domain.BillingAddress fields = [<com.bookstore.domain.BillingAddress: java.lang.Long id>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressName>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressgStreet1>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressgStreet2>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressCity>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressState>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressCountry>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressZipcode>, <com.bookstore.domain.BillingAddress: com.bookstore.domain.Order order>]
NRA.java: processTableandFields: sf <com.bookstore.domain.BillingAddress: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BillingAddress: java.lang.String billingAddressName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BillingAddress: java.lang.String billingAddressgStreet1>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BillingAddress: java.lang.String billingAddressgStreet2>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BillingAddress: java.lang.String billingAddressCity>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BillingAddress: java.lang.String billingAddressState>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BillingAddress: java.lang.String billingAddressCountry>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BillingAddress: java.lang.String billingAddressZipcode>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.BillingAddress: com.bookstore.domain.Order order>  type=Order
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): com.bookstore.domain.BillingAddress fields= [<com.bookstore.domain.BillingAddress: java.lang.Long id>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressName>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressgStreet1>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressgStreet2>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressCity>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressState>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressCountry>, <com.bookstore.domain.BillingAddress: java.lang.String billingAddressZipcode>, <com.bookstore.domain.BillingAddress: com.bookstore.domain.Order order>]
NRA.java: genExprNra(): fields count= 9
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BillingAddress: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BillingAddress: java.lang.String billingAddressName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BillingAddress: java.lang.String billingAddressgStreet1>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BillingAddress: java.lang.String billingAddressgStreet2>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BillingAddress: java.lang.String billingAddressCity>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BillingAddress: java.lang.String billingAddressState>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BillingAddress: java.lang.String billingAddressCountry>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BillingAddress: java.lang.String billingAddressZipcode>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.BillingAddress: com.bookstore.domain.Order order>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/OneToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: order_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=order
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.BillingAddress
 fieldName= order
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String billingAddressName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String billingAddressgStreet1
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String billingAddressgStreet2
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String billingAddressCity
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String billingAddressState
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String billingAddressCountry
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String billingAddressZipcode
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Order order [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= order
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = BillingAddress
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| lhs.lhs
| rhs.rhs
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/OneToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: order_id

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nested field name= order
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Order
NRA.java: processTableandFields: com.bookstore.domain.Order fields = [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date orderDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date shippingDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String shippingMethod>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String orederStatus>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>  type=ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>  type=Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>  type=BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Order
NRA.java: genExprNra(): com.bookstore.domain.Order fields= [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date orderDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date shippingDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String shippingMethod>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String orederStatus>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.math.BigDecimal orderTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.orderId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shippingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShippingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.Payment payment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=payment
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= payment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= payment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Payment
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Payment.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Payment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= billingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| BillingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Order.id), FieldRef(com.bookstore.domain.Order.orderDate), FieldRef(com.bookstore.domain.Order.shippingDate), FieldRef(com.bookstore.domain.Order.shippingMethod), FieldRef(com.bookstore.domain.Order.orederStatus), FieldRef(com.bookstore.domain.Order.orderTotal), FieldRef(com.bookstore.domain.Order.cartItemList), FieldRef(com.bookstore.domain.Order.shippingAddress), FieldRef(com.bookstore.domain.Order.payment), FieldRef(com.bookstore.domain.Order.billingAddress), FieldRef(com.bookstore.domain.Order.user)]
NRA.java: genExprNra(): projectNode name: BillingAddress.order=Pi
NRA.java: genExprNra(): nestexpr= BillingAddress.order=Pi
| Join
| | Alpha
| | ClassRef(Order)
| | Equals
| | | lhs.lhs
| | | rhs.rhs
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | NullOp
| | NullOp
| | NullOp
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.BillingAddress.id), FieldRef(com.bookstore.domain.BillingAddress.billingAddressName), FieldRef(com.bookstore.domain.BillingAddress.billingAddressgStreet1), FieldRef(com.bookstore.domain.BillingAddress.billingAddressgStreet2), FieldRef(com.bookstore.domain.BillingAddress.billingAddressCity), FieldRef(com.bookstore.domain.BillingAddress.billingAddressState), FieldRef(com.bookstore.domain.BillingAddress.billingAddressCountry), FieldRef(com.bookstore.domain.BillingAddress.billingAddressZipcode), FieldRef(com.bookstore.domain.BillingAddress.order)]
NRA.java: genExprNra(): projectNode name: Order.billingAddress=Pi
NRA.java: genExprNra(): nestexpr= Order.billingAddress=Pi
| Join
| | Alpha
| | ClassRef(BillingAddress)
| | Equals
| | | Alpha.id
| | | BillingAddress.order_id
| List
| | id
| | billingAddressName
| | billingAddressgStreet1
| | billingAddressgStreet2
| | billingAddressCity
| | billingAddressState
| | billingAddressCountry
| | billingAddressZipcode
| | BillingAddress.order=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Order)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | orderDate
| | | | shippingDate
| | | | shippingMethod
| | | | orederStatus
| | | | orderTotal
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nested field name= user
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.User
NRA.java: processTableandFields: com.bookstore.domain.User fields = [<com.bookstore.domain.User: java.lang.Long id>, <com.bookstore.domain.User: java.lang.String username>, <com.bookstore.domain.User: java.lang.String password>, <com.bookstore.domain.User: java.lang.String firstName>, <com.bookstore.domain.User: java.lang.String lastName>, <com.bookstore.domain.User: java.lang.String email>, <com.bookstore.domain.User: java.lang.String phone>, <com.bookstore.domain.User: boolean enabled>, <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userOrderList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String username>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String password>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String firstName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String lastName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String email>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.lang.String phone>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: boolean enabled>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>  type=ShoppingCart
NRA.java: getCondFromOneToOne(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  userId
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.UserShipping
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.util.List userShippingList>  type=UserShipping
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.UserShipping
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.Order
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.util.List userOrderList>  type=Order
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.Order
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.UserPayment
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.util.List userPaymentList>  type=UserPayment
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.UserPayment
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.security.UserRole
NRA.java: processTableandFields: sf <com.bookstore.domain.User: java.util.Set userRoles>  type=UserRole
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.security.UserRole
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.User
NRA.java: genExprNra(): com.bookstore.domain.User fields= [<com.bookstore.domain.User: java.lang.Long id>, <com.bookstore.domain.User: java.lang.String username>, <com.bookstore.domain.User: java.lang.String password>, <com.bookstore.domain.User: java.lang.String firstName>, <com.bookstore.domain.User: java.lang.String lastName>, <com.bookstore.domain.User: java.lang.String email>, <com.bookstore.domain.User: java.lang.String phone>, <com.bookstore.domain.User: boolean enabled>, <com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>, <com.bookstore.domain.User: java.util.List userShippingList>, <com.bookstore.domain.User: java.util.List userOrderList>, <com.bookstore.domain.User: java.util.List userPaymentList>, <com.bookstore.domain.User: java.util.Set userRoles>]
NRA.java: genExprNra(): fields count= 13
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: id
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String username>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String password>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String firstName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String lastName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String email>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/Column; num elems: 3 elems: 
Annotation Element: kind: s name: name value: email
Annotation Element: kind: Z name: nullable value: 0
Annotation Element: kind: Z name: updatable value: 0

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.lang.String phone>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: boolean enabled>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: com.bookstore.domain.ShoppingCart shoppingCart>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= shoppingCart
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shoppingCart
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = ShoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getCondFromOneToOne(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  userId
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShoppingCart.userId
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: shoppingCartId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): nested field name= shoppingCart
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.ShoppingCart
NRA.java: processTableandFields: com.bookstore.domain.ShoppingCart fields = [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: processTableandFields: sf <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>  type=User
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.ShoppingCart
NRA.java: genExprNra(): com.bookstore.domain.ShoppingCart fields= [<com.bookstore.domain.ShoppingCart: java.lang.Long id>, <com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>, <com.bookstore.domain.ShoppingCart: java.util.List cartItemList>, <com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 4
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.math.BigDecimal GrandTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: shoppingCart

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= shoppingCart
NRA.java: getJoinedColumn(): joined Column value=  shoppingCartId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.shoppingCartId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.ShoppingCart: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.ShoppingCart
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal GrandTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = ShoppingCart
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  userId
NRA.java: getCondFromOneToOne(): join condition = Equals
| lhs.lhs
| rhs.rhs
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userId

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.ShoppingCart.id), FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal), FieldRef(com.bookstore.domain.ShoppingCart.cartItemList), FieldRef(com.bookstore.domain.ShoppingCart.user)]
NRA.java: genExprNra(): projectNode name: User.shoppingCart=Pi
NRA.java: genExprNra(): nestexpr= User.shoppingCart=Pi
| Join
| | Alpha
| | ClassRef(ShoppingCart)
| | Equals
| | | Alpha.id
| | | ShoppingCart.userId
| List
| | id
| | GrandTotal
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userShippingList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userShippingList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userShippingList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserShipping
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = UserShipping
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| UserShipping.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserShipping
NRA.java: genExprNra(): nested field name= userShippingList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.UserShipping
NRA.java: processTableandFields: com.bookstore.domain.UserShipping fields = [<com.bookstore.domain.UserShipping: java.lang.Long id>, <com.bookstore.domain.UserShipping: java.lang.String userShippingName>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCity>, <com.bookstore.domain.UserShipping: java.lang.String userShippingState>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>, <com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>, <com.bookstore.domain.UserShipping: boolean userShippingDefault>, <com.bookstore.domain.UserShipping: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingCity>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingState>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: boolean userShippingDefault>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserShipping: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.UserShipping
NRA.java: genExprNra(): com.bookstore.domain.UserShipping fields= [<com.bookstore.domain.UserShipping: java.lang.Long id>, <com.bookstore.domain.UserShipping: java.lang.String userShippingName>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>, <com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCity>, <com.bookstore.domain.UserShipping: java.lang.String userShippingState>, <com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>, <com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>, <com.bookstore.domain.UserShipping: boolean userShippingDefault>, <com.bookstore.domain.UserShipping: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 10
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingStreet1>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingStreet2>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingCity>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingState>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingCountry>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: java.lang.String userShippingZipcode>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: boolean userShippingDefault>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserShipping: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.UserShipping
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingStreet1
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingStreet2
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingCity
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingState
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingCountry
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String userShippingZipcode
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean userShippingDefault
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = UserShipping
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.UserShipping.id), FieldRef(com.bookstore.domain.UserShipping.userShippingName), FieldRef(com.bookstore.domain.UserShipping.userShippingStreet1), FieldRef(com.bookstore.domain.UserShipping.userShippingStreet2), FieldRef(com.bookstore.domain.UserShipping.userShippingCity), FieldRef(com.bookstore.domain.UserShipping.userShippingState), FieldRef(com.bookstore.domain.UserShipping.userShippingCountry), FieldRef(com.bookstore.domain.UserShipping.userShippingZipcode), FieldRef(com.bookstore.domain.UserShipping.userShippingDefault), FieldRef(com.bookstore.domain.UserShipping.user)]
NRA.java: genExprNra(): projectNode name: User.userShippingList=Pi
NRA.java: genExprNra(): nestexpr= User.userShippingList=Pi
| Join
| | Alpha
| | ClassRef(UserShipping)
| | Equals
| | | Alpha.id
| | | UserShipping.user_id
| List
| | id
| | userShippingName
| | userShippingStreet1
| | userShippingStreet2
| | userShippingCity
| | userShippingState
| | userShippingCountry
| | userShippingZipcode
| | userShippingDefault
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userOrderList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userOrderList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userOrderList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userOrderList [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Order
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = Order
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| Order.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Order
NRA.java: genExprNra(): nested field name= userOrderList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.Order
NRA.java: processTableandFields: com.bookstore.domain.Order fields = [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date orderDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.Date shippingDate>  type=Date
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String shippingMethod>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.lang.String orederStatus>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>  type=FieldData
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: java.util.List cartItemList>  type=CartItem
AccessPath.java: getCollectionType: field tags = [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
AccessPath.java: getCollectionType: Collection field Type = com.bookstore.domain.CartItem
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>  type=ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>  type=Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>  type=BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: processTableandFields: sf <com.bookstore.domain.Order: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.Order
NRA.java: genExprNra(): com.bookstore.domain.Order fields= [<com.bookstore.domain.Order: java.lang.Long id>, <com.bookstore.domain.Order: java.util.Date orderDate>, <com.bookstore.domain.Order: java.util.Date shippingDate>, <com.bookstore.domain.Order: java.lang.String shippingMethod>, <com.bookstore.domain.Order: java.lang.String orederStatus>, <com.bookstore.domain.Order: java.math.BigDecimal orderTotal>, <com.bookstore.domain.Order: java.util.List cartItemList>, <com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.Payment payment>, <com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>, <com.bookstore.domain.Order: com.bookstore.domain.User user>]
NRA.java: genExprNra(): fields count= 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date orderDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.Date shippingDate>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String shippingMethod>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.lang.String orederStatus>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.math.BigDecimal orderTotal>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: java.util.List cartItemList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= cartItemList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.CartItem
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = CartItem
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  orderId
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| CartItem.orderId
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.CartItem
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.ShippingAddress shippingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= shippingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= shippingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = ShippingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| ShippingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.ShippingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.Payment payment>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=payment
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= payment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= payment
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.Payment
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = Payment
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| Payment.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.Payment
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.BillingAddress billingAddress>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= billingAddress
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= billingAddress
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = BillingAddress
NRA.java: getCondFromOneToOne(): mappedBy= order
NRA.java: getJoinedColumn(): joined Column value=  order_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| BillingAddress.order_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 2 elems: 
Annotation Element: kind: s name: mappedBy value: order
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.BillingAddress
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.Order: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.Order
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date orderDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Date shippingDate
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String shippingMethod
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String orederStatus
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.math.BigDecimal orderTotal
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List cartItemList [Signature: Ljava/util/List<Lcom/bookstore/domain/CartItem;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShippingAddress shippingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.Payment payment [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.BillingAddress billingAddress [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = Order
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Order.id), FieldRef(com.bookstore.domain.Order.orderDate), FieldRef(com.bookstore.domain.Order.shippingDate), FieldRef(com.bookstore.domain.Order.shippingMethod), FieldRef(com.bookstore.domain.Order.orederStatus), FieldRef(com.bookstore.domain.Order.orderTotal), FieldRef(com.bookstore.domain.Order.cartItemList), FieldRef(com.bookstore.domain.Order.shippingAddress), FieldRef(com.bookstore.domain.Order.payment), FieldRef(com.bookstore.domain.Order.billingAddress), FieldRef(com.bookstore.domain.Order.user)]
NRA.java: genExprNra(): projectNode name: User.userOrderList=Pi
NRA.java: genExprNra(): nestexpr= User.userOrderList=Pi
| Join
| | Alpha
| | ClassRef(Order)
| | Equals
| | | Alpha.id
| | | Order.user_id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | NullOp
| | NullOp
| | NullOp
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.List userPaymentList>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 2 elems: 
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: s name: mappedBy value: user

]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userPaymentList
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userPaymentList
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userOrderList [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserPayment
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = UserPayment
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| UserPayment.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserPayment
NRA.java: genExprNra(): nested field name= userPaymentList
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.UserPayment
NRA.java: processTableandFields: com.bookstore.domain.UserPayment fields = [<com.bookstore.domain.UserPayment: java.lang.Long id>, <com.bookstore.domain.UserPayment: java.lang.String type>, <com.bookstore.domain.UserPayment: java.lang.String cardName>, <com.bookstore.domain.UserPayment: java.lang.String cardNumber>, <com.bookstore.domain.UserPayment: int expiryMonth>, <com.bookstore.domain.UserPayment: int expiryYear>, <com.bookstore.domain.UserPayment: int cvc>, <com.bookstore.domain.UserPayment: java.lang.String holderName>, <com.bookstore.domain.UserPayment: boolean defaultPayment>, <com.bookstore.domain.UserPayment: com.bookstore.domain.User user>, <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>]
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: java.lang.Long id>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: java.lang.String type>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: java.lang.String cardName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: java.lang.String cardNumber>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: int expiryMonth>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: int expiryYear>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: int cvc>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: java.lang.String holderName>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: boolean defaultPayment>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: processTableandFields: sf <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>  type=UserBilling
NRA.java: getCondFromOneToOne(): mappedBy= userPayment
NRA.java: getJoinedColumn(): joined Column value=  userPayment_id
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.UserPayment
NRA.java: genExprNra(): com.bookstore.domain.UserPayment fields= [<com.bookstore.domain.UserPayment: java.lang.Long id>, <com.bookstore.domain.UserPayment: java.lang.String type>, <com.bookstore.domain.UserPayment: java.lang.String cardName>, <com.bookstore.domain.UserPayment: java.lang.String cardNumber>, <com.bookstore.domain.UserPayment: int expiryMonth>, <com.bookstore.domain.UserPayment: int expiryYear>, <com.bookstore.domain.UserPayment: int cvc>, <com.bookstore.domain.UserPayment: java.lang.String holderName>, <com.bookstore.domain.UserPayment: boolean defaultPayment>, <com.bookstore.domain.UserPayment: com.bookstore.domain.User user>, <com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>]
NRA.java: genExprNra(): fields count= 11
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.Long id>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String type>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String cardName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String cardNumber>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int expiryMonth>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int expiryYear>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: int cvc>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: java.lang.String holderName>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: boolean defaultPayment>
NRA.java: genExprNra(): tags=[]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/ManyToOne; without elements
Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.UserPayment
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String type
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryMonth
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryYear
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int cvc
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String holderName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean defaultPayment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = UserPayment
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.id
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.UserPayment: com.bookstore.domain.UserBilling userBilling>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: userPayment

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userBilling_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=userBilling
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.UserPayment
 fieldName= userBilling
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String type
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String cardNumber
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryMonth
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int expiryYear
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private int cvc
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String holderName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean defaultPayment
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.UserBilling userBilling [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): OneToOne field= userBilling
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.UserBilling
NRA.java: genExprNra(): baseclass = UserPayment
NRA.java: genExprNra(): fieldclass = UserBilling
NRA.java: getJoinedColumn(): joined Column value=  userBilling_id
NRA.java: getCondFromOneToOne(): mappedBy= userPayment
NRA.java: getJoinedColumn(): joined Column value=  userPayment_id
NRA.java: getCondFromOneToOne(): join condition = Equals
| Alpha.id
| UserBilling.userPayment_id
NRA.java: genExprNra(): OneToOne Field
NRA.java: genExprNra(): onetoone field tags = [Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToOne; num elems: 1 elems: 
Annotation Element: kind: s name: mappedBy value: userPayment

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: userBilling_id

]
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.UserBilling
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.UserPayment.id), FieldRef(com.bookstore.domain.UserPayment.type), FieldRef(com.bookstore.domain.UserPayment.cardName), FieldRef(com.bookstore.domain.UserPayment.cardNumber), FieldRef(com.bookstore.domain.UserPayment.expiryMonth), FieldRef(com.bookstore.domain.UserPayment.expiryYear), FieldRef(com.bookstore.domain.UserPayment.cvc), FieldRef(com.bookstore.domain.UserPayment.holderName), FieldRef(com.bookstore.domain.UserPayment.defaultPayment), FieldRef(com.bookstore.domain.UserPayment.user), FieldRef(com.bookstore.domain.UserPayment.userBilling)]
NRA.java: genExprNra(): projectNode name: User.userPaymentList=Pi
NRA.java: genExprNra(): nestexpr= User.userPaymentList=Pi
| Join
| | Alpha
| | ClassRef(UserPayment)
| | Equals
| | | Alpha.id
| | | UserPayment.user_id
| List
| | id
| | type
| | cardName
| | cardNumber
| | expiryMonth
| | expiryYear
| | cvc
| | holderName
| | defaultPayment
| | NullOp
| | NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.User: java.util.Set userRoles>
NRA.java: genExprNra(): tags=[Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;, Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/OneToMany; num elems: 3 elems: 
Annotation Element: kind: s name: mappedBy value: user
Annotation Element: kind: [ name: cascade values: [Annotation Element: kind: e name: null type name: Ljavax/persistence/CascadeType; constant name: ALL]
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation type: Lcom/fasterxml/jackson/annotation/JsonIgnore; without elements
]
NRA.java: genExprNra(): isStarToManyField(sf) = true
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): sf.getname=userRoles
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.User
 fieldName= userRoles
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long id [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String username
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String password
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String firstName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String lastName
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String email [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private String phone
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private boolean enabled
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.ShoppingCart shoppingCart [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userShippingList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserShipping;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userOrderList [Signature: Ljava/util/List<Lcom/bookstore/domain/Order;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.List userPaymentList [Signature: Ljava/util/List<Lcom/bookstore/domain/UserPayment;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private java.util.Set userRoles [Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;] [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/OneToMany;
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Lcom/fasterxml/jackson/annotation/JsonIgnore;
Construct/Utils.java: bcelActualCollectionFieldType(): att = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
Construct/Utils.java: bcelActualCollectionFieldType(): sigatt = Signature: Ljava/util/Set<Lcom/bookstore/domain/security/UserRole;>;
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): baseclass = User
NRA.java: genExprNra(): fieldclass = UserRole
NRA.java: getJoinCondFromField(): OneToMany Field
NRA.java: getCondFromOneToMany(): mappedBy= user
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getCondFromOneToMany(): join condition = Equals
| Alpha.id
| UserRole.user_id
NRA.java: genExprNra(): OneToMany Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): nested field name= userRoles
NRA.java: genExprNra(): nested Entity = com.bookstore.domain.security.UserRole
NRA.java: processTableandFields: com.bookstore.domain.security.UserRole fields = [<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>]
NRA.java: processTableandFields: sf <com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>  type=FieldData
NRA.java: processTableandFields: sf <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>  type=User
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: processTableandFields: sf <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>  type=Role
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: role_id]
NRA.java: genExprNra(): From soot typeclass= com.bookstore.domain.security.UserRole
NRA.java: genExprNra(): com.bookstore.domain.security.UserRole fields= [<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>, <com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>]
NRA.java: genExprNra(): fields count= 3
NRA.java: genExprNra(): new ListNode = 0
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: java.lang.Long userRoleId>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Ljavax/persistence/Id; without elements
Annotation: type: Ljavax/persistence/GeneratedValue; num elems: 1 elems: 
Annotation Element: kind: e name: strategy type name: Ljavax/persistence/GenerationType; constant name: IDENTITY

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = false
NRA.java: genExprNra(): Primitive field 
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: com.bookstore.domain.User user>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToOne; num elems: 1 elems: 
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: user_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=user
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.security.UserRole
 fieldName= user
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long userRoleId [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= user
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.User
NRA.java: genExprNra(): baseclass = UserRole
NRA.java: genExprNra(): fieldclass = User
NRA.java: getJoinedColumn(): joined Column value=  user_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: user_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.user_id
| User.userRoleId
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.User
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): visited= [com.bookstore.domain.CartItem~bookToCartItemList, com.bookstore.domain.CartItem~book, com.bookstore.domain.CartItem~shoppingCart, com.bookstore.domain.CartItem~order]
NRA.java: genExprNra(): field =<com.bookstore.domain.security.UserRole: com.bookstore.domain.security.Role role>
NRA.java: genExprNra(): tags=[Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation: type: Ljavax/persistence/ManyToOne; num elems: 1 elems: 
Annotation Element: kind: e name: fetch type name: Ljavax/persistence/FetchType; constant name: EAGER

Annotation: type: Ljavax/persistence/JoinColumn; num elems: 1 elems: 
Annotation Element: kind: s name: name value: role_id

]
NRA.java: genExprNra(): isStarToManyField(sf) = false
NRA.java: genExprNra(): isStarToOne field = true
NRA.java: genExprNra(): sf.getname=role
Construct/Utils.java: bcelActualCollectionFieldType(): className= com.bookstore.domain.security.UserRole
 fieldName= role
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private Long userRoleId [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.User user [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): bcel field = private com.bookstore.domain.security.Role role [RuntimeVisibleAnnotations]
Construct/Utils.java: bcelActualCollectionFieldType(): annotation Entry= Ljavax/persistence/ManyToOne;
Construct/Utils.java: bcelActualCollectionFieldType(): ManytoOne field= role
NRA.java: genExprNra(): sfEntity=com.bookstore.domain.security.Role
NRA.java: genExprNra(): baseclass = UserRole
NRA.java: genExprNra(): fieldclass = Role
NRA.java: getJoinedColumn(): joined Column value=  role_id
NRA.java: getJoinCondFromField(): ManyToOne Field
NRA.java: getCondFromManyToOne(): anElems = [Annotation Element: kind: s name: name value: role_id]
NRA.java: getCondFromManyToOne(): cond = Equals
| Alpha.role_id
| Role.userRoleId
NRA.java: genExprNra(): ManyToOne Field
This is NRA case
NRA.java: genExprNra(): baseEntity : com.bookstore.domain.security.Role
NRA.java: genExprNra(): nestexpr= NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.security.UserRole.userRoleId), FieldRef(com.bookstore.domain.security.UserRole.user), FieldRef(com.bookstore.domain.security.UserRole.role)]
NRA.java: genExprNra(): projectNode name: User.userRoles=Pi
NRA.java: genExprNra(): nestexpr= User.userRoles=Pi
| Join
| | Alpha
| | ClassRef(UserRole)
| | Equals
| | | Alpha.id
| | | UserRole.user_id
| List
| | userRoleId
| | NullOp
| | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.User.id), FieldRef(com.bookstore.domain.User.username), FieldRef(com.bookstore.domain.User.password), FieldRef(com.bookstore.domain.User.firstName), FieldRef(com.bookstore.domain.User.lastName), FieldRef(com.bookstore.domain.User.email), FieldRef(com.bookstore.domain.User.phone), FieldRef(com.bookstore.domain.User.enabled), FieldRef(com.bookstore.domain.User.shoppingCart), FieldRef(com.bookstore.domain.User.userShippingList), FieldRef(com.bookstore.domain.User.userOrderList), FieldRef(com.bookstore.domain.User.userPaymentList), FieldRef(com.bookstore.domain.User.userRoles)]
NRA.java: genExprNra(): projectNode name: Order.user=Pi
NRA.java: genExprNra(): nestexpr= Order.user=Pi
| Join
| | Alpha
| | ClassRef(User)
| | Equals
| | | Alpha.user_id
| | | User.id
| List
| | id
| | username
| | password
| | firstName
| | lastName
| | email
| | phone
| | enabled
| | User.shoppingCart=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShoppingCart)
| | | | Equals
| | | | | Alpha.id
| | | | | ShoppingCart.userId
| | | List
| | | | id
| | | | GrandTotal
| | | | NullOp
| | | | NullOp
| | User.userShippingList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(UserShipping)
| | | | Equals
| | | | | Alpha.id
| | | | | UserShipping.user_id
| | | List
| | | | id
| | | | userShippingName
| | | | userShippingStreet1
| | | | userShippingStreet2
| | | | userShippingCity
| | | | userShippingState
| | | | userShippingCountry
| | | | userShippingZipcode
| | | | userShippingDefault
| | | | NullOp
| | User.userOrderList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Order)
| | | | Equals
| | | | | Alpha.id
| | | | | Order.user_id
| | | List
| | | | id
| | | | orderDate
| | | | shippingDate
| | | | shippingMethod
| | | | orederStatus
| | | | orderTotal
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | | | NullOp
| | User.userPaymentList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(UserPayment)
| | | | Equals
| | | | | Alpha.id
| | | | | UserPayment.user_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | defaultPayment
| | | | NullOp
| | | | NullOp
| | User.userRoles=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(UserRole)
| | | | Equals
| | | | | Alpha.id
| | | | | UserRole.user_id
| | | List
| | | | userRoleId
| | | | NullOp
| | | | NullOp
NRA.java: genExprNra(): ListNode columns=[FieldRef(com.bookstore.domain.Order.id), FieldRef(com.bookstore.domain.Order.orderDate), FieldRef(com.bookstore.domain.Order.shippingDate), FieldRef(com.bookstore.domain.Order.shippingMethod), FieldRef(com.bookstore.domain.Order.orederStatus), FieldRef(com.bookstore.domain.Order.orderTotal), FieldRef(com.bookstore.domain.Order.cartItemList), FieldRef(com.bookstore.domain.Order.shippingAddress), FieldRef(com.bookstore.domain.Order.payment), FieldRef(com.bookstore.domain.Order.billingAddress), FieldRef(com.bookstore.domain.Order.user)]
NRA.java: genExprNra(): projectNode name: CartItem.order=Pi
DIRRegionAnalyzer.java: constructDIR(): nested VeMap : 
DIRRegionAnalyzer.java: constructDIR(): repeat node
DIRRegionAnalyzer.java: constructDIR(): key : return.order
 value : 
 CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)
DIRRegionAnalyzer.java: constructDIR(): key = $r1.order
DIRRegionAnalyzer.java: constructDIR(): val = CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r3.id
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id
DIRRegionAnalyzer.java: constructDIR(): key = return.book
DIRRegionAnalyzer.java: constructDIR(): val = CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r2.book
DIRRegionAnalyzer.java: constructDIR(): val = CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r1.id
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id
DIRRegionAnalyzer.java: constructDIR(): key = $r1.book
DIRRegionAnalyzer.java: constructDIR(): val = CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r1.bookToCartItemList
DIRRegionAnalyzer.java: constructDIR(): val = CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r3.order
DIRRegionAnalyzer.java: constructDIR(): val = CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r1.qty
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty
DIRRegionAnalyzer.java: constructDIR(): key = return.id
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id
DIRRegionAnalyzer.java: constructDIR(): key = return.qty
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty
DIRRegionAnalyzer.java: constructDIR(): key = return.bookToCartItemList
DIRRegionAnalyzer.java: constructDIR(): val = CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r3.subtotal
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal
DIRRegionAnalyzer.java: constructDIR(): key = $r0
DIRRegionAnalyzer.java: constructDIR(): val = this.cartItemRepository
DIRRegionAnalyzer.java: constructDIR(): key = $r1
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId
DIRRegionAnalyzer.java: constructDIR(): key = $r3.qty
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty
DIRRegionAnalyzer.java: constructDIR(): key = $r2
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId
DIRRegionAnalyzer.java: constructDIR(): key = $r3
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId
DIRRegionAnalyzer.java: constructDIR(): key = $r2.subtotal
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal
DIRRegionAnalyzer.java: constructDIR(): key = this
DIRRegionAnalyzer.java: constructDIR(): val = Self
DIRRegionAnalyzer.java: constructDIR(): key = return.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): val = CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r2.id
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id
DIRRegionAnalyzer.java: constructDIR(): key = $r2.order
DIRRegionAnalyzer.java: constructDIR(): val = CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r3.bookToCartItemList
DIRRegionAnalyzer.java: constructDIR(): val = CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return.subtotal
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal
DIRRegionAnalyzer.java: constructDIR(): key = $r2.qty
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty
DIRRegionAnalyzer.java: constructDIR(): key = $r2.bookToCartItemList
DIRRegionAnalyzer.java: constructDIR(): val = CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r1.subtotal
DIRRegionAnalyzer.java: constructDIR(): val = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal
DIRRegionAnalyzer.java: constructDIR(): key = $r3.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): val = CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r2.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): val = CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return.order
DIRRegionAnalyzer.java: constructDIR(): val = CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r1.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): val = CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r3.book
DIRRegionAnalyzer.java: constructDIR(): val = CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId
DIRRegionAnalyzer.java: constructDIR(): key = return
DIRRegionAnalyzer.java: constructDIR(): val = Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId
DIRRegionAnalyzer.java: constructDIR(): Printing ve map of callee = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long) END
DIRRegionAnalyzer.java: constructDIR(): v1 access paths: [$r2.id, $r2.qty, $r2.subtotal, $r2.book, $r2.bookToCartItemList, $r2.shoppingCart, $r2.order]
DIRRegionAnalyzer.java: constructDIR(): key = $r2.id
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.id
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [cartItemId, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [id, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = cartItemId, actual = id
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| id
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| id
DIRRegionAnalyzer.java: constructDIR(): key = $r2.qty
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.qty
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [cartItemId, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [id, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = cartItemId, actual = id
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| qty
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| qty
DIRRegionAnalyzer.java: constructDIR(): key = $r2.subtotal
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.subtotal
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [cartItemId, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [id, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = cartItemId, actual = id
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal
DIRRegionAnalyzer.java: constructDIR(): callersDag = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| subtotal
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| subtotal
DIRRegionAnalyzer.java: constructDIR(): key = $r2.book
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.book
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [cartItemId, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [id, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = cartItemId, actual = id
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): callersDag = CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r2.bookToCartItemList
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.bookToCartItemList
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [cartItemId, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [id, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = cartItemId, actual = id
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): callersDag = CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r2.shoppingCart
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.shoppingCart
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [cartItemId, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [id, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = cartItemId, actual = id
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): callersDag = CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): key = $r2.order
DIRRegionAnalyzer.java: constructDIR(): lookup (retAccp) = return.order
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r0.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>(id)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [cartItemId, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [id, $r0]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formal = cartItemId, actual = id
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): callersDag = CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): resolvedVal = CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIRRegionAnalyzer.java: constructDIR(): curUnit = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r0
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): CASE: v.f = expr, f is non-primtive
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>
DIRRegionAnalyzer.java: constructDIR(): accessPaths = [this.cartItemServiceImpl.bookToCartItemRepository, this.cartItemServiceImpl.cartItemRepository]
DIRRegionAnalyzer.java: constructDIR(): right val = $r0
DIRRegionAnalyzer.java: constructDIR(): Subcase: v1.f = v2
AccessPath.java: replaceBase(): input access path: this.cartItemServiceImpl.bookToCartItemRepository
AccessPath.java: replaceBase(): replacement of base: $r0
WARN: DIRRegionAnalyzer.java: constructDIR(): Invalid intermediate access path found
AccessPath.java: replaceBase(): input access path: this.cartItemServiceImpl.cartItemRepository
AccessPath.java: replaceBase(): replacement of base: $r0
WARN: DIRRegionAnalyzer.java: constructDIR(): Invalid intermediate access path found
DIRRegionAnalyzer.java: constructDIR(): curUnit = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)>($r2)
DIRRegionAnalyzer.java: constructDIR(): CASE: v1.foo(v2)
DIRRegionAnalyzer.java: handleSideEffects(): invokeExpr = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)>($r2)
DIRRegionAnalyzer.java: handleSideEffects(): methodname: removeCartItem
DIRRegionAnalyzer.java: handleSideEffects(): invokedSig = com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): soot method = <com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)>
DIRRegionAnalyzer.java: handleSideEffects(): formalArgs = [cartItem, this]
DIRRegionAnalyzer.java: handleSideEffects(): actualArgs = [$r2, $r1]
ARegion.java: analyze(): set cur method of analyzer to: removeCartItem
DIRRegionAnalyzer.java: constructDIR(): region = | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): Basic block num: 0
DIRRegionAnalyzer.java: constructDIR(): basic block = [this := @this: com.bookstore.service.impl.CartItemServiceImpl, cartItem := @parameter0: com.bookstore.domain.CartItem, $r0 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.BookToCartItemRepository bookToCartItemRepository>, interfaceinvoke $r0.<com.bookstore.repository.BookToCartItemRepository: void deleteByCartItem(com.bookstore.domain.CartItem)>(cartItem), $r1 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>, interfaceinvoke $r1.<com.bookstore.repository.CartItemRepository: void delete(java.lang.Object)>(cartItem), return]
DIRRegionAnalyzer.java: constructDIR(): curUnit = this := @this: com.bookstore.service.impl.CartItemServiceImpl
Utils.java: getVarNode(): this
Utils.java: getVarNode(): JimpleLocalBox(this)
DIRRegionAnalyzer.java: constructDIR(): curUnit = cartItem := @parameter0: com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r0 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.BookToCartItemRepository bookToCartItemRepository>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r0 -> this.bookToCartItemRepository
DIRRegionAnalyzer.java: constructDIR(): curUnit = interfaceinvoke $r0.<com.bookstore.repository.BookToCartItemRepository: void deleteByCartItem(com.bookstore.domain.CartItem)>(cartItem)
DIRRegionAnalyzer.java: constructDIR(): curUnit = $r1 = this.<com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.repository.CartItemRepository cartItemRepository>
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): CASE v1 = v2.f, f is primitive
DIRRegionAnalyzer.java: constructDIR(): mapping $r1 -> this.cartItemRepository
DIRRegionAnalyzer.java: constructDIR(): curUnit = interfaceinvoke $r1.<com.bookstore.repository.CartItemRepository: void delete(java.lang.Object)>(cartItem)
DIRRegionAnalyzer.java: constructDIR(): deleteStmt: interfaceinvoke $r1.<com.bookstore.repository.CartItemRepository: void delete(java.lang.Object)>(cartItem)
DIRRegionAnalyzer.java: constructDIR(): deleteStmt invoke expr: interfaceinvoke $r1.<com.bookstore.repository.CartItemRepository: void delete(java.lang.Object)>(cartItem)
DIRRegionAnalyzer.java: constructDIR(): baseVarNode: $r1
DIRRegionAnalyzer.java: constructDIR(): dir till now: ~~~ $r0 ~~~
this.bookToCartItemRepository

~~~ $r1 ~~~
this.cartItemRepository

~~~ this ~~~
Self


DIRRegionAnalyzer.java: constructDIR(): ve map:{$r0=this.bookToCartItemRepository, $r1=this.cartItemRepository, this=Self}
DIRRegionAnalyzer.java: constructDIR(): repo: this.cartItemRepository
DIRRegionAnalyzer.java: caseDeleteEntity: argType: com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: caseDeleteEntity: table: com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: caseDeleteEntity: attributes: [id, qty, subtotal]
DIRRegionAnalyzer.java: caseDeleteEntity: fieldVarNodes: [cartItem.id, cartItem.qty, cartItem.subtotal]
DIRRegionAnalyzer.java: caseDeleteEntity: listNode.columns: [FieldRef(com.bookstore.domain.CartItem.id), FieldRef(com.bookstore.domain.CartItem.qty), FieldRef(com.bookstore.domain.CartItem.subtotal)]
DIRRegionAnalyzer.java: caseDeleteEntity: mapping: this.cartItemRepository -> RelationalMinus
| this.cartItemRepository
| List
| | cartItem.id
| | cartItem.qty
| | cartItem.subtotal
DIRRegionAnalyzer.java: constructDIR(): curUnit = return
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r0 ~~~
this.bookToCartItemRepository

~~~ $r1 ~~~
this.cartItemRepository

~~~ this ~~~
Self

~~~ this.cartItemRepository ~~~
RelationalMinus
| this.cartItemRepository
| List
| | cartItem.id
| | cartItem.qty
| | cartItem.subtotal


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r0 ~~~
this.bookToCartItemRepository

~~~ $r1 ~~~
this.cartItemRepository

~~~ this ~~~
Self

~~~ this.cartItemRepository ~~~
RelationalMinus
| this.cartItemRepository
| List
| | cartItem.id
| | cartItem.qty
| | cartItem.subtotal


DIR.java: updateRegion(): update region entry: $r0=this.bookToCartItemRepository
DIR.java: updateRegion(): update region entry: this.cartItemRepository=RelationalMinus
| this.cartItemRepository
| List
| | cartItem.id
| | cartItem.qty
| | cartItem.subtotal
DIR.java: updateRegion(): update region entry: $r1=this.cartItemRepository
DIR.java: updateRegion(): update region entry: this=Self
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: cartItem
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.bookstore.domain.CartItem
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: $r2
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: cartItem
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [cartItem.id, cartItem.qty, cartItem.subtotal, cartItem.book, cartItem.bookToCartItemList, cartItem.shoppingCart, cartItem.order]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: cartItem.id
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this.cartItemRepository, $r1, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: cartItem.qty
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this.cartItemRepository, $r1, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: cartItem.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this.cartItemRepository, $r1, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: cartItem.book
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this.cartItemRepository, $r1, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: cartItem.bookToCartItemList
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this.cartItemRepository, $r1, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: cartItem.shoppingCart
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this.cartItemRepository, $r1, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: cartItem.order
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this.cartItemRepository, $r1, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): ith formal: this
DIRRegionAnalyzer.java: handleSideEffects(): ith formal type: com.bookstore.service.impl.CartItemServiceImpl
DIRRegionAnalyzer.java: handleSideEffects(): ith actual: $r1
DIRRegionAnalyzer.java: handleSideEffects(): Going to flatten: this
DIRRegionAnalyzer.java: handleSideEffects(): flattened res = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.bookToCartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this.cartItemRepository, $r1, this]
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = null
DIRRegionAnalyzer.java: handleSideEffects(): formal access path in callee: this.cartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): callee ve map domain: [$r0, this.cartItemRepository, $r1, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): dag to be renamed: RelationalMinus
| this.cartItemRepository
| List
| | cartItem.id
| | cartItem.qty
| | cartItem.subtotal
DIRRegionAnalyzer.java: dagFormalsToActuals(): invoke expression: virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)>($r2)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokeExpr = virtualinvoke $r1.<com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)>($r2)
DIRRegionAnalyzer.java: dagFormalsToActuals(): invokedSig = com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: dagFormalsToActuals(): FuncStackAnalyzer.funcRegionMap.domain: [com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long), com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long), com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)]
DIRRegionAnalyzer.java: dagFormalsToActuals(): soot method = <com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)>
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalArgs = [cartItem, this]
DIRRegionAnalyzer.java: dagFormalsToActuals(): actualArgs = [$r2, $r1]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [cartItem.id, cartItem.qty, cartItem.subtotal, cartItem.book, cartItem.bookToCartItemList, cartItem.shoppingCart, cartItem.order]
DIRRegionAnalyzer.java: dagFormalsToActuals(): formalAccpList = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: dagFormalsToActuals(): ret init val: RelationalMinus
| this.cartItemRepository
| List
| | cartItem.id
| | cartItem.qty
| | cartItem.subtotal
DIRRegionAnalyzer.java: handleSideEffects(): formalaccp eedag = RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal
DIRRegionAnalyzer.java: handleSideEffects(): method and affected keys = removeCartItem, [$r1.cartItemRepository]
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: cartItem
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: $r2
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [cartItem.id, cartItem.qty, cartItem.subtotal, cartItem.book, cartItem.bookToCartItemList, cartItem.shoppingCart, cartItem.order]
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r1.cartItemRepository ~~~
RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal

~~~ $r2 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | id

~~~ $r2.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| id

~~~ $r2.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| qty

~~~ $r2.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| subtotal

~~~ this ~~~
Self


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r1.cartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal
DIRRegionAnalyzer.java: handleSideEffects(): after: RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r1.cartItemRepository ~~~
RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal

~~~ $r2 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | id

~~~ $r2.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| id

~~~ $r2.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| qty

~~~ $r2.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| subtotal

~~~ this ~~~
Self


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r1.cartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal
DIRRegionAnalyzer.java: handleSideEffects(): after: RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r1.cartItemRepository ~~~
RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal

~~~ $r2 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | id

~~~ $r2.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| id

~~~ $r2.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| qty

~~~ $r2.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| subtotal

~~~ this ~~~
Self


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r1.cartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal
DIRRegionAnalyzer.java: handleSideEffects(): after: RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r1.cartItemRepository ~~~
RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal

~~~ $r2 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | id

~~~ $r2.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| id

~~~ $r2.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| qty

~~~ $r2.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| subtotal

~~~ this ~~~
Self


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r1.cartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal
DIRRegionAnalyzer.java: handleSideEffects(): after: RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r1.cartItemRepository ~~~
RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal

~~~ $r2 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | id

~~~ $r2.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| id

~~~ $r2.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| qty

~~~ $r2.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| subtotal

~~~ this ~~~
Self


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r1.cartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal
DIRRegionAnalyzer.java: handleSideEffects(): after: RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r1.cartItemRepository ~~~
RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal

~~~ $r2 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | id

~~~ $r2.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| id

~~~ $r2.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| qty

~~~ $r2.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| subtotal

~~~ this ~~~
Self


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r1.cartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal
DIRRegionAnalyzer.java: handleSideEffects(): after: RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r1.cartItemRepository ~~~
RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal

~~~ $r2 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | id

~~~ $r2.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| id

~~~ $r2.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| qty

~~~ $r2.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| subtotal

~~~ this ~~~
Self


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r1.cartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal
DIRRegionAnalyzer.java: handleSideEffects(): after: RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal
DIRRegionAnalyzer.java: handleSideEffects(): formal ith: this
DIRRegionAnalyzer.java: handleSideEffects(): actual ith: $r1
DIRRegionAnalyzer.java: handleSideEffects(): formalAccpList = [this.bookToCartItemRepository, this.cartItemRepository]
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r1.cartItemRepository ~~~
RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal

~~~ $r2 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | id

~~~ $r2.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| id

~~~ $r2.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| qty

~~~ $r2.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| subtotal

~~~ this ~~~
Self


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r1.cartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal
DIRRegionAnalyzer.java: handleSideEffects(): after: RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal
DIRRegionAnalyzer.java: handleSideEffects(): callee: com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)
DIRRegionAnalyzer.java: handleSideEffects(): callee dir: ~~~ $r1.cartItemRepository ~~~
RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal

~~~ $r2 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | id

~~~ $r2.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| id

~~~ $r2.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| qty

~~~ $r2.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| subtotal

~~~ this ~~~
Self


DIRRegionAnalyzer.java: handleSideEffects(): for key = $r1.cartItemRepository
DIRRegionAnalyzer.java: handleSideEffects(): eedag before formaltoactual: RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal
DIRRegionAnalyzer.java: handleSideEffects(): after: RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal
DIRRegionAnalyzer.java: constructDIR(): curUnit = this.<com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl> = $r1
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JAssignStmt
DIRRegionAnalyzer.java: constructDIR(): leftClass = class soot.jimple.internal.JInstanceFieldRef
DIRRegionAnalyzer.java: constructDIR(): rightClass = class soot.jimple.internal.JimpleLocal
DIRRegionAnalyzer.java: constructDIR(): CASE: v.f = expr, f is non-primtive
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>
Flatten.java: prependBaseToAccp: var instance of fieldref
Flatten.java: prependBaseToAccp: fieldtostring: <com.bookstore.controller.ShoppingCartController: com.bookstore.service.impl.CartItemServiceImpl cartItemServiceImpl>
DIRRegionAnalyzer.java: constructDIR(): accessPaths = [this.cartItemServiceImpl.bookToCartItemRepository, this.cartItemServiceImpl.cartItemRepository]
DIRRegionAnalyzer.java: constructDIR(): right val = $r1
DIRRegionAnalyzer.java: constructDIR(): Subcase: v1.f = v2
AccessPath.java: replaceBase(): input access path: this.cartItemServiceImpl.bookToCartItemRepository
AccessPath.java: replaceBase(): replacement of base: $r1
WARN: DIRRegionAnalyzer.java: constructDIR(): Invalid intermediate access path found
AccessPath.java: replaceBase(): input access path: this.cartItemServiceImpl.cartItemRepository
AccessPath.java: replaceBase(): replacement of base: $r1
DIRRegionAnalyzer.java: constructDIR(): Mapped: this.cartItemServiceImpl.cartItemRepository -> $r1.cartItemRepository
DIRRegionAnalyzer.java: constructDIR(): curUnit = return "forward:/shoppingCart/cart"
DIRRegionAnalyzer.java: constructDIR(): curUnit instance of JReturnStmt
DIRRegionAnalyzer.java: constructDIR(): Finished with all the statements
DIRRegionAnalyzer.java: constructDIR(): BasicBlockRegion: | BasicBlock0
DIRRegionAnalyzer.java: constructDIR(): BasicBlockDIR: ~~~ $r1.cartItemRepository ~~~
RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal

~~~ $r2 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | id

~~~ $r2.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| id

~~~ $r2.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| qty

~~~ $r2.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| subtotal

~~~ return ~~~
"forward:/shoppingCart/cart"

~~~ this ~~~
Self

~~~ this.cartItemServiceImpl.cartItemRepository ~~~
RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal


AbstractDIRRegionAnalyzer.java: run(): AbstractRegion dir constructed: ~~~ $r1.cartItemRepository ~~~
RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal

~~~ $r2 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | id

~~~ $r2.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| id

~~~ $r2.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| qty

~~~ $r2.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| subtotal

~~~ return ~~~
"forward:/shoppingCart/cart"

~~~ this ~~~
Self

~~~ this.cartItemServiceImpl.cartItemRepository ~~~
RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal


DIR.java: updateRegion(): update region entry: $r1.cartItemRepository=RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal
DIR.java: updateRegion(): update region entry: $r2=Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | id
DIR.java: updateRegion(): update region entry: $r2.subtotal=Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| subtotal
DIR.java: updateRegion(): update region entry: $r2.shoppingCart=CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: this.cartItemServiceImpl.cartItemRepository=RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal
DIR.java: updateRegion(): update region entry: this=Self
DIR.java: updateRegion(): update region entry: $r2.id=Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| id
DIR.java: updateRegion(): update region entry: $r2.order=CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: $r2.book=CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: $r2.qty=Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| qty
DIR.java: updateRegion(): update region entry: $r2.bookToCartItemList=CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
DIR.java: updateRegion(): update region entry: return="forward:/shoppingCart/cart"
Resultant dag : ~~~ $r1.cartItemRepository ~~~
RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal

~~~ $r2 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | id

~~~ $r2.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| id

~~~ $r2.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| qty

~~~ $r2.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| subtotal

~~~ return ~~~
"forward:/shoppingCart/cart"

~~~ this ~~~
Self

~~~ this.cartItemServiceImpl.cartItemRepository ~~~
RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal


final FuncStackAnalyzer3 = 
{java.lang.Object: java.util.Optional findById(java.lang.Object)=~~~ optionalret ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ return.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ return.book.active ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.active)

~~~ return.book.author ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.author)

~~~ return.book.bookToCartItemsList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| ClassRef(com.bookstore.domain.BookToCartItem)
| NullOp

~~~ return.book.cartItem ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.book.category ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.category)

~~~ return.book.description ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.description)

~~~ return.book.format ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.format)

~~~ return.book.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.id)

~~~ return.book.inStockNumber ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.inStockNumber)

~~~ return.book.isbn ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.isbn)

~~~ return.book.language ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.language)

~~~ return.book.listPrice ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.listPrice)

~~~ return.book.numberOfPages ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.numberOfPages)

~~~ return.book.ourPrice ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.ourPrice)

~~~ return.book.publicationDate ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.publicationDate)

~~~ return.book.publisher ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.publisher)

~~~ return.book.shippingWeight ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.shippingWeight)

~~~ return.book.title ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | NullOp
| FieldRef(com.bookstore.domain.Book.title)

~~~ return.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id

~~~ return.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ return.order.billingAddress ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.BillingAddress)
| NullOp

~~~ return.order.cartItemList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.order.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.id)

~~~ return.order.orderDate ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.orderDate)

~~~ return.order.orderTotal ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.orderTotal)

~~~ return.order.orederStatus ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.orederStatus)

~~~ return.order.payment ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.Payment)
| NullOp

~~~ return.order.shippingAddress ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| ClassRef(com.bookstore.domain.ShippingAddress)
| NullOp

~~~ return.order.shippingDate ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.shippingDate)

~~~ return.order.shippingMethod ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | NullOp
| FieldRef(com.bookstore.domain.Order.shippingMethod)

~~~ return.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty

~~~ return.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ return.shoppingCart.GrandTotal ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.GrandTotal)

~~~ return.shoppingCart.cartItemList ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.CartItem)
| NullOp

~~~ return.shoppingCart.id ~~~
Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| FieldRef(com.bookstore.domain.ShoppingCart.id)

~~~ return.shoppingCart.user ~~~
Join
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | NullOp
| ClassRef(com.bookstore.domain.User)
| NullOp

~~~ return.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal

, com.bookstore.service.impl.CartItemServiceImpl: com.bookstore.domain.CartItem findById(java.lang.Long)=~~~ $r0 ~~~
this.cartItemRepository

~~~ $r1 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ $r1.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id

~~~ $r1.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty

~~~ $r1.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r1.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal

~~~ $r2 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ $r2.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id

~~~ $r2.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty

~~~ $r2.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r2.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal

~~~ $r3 ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ $r3.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r3.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ $r3.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id

~~~ $r3.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r3.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty

~~~ $r3.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | cartItemId
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ $r3.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ return ~~~
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | cartItemId

~~~ return.book ~~~
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ return.bookToCartItemList ~~~
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

~~~ return.id ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| id

~~~ return.order ~~~
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ return.qty ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| qty

~~~ return.shoppingCart ~~~
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

~~~ return.subtotal ~~~
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | cartItemId
| subtotal

~~~ this ~~~
Self

, com.bookstore.service.impl.CartItemServiceImpl: void removeCartItem(com.bookstore.domain.CartItem)=~~~ $r0 ~~~
this.bookToCartItemRepository

~~~ $r1 ~~~
this.cartItemRepository

~~~ this ~~~
Self

~~~ this.cartItemRepository ~~~
RelationalMinus
| this.cartItemRepository
| List
| | cartItem.id
| | cartItem.qty
| | cartItem.subtotal

}
FuncStackAnalyzer.java: constructDIRForStack(): Printing veMap for method: com.bookstore.controller.ShoppingCartController: java.lang.String removeItem(java.lang.Long)
FuncStackAnalyzer.java: constructDIRForStack(): VEMap Num Entries: 12
FuncStackAnalyzer.java: constructDIRForStack(): key set of ve map of root function: [$r1.cartItemRepository, $r2, $r2.subtotal, $r2.shoppingCart, this.cartItemServiceImpl.cartItemRepository, this, $r2.id, $r2.order, $r2.book, $r2.qty, $r2.bookToCartItemList, return]
Final veMap of $r1.cartItemRepository = 
RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal
SavePostProcess.java: SavePostProcess(): repo varnode: $r1.cartItemRepository
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r2 = 
Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | id
SavePostProcess.java: SavePostProcess(): repo varnode: $r2
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r2.subtotal = 
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| subtotal
SavePostProcess.java: SavePostProcess(): repo varnode: $r2.subtotal
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r2.shoppingCart = 
CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
SavePostProcess.java: SavePostProcess(): repo varnode: $r2.shoppingCart
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of this.cartItemServiceImpl.cartItemRepository = 
RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal
SavePostProcess.java: SavePostProcess(): repo varnode: this.cartItemServiceImpl.cartItemRepository
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of this = 
Self
SavePostProcess.java: SavePostProcess(): repo varnode: this
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r2.id = 
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| id
SavePostProcess.java: SavePostProcess(): repo varnode: $r2.id
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r2.order = 
CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp
SavePostProcess.java: SavePostProcess(): repo varnode: $r2.order
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r2.book = 
CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
SavePostProcess.java: SavePostProcess(): repo varnode: $r2.book
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r2.qty = 
Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| qty
SavePostProcess.java: SavePostProcess(): repo varnode: $r2.qty
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of $r2.bookToCartItemList = 
CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
SavePostProcess.java: SavePostProcess(): repo varnode: $r2.bookToCartItemList
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
Final veMap of return = 
"forward:/shoppingCart/cart"
SavePostProcess.java: SavePostProcess(): repo varnode: return
SavePostProcess.java: SavePostProcess(): repo type = null
WARN: SavePostProcess.java: SavePostProcess(): repository type is null, as a consequence, cannot find id field
key: $r1.cartItemRepository
value: RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal

key: $r2
value: Sel
| ClassRef(com.bookstore.domain.CartItem)
| Equals
| | FieldRef(com.bookstore.domain.CartItem.Id)
| | id

key: $r2.subtotal
value: Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| subtotal

key: $r2.shoppingCart
value: CartItem.shoppingCart=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.ShoppingCart)
| | Equals
| | | Alpha.shoppingCartId
| | | ShoppingCart.id
| List
| | id
| | GrandTotal
| | ShoppingCart.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.shoppingCartId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | ShoppingCart.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | lhs.lhs
| | | | | rhs.rhs
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

key: this.cartItemServiceImpl.cartItemRepository
value: RelationalMinus
| $r1.cartItemRepository
| List
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | id
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | qty
| | Pi
| | | Sel
| | | | ClassRef(com.bookstore.domain.CartItem)
| | | | Equals
| | | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | | id
| | | subtotal

key: this
value: Self

key: $r2.id
value: Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| id

key: $r2.order
value: CartItem.order=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Order)
| | Equals
| | | Alpha.orderId
| | | Order.id
| List
| | id
| | orderDate
| | shippingDate
| | shippingMethod
| | orederStatus
| | orderTotal
| | Order.cartItemList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.orderId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.shippingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(ShippingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | ShippingAddress.order_id
| | | List
| | | | id
| | | | shippingAddressName
| | | | shippingAddressStreet1
| | | | shippingAddressStreet2
| | | | shippingAddressCity
| | | | shippingAddressState
| | | | shippingAddressCountry
| | | | shippingAddressZipcode
| | | | ShippingAddress.user=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(User)
| | | | | | Equals
| | | | | | | Alpha.user_id
| | | | | | | User.id
| | | | | List
| | | | | | id
| | | | | | username
| | | | | | password
| | | | | | firstName
| | | | | | lastName
| | | | | | email
| | | | | | phone
| | | | | | enabled
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | ShippingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.payment=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Payment)
| | | | Equals
| | | | | Alpha.id
| | | | | Payment.order_id
| | | List
| | | | id
| | | | type
| | | | cardName
| | | | cardNumber
| | | | expiryMonth
| | | | expiryYear
| | | | cvc
| | | | holderName
| | | | Payment.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | Payment.userBilling=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserBilling)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | userBillingName
| | | | | | userBillingStreet1
| | | | | | userBillingStreet2
| | | | | | userBillingCity
| | | | | | userBillingState
| | | | | | userBillingCountry
| | | | | | userBillingZipcode
| | | | | | NullOp
| | | | | | NullOp
| | Order.billingAddress=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BillingAddress)
| | | | Equals
| | | | | Alpha.id
| | | | | BillingAddress.order_id
| | | List
| | | | id
| | | | billingAddressName
| | | | billingAddressgStreet1
| | | | billingAddressgStreet2
| | | | billingAddressCity
| | | | billingAddressState
| | | | billingAddressCountry
| | | | billingAddressZipcode
| | | | BillingAddress.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | lhs.lhs
| | | | | | | rhs.rhs
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Order.user=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(User)
| | | | Equals
| | | | | Alpha.user_id
| | | | | User.id
| | | List
| | | | id
| | | | username
| | | | password
| | | | firstName
| | | | lastName
| | | | email
| | | | phone
| | | | enabled
| | | | User.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | ShoppingCart.userId
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userShippingList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserShipping)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserShipping.user_id
| | | | | List
| | | | | | id
| | | | | | userShippingName
| | | | | | userShippingStreet1
| | | | | | userShippingStreet2
| | | | | | userShippingCity
| | | | | | userShippingState
| | | | | | userShippingCountry
| | | | | | userShippingZipcode
| | | | | | userShippingDefault
| | | | | | NullOp
| | | | User.userOrderList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Order.user_id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userPaymentList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserPayment)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserPayment.user_id
| | | | | List
| | | | | | id
| | | | | | type
| | | | | | cardName
| | | | | | cardNumber
| | | | | | expiryMonth
| | | | | | expiryYear
| | | | | | cvc
| | | | | | holderName
| | | | | | defaultPayment
| | | | | | NullOp
| | | | | | NullOp
| | | | User.userRoles=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(UserRole)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | UserRole.user_id
| | | | | List
| | | | | | userRoleId
| | | | | | NullOp
| | | | | | NullOp

key: $r2.book
value: CartItem.book=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.Book)
| | Equals
| | | Alpha.id
| | | Book.cartItemId
| List
| | id
| | title
| | author
| | publisher
| | publicationDate
| | language
| | category
| | numberOfPages
| | format
| | isbn
| | shippingWeight
| | listPrice
| | ourPrice
| | active
| | description
| | inStockNumber
| | bookImage
| | Book.bookToCartItemsList=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(BookToCartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | BookToCartItem.bookId
| | | List
| | | | id
| | | | BookToCartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.bookId
| | | | | | | Book.id
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | BookToCartItem.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.cartItemId
| | | | | | | CartItem.id
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | Book.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.id
| | | | | CartItem.bookId
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

key: $r2.qty
value: Pi
| Sel
| | ClassRef(com.bookstore.domain.CartItem)
| | Equals
| | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | id
| qty

key: $r2.bookToCartItemList
value: CartItem.bookToCartItemList=Pi
| Join
| | Sel
| | | ClassRef(com.bookstore.domain.CartItem)
| | | Equals
| | | | FieldRef(com.bookstore.domain.CartItem.Id)
| | | | id
| | ClassRef(com.bookstore.domain.BookToCartItem)
| | Equals
| | | Alpha.id
| | | BookToCartItem.cartItemId
| List
| | id
| | BookToCartItem.book=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(Book)
| | | | Equals
| | | | | Alpha.bookId
| | | | | Book.id
| | | List
| | | | id
| | | | title
| | | | author
| | | | publisher
| | | | publicationDate
| | | | language
| | | | category
| | | | numberOfPages
| | | | format
| | | | isbn
| | | | shippingWeight
| | | | listPrice
| | | | ourPrice
| | | | active
| | | | description
| | | | inStockNumber
| | | | bookImage
| | | | Book.bookToCartItemsList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.bookId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | Book.cartItem=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(CartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | CartItem.bookId
| | | | | List
| | | | | | id
| | | | | | qty
| | | | | | subtotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | BookToCartItem.cartItem=Pi
| | | Join
| | | | Alpha
| | | | ClassRef(CartItem)
| | | | Equals
| | | | | Alpha.cartItemId
| | | | | CartItem.id
| | | List
| | | | id
| | | | qty
| | | | subtotal
| | | | CartItem.book=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Book)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | Book.cartItemId
| | | | | List
| | | | | | id
| | | | | | title
| | | | | | author
| | | | | | publisher
| | | | | | publicationDate
| | | | | | language
| | | | | | category
| | | | | | numberOfPages
| | | | | | format
| | | | | | isbn
| | | | | | shippingWeight
| | | | | | listPrice
| | | | | | ourPrice
| | | | | | active
| | | | | | description
| | | | | | inStockNumber
| | | | | | bookImage
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.bookToCartItemList=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(BookToCartItem)
| | | | | | Equals
| | | | | | | Alpha.id
| | | | | | | BookToCartItem.cartItemId
| | | | | List
| | | | | | id
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.shoppingCart=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(ShoppingCart)
| | | | | | Equals
| | | | | | | Alpha.shoppingCartId
| | | | | | | ShoppingCart.id
| | | | | List
| | | | | | id
| | | | | | GrandTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | CartItem.order=Pi
| | | | | Join
| | | | | | Alpha
| | | | | | ClassRef(Order)
| | | | | | Equals
| | | | | | | Alpha.orderId
| | | | | | | Order.id
| | | | | List
| | | | | | id
| | | | | | orderDate
| | | | | | shippingDate
| | | | | | shippingMethod
| | | | | | orederStatus
| | | | | | orderTotal
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp
| | | | | | NullOp

key: return
value: "forward:/shoppingCart/cart"





























Tables and Fields :

Order fields = 
{orederStatus=FieldData, shippingDate=Date, orderId=FieldData, cartItemList=CartItem, shippingMethod=FieldData, orderTotal=FieldData, user_id=FieldData, shippingAddress=ShippingAddress, payment=Payment, id=FieldData, billingAddress=BillingAddress, orderDate=Date, order_id=FieldData, user=User}

User fields = 
{lastName=FieldData, userShippingList=UserShipping, userId=FieldData, enabled=FieldData, firstName=FieldData, userRoles=UserRole, password=FieldData, userPaymentList=UserPayment, userOrderList=Order, phone=FieldData, user_id=FieldData, shoppingCart=ShoppingCart, id=FieldData, email=FieldData, username=FieldData}

CartItem fields = 
{orderId=FieldData, subtotal=FieldData, qty=FieldData, book=Book, bookToCartItemList=BookToCartItem, shoppingCart=ShoppingCart, id=FieldData, shoppingCartId=FieldData, cartItemId=FieldData, order=Order}

BookToCartItem fields = 
{book=Book, id=FieldData, cartItem=CartItem, bookId=FieldData, cartItemId=FieldData}

UserBilling fields = 
{userBillingZipcode=FieldData, userBillingCity=FieldData, userBillingCountry=FieldData, userPayment=UserPayment, userBillingName=FieldData, userBilling_id=FieldData, payment=Payment, id=FieldData, userBillingStreet2=FieldData, userBillingStreet1=FieldData, userBillingState=FieldData}

BillingAddress fields = 
{billingAddressState=FieldData, billingAddressCity=FieldData, billingAddressName=FieldData, billingAddressgStreet1=FieldData, billingAddressgStreet2=FieldData, billingAddressZipcode=FieldData, id=FieldData, billingAddressCountry=FieldData, order=Order}

Payment fields = 
{cvc=FieldData, holderName=FieldData, cardName=FieldData, userBilling=UserBilling, expiryMonth=FieldData, id=FieldData, expiryYear=FieldData, type=FieldData, cardNumber=FieldData, order=Order}

ShoppingCart fields = 
{cartItemList=CartItem, GrandTotal=FieldData, id=FieldData, shoppingCartId=FieldData, user=User}

Book fields = 
{inStockNumber=FieldData, bookImage=MultipartFile, author=FieldData, isbn=FieldData, format=FieldData, active=FieldData, description=FieldData, language=FieldData, title=FieldData, bookToCartItemsList=BookToCartItem, cartItem=CartItem, bookId=FieldData, numberOfPages=FieldData, shippingWeight=FieldData, publisher=FieldData, id=FieldData, category=FieldData, publicationDate=FieldData, ourPrice=FieldData, listPrice=FieldData}

UserRole fields = 
{role=Role, user_id=FieldData, role_id=FieldData, userRoleId=FieldData, user=User}

ShippingAddress fields = 
{shippingAddressCity=FieldData, shippingAddressState=FieldData, shippingAddressStreet2=FieldData, shippingAddressStreet1=FieldData, user_id=FieldData, shippingAddressName=FieldData, id=FieldData, user=User, shippingAddressZipcode=FieldData, shippingAddressCountry=FieldData, order=Order}

UserShipping fields = 
{user_id=FieldData, userShippingDefault=FieldData, userShippingName=FieldData, userShippingStreet2=FieldData, userShippingStreet1=FieldData, id=FieldData, userShippingCity=FieldData, userShippingZipcode=FieldData, user=User, userShippingState=FieldData, userShippingCountry=FieldData}

UserPayment fields = 
{holderName=FieldData, cardName=FieldData, userPayment_id=FieldData, userBilling=UserBilling, expiryMonth=FieldData, expiryYear=FieldData, type=FieldData, cvc=FieldData, defaultPayment=FieldData, user_id=FieldData, id=FieldData, user=User, cardNumber=FieldData}

{u_Order=[u_shippingMethod, u_orderTotal, u_user, u_payment, u_cartItemList, u_order_id, u_shippingDate, u_id, u_orederStatus, u_user_id, u_billingAddress, u_orderDate, u_orderId, u_shippingAddress], u_BillingAddress=[u_billingAddressState, u_billingAddressCountry, u_order, u_billingAddressName, u_billingAddressZipcode, u_id, u_billingAddressCity, u_billingAddressgStreet1, u_billingAddressgStreet2], u_UserRole=[u_userRoleId, u_user_id, u_role, u_role_id, u_user], u_UserPayment=[u_holderName, u_userBilling, u_defaultPayment, u_user, u_cardName, u_expiryMonth, u_expiryYear, u_id, u_user_id, u_cardNumber, u_userPayment_id, u_cvc, u_type], u_UserBilling=[u_userBillingName, u_id, u_userBillingZipcode, u_userBillingCountry, u_userBillingState, u_userBillingStreet1, u_userBillingCity, u_userPayment, u_userBilling_id, u_userBillingStreet2, u_payment], u_ShippingAddress=[u_order, u_id, u_user_id, u_shippingAddressCountry, u_shippingAddressZipcode, u_shippingAddressStreet2, u_shippingAddressStreet1, u_shippingAddressName, u_user, u_shippingAddressCity, u_shippingAddressState], u_ShoppingCart=[u_shoppingCartId, u_id, u_GrandTotal, u_user, u_cartItemList], u_BookToCartItem=[u_id, u_cartItemId, u_cartItem, u_bookId, u_book], u_CartItem=[u_qty, u_bookToCartItemList, u_shoppingCartId, u_order, u_id, u_cartItemId, u_subtotal, u_orderId, u_book, u_shoppingCart], u_Book=[u_title, u_cartItem, u_language, u_bookId, u_category, u_description, u_ourPrice, u_author, u_isbn, u_id, u_bookImage, u_format, u_active, u_shippingWeight, u_publicationDate, u_bookToCartItemsList, u_listPrice, u_inStockNumber, u_publisher, u_numberOfPages], u_Payment=[u_cardName, u_expiryMonth, u_expiryYear, u_holderName, u_userBilling, u_order, u_id, u_cardNumber, u_cvc, u_type], u_UserShipping=[u_userShippingCity, u_id, u_user_id, u_userShippingZipcode, u_userShippingState, u_userShippingStreet2, u_userShippingCountry, u_userShippingDefault, u_userShippingName, u_userShippingStreet1, u_user], u_User=[u_firstName, u_userPaymentList, u_userRoles, u_email, u_enabled, u_userShippingList, u_id, u_userId, u_phone, u_user_id, u_password, u_lastName, u_userOrderList, u_shoppingCart, u_username]}
{u_shippingAddressStreet2=FieldData, u_shippingAddressStreet1=FieldData, u_bookId=FieldData, u_shippingAddressName=FieldData, u_cartItemList=u_CartItem, u_userRoleId=FieldData, u_ourPrice=FieldData, u_id=FieldData, u_author=FieldData, u_userBillingZipcode=FieldData, u_role=u_Role, u_billingAddress=u_BillingAddress, u_cvc=FieldData, u_userShippingDefault=FieldData, u_userPayment_id=FieldData, u_userPayment=u_UserPayment, u_userPaymentList=u_UserPayment, u_userRoles=u_UserRole, u_billingAddressCountry=FieldData, u_holderName=FieldData, u_userBilling=u_UserBilling, u_orderTotal=FieldData, u_defaultPayment=FieldData, u_language=FieldData, u_cardName=FieldData, u_description=FieldData, u_shippingDate=u_Date, u_lastName=FieldData, u_userShippingZipcode=FieldData, u_email=FieldData, u_user=u_User, u_billingAddressState=FieldData, u_billingAddressZipcode=FieldData, u_orederStatus=FieldData, u_user_id=FieldData, u_password=FieldData, u_publicationDate=FieldData, u_GrandTotal=FieldData, u_userBilling_id=FieldData, u_bookToCartItemsList=u_BookToCartItem, u_role_id=FieldData, u_userBillingCountry=FieldData, u_shippingAddressCity=FieldData, u_userBillingName=FieldData, u_expiryMonth=FieldData, u_expiryYear=FieldData, u_category=FieldData, u_qty=FieldData, u_shippingWeight=FieldData, u_userShippingCountry=FieldData, u_book=u_Book, u_userOrderList=u_Order, u_shippingAddress=u_ShippingAddress, u_username=FieldData, u_cartItem=u_CartItem, u_enabled=FieldData, u_shoppingCartId=FieldData, u_isbn=FieldData, u_phone=FieldData, u_bookImage=u_MultipartFile, u_shippingAddressZipcode=FieldData, u_active=FieldData, u_userShippingName=FieldData, u_inStockNumber=FieldData, u_firstName=FieldData, u_order=u_Order, u_shippingMethod=FieldData, u_subtotal=FieldData, u_userShippingStreet2=FieldData, u_userBillingCity=FieldData, u_userShippingStreet1=FieldData, u_order_id=FieldData, u_userShippingList=u_UserShipping, u_format=FieldData, u_orderDate=u_Date, u_userBillingStreet1=FieldData, u_userBillingStreet2=FieldData, u_publisher=FieldData, u_shippingAddressCountry=FieldData, u_payment=u_Payment, u_userId=FieldData, u_cardNumber=FieldData, u_billingAddressCity=FieldData, u_userBillingState=FieldData, u_orderId=FieldData, u_billingAddressgStreet1=FieldData, u_type=FieldData, u_billingAddressgStreet2=FieldData, u_shoppingCart=u_ShoppingCart, u_numberOfPages=FieldData, u_userShippingCity=FieldData, u_bookToCartItemList=u_BookToCartItem, u_title=FieldData, u_billingAddressName=FieldData, u_userShippingState=FieldData, u_cartItemId=FieldData, u_listPrice=FieldData, u_shippingAddressState=FieldData}
Time elapsed: 7.795 seconds
